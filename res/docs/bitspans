| M:Z0.XTend.ToNatSpan``1(Z0.BitSpan@,``0)          | 
            <summary>
            Loads a natspan from a bitspan (nonallocating)
            </summary>
            <param name="src">The source bits</param>
            <param name="n">The length representative</param>
            <typeparam name="N">The length type</typeparam>
        
| M:Z0.XTend.Clear(Z0.BitSpan@)                     | 
            <summary>
            Obliterates all bitspan content
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.XTend.Clear(Z0.BitSpan@,System.Int32,System.Int32)| 
            <summary>
            Clears a contiguous sequence of bits between two indices
            </summary>
            <param name="src">The source bits</param>
            <param name="i0">The index of the first bit to clear</param>
            <param name="i1">The index of the last bit to clear</param>
        
| M:Z0.XTend.Replicate(Z0.BitSpan@,System.Int32)    | 
            <summary>
            Replicates the source content into a new bitspan
            </summary>
            <param name="src">The source bits</param>
            <param name="count">The number of source copies to produce</param>
        
| M:Z0.XTend.PopCount(Z0.BitSpan@)                  | 
            <summary>
            Computes the number of enabled bits covered by source
            </summary>
            <param name="src">The bit source</param>
        
| M:Z0.XTend.Extract``1(Z0.BitSpan@,``0)            | 
            <summary>
            Extracts and packs bitsize[T] source bits; will fail if data are insufficent
            </summary>
            <param name="src">The bit source</param>
            <param name="t">A target scalar type representative</param>
            <typeparam name="T">The target scalar type</typeparam>
        
| M:Z0.XTend.Convert``1(Z0.BitSpan@)                | 
            <summary>
            Extracts a T-valued scalar (or portion thereof) from the source
            </summary>
            <param name="src">The bit source</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.XTend.BitSlice``1(Z0.BitSpan@,System.Int32)  | 
            <summary>
            Extracts a T-valued scalar (or portion thereof) from the source segment [offset,..,offset - (bitsize[T] - 1)]
            </summary>
            <param name="src">The bit source</param>
            <param name="offset">The index of the first bit</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.XTend.Trim(Z0.BitSpan@)                      | 
            <summary>
            Eliminates leading zeroes, if any, from the source
            </summary>
            <param name="src">The bit source</param>
        
| M:Z0.XTend.Truncate(Z0.BitSpan@,System.Int32)     | 
            <summary>
            Clamps the source bitstring to one of a specified maximum length, discarding any excess
            </summary>
            <param name="src">The source bitstring</param>
            <param name="maxbits">The maximum length of the target bitstring</param>
        
| M:Z0.XTend.Concat(Z0.BitSpan@,Z0.BitSpan@)        | 
            <summary>
            Concatenates two bitspans
            </summary>
            <param name="head">The leading bits</param>
            <param name="tail">The trailing bits</param>
        
| M:Z0.XTend.ToBitSpan(System.Span{Z0.bit})         | 
            <summary>
            Wraps a bitspan over a span of extant bits
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.XTend.ToBitSpan(Z0.bit[])                    | 
            <summary>
            Loads a bitspan from an array
            </summary>
            <param name="src">The source array</param>
        
| M:Z0.XTend.ToBitSpan(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.ReadOnlySpan{System.UInt16})| 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.Span{System.Byte})    | 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.Span{System.UInt16})  | 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.Span{System.UInt32})  | 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| M:Z0.XTend.ToBitSpan(System.Span{System.UInt64})  | 
            <summary>
            Loads a bitspan from a packed span of scalars
            </summary>
            <param name="src">The packed source</param>
        
| T:Z0.BitSpan                                      | 
            <summary>
            Defines an anti-succinct data structure for bit representation
            </summary>
        
| P:Z0.BitSpan.Item(System.Int32)                   | 
            <summary>
            Queries/Manipulates an index-identified bit
            </summary>
        
| P:Z0.BitSpan.Item(System.Int32,System.Int32,System.Byte)| 
            <summary>
            Packs a segment selection of at most 8 bits
            </summary>
        
| P:Z0.BitSpan.Item(System.Int32,System.Int32,System.UInt16)| 
            <summary>
            Packs a segment selection of at most 16 bits
            </summary>
        
| P:Z0.BitSpan.Item(System.Int32,System.Int32,System.UInt32)| 
            <summary>
            Packs a segment selection of at most 32 bits
            </summary>
        
| P:Z0.BitSpan.Item(System.Int32,System.Int32,System.UInt64)| 
            <summary>
            Packs a segment selection of at most 64 bits
            </summary>
        
| M:Z0.BitSpans.alloc(System.Int32)                 | 
            <summary>
            Allocates a bitspan with a specified length
            </summary>
            <param name="len">The length of the bitstring</param>
        
| M:Z0.BitSpans.pop(Z0.BitSpan@)                    | 
            <summary>
            Computes the number of enabled bits covered by source
            </summary>
            <param name="src">The bit source</param>
        
| M:Z0.BitSpans.concat(Z0.BitSpan@,Z0.BitSpan@)     | 
            <summary>
            Forms the bitspan z := [head,tail] via concatentation
            </summary>
            <param name="head">The leading bits</param>
            <param name="tail">The trailing bits</param>
        
| M:Z0.BitSpans.load(System.Span{Z0.bit})           | 
            <summary>
            Wraps a bitspan over a span of extant bits
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.BitSpans.load(Z0.bit[])                      | 
            <summary>
            Loads a bitspan from an array
            </summary>
            <param name="src">The source array</param>
        
| M:Z0.BitSpans.load(Z0.bit@,System.Int32)          | 
            <summary>
            Loads a bitspan from a reference
            </summary>
            <param name="bits">The bit source</param>
            <param name="count">The number of bits to load</param>
        
| M:Z0.BitSpans.load(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Creates a bitspan from an arbitrary number of packed bytes
            </summary>
            <param name="packed">The packed data source</param>
        
| M:Z0.BitSpans.load(System.Span{System.Byte})      | 
            <summary>
            Creates a bitspan from an arbitrary number of packed bytes
            </summary>
            <param name="packed">The packed data source</param>
        
| M:Z0.BitSpans.parse(System.String)                | 
            <summary>
            Creates a bitspan from text encoding of a binary number
            </summary>
            <param name="src">The bit source</param>
        
| M:Z0.BitSpans.parts(Z0.bit[])                     | 
            <summary>
            Creates a bitspan from a parameter array
            </summary>
            <param name="src">The sorce bits</param>
        
| M:Z0.BitSpans.replicate(Z0.BitSpan@,Z0.BitSpan@)  | 
            <summary>
            Replicates the content of a source bitspan into a target bitspan, repeatedly 
            or partially depending on the available space in the target
            </summary>
            <param name="src">The source bits</param>
            <param name="count">The number of source copies to produce</param>
        
| M:Z0.BitSpans.replicate(Z0.BitSpan@,System.Int32) | 
            <summary>
            Replicates the content of a source bitspan into a new bitspan
            </summary>
            <param name="src">The source bits</param>
            <param name="count">The number of source copies to produce</param>
        
| M:Z0.BitSpans.truncate(Z0.BitSpan@,System.Int32)  | 
            <summary>
            Clamps the source bitstring to one of a specified maximum length, discarding any excess
            </summary>
            <param name="src">The source bitstring</param>
            <param name="maxbits">The maximum length of the target bitstring</param>
        
| M:Z0.BitSpans.bitslice``1(Z0.BitSpan@,System.Int32)| 
            <summary>
            Materializes a bitspan segment as a scalar value
            </summary>
            <param name="src">The source bits</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.BitSpans.bitslice``1(Z0.BitSpan@)            | 
            <summary>
            Materializes a bitspan segment as a scalar value
            </summary>
            <param name="src">The source bits</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.BitSpans.bitslice``1(Z0.BitSpan@,System.Int32,System.Int32)| 
            <summary>
            Materializes an integral value from a bitspan segment
            </summary>
            <param name="src">The source bits</param>
            <param name="offset">The source index to begin extraction</param>
            <param name="count">The number of source bits that contribute to the extract</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.BitSpans.clear(Z0.BitSpan@)                  | 
            <summary>
            Obliterates all bitspan content
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.BitSpans.clear(Z0.BitSpan@,System.Int32)     | 
            <summary>
            Obliterates bitspan content higher than a specified maximum
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.BitSpans.clear(Z0.BitSpan@,System.Int32,System.Int32)| 
            <summary>
            Clears a contiguous sequence of bits between two indices
            </summary>
            <param name="src">The source bits</param>
            <param name="i0">The index of the first bit to clear</param>
            <param name="i1">The index of the last bit to clear</param>
        
| M:Z0.BitSpans.extract``1(Z0.BitSpan@,System.Int32)| 
            <summary>
            Extracts a scalar value from a bitspan
            </summary>
            <param name="src">The bitspan source</param>
            <param name="offset">The source index to begin extraction</param>
            <param name="count">The number of source bits that contribute to the extract</param>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.BitSpans.fill``1(``0,Z0.BitSpan@)            | 
            <summary>
            Fills a bitspan from a primal source
            </summary>
            <param name="src">The packed source bits</param>
        
| M:Z0.BitSpans.from``1(``0)                        | 
            <summary>
            Creates a bitspan from a primal source
            </summary>
            <param name="src">The packed source bits</param>
        
| M:Z0.BitSpans.from``1(``0,System.Int32)           | 
            <summary>
            Creates a bitspan from a primal source, or portion thereof
            </summary>
            <param name="src">The packed source bits</param>
            <param name="maxbits">The maximum number of bits to draw from the source</param>
        
| M:Z0.BitSpans.load``1(System.Span{``0})           | 
            <summary>
            Creates a bitspan from an arbitrary number of primal values
            </summary>
            <param name="packed">The packed data source</param>
        
| M:Z0.BitSpans.load``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Creates a bitspan from an arbitrary number of primal values
            </summary>
            <param name="packed">The packed data source</param>
        
| M:Z0.BitSpans.slice``1(Z0.BitSpan@,System.Int32,System.Int32)| 
            <summary>
            Materializes an integral value from a bitspan segment
            </summary>
            <param name="src">The source bitspan</param>
            <param name="offset">The bit position at which the slice begins</param>
            <param name="count">The number of bits, at most bitsize[T], to pull</param>
            <typeparam name="T">The integral numeric type</typeparam>
        
| M:Z0.SpannedBits.slice(Z0.BitSpan@,Z0.W8,System.Int32,System.Int32)| 
            <summary>
            Materializes an 8-bit unsigned integer from a bitspan segment
            </summary>
            <param name="src">The source bitspan</param>
            <param name="w">The width selector</param>
            <param name="offset">The bit position at which the slice begins</param>
            <param name="count">The number of bits, at most 8, to pull</param>
        
| M:Z0.SpannedBits.slice(Z0.BitSpan@,Z0.W16,System.Int32,System.Int32)| 
            <summary>
            Materializes a 16-bit unsigned integer from a bitspan segment
            </summary>
            <param name="src">The source bitspan</param>
            <param name="w">The width selector</param>
            <param name="offset">The bit position at which the slice begins</param>
            <param name="count">The number of bits, at most 16, to pull</param>
        
| M:Z0.SpannedBits.slice(Z0.BitSpan@,Z0.W32,System.Int32,System.Int32)| 
            <summary>
            Materializes a 32-bit unsigned integer from a bitspan segment
            </summary>
            <param name="src">The source bitspan</param>
            <param name="w">The width selector</param>
            <param name="offset">The bit position at which the slice begins</param>
            <param name="count">The number of bits, at most 32, to pull</param>
        
| M:Z0.SpannedBits.slice(Z0.BitSpan@,Z0.W64,System.Int32,System.Int32)| 
            <summary>
            Materializes a 64-bit unsigned integer from a bitspan segment
            </summary>
            <param name="src">The source bitspan</param>
            <param name="w">The width selector</param>
            <param name="offset">The bit position at which the slice begins</param>
            <param name="count">The number of bits, at most 64, to pull</param>
        
| M:Z0.ICheckBitSpans.eq(Z0.BitSpan@,Z0.BitSpan@,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the equality of two bitspans
            </summary>
            <param name="a">The left bitspan</param>
            <param name="b">The right bitspan</param>
        
| M:Z0.BitSpanRng.BitSpan(Z0.IPolyrand,System.Int32)| 
            <summary>
            Produces a random bitspan of specified length
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.BitSpanRng.BitSpan(Z0.IPolyrand,System.Int32,System.Int32)| 
            <summary>
            Produces a bitspan with randomized length
            </summary>
            <param name="random">The random source</param>
            <param name="minlen">The mininimum bitspan length</param>
            <param name="maxlen">The maximum bitspan length</param>
        
| M:Z0.BitSpanRng.BitSpan(Z0.IPolyrand,Z0.BitSpan@) | 
            <summary>
            Fills a caller-supplied bitspan with random bits
            </summary>
            <param name="random">The random source</param>
        
