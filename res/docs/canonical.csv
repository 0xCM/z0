Type        | Z0.IAdditiveOps`1                                                     | Characterizes a type for which commutative additivity can be defined
Method      | Z0.IAdditiveOps`1.Add(`0,`0)                                          | Alias for commutative semigroup composition operator
Type        | Z0.IAdditive`1                                                        | Characterizes a structure that supports semigroup additivity
Method      | Z0.ISuccessive`2.Next                                                 | Given an A-value, computes the next B-value
Method      | Z0.IAntecedant`2.Prior                                                | Given an A-value, computes the prior B-value
Type        | Z0.IAdjacency`2                                                       | Characterizes a bidirectional association between types for which            the exists notions successors and antecedants
Type        | Z0.IBitwiseOps`1                                                      | Characterizes bitwise operations over an operand
Method      | Z0.IBitwiseOps`1.And(`0,`0)                                           | Computes the bitwise AND
Method      | Z0.IBitwiseOps`1.Or(`0,`0)                                            | Computes the bitwise OR
Method      | Z0.IBitwiseOps`1.XOr(`0,`0)                                           | Computes the bitwise XOR
Method      | Z0.IBitwiseOps`1.Not(`0)                                              | Computes the bitwise complement
Method      | Z0.IShiftOps`1.RotL(`0,System.Int32)                                  | Rotates bits rightwards, from MSB -&gt; LSB
Method      | Z0.IShiftOps`1.RotR(`0,System.Int32)                                  | Rotates bits leftwards, from LSB -&gt; MSB
Method      | Z0.IShiftable`1.RotL(System.Int32)                                    | Rotates bits rightwards, from MSB -&gt; LSB
Method      | Z0.IShiftable`1.RotR(System.Int32)                                    | Rotates bits leftwards, from LSB -&gt; MSB
Type        | Z0.ICommutativeOps`1                                                  | Characterizes commutative operations
Type        | Z0.ICommutative`1                                                     | Characterizes structural commutativity
Type        | Z0.IComplex`3                                                         | Characterizes a structure that represents a complex number
Property    | Z0.IComplex`3.Re                                                      | The real part
Property    | Z0.IComplex`3.Im                                                      | The imaginary part
Type        | Z0.ICurrencyOps`1                                                     | Characterizes a bounded fractional operation provider
Type        | Z0.ICurrency`1                                                        | Characterizes structural reifications of Currency
Method      | Z0.ILeftDistributiveOps`1.Distribute(`0,System.ValueTuple{`0,`0})     | Characterizes a type that defines an operator that left-distributes            multiplication over addition
Type        | Z0.IRightDistributiveOps`1                                            | Characterizes a type that defines an operator that right-distributes            multiplication over addition
Type        | Z0.IDistributiveOps`1                                                 | Characterizes a type that defines both left and right distribution            over addition
Method      | Z0.ILeftDistributive`1.LeftDistribute(System.ValueTuple{`0,`0})       | Characterizes a type that defines an operator that left-distributes            multiplication over addition
Method      | Z0.IRightDistributive`1.RightDistribute(System.ValueTuple{`0,`0})     | Characterizes a type that defines an operator that left-distributes            multiplication over addition
Type        | Z0.IIntegralDomainOps`1                                               | Characterizes an integral domain, which is a nonzero commutative ring            such that for every pair of nonzero elements a and b, the product            ab is nonzero, i.e., ab = 0 iff a = 0 or b = 0
Type        | Z0.IGcdDomainOps`1                                                    | Characterizes a GCD domain
Type        | Z0.IUniqueFactorDomainOps`1                                           | Characterizes a **unique** factorization domain
Type        | Z0.IPrincipalIdealDomainOps`1                                         | Characterizes a principal ideal domain
Type        | Z0.IEuclideanDomainOps`1                                              | Characterizes a Euclidean domain
Type        | Z0.IDiscreteEqivalenceClass`2                                         | Characterizes a constructive equivalence class, i.e. an equivalence class             with enumerable content
Type        | Z0.IFiniteEquivalenceClass`2                                          | Characterizes an equivalence class, i.e. a segment of a partition effected via             an equivalence relation
Type        | Z0.IDiscreteGroup`2                                                   | Characterizes a discrete group structure
Type        | Z0.IFloatingOps`1                                                     | Characterizes an operation provider for floating point values
Property    | Z0.IFloatingOps`1.Epsilon                                             | The minimal resolution of the data type
Method      | Z0.IFloatingOps`1.Sqrt(`0)                                            | Calculates the square root of the input
Type        | Z0.IFiniteFloatOps`1                                                  | Characterizes an operation provider for bounded floating point values
Type        | Z0.IFiniteFloatOps`2                                                  | Characterizes operational reifications of RealFiniteUInt
Type        | Z0.IFloating`2                                                        | Characterizes a structure for a floating point number
Type        | Z0.IGroupOps`1                                                        | Characterizes group operations over a type
Type        | Z0.IGroupAOps`1                                                       | Characterizes additive/abelian group operations
Method      | Z0.IGroupA`1.Invert                                                   | Unary structural negation
Type        | Z0.IGroupLike`2                                                       | Characterizes a group structure
Type        | Z0.IGroupM`2                                                          | Characterizes a multiplicative group structure
Type        | Z0.IGroupA`2                                                          | Characterizes an additive group structure
Type        | Z0.IConcatenableOps`1                                                 | Characterizes an operator that merges two elements into one with preservation            of constituent order if such an ordering is defined. In the situation where            no ordering exist, the concatenation operator is effectively reduced to            an addition operator
Type        | Z0.ISetAspect                                                         | Defines attributes common to set representations
Property    | Z0.ISetAspect.IsEmpty                                                 | Specifies whether the set is void of elements
Property    | Z0.ISetAspect.IsFinite                                                | Specifies whether the set is finite
Property    | Z0.ISetAspect.IsDiscrete                                              | Specifies whether the set is discrete
Type        | Z0.IInfiniteSet`1                                                     | Characterizes a type that represents an infinite number of values
Type        | Z0.IInfiniteSet`2                                                     | Characterizes a type that represents an infinite number of values
Type        | Z0.IInfiniteOps`1                                                     | Characterizes operations over operands for which a given reification may be infinite
Type        | Z0.IIntegerOps`1                                                      | Characterizes operations over an integer type
Type        | Z0.IInfiniteIntOps`1                                                  | Characterizes operations over unbound integers
Type        | Z0.ISignableOps`1                                                     | Characterizes a sign adjudication operation
Method      | Z0.ISignableOps`1.Sign(`0)                                            | Determines the sign of the supplied value
Type        | Z0.ISignedIntOps`1                                                    | Characterizes operations over a signed interal type
Type        | Z0.IFiniteSignedIntOps`1                                              | Characterizes operations over a signed, finite interal type
Type        | Z0.IInfiniteSignedIntOps`1                                            | Characterizes operations over an unbound signed integral type
Type        | Z0.IInteger`2                                                         | Characterizes a reification structure over an integer type
Type        | Z0.IInvertiveOps`1                                                    | Characterizes operational inversion
Type        | Z0.InvertiveMOps`1                                                    | Characterizes operational multiplicative inversion
Method      | Z0.InvertiveMOps`1.InvertM(`0)                                        | Multiplicative inversion
Type        | Z0.InvertiveA`1                                                       | Characterizes operational additive inversion
Method      | Z0.InvertiveA`1.InvertA(`0)                                           | Additive inversion
Type        | Z0.IInvertive`1                                                       | Characterizes structural inversion
Type        | Z0.IInvertiveM`1                                                      | Characterizes structural multiplicative inversion
Method      | Z0.IInvertiveM`1.InvertM                                              | Effects multiplicative inversion
Type        | Z0.IInvertiveA`1                                                      | Characterizes structural additive inversion
Method      | Z0.IInvertiveA`1.InvertA                                              | Effects additive inversion
Type        | Z0.ILogarithmicOps`1                                                  | Characterizes a type that supports primitive logarithmic operations
Method      | Z0.ILogarithmicOps`1.Ln(`0)                                           | Computes the natural logarithm
Method      | Z0.ILogarithmicOps`1.Log(`0)                                          | Computes the base-10 logarithm
Method      | Z0.ILogarithmicOps`1.LogB(`0,`0)                                      | Computes a logarithm at a specified base
Method      | Z0.ILogarithmic`1.Ln                                                  | Computes the natural logarithm
Method      | Z0.ILogarithmic`1.Log                                                 | Computes the base-10 logarithm
Method      | Z0.ILogarithmic`1.LogB(`0)                                            | Computes a logarithm at a specified base
Method      | Z0.ILeftModule`2.LeftScale(`0)                                        | Effects scalar multiplication from the left
Method      | Z0.IRightModule`2.RightScale(`1)                                      | Effects scalar multiplication from the right
Type        | Z0.IGroupAction`2                                                     | Characterizes a group action on a set
Method      | Z0.IGroupAction`2.Act(`0,`1)                                          | Applies a G-element to a T-element
Type        | Z0.ILeftModuleOps`2                                                   | Characterizes a left module over a commtative unital ring
Method      | Z0.ILeftModuleOps`2.LeftScale(`0,`1)                                  | Effects left scalar multiplication
Type        | Z0.IRightModuleOps`2                                                  | Characterizes a right module over a commtative unital ring
Method      | Z0.IRightModuleOps`2.RightScale(`0,`1)                                | Effects right scalar multiplication
Type        | Z0.INullaryOps`1                                                      | Characterizes operations over a nullary type
Type        | Z0.IMonoidOps`1                                                       | Characterizes monoidal operations
Type        | Z0.IMonoidMOps`1                                                      | Characterizes multiplicative monoidal operations
Type        | Z0.IMonoidAOps`1                                                      | Characterizes additive monoidal operations
Type        | Z0.IMonoidM`2                                                         | Characterizes multiplicative monoidal structure
Type        | Z0.IMonoidA`2                                                         | Characterizes additive monoidal structure
Method      | Z0.Monoidial.foldA``1(System.Collections.Generic.IEnumerable{``0})    | Reduces a stream to a single value via an additive monoid
Method      | Z0.Monoidial.foldM``1(System.Collections.Generic.IEnumerable{``0})    | Reduces a stream to a single value via a multiplicative monoid
Method      | Z0.Monoidial.fold``1(System.Collections.Generic.IEnumerable{``0},Z0.IMonoidalOps{``0})| Reduces a stream to a single value via a specified monoid
Type        | Z0.IMultiplicativeOps`1                                               | Characterizes operational multiplication
Type        | Z0.IFiniteNaturalOps`1                                                | Characterizes an operation provider for bounded natural types
Type        | Z0.IFiniteNaturalOps`2                                                | Characterizes operational reifications of RealFiniteUInt
Type        | Z0.INatural`1                                                         | Characterizes a reification structure over natural types S where            s:S =&gt; s ∈ {1, … n} where n is some natural number subject to the            bounds implied by the underlying data structure
Method      | Z0.INegatableOps`1.Negate(`0)                                         | Unary negation of input
Type        | Z0.INonNegativeOps`1                                                  | Characterizes operations over nonnegative operands
Type        | Z0.INonNegative`1                                                     | Characterizes a structure whose values are nonnegative
Type        | Z0.INumberOps`1                                                       | Defines the minimal aspects for a value to be considered a "real number"            The dual contract, that subsumes every possible aspect of number, is             defined via the Real trait. Note that every Number can be parameterized             by any underlying primitive numeric type
Type        | Z0.INumber`1                                                          | Characterizes a structral number
Type        | Z0.ICNumber`1                                                         | Characterizes a structural number in the C adaptation context
Property    | Z0.ICNumber`1.BitSize                                                 | Specifies the (fixed) number of bits required to represent the numeric value
Type        | Z0.ICNumber`2                                                         | Characterizes a structural number reification in the C adaptation context
Method      | Z0.ICNumber`2.Wrap(System.Collections.Generic.IEnumerable{`1})        | Elevates a primitive to a structure
Method      | Z0.ICNumber`2.Unwrap(System.Collections.Generic.IEnumerable{`0})      | Unwraps a lifted primitivie
Type        | Z0.IOrderedNumberOps`1                                                | Characterizes numeric operations in the presence of order
Type        | Z0.IOrderedNumber`2                                                   | Characterizes a structural number with order
Type        | Z0.IPartialOrderOps`1                                                 | Characterizes a partial order, i.e. a reflexive, transitive and             antisymmetric binary operator
Type        | Z0.IPosetOps`1                                                        | Characterizes a set equipped with a partial order
Method      | Z0.IPosetOps`1.Comparable(`0,`0)                                      | Determines whether order may be adjudicated between two particluar elements
Type        | Z0.IPoweredOps`2                                                      | Characterizes an exponentiation operation
Type        | Z0.IPreorderOps`1                                                     | Characterizes a preorder, i.e. a reflexive and transitive            binary relation over its domain
Type        | Z0.IProsetOps`1                                                       | Characterizes a set equipped with a preorder
Type        | Z0.ISetoid`2                                                          | Characterizes a discrete partition over a discrete set and, consequently,             is a constructive presentation of an equivalence relation. In this context, a parition            is a collection of mutually disjoint subsets of a given set whose union            is recovers the original set
Type        | Z0.IFractionalOps`1                                                   | Characterizes fractional operations
Type        | Z0.IFractional`2                                                      | Characterizes a fractional structure
Method      | Z0.IRational`1.Over                                                   | The dividend
Method      | Z0.IRational`1.Under                                                  | The divisor
Type        | Z0.IRational`3                                                        | Charactrizes a rational number
Type        | Z0.IBoundRealOps`1                                                    | Characterizes operations over (ordered) values that             exist between upper and lower bounds
Type        | Z0.IRealNumber`1                                                      | Characterizes a structured real
Type        | Z0.IRealNumber`2                                                      | Characterizes a reification structure over real numbers
Method      | Z0.IReciprocativeOps`1.Recip(`0)                                      | Calculates the multiplicative inverse of a given element
Type        | Z0.IReciprocative`1                                                   | Characterizes a multiplicative and unitial structure S such that            s:S =&gt; s * recip(s) = 1
Method      | Z0.IReciprocative`1.Recip                                             | Calculates the structure's multiplicative inverse
Type        | Z0.IBinaryRelationOps`1                                               | Characterizes a relation over a set
Type        | Z0.IReflexiveOps`1                                                    | Spcifies that a ~ a for every a:T
Type        | Z0.ISymmetricOps`1                                                    | Spcifies that a ~ b iff b ~ a for every a,b:T
Type        | Z0.IEquivalenceOps`1                                                  | Characterizes a reflexive, symmetric and transitive binary relation over a set             \that, consequently, effects a partition over the set
Type        | Z0.IResignableOps`1                                                   | Characterizes a sign-reversal operation
Method      | Z0.IResignableOps`1.Resign(`0,Z0.SignKind)                            | Aligns the value with a specified sign
Type        | Z0.IReversibleOps`1                                                   | Characterizes operational reversiblity
Type        | Z0.IRingOps`1                                                         | Characterizes a (unital) ring
Type        | Z0.ICommutativeRingOps`1                                              | Characterizes a commutative, unital ring
Method      | Z0.ISemigroupOps`1.Equals(`0,`0)                                      | Adjudicates equality between semigroup members
Method      | Z0.IImplicitSemigroup`2.Comparer(System.Func{`1,System.Int32})        | Gets an equality comparer that can determine whether to semigroup elements are equal
Type        | Z0.ISemiringOps`1                                                     | Characterizes semiring operations
Type        | Z0.ISemiring`1                                                        | Characterizes a semiring structure
Type        | Z0.IStepwiseOps`1                                                     | Characterizes a type that realizes both incrementing and decrementing operations
Type        | Z0.ISubtractiveOps`1                                                  | Characterizes operational negation and subtraction
Method      | Z0.ISubtractiveOps`1.Sub(`0,`0)                                       | Combines the first operand with the negation of the second
Method      | Z0.ISubtractive`1.Sub(`0)                                             | Structural subtraction
Type        | Z0.ITrigonmetricOps`1                                                 | Characterizes trigonometric operations over a type
Type        | Z0.Unit                                                               | Defines a slot in the type system for an "empty" type            In this way, void functions can be considered            to yield a value and participate in functional/monadic expressions
Method      | Z0.Unit.op_Explicit(System.Action)~Z0.Unit                            | Executes the action and returns the unit value
Type        | Z0.IUnitalOps`1                                                       | Characterizes operations over a unital type
Property    | Z0.IUnitalOps`1.One                                                   | The unital value
