| M:Z0.Blocks.aligned``1(Z0.W8,System.Int32)        | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 8-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W16,System.Int32)       | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 16-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W32,System.Int32)       | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 32-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W64,System.Int32)       | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 64-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W128,System.Int32)      | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 128-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W256,System.Int32)      | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 256-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block element type</typeparam>
        
| M:Z0.Blocks.aligned``1(Z0.W512,System.Int32)      | 
            <summary>
            Determines whether a specified number of elements can be evenly covered by 512-bit blocks
            </summary>
            <param name="count">The element count</param>
            <typeparam name="T">The block element type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W8)                       | 
            <summary>
            Allocates a single 8-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W16)                      | 
            <summary>
            Allocates a single 16-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W32)                      | 
            <summary>
            Allocates a single 32-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W64)                      | 
            <summary>
            Allocates a single 64-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W128)                     | 
            <summary>
            Allocates a single 128-bit block over cells of parametric kind
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W256)                     | 
            <summary>
            Allocates a single 256-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W512)                     | 
            <summary>
            Allocates a single 512-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W8,System.Int32,``0)      | 
            <summary>
            Allocates a specified number of 8-bit blocks, filled with an optional pattern
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W16,System.Int32,``0)     | 
            <summary>
            Allocates a specified number of 16-bit blocks, filled with an optional pattern
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W32,System.Int32,``0)     | 
            <summary>
            Allocates a specified number of 32-bit blocks, filled with an optional pattern
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W64,System.Int32,``0)     | 
            <summary>
            Allocates a specified number of 64-bit blocks, filled with an optional pattern
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W128,System.Int32,``0)    | 
            <summary>
            Allocates a specified number of 128-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W256,System.Int32,``0)    | 
            <summary>
            Allocates a specified number of 256-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="count">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.W512,System.Int32,``0)    | 
            <summary>
            Allocates a specified number of 512-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="blocks">The block allocation count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.alloc``1(Z0.BlockedKind{Z0.W256,``0},System.Int32)| 
            <summary>
            Allocates a single 256-bit block over cells of parametric kind
            </summary>
            <param name="w">The block width</param>
            <param name="nk">The numeric kind</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.Blocks.bitcount(System.Int32,System.Int32)   | 
            <summary>
            Computes the number of bits covered by a specified cell count and width
            </summary>
            <param name="cellcount">The number of allocated cells</param>
            <param name="cellwidth">The bit-width of a cell</param>
        
| M:Z0.Blocks.bitcount``1(System.Int32)             | 
            <summary>
            Computes  the number of bits covered by a specified cell count of parametric type
            </summary>
            <param name="cellcount">The number of allocated cells</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.bitcover(System.Int32,System.Int32)   | 
            <summary>
            Computes the number of blocks required to cover a specified number of bits
            </summary>
            <param name="srcbits">The source bit count</param>
            <param name="blockwidth">The block width in bits</param>
        
| M:Z0.Blocks.bitcover``1(System.Int32)             | 
            <summary>
            Computes the number of blocks required to cover a specified number of bits
            </summary>
            <param name="dstblockbits">The target block size in bits</param>
        
| M:Z0.Blocks.blockcount``1(Z0.W8,System.Int32)     | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W16,System.Int32)    | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W32,System.Int32)    | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W64,System.Int32)    | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W128,System.Int32)   | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W256,System.Int32)   | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W512,System.Int32)   | 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W8,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W16,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W32,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W64,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W128,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W256,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``1(Z0.W512,System.Int32,System.Int32@)| 
            <summary>
            Computes the whole number of blocks that cover a specified count of T-cells
            and reveals the number of cells that remain uncovered
            </summary>
            <param name="w">The block width</param>
            <param name="cells">The cell count</param>
            <param name="uncovered">The number of cells that remain uncovered</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.blockcount``3(Z0.N256)                | 
            <summary>
            Computes the minimum number of 256-bit blocks that can hold a table of data
            </summary>
            <param name="srclen">The length of the source data</param>
            <typeparam name="M">The row type </typeparam>
            <typeparam name="N">The column type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.Blocks.blockcount``3(Z0.W512)                | 
            <summary>
            Computes the minimum number of 512-bit blocks that can hold a table of data
            </summary>
            <param name="srclen">The length of the source data</param>
            <typeparam name="M">The row type </typeparam>
            <typeparam name="N">The column type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block8{``0}@)     | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block16{``0}@)    | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block32{``0}@)    | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block64{``0}@)    | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block128{``0}@)   | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block256{``0}@)   | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.broadcast``1(``0,Z0.Block512{``0}@)   | 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.Blocks.bytecount(System.Int32,System.Int32)  | 
            <summary>
            Computes the number of bytes covered by a specified cell count and width
            </summary>
            <param name="cellcount">The number of allocated cells</param>
            <param name="cellwidth">The bit-width of a cell</param>
        
| M:Z0.Blocks.bytecount``1(System.Int32)            | 
            <summary>
            Computes  the number of bytes covered by a specified cell count of parametric type
            </summary>
            <param name="cellcount">The number of allocated cells</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W8,System.Int32)      | 
            <summary>
            Allocates a sequence of 8-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W16,System.Int32)     | 
            <summary>
            Allocates a sequence of 16-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W32,System.Int32)     | 
            <summary>
            Allocates a sequence of 32-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W64,System.Int32)     | 
            <summary>
            Allocates a sequence of 64-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W128,System.Int32)    | 
            <summary>
            Allocates a sequence of 128-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W256,System.Int32)    | 
            <summary>
            Allocates a sequence of 256-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellalloc``1(Z0.W512,System.Int32)    | 
            <summary>
            Allocates a sequence of 512-bit blocks sufficient to cover a specified number of cells
            </summary>
            <param name="n">The block width selector</param>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W8,System.Int32)     | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W16,System.Int32)    | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W32,System.Int32)    | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W64,System.Int32)    | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W128,System.Int32)   | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W256,System.Int32)   | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellblocks``1(Z0.W512,System.Int32)   | 
            <summary>
            Calculates the number of cells that comprise a specified number of blocks
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cellcover``1(Z0.W8,System.Int32)      | 
            <summary>
            Computes the minimum number of 8-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W16,System.Int32)     | 
            <summary>
            Computes the minimum number of 32-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W32,System.Int32)     | 
            <summary>
            Computes the minimum number of 32-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W64,System.Int32)     | 
            <summary>
            Computes the minimum number of 64-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W128,System.Int32)    | 
            <summary>
            Computes the minimum number of 128-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W256,System.Int32)    | 
            <summary>
            Computes the minimum number of 256-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``1(Z0.W512,System.Int32)    | 
            <summary>
            Computes the minimum number of 512-bit blocks required to cover a specified number of cells
            </summary>
            <param name="cellcount">The number of cells to cover</param>
            <typeparam name="T">The element type</typeparam>
            <remarks>If a constant/literal value is supplied for the cellcount parameter, the jitter will 
            resolve the computation to a constant an no runtime computations will occur</remarks>
        
| M:Z0.Blocks.cellcover``4(``0,``1,``2,``3)         | 
            <summary>
            Computes the minimum numbet of W-blocks over T-cells required to cover a grid of natural dimensions MxN
            </summary>
            <param name="w">The block width represntative</param>
            <param name="m">The col count representative</param>
            <param name="n">The row count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="W">The block type</typeparam>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.cells(Z0.W8,System.Byte)              | 
            <summary>
            Creates a 8-bit blocked container from 1 8-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W16,System.UInt16)           | 
            <summary>
            Creates a 16-bit blocked container from 1 16-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W16,System.UInt64)           | 
            <summary>
            Creates a 16-bit blocked container from 1 64-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W32,System.UInt64)           | 
            <summary>
            Creates a 32-bit blocked container from 1 64-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W32,System.Byte,System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a 32-bit blocked container from 4 8-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W32,System.UInt16,System.UInt16)| 
            <summary>
            Creates a 32-bit blocked container from 2 16-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W32,System.UInt32)           | 
            <summary>
            Creates a 32-bit blocked container from 1 32-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W64,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a 64-bit blocked container from 8 8-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W64,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| 
            <summary>
            Creates a 64-bit blocked container from 4 16-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W64,System.UInt32,System.UInt32)| 
            <summary>
            Creates a 64-bit data block from 2 32-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W64,System.UInt64)           | 
            <summary>
            Creates a 64-bit data block from 1 64-bit cell
            </summary>
        
| M:Z0.Blocks.cells(Z0.W128,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a 128-bit blocked span from 8-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W128,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| 
            <summary>
            Creates a 128-bit blocked span from 16-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W128,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| 
            <summary>
            Creates a 128-bit blocked span from 4 32-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W128,System.UInt64,System.UInt64)| 
            <summary>
            Creates a 128-bit blocked container from 2 64-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W256,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a 256-bit blocked container from 32 8-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W256,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| 
            <summary>
            Creates a 256-bit blocked container from 16 16-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W256,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| 
            <summary>
            Creates a 256-bit blocked container from 8 32-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W256,System.UInt64,System.UInt64,System.UInt64,System.UInt64)| 
            <summary>
            Creates a 256-bit blocked container from 4 64-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W512,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)| 
            <summary>
            Creates a 512-bit blocked container from 8 64-bit cells
            </summary>
        
| M:Z0.Blocks.cells(Z0.W512,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| 
            <summary>
            Creates a 512-bit blocked container from 16 32-bit cells
            </summary>
        
| M:Z0.Blocks.cellsize``1                           | 
            <summary>
            Calculates the number of bytes required to represent a block constituent
            </summary>
            <typeparam name="T">The block constituent type</typeparam>
        
| M:Z0.Blocks.convert``2(Z0.Block128{``0})          | 
            <summary>
            If possible, applies the conversion S -&gt; T for each cell in the source block
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Blocks.convert``2(Z0.Block256{``0})          | 
            <summary>
            If possible, applies the conversion S -&gt; T for each cell in the source block
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Blocks.convert``2(Z0.Block512{``0})          | 
            <summary>
            If possible, applies the conversion S -&gt; T for each cell in the source block
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W8,System.Span{``0})       | 
            <summary>
            Loads a single 16-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W16,System.Span{``0})      | 
            <summary>
            Loads a single 16-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W32,System.Span{``0})      | 
            <summary>
            Loads a single 32-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W64,System.Span{``0})      | 
            <summary>
            Loads a single 64-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W128,System.Span{``0})     | 
            <summary>
            Loads a single 128-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W256,System.Span{``0})     | 
            <summary>
            Loads a single 256-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.init``1(Z0.W512,System.Span{``0})     | 
            <summary>
            Loads a single 512-bit block from the leading elements of a source span (unchecked)
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W8,``0)                  | 
            <summary>
            Computes the number of cells that comprise a single 8-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W16,``0)                 | 
            <summary>
            Computes the number of cells that comprise a single 16-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W32,``0)                 | 
            <summary>
            Computes the number of cells that comprise a single 32-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W64,``0)                 | 
            <summary>
            Computes the number of elements that comprise a single 64-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W128,``0)                | 
            <summary>
            Computes the number of elements that comprise a single 128-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W256,``0)                | 
            <summary>
            Computes the number of elements that comprise a 256-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``1(Z0.W512,``0)                | 
            <summary>
            Computes the number of elements that comprise a 512-bit block
            </summary>
            <param name="w">The block width selector</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``2(``0,``1)                    | 
            <summary>
            Computes the number of T-cells that comprise an N-block
            </summary>
            <param name="w">The block width representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.length``2(Z0.Block128{``0},Z0.Block128{``1},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Returns the length of equal-length blocks; otherwise raises an error
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
        
| M:Z0.Blocks.length``2(Z0.Block256{``0},Z0.Block256{``1},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Returns the length of equal-length blocks; otherwise raises an error
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
        
| M:Z0.Blocks.length``2(Z0.Block512{``0},Z0.Block512{``1},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Returns the length of equal-length blocks; otherwise raises an error
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
        
| M:Z0.Blocks.load``1(Z0.W8,System.Span{``0},System.Int32)| 
            <summary>
            Loads 8-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W16,System.Span{``0},System.Int32)| 
            <summary>
            Loads 16-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W32,System.Span{``0},System.Int32)| 
            <summary>
            Loads 32-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W64,System.Span{``0},System.Int32)| 
            <summary>
            Loads 64-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W128,System.Span{``0},System.Int32)| 
            <summary>
            Loads 128-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W256,System.Span{``0},System.Int32)| 
            <summary>
            Loads 256-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W512,System.Span{``0},System.Int32)| 
            <summary>
            Loads 256-bit segments from a span, raising an error if said source does not evenly partition
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W8,``0@,System.Int32)      | 
            <summary>
            Loads a specified count of 8-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W16,``0@)                  | 
            <summary>
            Loads a single 16-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W16,``0@,System.Int32)     | 
            <summary>
            Loads a specified count of 16-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W32,``0@)                  | 
            <summary>
            Loads a single 32-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W32,``0@,System.Int32)     | 
            <summary>
            Loads a specified count of 32-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W64,``0@)                  | 
            <summary>
            Loads a single 64-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W64,``0@,System.Int32)     | 
            <summary>
            Loads a specified count of 64-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W128,``0@)                 | 
            <summary>
            Loads a single 128-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W128,``0@,System.Int32)    | 
            <summary>
            Loads a specified count of 128-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W256,``0@)                 | 
            <summary>
            Loads a single 256-bit block from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W256,``0@,System.Int32)    | 
            <summary>
            Loads a specified count of 256-bit block sfrom a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W512,``0@)                 | 
            <summary>
            Loads a single 512-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.load``1(Z0.W512,``0@,System.Int32)    | 
            <summary>
            Loads a specified count of 512-bit blocks from a reference
            </summary>
            <param name="w">The target block width</param>
            <param name="src">The source reference</param>
            <typeparam name="T">The blocked data type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W8,``0[])                 | 
            <summary>
            Creates a sequence of 8-bit blocks from a parameter array and raises an error if the data source is not block-aligned
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W16,``0[])                | 
            <summary>
            Creates 16-bit blocked container from a parameter array and raises an error if the data source is not block-aligned
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W32,``0[])                | 
            <summary>
            Creates 32-bit blocked span from a parameter array and raises an error if the data source is not block-aligned
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W64,``0[])                | 
            <summary>
            Creates 64-bit blocked span from a parameter array and raises an error if the data source is not block-aligned
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W128,``0[])               | 
            <summary>
            Creates 128-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W256,``0[])               | 
            <summary>
            Creates 256-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.parts``1(Z0.W512,``0[])               | 
            <summary>
            Creates 512-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source data</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.pvoid``1(``0@)                        | 
            <summary>
            Converts a generic reference into a void pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The type of the referenced data</typeparam>
        
| M:Z0.Blocks.ptr``1(``0@)                          | 
            <summary>
            Presents generic reference as a generic pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block16{``0}@)              | 
            <summary>
            Returns a generic pointer to the leading cell of the first block of a 16-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block32{``0}@)              | 
            <summary>
            Returns a generic pointer to the leading cell of the first block of a 32-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block64{``0}@)              | 
            <summary>
            Returns a generic pointer to the leading cell of the first block of a 64-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block128{``0}@)             | 
            <summary>
            Returns a generic pointer to the leading cell of the first block of a 128-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block256{``0}@)             | 
            <summary>
            Returns a generic pointer to the leading cell of the first block of a 256-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block16{``0}@,System.Int32) | 
            <summary>
            Returns a generic pointer to the leading cell of an index-identified block of a 16-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block32{``0}@,System.Int32) | 
            <summary>
            Returns a generic pointer to the leading cell of an index-identified block of a 32-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block64{``0}@,System.Int32) | 
            <summary>
            Returns a generic pointer to the leading cell of an index-identified block of a 64-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Returns a generic pointer to the leading cell of an index-identified block of a 128-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.ptr``1(Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Returns a generic pointer to the leading cell of an index-identified block of a 256-bit blocked container
            </summary>
            <param name="src">The source block</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W8,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 8-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W16,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 16-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W32,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 32-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W64,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 64-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W128,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 64-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.rectangle``1(Z0.W256,System.Int32,System.Int32)| 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data in 256-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block8{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block16{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block32{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block64{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.reference``1(Z0.Block512{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.safeload``1(Z0.W8,System.Span{``0})   | 
            <summary>
            Loads a sequence of 16-bit blocks from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouraged</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W16,System.Span{``0})  | 
            <summary>
            Loads a sequence of 16-bit blocks from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouraged</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W32,System.Span{``0})  | 
            <summary>
            Loads 32-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouraged</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W64,System.Span{``0})  | 
            <summary>
            Loads 64-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouraged</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W128,System.Span{``0}) | 
            <summary>
            Loads 128-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouraged</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W256,System.Span{``0}) | 
            <summary>
            Loads 256-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouranged unless absolutely necessary</remarks>
        
| M:Z0.Blocks.safeload``1(Z0.W512,System.Span{``0}) | 
            <summary>
            Loads 512-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The data type</typeparam>
            <remarks>The use of this method is discouranged unless absolutely necessary</remarks>
        
| M:Z0.Blocks.single``1(Z0.W8)                      | 
            <summary>
            Allocates a single 8-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W16)                     | 
            <summary>
            Allocates a single 16-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W32)                     | 
            <summary>
            Allocates a single 32-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W64)                     | 
            <summary>
            Allocates a single 64-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W128)                    | 
            <summary>
            Allocates a single 128-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W256)                    | 
            <summary>
            Allocates a single 256-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.single``1(Z0.W512)                    | 
            <summary>
            Allocates a single 512-bit block
            </summary>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W8,System.Int32)         | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W16,System.Int32)        | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W32,System.Int32)        | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W64,System.Int32)        | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 64-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W128,System.Int32)       | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 128-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.square``1(Z0.W256,System.Int32)       | 
            <summary>
            Allocates the minimum number of blocks required to block-align tabular data of square dimension in 256-bit blocks
            </summary>
            <param name="w">The block width selector</param>
            <param name="n">The square tabular order</param>
            <typeparam name="T">The storage cell type</typeparam>
        
| M:Z0.Blocks.stats(System.Int32,System.Int32,System.Int32)| 
            <summary>
            Calculates memory block statistics for specified parameters
            </summary>
            <param name="bc">The block count</param>
            <param name="bw">The block width</param>
            <param name="cw">The cell width</param>
        
| M:Z0.Blocks.stats``1(System.Int32,System.Int32)   | 
            <summary>
            Calculates memory block statistics for specified function and type parameters
            </summary>
            <param name="bc">The block count</param>
            <param name="bw">The block width</param>
            <typeparam name="T">The type that determines cell width</typeparam>
        
| M:Z0.Blocks.stats``2(System.Int32,``0,``1)        | 
            <summary>
            Calculates memory block statistics for specified function and type parameters
            </summary>
            <param name="bc">The block count</param>
            <param name="bw">The block width representative</param>
            <param name="t">The block cell type representative</param>
            <typeparam name="N">The type that dermines block width</typeparam>
            <typeparam name="T">The type that determines cell width</typeparam>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block8{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block16{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block32{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block64{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block64{System.UInt16}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt64,Z0.Block64{System.UInt32}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt32,Z0.Block32{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store(System.UInt16,Z0.Block16{System.Byte}@)| 
            <summary>
            Stores the source value to the leading target cell blocks
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.Blocks.store``1(System.Byte@,Z0.Block256{``0}@,System.Int32,System.Int32)| 
            <summary>
            Writes a specified number of bytes to a block beginning at a byte-relative offset
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
            <param name="offset">The absolute number of bytes, measured from the head of the data structure, to skip</param>
            <param name="count">The number of to copy from the source into the target</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.Blocks.store``1(System.Byte@,Z0.Block512{``0}@,System.Int32,System.Int32)| 
            <summary>
            Writes a specified number of bytes to a block beginning at a byte-relative offset
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
            <param name="offset">The absolute number of bytes, measured from the head of the data structure, to skip</param>
            <param name="count">The number of to copy from the source into the target</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W8,System.Span{``0}) | 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W16,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W32,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W64,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W128,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W256,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Blocks.unsafeload``1(Z0.W512,System.Span{``0})| 
            <summary>
            Loads a span into a blocked container without checks
            </summary>
            <param name="w">The block width selector</param>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W8)   | 
            <summary>
            Constructs a 32-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W16)  | 
            <summary>
            Constructs a 32-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W32)  | 
            <summary>
            Constructs a 32-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W64)  | 
            <summary>
            Constructs a 16-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W128) | 
            <summary>
            Constructs a 128-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W256) | 
            <summary>
            Constructs a 128-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W512) | 
            <summary>
            Constructs a 128-bit blocked span from an unblocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block8{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block16{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block32{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block64{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.BlockRef``1(Z0.Block512{``0}@,System.Int32)| 
            <summary>
            Returns a reference to the leading cell of an index-identified block
            </summary>
            <param name="src">The blocked container</param>
            <param name="index">The block index, a number in the range 0..k-1 where k is the total number of covered blocks</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block8{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source block</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block16{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source block</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block32{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source block</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block64{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source block</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block128{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block256{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.FormatHex``1(Z0.Block512{``0},System.Char,System.Boolean)| 
            <summary>
            Formats blocked content as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XBlocks.HiBlock``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Extracts the upper half of an index-identified block
            </summary>
            <param name="src">The source block container</param>
            <param name="block">The 64-bit block-relative index</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.LoBlock``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Extracts the lower half of an index-identified block
            </summary>
            <param name="src">The source block container</param>
            <param name="block">The 64-bit block-relative index</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block32{``0}@,Z0.W16)  | 
            <summary>
            Converts 64-bit blocks to 32-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block64{``0}@,Z0.W32)  | 
            <summary>
            Converts 64-bit blocks to 32-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W16) | 
            <summary>
            Converts 128-bit blocks to 16-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W32) | 
            <summary>
            Converts 128-bit blocks to 32-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W64) | 
            <summary>
            Converts 128-bit blocks to 64-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W16) | 
            <summary>
            Converts 256-bit blocks to 16-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W32) | 
            <summary>
            Converts 256-bit blocks to 32-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W64) | 
            <summary>
            Converts 256-bit blocks to 64-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W128)| 
            <summary>
            Converts 256-bit blocks to 64-bit blocks without allocation
            </summary>
            <param name="src">The source blocks</param>
            <param name="n">The target block width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block8{``0}@)        | 
            <summary>
            Clones a 32-bit blocked container
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block16{``0}@)       | 
            <summary>
            Clones a 32-bit blocked container
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block32{``0}@)       | 
            <summary>
            Clones a 32-bit blocked container
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block64{``0}@)       | 
            <summary>
            Clones a blocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block128{``0}@)      | 
            <summary>
            Clones a blocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block256{``0}@)      | 
            <summary>
            Clones a 256-bit data block
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Replicate``1(Z0.Block512{``0}@)      | 
            <summary>
            Clones a 512-bit data block
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block8{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block8{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block16{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block16{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block32{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block32{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block64{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block64{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>            
        
| M:Z0.XBlocks.Slice``1(Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block128{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block256{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XBlocks.Slice``1(Z0.Block512{``0}@,System.Int32,System.Int32)| 
            <summary>
            Slices a blocked data source at the cellular level
            </summary>
            <param name="src">The source data</param>
            <param name="offset">The cell-relative offset at which to dice</param>
            <param name="length">The cell-relative slice length</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.FormatHex``2(Z0.NatSpan{``0,``1},System.Char,System.Boolean)| 
            <summary>
            Formats a span of natural length and integral type as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.FormatList``2(Z0.NatSpan{``0,``1},System.Char,System.Int32,System.Int32)| 
            <summary>
            Formats a span of natural length as a delimited list
            </summary>
            <param name="src">The source span</param>
            <param name="delimiter">The delimiter</param>
            <param name="offset">The position at which formatting should begin</param>
            <typeparam name="T">The element type</typeparam>
            <typeparam name="N">The length type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block8{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block16{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block32{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block64{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block128{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block256{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Format``1(Z0.Block512{``0},System.Char,System.Int32)| 
            <summary>
            Formats blocked content
            </summary>
            <param name="src">The source block sequence</param>
            <param name="delimiter">The cell delimiter</param>
            <param name="pad">The dell padding</param>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.BlockStats                                   | 
            <summary>
            Captures memory block statistics
            </summary>
        
| F:Z0.BlockStats.BlockCount                        | 
            <summary>
            The number of blocks being described
            </summary>
        
| F:Z0.BlockStats.BlockWidth                        | 
            <summary>
            The bit-width of a block
            </summary>
        
| F:Z0.BlockStats.CellWidth                         | 
            <summary>
            The bit-width of a cell
            </summary>
        
| F:Z0.BlockStats.BlockLength                       | 
            <summary>
            The number of cells in a block
            </summary>
        
| F:Z0.BlockStats.CellCount                         | 
            <summary>
            The total number of covered cells
            </summary>
        
| P:Z0.BlockStats.BitCount                          | 
            <summary>
            The total number of covered bits
            </summary>
        
| T:Z0.BlockStats`1                                 | 
            <summary>
            Captures statistics for memory blocks over generic T-cells
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| F:Z0.BlockStats`1.BlockCount                      | 
            <summary>
            The number of blocks being described
            </summary>
        
| F:Z0.BlockStats`1.BlockWidth                      | 
            <summary>
            The bit-width of a block
            </summary>
        
| F:Z0.BlockStats`1.CellWidth                       | 
            <summary>
            The bit-width of a cell
            </summary>
        
| F:Z0.BlockStats`1.BlockLength                     | 
            <summary>
            The number of cells in a block
            </summary>
        
| F:Z0.BlockStats`1.CellCount                       | 
            <summary>
            The total number of covered cells
            </summary>
        
| P:Z0.BlockStats`1.BitCount                        | 
            <summary>
            The total number of covered bits
            </summary>
        
| T:Z0.BlockStats`2                                 | 
            <summary>
            Captures memory block statistics for blocks of natural width N over generic T-cells
            </summary>
            <typeparam name="T">The cell type</typeparam>
        
| F:Z0.BlockStats`2.BlockCount                      | 
            <summary>
            The number of blocks being described
            </summary>
        
| F:Z0.BlockStats`2.BlockWidth                      | 
            <summary>
            The bit-width of a block
            </summary>
        
| F:Z0.BlockStats`2.CellWidth                       | 
            <summary>
            The bit-width of a cell
            </summary>
        
| F:Z0.BlockStats`2.BlockLength                     | 
            <summary>
            The number of cells in a block
            </summary>
        
| F:Z0.BlockStats`2.CellCount                       | 
            <summary>
            The total number of covered cells
            </summary>
        
| P:Z0.BlockStats`2.BitCount                        | 
            <summary>
            The total number of covered bits
            </summary>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W8,``0)| 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,``0)| 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16)   | 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,``0)| 
            <summary>
            Allocates and fills a single 32-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,``0)| 
            <summary>
            Allocates and fills a single 64-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,``0)| 
            <summary>
            Allocates and fills a single 128-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,``0)| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,``0)| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,``0,``0)| 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,``0,``0)| 
            <summary>
            Allocates and fills a single 32-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,``0,``0)| 
            <summary>
            Allocates and fills a single 64-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,``0,``0)| 
            <summary>
            Allocates and fills a single 128-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,``0,``0)| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,``0,``0)| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block16{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 16-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block32{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 32-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block64{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 64-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 128-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 256-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block512{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 512-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block16{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 16-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The exclusive cell value upper bound</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block32{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 32-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The exclusive cell value upper bound</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block64{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 64-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The exclusive cell value upper bound</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block128{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 128-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The exclusive cell value upper bound</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 256-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block512{``0}@,System.Int32)| 
            <summary>
            Fills a single caller-allocated 512-bit block with random values
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive cell value lower bound</param>
            <param name="max">The inclusive cell value upper bound</param>
            <param name="dst">The target block</param>
            <param name="block">The target block index</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 32-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 64-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 128-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills a single 512-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <param name="filter">An domain refinement filter</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 16-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 32-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 64-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 128-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 256-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0})| 
            <summary>
            Allocates and fills a single 512-bit block
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="domain">A domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 8-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,``0,``0)| 
            <summary>
            Allocates and fills specified number of 8-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 16-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 16-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,``0,``0)| 
            <summary>
            Allocates and fills specified number of 16-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 16-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,System.Int32)| 
            <summary>
            Allocates and fills specified number of 32-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 32-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,``0,``0,System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 32-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 32-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,System.Int32)| 
            <summary>
            Allocates and fills specified number of 64-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 64-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,``0,``0,System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 64-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 64-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,System.Int32)| 
            <summary>
            Allocates and fills specified number of 128-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 128-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,``0,``0,System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 128-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 128-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,System.Int32)| 
            <summary>
            Allocates and fills specified number of 256-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The bitness selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 256-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,``0,``0,System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 256-bit blocks 
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 256-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,System.Int32)| 
            <summary>
            Allocates and fills specified number of 512-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The bitness selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 512-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,``0,``0,System.Int32,System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and fills specified number of 512-bit blocks 
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,System.Int32,``0)| 
            <summary>
            Allocates and fills a specified number of 512-bit blocks
            </summary>
            <param name="random">The random source</param>
            <param name="w">The block width selector</param>
            <param name="count">The number of blocks to allocate and fill</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The block cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block8{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block16{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block32{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block64{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block128{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block256{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block512{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block16{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block32{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block64{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block128{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block256{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block512{``0}@)| 
            <summary>
            Fills caller-allocated block storage with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target block</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.IBlockedFunc                                 | 
            <summary>
            Characterizes structed blocked functions
            </summary>
        
| T:Z0.IBlockedFunc`1                               | 
            <summary>
            Characterizes identified SBF operations that are width-parametric, homoenously so
            </summary>
            <typeparam name="W">The width type</typeparam>
        
| T:Z0.IBlockedFunc`2                               | 
            <summary>
            Characterizes identified SBF operations that are cell and width-parametric, homoenously both
            </summary>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.Block128`1                                   | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64 and 128-bit segments
            </summary>
        
| P:Z0.Block128`1.Data                              | 
            <summary>
            The backing storage
            </summary>
        
| P:Z0.Block128`1.Head                              | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block128`1.IsEmpty                           | 
            <summary>
            True if no capacity exists, false otherwise
            </summary>
        
| P:Z0.Block128`1.CellCount                         | 
            <summary>
            The number of allocated cells 
            </summary>
        
| P:Z0.Block128`1.BlockLength                       | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block128`1.BlockCount                        | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block128`1.BitCount                          | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block128`1.Item(System.Int32)                | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block128`1.Item(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block128`1.Bytes                             | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block128`1.Cell(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block128`1.Block(System.Int32)               | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block128`1.Extract(System.Int32)             | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block128`1.Fill(`0)                          | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block128`1.Clear                             | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block128`1.CopyTo(System.Span{`0})           | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block128`1.As``1                             | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block16`1                                    | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8 and 16-bit segments
            </summary>
        
| P:Z0.Block16`1.Data                               | 
            <summary>
            The backing storage
            </summary>
        
| P:Z0.Block16`1.Head                               | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block16`1.CellCount                          | 
            <summary>
            The number of allocated cells
            </summary>
        
| P:Z0.Block16`1.BlockLength                        | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block16`1.BlockCount                         | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block16`1.BitCount                           | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block16`1.Item(System.Int32)                 | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block16`1.Item(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block16`1.Bytes                              | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block16`1.Cell(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block16`1.Block(System.Int32)                | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block16`1.Extract(System.Int32)              | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block16`1.Fill(`0)                           | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block16`1.Clear                              | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block16`1.CopyTo(System.Span{`0})            | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block16`1.As``1                              | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block256`1                                   | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64, 128 and 256-bit segments
            </summary>
        
| P:Z0.Block256`1.Data                              | 
            <summary>
            The unblocked storage cells
            </summary>
        
| P:Z0.Block256`1.Head                              | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block256`1.IsEmpty                           | 
            <summary>
            True if no capacity exists, false otherwise
            </summary>
        
| P:Z0.Block256`1.CellCount                         | 
            <summary>
            The number of covered cells 
            </summary>
        
| P:Z0.Block256`1.BlockLength                       | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block256`1.BlockCount                        | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block256`1.BitCount                          | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block256`1.Item(System.Int32)                | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block256`1.Item(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block256`1.Bytes                             | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block256`1.Cell(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block256`1.Block(System.Int32)               | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block256`1.Extract(System.Int32)             | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block256`1.Fill(`0)                          | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block256`1.Clear                             | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block256`1.CopyTo(System.Span{`0})           | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block256`1.As``1                             | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block32`1                                    | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8, 16 and 32-bit segments
            </summary>
        
| P:Z0.Block32`1.Data                               | 
            <summary>
            The backing storage
            </summary>
        
| P:Z0.Block32`1.Head                               | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block32`1.CellCount                          | 
            <summary>
            The number of allocated cells
            </summary>
        
| P:Z0.Block32`1.BlockLength                        | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block32`1.BlockCount                         | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block32`1.BitCount                           | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block32`1.Item(System.Int32)                 | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block32`1.Item(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block32`1.Bytes                              | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block32`1.Cell(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block32`1.Block(System.Int32)                | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block32`1.Extract(System.Int32)              | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block32`1.Clear                              | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block32`1.CopyTo(System.Span{`0})            | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block32`1.As``1                              | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block512`1                                   | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64, 128, 256 and 512-bit segments
            </summary>
        
| P:Z0.Block512`1.Data                              | 
            <summary>
            The unblocked storage cells
            </summary>
        
| P:Z0.Block512`1.Head                              | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block512`1.IsEmpty                           | 
            <summary>
            True if no capacity exists, false otherwise
            </summary>
        
| P:Z0.Block512`1.CellCount                         | 
            <summary>
            The number of allocated cells 
            </summary>
        
| P:Z0.Block512`1.BlockLength                       | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block512`1.BlockCount                        | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block512`1.BitCount                          | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block512`1.Item(System.Int32)                | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block512`1.Item(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block512`1.Bytes                             | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block512`1.Cell(System.Int32,System.Int32)   | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block512`1.Block(System.Int32)               | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block512`1.Extract(System.Int32)             | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block512`1.LoBlock(System.Int32)             | 
            <summary>
            Retrieves the lower 256 bits of an index-identified block
            </summary>
            <param name="block">The block-relative index</param>
        
| M:Z0.Block512`1.HiBlock(System.Int32)             | 
            <summary>
            Retrieves the upper 256 bits of an index-identified block
            </summary>
            <param name="block">The block-relative index</param>
        
| M:Z0.Block512`1.Fill(`0)                          | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block512`1.Clear                             | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block512`1.CopyTo(System.Span{`0})           | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block512`1.As``1                             | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block64`1                                    | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32 and 64-bit segments
            </summary>
        
| P:Z0.Block64`1.Data                               | 
            <summary>
            The unblocked storage cells
            </summary>
        
| P:Z0.Block64`1.Head                               | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block64`1.CellCount                          | 
            <summary>
            The number of allocated cells
            </summary>
        
| P:Z0.Block64`1.BlockLength                        | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block64`1.BlockCount                         | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block64`1.BitCount                           | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block64`1.Item(System.Int32)                 | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block64`1.Item(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block64`1.Bytes                              | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block64`1.Cell(System.Int32,System.Int32)    | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block64`1.Block(System.Int32)                | 
            <summary>
            Produces a span that covers the cells of an index-identified block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block64`1.Extract(System.Int32)              | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block64`1.Fill(`0)                           | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block64`1.Clear                              | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block64`1.CopyTo(System.Span{`0})            | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block64`1.As``1                              | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| T:Z0.Block8`1                                     | 
            <summary>
            Defines a span of contiguous memory that can be evenly partitioned into 8-bit segments
            </summary>
        
| P:Z0.Block8`1.Data                                | 
            <summary>
            The backing storage
            </summary>
        
| P:Z0.Block8`1.Head                                | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.Block8`1.CellCount                           | 
            <summary>
            The number of allocated cells
            </summary>
        
| P:Z0.Block8`1.BlockLength                         | 
            <summary>
            The number of cells in a block
            </summary>
        
| P:Z0.Block8`1.BlockCount                          | 
            <summary>
            The number of covered blocks
            </summary>
        
| P:Z0.Block8`1.BitCount                            | 
            <summary>
            The number of covered bits
            </summary>
        
| P:Z0.Block8`1.Item(System.Int32)                  | 
            <summary>
            Mediates access to the underlying storage cells via linear index
            </summary>
        
| P:Z0.Block8`1.Item(System.Int32,System.Int32)     | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
        
| P:Z0.Block8`1.Bytes                               | 
            <summary>
            Presents the source data as bytespan
            </summary>
        
| M:Z0.Block8`1.Cell(System.Int32,System.Int32)     | 
            <summary>
            Mediates access to the the underlying storage cells via block index and block-relative cell index
            </summary>
            <param name="block">The block index</param>
            <param name="segment">The cell relative block index</param>
        
| M:Z0.Block8`1.Block(System.Int32)                 | 
            <summary>
            Retrieves an index-identified data block
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block8`1.Extract(System.Int32)               | 
            <summary>
            Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
            </summary>
            <param name="block">The block index</param>
        
| M:Z0.Block8`1.Fill(`0)                            | 
            <summary>
            Broadcasts a value to all blocked cells
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Block8`1.Clear                               | 
            <summary>
            Zero-fills all blocked cells
            </summary>
        
| M:Z0.Block8`1.CopyTo(System.Span{`0})             | 
            <summary>
            Copies blocked content to a target span
            </summary>
            <param name="dst">The target span</param>
        
| M:Z0.Block8`1.As``1                               | 
            <summary>
            Reinterprets the storage cell type
            </summary>
            <typeparam name="S">The target cell type</typeparam>
        
| P:Z0.Block256`2.Length                            | 
            <summary>
            Specifies the length of the vector, i.e. its component count
            </summary>
        
| M:Z0.Block256`2.op_Implicit(Z0.Block256{`0,`1})~Z0.NatSpan{`0,`1}| 
            <summary>
            Vec =&gt; Slice
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="N">The natural length</typeparam>
            <typeparam name="T">THe component type</typeparam>
        
| M:Z0.Block256`2.op_Implicit(Z0.NatSpan{`0,`1})~Z0.Block256{`0,`1}| 
            <summary>
            Slice =&gt; Vec
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="N">The natural length</typeparam>
            <typeparam name="T">THe component type</typeparam>
        
| M:Z0.Block256`2.Map``1(System.Func{`1,``0})       | 
            <summary>
            Projects the source vector onto a target vector of the same length 
            via a supplied transformation
            </summary>
            <param name="f">The transformation function</param>
            <typeparam name="U">The target vector element type</typeparam>
        
| M:Z0.Block256`2.Map``1(System.Func{`1,``0},Z0.Block256{`0,``0}@)| 
            <summary>
            Projects the source vector onto a caller-supplied target vector of the same length 
            via a supplied transformation
            </summary>
            <param name="f">The transformation function</param>
            <typeparam name="U">The target vector element type</typeparam>
        
| T:Z0.RowVector                                    | 
            <summary>
            Defines the vector api surface
            </summary>
        
| M:Z0.RowVector.natspan``2(Z0.Block256{``1}@,``0)  | 
            <summary>
            Loads a natural block from blocked storage
            </summary>
            <param name="src">The source reference</param>
            <param name="n">The length representative</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.RowVector.safeload``2(Z0.N256,Z0.NatSpan{``0,``1}@)| 
            <summary>
            Loads an unsized 256-bit blocked span from a sized unblocked span
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The span index at which to begin the load</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.RowVector.load``2(``1[],``0)                 | 
            <summary>
            Loads a vector of natural length
            </summary>
            <param name="src">The source span</param>
            <param name="length">The natural length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.RowVector.load``2(``0,``1[])                 | 
            <summary>
            Loads a vector of natural length
            </summary>
            <param name="src">The source span</param>
            <param name="length">The natural length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.RowVector.range``2(``1,``0)                  | 
            <summary>
            Defines a scalar sequence [first, ..., (first + N)]
            </summary>
            <param name="first">The first value in the sequence</param>
            <typeparam name="N">The count type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.RowVector.blockalloc``2(``0)                 | 
            <summary>
            Allocates a block vector of natural length
            </summary>
            <param name="n">The length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.RowVector.blockalloc``1(System.Int32)        | 
            <summary>
            Allocates a block vector optionally filled with a specified value
            </summary>
            <param name="length">The (minimum) length</param>
            <param name="fill">The fill value, if any</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.RowVector.blockload``2(System.Span{``1},``0) | 
            <summary>
            Loads a vector of natural length from a span that may not be aligned (Allocating if unaligned)
            </summary>
            <param name="src">The source span</param>
            <param name="n">The natural length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.RowVector`1                                  | 
            <summary>
            Defines a vector over cells of unmanaged type
            </summary>
        
| M:Z0.RowVector`1.op_Implicit(`0[])~Z0.RowVector{`0}| 
            <summary>
            Implicitly converts an array to a vector
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The component type</typeparam>
        
| M:Z0.RowVector`1.op_Implicit(Z0.RowVector{`0})~System.Span{`0}| 
            <summary>
            Implicitly reveals a vector's underlying memory span
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The component type</typeparam>
        
| M:Z0.RowVector`1.op_Implicit(Z0.RowVector{`0})~System.ReadOnlySpan{`0}| 
            <summary>
            Implicitly provies a readonly-view of a vector's underlying data
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The component type</typeparam>
        
| M:Z0.RowVector`1.op_BitwiseAnd(Z0.RowVector{`0},Z0.RowVector{`0})| 
            <summary>
            Calculates the scalar product between the operands
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.RowVector`1.op_Equality(Z0.RowVector{`0},Z0.RowVector{`0})| 
            <summary>
            Deems vectors are equal if they have the same number of components
            and corresponding components have identical content
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">Teh right vector</param>
        
| M:Z0.RowVector`1.#ctor(`0[])                      | 
            <summary>
            Initializes a vector from array content
            </summary>
            <param name="src">The source array</param>
        
| P:Z0.RowVector`1.Item(System.Int32)               | 
            <summary>
            Queries/manipulates component values
            </summary>
        
| P:Z0.RowVector`1.Data                             | 
            <summary>
            The data wrapped by the vector
            </summary>
        
| P:Z0.RowVector`1.Length                           | 
            <summary>
            The count of vector components, otherwise known as its dimension
            </summary>
        
| M:Z0.RowVector`1.Format                           | 
            <summary>
            Formats components as a list
            </summary>
            <param name="sep">The component delimiter</param>
        
| M:Z0.RowVector`1.CopyTo(System.Span{`0})          | 
            <summary>
            Copies vector content into a caller-provided span
            </summary>
            <param name="dst">The target span</param>
        
| P:Z0.RowVector`2.Dim                              | 
            <summary>
            The vector's dimension
            </summary>
        
| P:Z0.RowVector`2.Zero                             | 
            <summary>
            The zero vector
            </summary>
        
| M:Z0.RowVector`2.#ctor(`1[])                      | 
            <summary>
            Initializes a vector with an array
            </summary>
            <param name="src">The data source</param>
        
| P:Z0.RowVector`2.Item(System.Int32)               | 
            <summary>
            Queries/manipulates component values
            </summary>
        
| P:Z0.RowVector`2.Data                             | 
            <summary>
            The vector data
            </summary>
        
| P:Z0.RowVector`2.Length                           | 
            <summary>
            The count of vector components, otherwise known as its dimension
            </summary>
        
| M:Z0.RowVector`2.Map``1(System.Func{`1,``0})      | 
            <summary>
            Projects the source vector onto a target vector of the same length 
            via a supplied transformation
            </summary>
            <param name="f">The transformation function</param>
            <typeparam name="U">The target vector element type</typeparam>
        
| M:Z0.RowVector`2.Map``1(System.Func{`1,``0},Z0.RowVector{`0,``0}@)| 
            <summary>
            Projects the source vector onto a caller-supplied target vector of the same length 
            via a supplied transformation
            </summary>
            <param name="f">The transformation function</param>
            <typeparam name="U">The target vector element type</typeparam>
        
