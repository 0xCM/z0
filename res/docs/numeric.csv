Method      | Z0.XTend.BoxedZero(Z0.NumericKind)                                    | Returns 0 in a box
Method      | Z0.XTend.Box``1(Z0.NumericKind,``0)                                   | Puts a value of any numeric kind into a box of any numeric kind
Method      | Z0.XTend.Box``1(``0)                                                  | Puts an enum value into a (numeric) box
Method      | Z0.BitSet.uint2(System.Byte)                                          | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.SByte)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.UInt16)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.Int16)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.Int32)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.UInt32)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.Int64)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(System.UInt64)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint2(Z0.bit,Z0.bit,Z0.bit)                                 | Constructs a uint2 value from a sequence of bits ranging from low to high
Method      | Z0.BitSet.uint4(System.Byte)                                          | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.SByte)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.UInt16)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.Int16)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.Int32)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.UInt32)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.Int64)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(System.UInt64)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint4(Z0.bit,Z0.bit,Z0.bit,Z0.bit)                          | Constructs a uint4 value from a sequence of bits ranging from low to high
Method      | Z0.BitSet.uint5(System.Byte)                                          | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.SByte)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.UInt16)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.Int16)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.Int32)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.UInt32)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.Int64)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(System.UInt64)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint5(Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit)                   | Constructs a uint5 value from a sequence of bits ranging from low to high
Method      | Z0.BitSet.uint6(System.Byte)                                          | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.SByte)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.UInt16)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.Int16)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.Int32)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.UInt32)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.Int64)                                         | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(System.UInt64)                                        | Creates a 5-bit usigned integer from the least 5 bits of the source
Method      | Z0.BitSet.uint6(Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit)                   | Constructs a uint6 value from a sequence of bits ranging from low to high
Method      | Z0.BitSet.uint1(System.Byte)                                          | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.SByte)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.UInt16)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.Int16)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.Int32)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.UInt32)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.Int64)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint1(System.UInt64)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.Byte)                                          | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.SByte)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.UInt16)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.Int16)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.Int32)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.UInt32)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.Int64)                                         | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(System.UInt64)                                        | Creates a 4-bit usigned integer from the least 4 bits of the source
Method      | Z0.BitSet.uint3(Z0.bit,Z0.bit,Z0.bit)                                 | Constructs a uint3 value from a sequence of bits ranging from low to high
Method      | Z0.BitSet.extend(Z0.duet,Z0.W3)                                       | Promotes a duet to a triad
Method      | Z0.BitSet.extend(Z0.duet,Z0.W3,Z0.N1)                                 | Promotes a duet to a triad and shifts the promoted value 1 bit to the left
Method      | Z0.BitSet.extend(Z0.duet,Z0.W4)                                       | Promotes a duet to a quartet
Method      | Z0.BitSet.extend(Z0.duet,Z0.W5)                                       | Promotes a duet to a quintet
Method      | Z0.BitSet.extend(Z0.duet,Z0.W6)                                       | Promotes a duet to a sextet
Method      | Z0.BitSet.extend(Z0.duet,Z0.W8)                                       | Promotes a duet to an octet
Method      | Z0.BitSet.extend(Z0.duet,Z0.W8,Z0.N2)                                 | Promotes a duet to an octet and shifts the promoted value 2 bits leftward
Method      | Z0.BitSet.extend(Z0.duet,Z0.W8,Z0.N3)                                 | Promotes a duet to an octet and shifts the promoted value 3 bits leftward
Method      | Z0.BitSet.extend(Z0.duet,Z0.W8,Z0.N4)                                 | Promotes a duet to an octet and shifts the promoted value 4 bits leftward
Method      | Z0.BitSet.extend(Z0.triad,Z0.W4)                                      | Promotes a triad to an quartet
Method      | Z0.BitSet.extend(Z0.triad,Z0.W5)                                      | Promotes a triad to an quintet
Method      | Z0.BitSet.extend(Z0.triad,Z0.W6)                                      | Promotes a triad to an quintet
Method      | Z0.BitSet.extend(Z0.triad,Z0.W8)                                      | Promotes a triad to an octet
Method      | Z0.BitSet.join(Z0.single,Z0.single)                                   | (a,b) -&gt; [ab]
Method      | Z0.BitSet.join(Z0.single,Z0.single,Z0.single)                         | (a,b) -&gt; [ab]
Method      | Z0.BitSet.join(Z0.duet,Z0.duet)                                       | (a,b) -&gt; [bbaa]
Method      | Z0.BitSet.join(Z0.duet,Z0.duet,Z0.duet)                               | (a,b) -&gt; [bbaa]
Method      | Z0.BitSet.join(Z0.duet,Z0.duet,Z0.duet,Z0.duet)                       | (a,b,c,d) -&gt; [dd cc bb aa]
Method      | Z0.BitSet.join(Z0.triad,Z0.triad,Z0.duet)                             | (a:3, b:3, c:2) -&gt; [cc bbb aaa]
Type        | Z0.duet                                                               | Represents the value of a type-level duet and thus has domain {00,01,10,11}
Method      | Z0.duet.op_Implicit(Z0.duet)~System.Byte                              | Converts a 3-bit integer to an unsigned 8-bit integer
Method      | Z0.duet.op_Implicit(Z0.duet)~System.UInt16                            | Converts a 3-bit integer to an unsigned 16-bit integer
Method      | Z0.duet.op_Implicit(Z0.duet)~System.UInt32                            | Converts a 3-bit integer to an unsigned 32-bit integer
Method      | Z0.duet.op_Implicit(Z0.duet)~System.UInt64                            | Converts a 3-bit integer to an unsigned 63-bit integer
Method      | Z0.duet.op_Implicit(Z0.duet)~System.Int32                             | Converts a 3-bit integer to a signed 32-bit integer
Method      | Z0.duet.op_Explicit(System.Byte)~Z0.duet                              | Creates a 3-bit integer from the least four bits of the source operand
Method      | Z0.duet.op_Implicit(System.UInt32)~Z0.duet                            | Creates a 3-bit integer from the least four bits of the source operand
Method      | Z0.duet.op_Explicit(System.UInt64)~Z0.duet                            | Creates a 3-bit integer from the least four bits of the source operand
Property    | Z0.duet.Item(System.Int32)                                            | Queries and manipulates a bit identified by its 0-based index
Method      | Z0.duet.Format                                                        | Renders the source value as as hexadecimal string
Type        | Z0.octet                                                              | Represents the value of a type-level octet and thus is an integer in the range [0,255]
Type        | Z0.quartet                                                            | Represents the value of a type-level quartet and thus is an integer in the range [0,15]
Method      | Z0.quartet.op_Implicit(Z0.quartet)~System.Byte                        | Converts a 4-bit integer to an unsigned 8-bit integer
Method      | Z0.quartet.op_Implicit(Z0.quartet)~System.UInt16                      | Converts a 4-bit integer to an unsigned 16-bit integer
Method      | Z0.quartet.op_Implicit(Z0.quartet)~System.UInt32                      | Converts a 4-bit integer to an unsigned 32-bit integer
Method      | Z0.quartet.op_Implicit(Z0.quartet)~System.UInt64                      | Converts a 4-bit integer to an unsigned 64-bit integer
Method      | Z0.quartet.op_Implicit(Z0.quartet)~System.Int32                       | Converts a 4-bit integer to a signed 32-bit integer
Method      | Z0.quartet.op_Explicit(System.Byte)~Z0.quartet                        | Creates a 4-bit integer from the least four bits of the source operand
Method      | Z0.quartet.op_Implicit(System.UInt32)~Z0.quartet                      | Creates a 4-bit integer from the least four bits of the source operand
Method      | Z0.quartet.op_Explicit(System.UInt64)~Z0.quartet                      | Creates a 4-bit integer from the least four bits of the source operand
Property    | Z0.quartet.Item(System.Int32)                                         | Queries and manipulates a bit identified by its 0-based index
Property    | Z0.quartet.Lo                                                         | Queries and manipulates the lower two bits
Property    | Z0.quartet.Hi                                                         | Queries and manipulates the upper two bits
Method      | Z0.quartet.Format                                                     | Renders the source value as as hexadecimal string
Type        | Z0.quintet                                                            | Represents the value of a type-level quintet and thus is an integer in the range [0,31]
Method      | Z0.quintet.op_Implicit(Z0.quintet)~System.Byte                        | Converts a 5-bit integer to an unsigned 8-bit integer
Method      | Z0.quintet.op_Implicit(Z0.quintet)~System.UInt16                      | Converts a 5-bit integer to an unsigned 16-bit integer
Method      | Z0.quintet.op_Implicit(Z0.quintet)~System.UInt32                      | Converts a 5-bit integer to an unsigned 32-bit integer
Method      | Z0.quintet.op_Implicit(Z0.quintet)~System.UInt64                      | Converts a 5-bit integer to an unsigned 65-bit integer
Method      | Z0.quintet.op_Implicit(Z0.quintet)~System.Int32                       | Converts a 5-bit integer to a signed 32-bit integer
Method      | Z0.quintet.op_Explicit(System.Byte)~Z0.quintet                        | Creates a 5-bit integer from the least four bits of the source operand
Method      | Z0.quintet.op_Implicit(System.UInt32)~Z0.quintet                      | Creates a 5-bit integer from the least four bits of the source operand
Method      | Z0.quintet.op_Explicit(System.UInt64)~Z0.quintet                      | Creates a 5-bit integer from the least four bits of the source operand
Property    | Z0.quintet.Item(System.Int32)                                         | Queries and manipulates a bit identified by its 0-based index
Type        | Z0.sextet                                                             | Represents the value of a type-level sextet and thus is an integer in the range [0,63]
Method      | Z0.sextet.op_Implicit(Z0.sextet)~System.Byte                          | Converts a 5-bit integer to an unsigned 8-bit integer
Method      | Z0.sextet.op_Implicit(Z0.sextet)~System.UInt16                        | Converts a 5-bit integer to an unsigned 16-bit integer
Method      | Z0.sextet.op_Implicit(Z0.sextet)~System.UInt32                        | Converts a 5-bit integer to an unsigned 32-bit integer
Method      | Z0.sextet.op_Implicit(Z0.sextet)~System.UInt64                        | Converts a 5-bit integer to an unsigned 65-bit integer
Method      | Z0.sextet.op_Implicit(Z0.sextet)~System.Int32                         | Converts a 5-bit integer to a signed 32-bit integer
Method      | Z0.sextet.op_Explicit(System.Byte)~Z0.sextet                          | Creates a 5-bit integer from the least four bits of the source operand
Method      | Z0.sextet.op_Implicit(System.UInt32)~Z0.sextet                        | Creates a 5-bit integer from the least four bits of the source operand
Method      | Z0.sextet.op_Explicit(System.UInt64)~Z0.sextet                        | Creates a 5-bit integer from the least four bits of the source operand
Property    | Z0.sextet.Item(System.Int32)                                          | Queries and manipulates a bit identified by its 0-based index
Type        | Z0.single                                                             | Represents the value of a type-level single and thus has domain {0,1}
Method      | Z0.single.op_Implicit(Z0.single)~System.Byte                          | Converts a 1-bit integer to an unsigned 8-bit integer
Method      | Z0.single.op_Implicit(Z0.single)~System.UInt16                        | Converts a 1-bit integer to an unsigned 16-bit integer
Method      | Z0.single.op_Implicit(Z0.single)~System.UInt32                        | Converts a 1-bit integer to an unsigned 32-bit integer
Method      | Z0.single.op_Implicit(Z0.single)~System.UInt64                        | Converts a 1-bit integer to an unsigned 61-bit integer
Method      | Z0.single.op_Implicit(Z0.single)~System.Int32                         | Converts a 1-bit integer to a signed 32-bit integer
Method      | Z0.single.op_Explicit(System.Byte)~Z0.single                          | Creates a 1-bit integer from the least four bits of the source operand
Method      | Z0.single.op_Implicit(System.UInt32)~Z0.single                        | Creates a 1-bit integer from the least four bits of the source operand
Method      | Z0.single.op_Explicit(System.UInt64)~Z0.single                        | Creates a 1-bit integer from the least four bits of the source operand
Method      | Z0.single.Format                                                      | Renders the source value as as hexadecimal string
Type        | Z0.triad                                                              | Represents the value of a type-level triad and thus has domain {000,001,010,011,100,101,110,111}
Method      | Z0.triad.op_Implicit(Z0.triad)~System.Byte                            | Converts a 3-bit integer to an unsigned 8-bit integer
Method      | Z0.triad.op_Implicit(Z0.triad)~System.UInt16                          | Converts a 3-bit integer to an unsigned 16-bit integer
Method      | Z0.triad.op_Implicit(Z0.triad)~System.UInt32                          | Converts a 3-bit integer to an unsigned 32-bit integer
Method      | Z0.triad.op_Implicit(Z0.triad)~System.UInt64                          | Converts a 3-bit integer to an unsigned 63-bit integer
Method      | Z0.triad.op_Implicit(Z0.triad)~System.Int32                           | Converts a 3-bit integer to a signed 32-bit integer
Method      | Z0.triad.op_Explicit(System.Byte)~Z0.triad                            | Creates a 3-bit integer from the least four bits of the source operand
Method      | Z0.triad.op_Implicit(System.UInt32)~Z0.triad                          | Creates a 3-bit integer from the least four bits of the source operand
Method      | Z0.triad.op_Explicit(System.UInt64)~Z0.triad                          | Creates a 3-bit integer from the least four bits of the source operand
Property    | Z0.triad.Item(System.Int32)                                           | Queries and manipulates a bit identified by its 0-based index
Method      | Z0.triad.Format                                                       | Renders the source value as as hexadecimal string
Method      | Z0.Biconverter`1.Convert``1(`0)                                       | Converts an incoming value of the target type to a value of specified type, if possible
Method      | Z0.Biconverter`1.Convert``1(``0)                                      | converts an incoming value to a value of target type
Type        | Z0.BoxedNumber                                                        | A numbered box
Field       | Z0.BoxedNumber.Boxed                                                  | In the box
Field       | Z0.BoxedNumber.Kind                                                   | Box discriminator for runtime efficiency
Method      | Z0.BoxedNumber.From``1(``0)                                           | Puts an enum value into a (numeric) box
Method      | Z0.BoxedNumberConverter.Convert``1(Z0.BoxedNumber)                    | Pulls a number of kind parametric from a box - whose kind it matters not
Method      | Z0.BoxedNumberConverter.Convert``1(``0)                               | Puts a number in a box of kind parametric
Method      | Z0.ComplexNumber.Define``1(``0,``0)                                   | Defines a generic comple number
Type        | Z0.ComplexF32                                                         | Represents a 32-bit floating point complex number
Method      | Z0.ComplexF32.Load(System.Span{System.Single})                        | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexF32.op_Implicit(Z0.Complex{System.Single})~Z0.ComplexF32    | Implicitly constructs a <see cref="T:Z0.ComplexF32" /> value from its equivalent generic representation
Method      | Z0.ComplexF32.op_Equality(Z0.ComplexF32@,Z0.ComplexF32@)              | Tests the operands for exact equality
Method      | Z0.ComplexF32.op_Inequality(Z0.ComplexF32@,Z0.ComplexF32@)            | Tests the operands for inequality
Method      | Z0.ComplexF32.op_Subtraction(Z0.ComplexF32@,Z0.ComplexF32@)           | Subtracts the second operand from the first
Method      | Z0.ComplexF32.op_Addition(Z0.ComplexF32@,Z0.ComplexF32@)              | Adds the second operand to the first
Method      | Z0.ComplexF32.op_Implicit(System.ValueTuple{System.Single,System.Single}@)~Z0.ComplexF32| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexF32.op_Implicit(Z0.ComplexF32@)~System.ValueTuple{System.Single,System.Single}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexF32.re                                                      | specifies the real component
Field       | Z0.ComplexF32.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexF32.#ctor(System.ValueTuple{System.Single,System.Single}@)  | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexF32.#ctor(System.Single,System.Single)                      | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexF32.Format(System.Boolean)                                  | Formats the real and imaginar parts of a complex number in one of two canonical forms
Method      | Z0.ComplexF32.Deconstruct(System.Single@,System.Single@)              | Partitions the complex number into real and imanginary components
Type        | Z0.ComplexF64                                                         | Represents a 32-bit floating point complex number
Field       | Z0.ComplexF64.re                                                      | Specifies the real component
Field       | Z0.ComplexF64.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexF64.Load(System.Span{System.Double})                        | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexF64.op_Implicit(Z0.ComplexF64@)~System.ValueTuple{System.Double,System.Double}| Implcitly converts a complex value to a 2-tuple
Method      | Z0.ComplexF64.op_Implicit(Z0.Complex{System.Double})~Z0.ComplexF64    | Implicitly constructs a <see cref="T:Z0.ComplexF32" /> value from its equivalent generic representation
Method      | Z0.ComplexF64.op_Equality(Z0.ComplexF64@,Z0.ComplexF64@)              | Tests the operands for exact equality
Method      | Z0.ComplexF64.op_Inequality(Z0.ComplexF64@,Z0.ComplexF64@)            | Tests the operands for inequality
Method      | Z0.ComplexF64.op_Subtraction(Z0.ComplexF64@,Z0.ComplexF64@)           | Subtracts the second operand from the first
Method      | Z0.ComplexF64.op_Addition(Z0.ComplexF64@,Z0.ComplexF64@)              | Adds the second operand to the first
Method      | Z0.ComplexF64.op_Implicit(System.ValueTuple{System.Double,System.Double}@)~Z0.ComplexF64| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexF64.#ctor(System.ValueTuple{System.Double,System.Double}@)  | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexF64.#ctor(System.Double,System.Double)                      | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexF64.Deconstruct(System.Double@,System.Double@)              | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexF64.Format(System.Boolean)                                  | Formats the real and imaginar parts of a complex number in one of two canonical forms
Type        | Z0.ComplexI16                                                         | Represents a complex value with signed 16-bit integer components
Method      | Z0.ComplexI16.Load(System.Span{System.Int16})                         | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are shorterpreted respectively as real and imaginary components
Method      | Z0.ComplexI16.op_Subtraction(Z0.ComplexI16@,Z0.ComplexI16@)           | Subtracts the second operand from the first
Method      | Z0.ComplexI16.op_Addition(Z0.ComplexI16@,Z0.ComplexI16@)              | Adds the second operand to the first
Method      | Z0.ComplexI16.op_Equality(Z0.ComplexI16@,Z0.ComplexI16@)              | Tests the operands for equality
Method      | Z0.ComplexI16.op_Inequality(Z0.ComplexI16@,Z0.ComplexI16@)            | Tests the operands for inequality
Method      | Z0.ComplexI16.op_Implicit(System.ValueTuple{System.Int16,System.Int16})~Z0.ComplexI16| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexI16.op_Implicit(Z0.ComplexI16)~System.ValueTuple{System.Int16,System.Int16}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexI16.re                                                      | Specifies the real component
Field       | Z0.ComplexI16.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexI16.#ctor(System.ValueTuple{System.Int16,System.Int16})     | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexI16.#ctor(System.Int16,System.Int16)                        | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexI16.Deconstruct(System.Int16@,System.Int16@)                | Partitions the complex number shorto real and imanginary components
Method      | Z0.ComplexI16.Format(System.Boolean)                                  | Formats the real and imaginar parts of a complex number in one of two canonical forms
Type        | Z0.ComplexI32                                                         | Represents a complex value with signed 32-bit integer components
Method      | Z0.ComplexI32.Load(System.Span{System.Int32})                         | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexI32.op_Subtraction(Z0.ComplexI32@,Z0.ComplexI32@)           | Subtracts the second operand from the first
Method      | Z0.ComplexI32.op_Addition(Z0.ComplexI32@,Z0.ComplexI32@)              | Adds the second operand to the first
Method      | Z0.ComplexI32.op_Equality(Z0.ComplexI32@,Z0.ComplexI32@)              | Tests the operands for equality
Method      | Z0.ComplexI32.op_Inequality(Z0.ComplexI32@,Z0.ComplexI32@)            | Tests the operands for inequality
Method      | Z0.ComplexI32.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Z0.ComplexI32| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexI32.op_Implicit(Z0.ComplexI32)~System.ValueTuple{System.Int32,System.Int32}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexI32.re                                                      | Specifies the real component
Field       | Z0.ComplexI32.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexI32.#ctor(System.ValueTuple{System.Int32,System.Int32})     | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexI32.#ctor(System.Int32,System.Int32)                        | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexI32.Deconstruct(System.Int32@,System.Int32@)                | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexI32.Format(System.Boolean)                                  | Formats the real and imaginar parts of a complex number in one of two canonical forms
Type        | Z0.ComplexI64                                                         | Represents a complex value with signed 64-bit integer components
Method      | Z0.ComplexI64.Load(System.Span{System.Int64})                         | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexI64.op_Equality(Z0.ComplexI64@,Z0.ComplexI64@)              | Tests the operands for equality
Method      | Z0.ComplexI64.op_Inequality(Z0.ComplexI64@,Z0.ComplexI64@)            | Tests the operands for inequality
Method      | Z0.ComplexI64.op_Implicit(System.ValueTuple{System.Int64,System.Int64}@)~Z0.ComplexI64| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexI64.op_Implicit(Z0.ComplexI64@)~System.ValueTuple{System.Int64,System.Int64}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexI64.re                                                      | Specifies the real component
Field       | Z0.ComplexI64.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexI64.#ctor(System.ValueTuple{System.Int64,System.Int64})     | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexI64.#ctor(System.Int64,System.Int64)                        | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexI64.Deconstruct(System.Int64@,System.Int64@)                | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexI64.Format(System.Boolean)                                  | Renders the value as a string per supplied options
Type        | Z0.ComplexI8                                                          | Represents a complex value with signed 8-bit integer components
Method      | Z0.ComplexI8.Load(System.Span{System.SByte})                          | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexI8.op_Subtraction(Z0.ComplexI8@,Z0.ComplexI8@)              | Subtracts the second operand from the first
Method      | Z0.ComplexI8.op_Addition(Z0.ComplexI8@,Z0.ComplexI8@)                 | Adds the second operand to the first
Method      | Z0.ComplexI8.op_Equality(Z0.ComplexI8@,Z0.ComplexI8@)                 | Tests the operands for equality
Method      | Z0.ComplexI8.op_Inequality(Z0.ComplexI8@,Z0.ComplexI8@)               | Tests the operands for inequality
Method      | Z0.ComplexI8.op_Implicit(System.ValueTuple{System.SByte,System.SByte})~Z0.ComplexI8| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexI8.op_Implicit(Z0.ComplexI8)~System.ValueTuple{System.SByte,System.SByte}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexI8.re                                                       | Specifies the real component
Field       | Z0.ComplexI8.im                                                       | Specifies the imaginary component
Method      | Z0.ComplexI8.#ctor(System.ValueTuple{System.SByte,System.SByte})      | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexI8.#ctor(System.SByte,System.SByte)                         | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexI8.Deconstruct(System.SByte@,System.SByte@)                 | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexI8.Format(System.Boolean)                                   | Formats the real and imaginar parts of a complex number in one of two canonical forms
Type        | Z0.Complex`1                                                          | Defines a complex number parameterized over the primal types
Method      | Z0.Complex`1.Format(`0,`0,System.Boolean)                             | Formats the real and imaginar parts of a complex number in one of two canonical forms
Method      | Z0.Complex`1.Hash(`0,`0)                                              | Creates a combined hash code for the real and imaginary parts of a complex number
Method      | Z0.Complex`1.op_Implicit(System.ValueTuple{`0,`0})~Z0.Complex{`0}     | Implicitly constructs a generic complex value from an ordered pair            interpreted as the real/imaginary parts, respectively, of a             complex number
Method      | Z0.Complex`1.op_Implicit(Z0.Complex{`0})~System.ValueTuple{`0,`0}     | Implictly constructes an ordered pair consisting respectively of            the real an imaginary parts of the source value
Method      | Z0.Complex`1.op_Equality(Z0.Complex{`0}@,Z0.Complex{`0}@)             | Tests the operands for exact equality
Method      | Z0.Complex`1.op_Inequality(Z0.Complex{`0}@,Z0.Complex{`0}@)           | Tests the operands for inequality
Method      | Z0.Complex`1.Deconstruct(`0@,`0@)                                     | Partitions the complex number into real and imanginary components
Type        | Z0.ComplexU16                                                         | Represents a complex value with unsigned 16-bit integer components
Method      | Z0.ComplexU16.Load(System.Span{System.UInt16})                        | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexU16.op_Equality(Z0.ComplexU16@,Z0.ComplexU16@)              | Tests the operands for equality
Method      | Z0.ComplexU16.op_Inequality(Z0.ComplexU16@,Z0.ComplexU16@)            | Tests the operands for inequality
Method      | Z0.ComplexU16.op_Implicit(System.ValueTuple{System.UInt16,System.UInt16}@)~Z0.ComplexU16| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexU16.op_Implicit(Z0.ComplexU16@)~System.ValueTuple{System.UInt16,System.UInt16}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexU16.re                                                      | Specifies the real component
Field       | Z0.ComplexU16.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexU16.#ctor(System.ValueTuple{System.UInt16,System.UInt16})   | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexU16.#ctor(System.UInt16,System.UInt16)                      | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexU16.Deconstruct(System.UInt16@,System.UInt16@)              | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexU16.Format(System.Boolean)                                  | Renders the value as a string per supplied options
Type        | Z0.ComplexU32                                                         | Represents a complex value with unsigned 32-bit integer components
Method      | Z0.ComplexU32.Load(System.Span{System.UInt32})                        | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexU32.op_Equality(Z0.ComplexU32@,Z0.ComplexU32@)              | Tests the operands for equality
Method      | Z0.ComplexU32.op_Inequality(Z0.ComplexU32@,Z0.ComplexU32@)            | Tests the operands for inequality
Method      | Z0.ComplexU32.op_Implicit(System.ValueTuple{System.UInt32,System.UInt32}@)~Z0.ComplexU32| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexU32.op_Implicit(Z0.ComplexU32@)~System.ValueTuple{System.UInt32,System.UInt32}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexU32.re                                                      | Specifies the real component
Field       | Z0.ComplexU32.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexU32.#ctor(System.ValueTuple{System.UInt32,System.UInt32})   | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexU32.#ctor(System.UInt32,System.UInt32)                      | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexU32.Deconstruct(System.UInt32@,System.UInt32@)              | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexU32.Format(System.Boolean)                                  | Renders the value as a string per supplied options
Type        | Z0.ComplexU64                                                         | Represents a complex value with unsigned 64-bit integer components
Method      | Z0.ComplexU64.Load(System.Span{System.UInt64})                        | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexU64.op_Implicit(Z0.Complex{System.UInt64})~Z0.ComplexU64    | Implicitly constructs a <see cref="T:Z0.ComplexF32" /> value from its equivalent generic representation
Method      | Z0.ComplexU64.op_Equality(Z0.ComplexU64@,Z0.ComplexU64@)              | Tests the operands for equality
Method      | Z0.ComplexU64.op_Inequality(Z0.ComplexU64@,Z0.ComplexU64@)            | Tests the operands for inequality
Method      | Z0.ComplexU64.op_Implicit(System.ValueTuple{System.UInt64,System.UInt64}@)~Z0.ComplexU64| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexU64.op_Implicit(Z0.ComplexU64@)~System.ValueTuple{System.UInt64,System.UInt64}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexU64.re                                                      | Specifies the real component
Field       | Z0.ComplexU64.im                                                      | Specifies the imaginary component
Method      | Z0.ComplexU64.#ctor(System.ValueTuple{System.UInt64,System.UInt64})   | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexU64.#ctor(System.UInt64,System.UInt64)                      | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexU64.Deconstruct(System.UInt64@,System.UInt64@)              | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexU64.Format(System.Boolean)                                  | Formats the real and imaginar parts of a complex number in one of two canonical forms
Type        | Z0.ComplexU8                                                          | Represents a complex value with unsigned 8-bit integer components
Method      | Z0.ComplexU8.Load(System.Span{System.Byte})                           | Loads a span of span of complext values from a source span where adjacent             entries (i,i+j) are interpreted respectively as real and imaginary components
Method      | Z0.ComplexU8.op_Equality(Z0.ComplexU8@,Z0.ComplexU8@)                 | Tests the operands for equality
Method      | Z0.ComplexU8.op_Inequality(Z0.ComplexU8@,Z0.ComplexU8@)               | Tests the operands for inequality
Method      | Z0.ComplexU8.op_Implicit(System.ValueTuple{System.Byte,System.Byte})~Z0.ComplexU8| Implcitly converts a 2-tuple to a complex value
Method      | Z0.ComplexU8.op_Implicit(Z0.ComplexU8)~System.ValueTuple{System.Byte,System.Byte}| Implcitly converts a complex value to a 2-tuple
Field       | Z0.ComplexU8.re                                                       | Specifies the real component
Field       | Z0.ComplexU8.im                                                       | Specifies the imaginary component
Method      | Z0.ComplexU8.#ctor(System.ValueTuple{System.Byte,System.Byte})        | Constructs the complex number from a tuple with real and imaginary parts
Method      | Z0.ComplexU8.#ctor(System.Byte,System.Byte)                           | Constructs the complex number from real and imaginary components
Method      | Z0.ComplexU8.Deconstruct(System.Byte@,System.Byte@)                   | Partitions the complex number into real and imanginary components
Method      | Z0.ComplexU8.Format(System.Boolean)                                   | Renders the value as a string per supplied options
Type        | Z0.Edge`1                                                             | Defines an unweighted edge, parameterized by the vertex index type
Field       | Z0.Edge`1.Source                                                      | The index of the source vertex
Field       | Z0.Edge`1.Target                                                      | The index of the target vertex
Type        | Z0.Edge`2                                                             | Defines a weighted edge, parameterized by the vertex index type and the weight type
Field       | Z0.Edge`2.Source                                                      | The index of the source vertex
Field       | Z0.Edge`2.Target                                                      | The index of the target vertex
Field       | Z0.Edge`2.Weight                                                      | The weight given to the edge
Method      | Z0.Edge`2.op_Implicit(Z0.Edge{`0,`1})~Z0.Edge{`0}                     | Sheds the associated weight to form a weight-free edge
Method      | Z0.Edge`2.op_Implicit(System.ValueTuple{`0,`0,`1})~Z0.Edge{`0,`1}     | Constructs an edge from a 3-tuple
Type        | Z0.Graph                                                              | Defines the primary API surface for manipulated graphs            and related elements
Method      | Z0.Graph.define``2(System.Span{Z0.Vertex{``0,``1}},System.Collections.Generic.IEnumerable{Z0.Edge{``0}})| Creates a graph from supplied vertices and edges and assumes the vertices are already appropriately sorted
Method      | Z0.Graph.define``1(System.Span{Z0.Vertex{``0}},System.Collections.Generic.IEnumerable{Z0.Edge{``0}})| Creates a graph from supplied vertices and edges
Method      | Z0.Graph.edge``1(``0,``0)                                             | Defines an edge from an index-identified source to an index identified target
Method      | Z0.Graph.edge``2(``0,``0,``1)                                         | Defines a weighted edge from an index-identified source to an index identified target
Method      | Z0.Graph.connect``2(Z0.Vertex{``0,``1}@,Z0.Vertex{``0,``1}@)          | Connects a source vertex to a target vertex
Method      | Z0.Graph.connect``1(Z0.Vertex{``0}@,Z0.Vertex{``0}@)                  | Connects a source vertex to a target vertex
Method      | Z0.Graph.vertex``1(``0)                                               | Creates a vertex without payload
Method      | Z0.Graph.vertices``1(System.Int32)                                    | Defines a vertex sequence with a specified length
Method      | Z0.Graph.vertices``2(``0,``1[])                                       | Defines a vertex with payload for each source item
Method      | Z0.Graph.vertex``2(``0,``1)                                           | Creates a vertex with payload
Method      | Z0.Graph.incoming``1(Z0.Graph{``0},``0)                               | Finds the edges in a graph that target an identified vertex
Method      | Z0.Graph.outgoing``1(Z0.Graph{``0},``0)                               | Finds the edges in a graph that emit from an identified vertex
Method      | Z0.Graph.format``1(Z0.Graph{``0},System.String)                       | Renders a graph using basic graphviz format
Method      | Z0.XGraph.Connect``2(Z0.Vertex{``0,``1},Z0.Vertex{``0,``1})           | Produces an edge that connects a source vertex to a target vertex
Method      | Z0.XGraph.Connect``1(Z0.Vertex{``0},Z0.Vertex{``0})                   | Produces an edge that connects a source vertex to a target vertex
Method      | Z0.XGraph.Format``1(Z0.Graph{``0},System.String)                      | Renders a graph using basic graphviz format
Method      | Z0.XGraph.Incoming``1(Z0.Graph{``0},``0)                              | Finds the edges in a graph that target an identified vertex
Method      | Z0.XGraph.Outgoing``1(Z0.Graph{``0},``0)                              | Finds the edges in a graph that emit from an identified vertex
Method      | Z0.Graph`1.Sources(`0)                                                | Retrieves the indices of a targets' source vertices
Method      | Z0.Graph`1.Targets(`0)                                                | Retrieves the indices of a sources' target vertices
Method      | Z0.Graph`1.Vertex(`0)                                                 | Looks up a vertex based on its index
Method      | Z0.Graph`1.Edge(System.Int32)                                         | Looks up an edge based on its index
Property    | Z0.Graph`1.Item(`0)                                                   | Looks up a vertex based on its index
Property    | Z0.Graph`1.EdgeCount                                                  | Specifies the edges declared by the graph
Property    | Z0.Graph`1.VertexCount                                                | Specifies the number of vertices declared by the graph
Method      | Z0.Graph`1.InDegree(`0)                                               | Computes the in-degree of a vertex; i.e. the count of incoming vertices
Method      | Z0.Graph`1.OutDegree(`0)                                              | Computes the out-degree of a vertex; i.e. the count of outgoing vertices
Method      | Z0.Graph`1.IsIsolated(`0)                                             | Determines whether a vertex is disconnected from the graph
Method      | Z0.Graph`1.IsSink(`0)                                                 | Determines whether the vertex is a sink, i.e. has no outgoing edges
Method      | Z0.Graph`1.IsSource(`0)                                               | Determines whether the vertex is a source, i.e. has only outgoing edges
Method      | Z0.Graph`1.Traverse(`0,System.Action{`0},`0)                          | Traverses the graph until a sink is reached, a cycle is  detected,             or an optionally-specified vertex is reached
Method      | Z0.Graph`1.Path(`0,`0)                                                | Computes the path from a source vertex to a sink, a specified endpoint or when a cycle is detected
Type        | Z0.Graph`2                                                            | Defines a graph in which data may be associated with each node
Property    | Z0.Graph`2.EdgeCount                                                  | Specifies the edges declared by the graph
Property    | Z0.Graph`2.VertexCount                                                | Specifies the number of vertices declared by the graph
Method      | Z0.Graph`2.Vertex(`0)                                                 | Looks up a vertex based on its index
Method      | Z0.Graph`2.Edge(System.Int32)                                         | Looks up an edge based on its index
Property    | Z0.Graph`2.Item(`0)                                                   | Looks up a vertex based on its index
Type        | Z0.Graph`3                                                            | Defines a graph in which data may be associated with each node and edges are weighted
Property    | Z0.Graph`3.EdgeCount                                                  | Specifies the edges declared by the graph
Property    | Z0.Graph`3.VertexCount                                                | Specifies the number of vertices declared by the graph
Method      | Z0.Graph`3.Vertex(`0)                                                 | Looks up a vertex based on its index
Method      | Z0.Graph`3.Edge(System.Int32)                                         | Looks up an edge based on its index
Property    | Z0.Graph`3.Item(`0)                                                   | Looks up a vertex based on its index
Field       | Z0.NodeIndex`1.SourceIndex                                            | Correlates sources with their targets
Field       | Z0.NodeIndex`1.TargetIndex                                            | Correlates targets with their sources
Method      | Z0.NodeIndex`1.Sources(`0)                                            | Retrieves the indices of a targets' source vertices
Method      | Z0.NodeIndex`1.Targets(`0)                                            | Retrieves the indices of a sources' target vertices
Type        | Z0.Vertex`1                                                           | Defines a vertex within a graph
Field       | Z0.Vertex`1.Index                                                     | The index of the vertex that uniquely identifies it within a graph
Type        | Z0.Vertex`2                                                           | Defines a vertex to which data may be attached
Field       | Z0.Vertex`2.Index                                                     | The index of the vertex that uniquely identifies it within a graph
Field       | Z0.Vertex`2.Data                                                      | The vertex payload
Method      | Z0.Vertex`2.op_Implicit(Z0.Vertex{`0,`1}@)~Z0.Vertex{`0}              | Sheds the associated data to form a payload-free vertex
Type        | Z0.Ratio`1                                                            | Defines a ratio between two values, a measure that indicates how many times the first number contains the second
Field       | Z0.Ratio`1.A                                                          | The left value
Field       | Z0.Ratio`1.B                                                          | The right value
