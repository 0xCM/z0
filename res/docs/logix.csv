Method      | Z0.Logix.LogicEngine.eval(Z0.Logix.ILogicExpr)                        | Evalutates an untyped expression
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.ILogicExpr{``0})                | Evalutates a typed logic expression
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IExpr{``0})                     | Evalutates a typed scalar expression
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IComparisonExpr{``0})           | Evaluates a comparison expression, returning literal expression over the comparison type            and the interpretation of this literal is type-dependent
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IComparisonExpr{System.Runtime.Intrinsics.Vector128{``0}})| Evaluates a comparison expression over 128-bit intrinsic vectors
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IComparisonExpr{System.Runtime.Intrinsics.Vector256{``0}})| Evaluates a comparison expression over 256-bit intrinsic vectors
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IComparisonPredExpr{``0})       | Evaluates a comparison predicate, returning an enabled bit if the comparison succeeds and             a disabled bit otherwise
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IArithmeticExpr{``0})           | Evalutates a typed scalar expression
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IExpr{System.Runtime.Intrinsics.Vector128{``0}})| Evalutates a typed 128-bit intrinsic expression
Method      | Z0.Logix.LogicEngine.eval``1(Z0.Logix.IExpr{System.Runtime.Intrinsics.Vector256{``0}})| Evalutates a typed 256-bit intrinsic expression
Method      | Z0.Logix.LogicEngine.satisfied(Z0.Logix.ComparisonExpr,Z0.bit,Z0.bit) | Returns an enabled bit if the equality expression is satisfied with             specified variable values and a disabled bit otherwise
Method      | Z0.Logix.LogicEngine.satisfied``1(Z0.Logix.ComparisonExpr{``0},``0,``0)| Returns an enabled bit if the equality expression is satisfied with             specified variable values and a disabled bit otherwise
Method      | Z0.Logix.LogicEngine.satisfied``1(Z0.Logix.ComparisonExpr{System.Runtime.Intrinsics.Vector128{``0}},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Returns an enabled bit if the equality expression is satisfied with             specified variable values and a disabled bit otherwise
Method      | Z0.Logix.LogicEngine.satisfied``1(Z0.Logix.ComparisonExpr{System.Runtime.Intrinsics.Vector256{``0}},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Returns an enabled bit if the equality expression is satisfied with             specified variable values and a disabled bit otherwise
Method      | Z0.Logix.LogicEngine.equal(Z0.Logix.VariedLogicExpr,Z0.Logix.VariedLogicExpr)| Determines by exhaustion whether the left and right operands are equal
Method      | Z0.Logix.LogicExprEval.eval(Z0.Logix.ILogicOpExpr)                    | Evaluates a logical operator expression
Type        | Z0.Logix.IComparisonExpr                                              | Characterizes a claim that two variable-dependent comparison expressions are equivalent
Property    | Z0.Logix.IComparisonExpr.Lhs                                          | The left expression
Property    | Z0.Logix.IComparisonExpr.Rhs                                          | The right expression
Property    | Z0.Logix.IComparisonExpr.Vars                                         | Variables upon which the expression depends
Type        | Z0.Logix.IComparisonExpr`1                                            | Characterizes a claim that two variable-dependent typed comparison expressions are equivalent
Property    | Z0.Logix.IComparisonExpr`1.LeftArg                                    | The left expression
Property    | Z0.Logix.IComparisonExpr`1.RightArg                                   | The right expression
Property    | Z0.Logix.IComparisonExpr`1.Vars                                       | Variables upon which the expression depends
Property    | Z0.Logix.IComparisonExpr`1.ComparisonKind                             | The sort of comparison to be applied
Type        | Z0.Logix.IComparisonPredExpr`1                                        | Characterizes a comparison expression that evaluates as a predicate where a single bit, or bitvector,             characterizes the evaluation result. This is in contradistinction to the more general typed comparison expression            where the result is predicated on the type and may be scalar/vector/etc in nature
Type        | Z0.Logix.IExpr                                                        | Characterizes an expression
Method      | Z0.Logix.IExpr.Format                                                 | Renders the expression in canonical form
Type        | Z0.Logix.IExpr`1                                                      | Characterizes an parametric expression
Type        | Z0.Logix.ILogicExpr                                                   | Characterizes a logicical expression over a bit
Type        | Z0.Logix.ILogicExpr`1                                                 | Characterizes a typed expression that admits logical evaluation
Type        | Z0.Logix.IOperatorExpr                                                | Characterizes an expression defined via an operator
Type        | Z0.Logix.IOperatorExpr`1                                              | Characterizes a parametric operator that varies over operand type
Type        | Z0.Logix.IOperatorExpr`2                                              | Characterizes a parametric operator that varies over operator kind and operand type
Property    | Z0.Logix.IOperatorExpr`2.OpKind                                       | Specifies the class to which the operator belongs
Type        | Z0.Logix.IBinaryOpExpr`1                                              | Characterizes a binary operator parametrized by expression type
Type        | Z0.Logix.IUnaryOpExpr`1                                               | Characterizes a unary operator parametrized by an expression type
Property    | Z0.Logix.IUnaryOpExpr`1.Arg                                           | The operand
Type        | Z0.Logix.ITernaryOpExpr`1                                             | Characterizes a ternary operator parametrized by expression type
Type        | Z0.Logix.IFormulaExpr                                                 | Characterizes a formula which, by definition, is a named expression
Property    | Z0.Logix.IFormulaExpr.Name                                            | The formula name, unique with respect to some context
Property    | Z0.Logix.IFormulaExpr.Encoding                                        | The defining expression
Type        | Z0.Logix.IFormulaExpr`1                                               | Characterizes a typed formula, a named typed expression
Property    | Z0.Logix.IFormulaExpr`1.Encoding                                      | The defining expression
Property    | Z0.Logix.ILiteralExpr`1.Value                                         | The value of the literal
Type        | Z0.Logix.ILogicOpExpr                                                 | Characterizes an operator reified as a boolean function
Type        | Z0.Logix.ILogicOpExpr`2                                               | Characterizes a logic operator that varies by operator kind and is evaluated in the context of a parametric type
Property    | Z0.Logix.ILazySeqExpr`1.Terms                                         | The terms in the sequence that are evaluated on-demand
Type        | Z0.Logix.ISeqExpr`1                                                   | Characterizes a finite sequence of terms
Property    | Z0.Logix.ISeqExpr`1.Terms                                             | The terms in the sequence
Property    | Z0.Logix.ISeqExpr`1.Item(System.Int32)                                | Sequence value accessor/manipulator
Property    | Z0.Logix.ISeqExpr`1.Length                                            | The number of terms in the sequence
Property    | Z0.Logix.IShiftOpExpr`1.Subject                                       | The thing to shift
Type        | Z0.Logix.ITernaryBitwiseOpExpr`1                                      | Characterizes a typed ternary bitwise operator
Type        | Z0.Logix.IVarExpr                                                     | Characterizes a variable
Property    | Z0.Logix.IVarExpr.Name                                                | The name of the variable
Type        | Z0.Logix.IVarExpr`1                                                   | Characterizes a typed variable
Method      | Z0.Logix.IVarExpr`1.Set(Z0.Logix.IExpr{`0})                           | Updates the variable
Method      | Z0.Logix.IVarExpr`1.Set(`0)                                           | Updates the expression value
Property    | Z0.Logix.IVarExpr`1.Value                                             | The current value of the variable
Type        | Z0.Logix.ILogicVarExpr                                                | Characterizes a logical variable
Method      | Z0.Logix.ILogicVarExpr.Set(Z0.Logix.ILogicExpr)                       | Updates the variable
Method      | Z0.Logix.ILogicVarExpr.Set(Z0.bit)                                    | Updates the expression value
Property    | Z0.Logix.ILogicVarExpr.Value                                          | The current value of the variable
Type        | Z0.Logix.ILogicVarExpr`1                                              | Characterizes a logical variable that also carries type information
Method      | Z0.Logix.ILogicVarExpr`1.Set(Z0.Logix.ILogicExpr{`0})                 | Updates the variable
Property    | Z0.Logix.ILogicVarExpr`1.Value                                        | The current value of the variable
Type        | Z0.Logix.IVariedExpr                                                  | Distinguishes varied expressions from other sorts of expressions
Type        | Z0.Logix.IVariedExpr`1                                                | Characterizes an expression that varies over a typed expression
Type        | Z0.Logix.IVariedLogicExpr                                             | Characterizes an expression that depends on a boolean variable
Type        | Z0.Logix.IVariedLogicExpr`1                                           | Characterizes an expression that depends on a boolean variable but which            also carries type information
Method      | Z0.Logix.ArithmeticSpec.unary``1(Z0.UnaryArithmeticKind,Z0.Logix.IExpr{``0})| Defines an arithmetic unary expression
Method      | Z0.Logix.ArithmeticSpec.unary``1(Z0.UnaryArithmeticKind,``0)          | Defines an arithmetic unary expression over a literal operand
Method      | Z0.Logix.ArithmeticSpec.binary``1(Z0.BinaryArithmeticKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a binary arithmetic expression
Method      | Z0.Logix.ArithmeticSpec.binary``1(Z0.BinaryArithmeticKind,``0,``0)    | Defines a binary arithmetic expression over literal operands
Method      | Z0.Logix.ArithmeticSpec.inc``1(Z0.Logix.IExpr{``0})                   | Defines a unary increment expression
Method      | Z0.Logix.ArithmeticSpec.inc``1(``0)                                   | Defines a unary increment expression with a literal operand
Method      | Z0.Logix.ArithmeticSpec.dec``1(Z0.Logix.IExpr{``0})                   | Defines a unary decrement expression
Method      | Z0.Logix.ArithmeticSpec.dec``1(``0)                                   | Defines a decrement increment expression with a literal operand
Method      | Z0.Logix.ArithmeticSpec.negate``1(Z0.Logix.IExpr{``0})                | Defines a unary decrement expression
Method      | Z0.Logix.ArithmeticSpec.negate``1(``0)                                | Defines a decrement increment expression with a literal operand
Method      | Z0.Logix.ArithmeticSpec.add``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a binary addition expression
Method      | Z0.Logix.ArithmeticSpec.add``1(``0,``0)                               | Defines a binary addition expression over literal operands
Method      | Z0.Logix.ArithmeticSpec.sub``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a binary subtraction expression
Method      | Z0.Logix.ArithmeticSpec.sub``1(``0,``0)                               | Defines a binary subtraction expression over literal operands
Method      | Z0.Logix.PredicateSpec.compare``1(Z0.BinaryComparisonKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a typed comparison predicate over operand expressions
Method      | Z0.Logix.PredicateSpec.compare``1(Z0.BinaryComparisonKind,``0,``0)    | Defines a typed comparison predicate over literal operands
Method      | Z0.Logix.PredicateSpec.equals``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines an equality comparison expression
Method      | Z0.Logix.PredicateSpec.equals``1(``0,``0)                             | Defines an equality comparison expression over literal operands
Method      | Z0.Logix.PredicateSpec.lt``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0}) | Defines a less-than comparison expression
Method      | Z0.Logix.PredicateSpec.lt``1(``0,``0)                                 | Defines a less-than comparison expression over literal operands
Method      | Z0.Logix.PredicateSpec.lteq``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a less-than or equal comparison expression
Method      | Z0.Logix.PredicateSpec.lteq``1(``0,``0)                               | Defines a less-than or equal comparison expression over literal operands
Method      | Z0.Logix.PredicateSpec.gt``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0}) | Defines a greater-than comparison expression
Method      | Z0.Logix.PredicateSpec.gt``1(``0,``0)                                 | Defines a greater-than comparison expression over literal operands
Method      | Z0.Logix.PredicateSpec.gteq``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a greater-than or equal comparison expression
Method      | Z0.Logix.PredicateSpec.gteq``1(``0,``0)                               | Defines a greater-than or equal comparison expression over literal operands
Type        | Z0.Logix.BitLogicSpec                                                 | Defines factories that create structures for logic over a single bit
Method      | Z0.Logix.BitLogicSpec.bitseq(Z0.bit[])                                | Defines a bit sequence expression with an arbitrary number of terms
Method      | Z0.Logix.BitLogicSpec.bitseq``1(``0,Z0.bit[])                         | Defines a bit sequence expression of natural length
Method      | Z0.Logix.BitLogicSpec.not(Z0.Logix.ILogicExpr)                        | Defines a logical not operator over a logic expression
Method      | Z0.Logix.BitLogicSpec.not(Z0.bit)                                     | Defines a logical not operator over a bit literal
Method      | Z0.Logix.BitLogicSpec.not``1(Z0.Logix.ILogicExpr{``0})                | Defines a logical not operator over a typed logic expression
Method      | Z0.Logix.BitLogicSpec.not``1(Z0.bit)                                  | Defines a logical not operator over a typed literal
Method      | Z0.Logix.BitLogicSpec.and(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)    | Defines a logical And operator over expression operands
Method      | Z0.Logix.BitLogicSpec.and(Z0.bit,Z0.bit)                              | Defines a logical And operator over bit literal operands
Method      | Z0.Logix.BitLogicSpec.and``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical And operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.and``1(Z0.bit,Z0.bit)                           | Defines a logical And operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.nand(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)   | Defines a logical Nand operator over expression operands
Method      | Z0.Logix.BitLogicSpec.nand(Z0.bit,Z0.bit)                             | Defines a logical Nand operator over bit literal operands
Method      | Z0.Logix.BitLogicSpec.nand``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Nand operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.nand``1(Z0.bit,Z0.bit)                          | Defines a logical Nand operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.or(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)     | Defines a logical Or operator over expression operands
Method      | Z0.Logix.BitLogicSpec.or(Z0.bit,Z0.bit)                               | Defines a logical Or operator over literal operands
Method      | Z0.Logix.BitLogicSpec.or``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Or operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.or``1(Z0.bit,Z0.bit)                            | Defines a logical Or operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.nor(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)    | Defines a nor operator over expression operands
Method      | Z0.Logix.BitLogicSpec.nor``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Nor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.nor(Z0.bit,Z0.bit)                              | Defines a nor operator over literal operands
Method      | Z0.Logix.BitLogicSpec.nor``1(Z0.bit,Z0.bit)                           | Defines a logical Nor operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.xor(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)    | Defines a logical Xor operator over expression operands
Method      | Z0.Logix.BitLogicSpec.xor(Z0.bit,Z0.bit)                              | Defines a logical Xor operator over literal operands
Method      | Z0.Logix.BitLogicSpec.xor``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Xor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.xor``1(Z0.bit,Z0.bit)                           | Defines a logical Xor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.xnor(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)   | Defines an xnor operator over expression operands
Method      | Z0.Logix.BitLogicSpec.xnor(Z0.bit,Z0.bit)                             | Defines an xnor operator over literal operands
Method      | Z0.Logix.BitLogicSpec.xnor``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Xnor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.xnor``1(Z0.bit,Z0.bit)                          | Defines a logical Xnor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.left(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)   | Defines a left projection operator over expression operands
Method      | Z0.Logix.BitLogicSpec.left``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a logical Xor operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.left(Z0.bit,Z0.bit)                             | Defines a left projection over literal operands
Method      | Z0.Logix.BitLogicSpec.left``1(Z0.bit,Z0.bit)                          | Defines a left projection operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.right(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)  | Defines a right projection operator over expression operands
Method      | Z0.Logix.BitLogicSpec.right(Z0.bit,Z0.bit)                            | Defines a right projection over literal operands
Method      | Z0.Logix.BitLogicSpec.right``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a right projection operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.right``1(Z0.bit,Z0.bit)                         | Defines a right projection operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.lnot(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)   | Defines a left negation operator over expression operands
Method      | Z0.Logix.BitLogicSpec.lnot(Z0.bit,Z0.bit)                             | Defines a left negation operator over literal operands
Method      | Z0.Logix.BitLogicSpec.lnot``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a left negation operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.lnot``1(Z0.bit,Z0.bit)                          | Defines a left negation operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.rnot(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)   | Defines a right negation operator over expression operands
Method      | Z0.Logix.BitLogicSpec.rnot(Z0.bit,Z0.bit)                             | Defines a right negation operator over literal operands
Method      | Z0.Logix.BitLogicSpec.rnot``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a right negation operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.rnot``1(Z0.bit,Z0.bit)                          | Defines a right negation operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.imply(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)  | Defines a material implication operator over expression operands
Method      | Z0.Logix.BitLogicSpec.imply(Z0.bit,Z0.bit)                            | Defines a material implication operator over literal operands
Method      | Z0.Logix.BitLogicSpec.imply``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a material implication operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.imply``1(Z0.bit,Z0.bit)                         | Defines a material implication operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.notimply(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)| Defines a material nonimplication operator over expression operands
Method      | Z0.Logix.BitLogicSpec.notimply(Z0.bit,Z0.bit)                         | Defines a material nonimplication operator over literal operands
Method      | Z0.Logix.BitLogicSpec.notimply``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a material nonimplication operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.notimply``1(Z0.bit,Z0.bit)                      | Defines a material nonimplication operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.cimply(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr) | Defines a converse implication operator over expression operands
Method      | Z0.Logix.BitLogicSpec.cimply(Z0.bit,Z0.bit)                           | Defines a converse implication operator over literal operands
Method      | Z0.Logix.BitLogicSpec.cimply``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a converse implication operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.cimply``1(Z0.bit,Z0.bit)                        | Defines a converse implication operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.cnotimply(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)| Defines a converse nonimplication operator over expression operands
Method      | Z0.Logix.BitLogicSpec.cnotimply(Z0.bit,Z0.bit)                        | Defines a converse nonimplication operator over literal operands
Method      | Z0.Logix.BitLogicSpec.cnotimply``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a converse nonimplication operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.cnotimply``1(Z0.bit,Z0.bit)                     | Defines a converse nonimplication operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.select(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)| Defines a ternary select operator over expression operands
Method      | Z0.Logix.BitLogicSpec.select(Z0.bit,Z0.bit,Z0.bit)                    | Defines a ternary select operator over bit literal operands
Method      | Z0.Logix.BitLogicSpec.select``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a ternary select operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N1)                                 | Computes all bit sequence expressions of length 1
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N2)                                 | Computes all bit sequence expressions of length 2
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N3)                                 | Computes all bit sequence expressions of length 3
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N4)                                 | Computes all bit sequence expressions of length 4
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N5)                                 | Computes all bit sequence expressions of length 5
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N6)                                 | Computes all bit sequence expressions of length 6
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N7)                                 | Computes all bit sequence expressions of length 7
Method      | Z0.Logix.BitLogicSpec.bitcombo(Z0.N8)                                 | Computes all bit sequence expressions of length 8
Method      | Z0.Logix.BitLogicSpec.compare(Z0.BinaryComparisonKind,Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr,Z0.Logix.ILogicVarExpr[])| Defines comparison expression
Method      | Z0.Logix.BitLogicSpec.compare``1(Z0.BinaryComparisonKind,Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0},Z0.Logix.IVarExpr{``0}[])| Defines comparison expression
Method      | Z0.Logix.BitLogicSpec.equals(Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr,Z0.Logix.ILogicVarExpr[])| Defines an equality comparison expression
Method      | Z0.Logix.BitLogicSpec.equals``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0},Z0.Logix.IVarExpr{``0}[])| Defines an equality comparison expression
Method      | Z0.Logix.BitLogicSpec.true                                            | Creates a logical TRUE expression, i.e. an expression that is always true
Method      | Z0.Logix.BitLogicSpec.true``1                                         | Creates a logical TRUE expression, i.e. an expression that is always true
Method      | Z0.Logix.BitLogicSpec.false                                           | Creates a logical FALSE expression, i.e. an expression that is always false
Method      | Z0.Logix.BitLogicSpec.false``1                                        | Creates a logical FALSE expression, i.e. an expression that is always false
Method      | Z0.Logix.BitLogicSpec.literal(Z0.bit)                                 | Creates a bit literal expression
Method      | Z0.Logix.BitLogicSpec.literal``1(Z0.bit)                              | Creates a typed logic literal
Method      | Z0.Logix.BitLogicSpec.identity(Z0.Logix.ILogicExpr)                   | Defines a logical identity expression
Method      | Z0.Logix.BitLogicSpec.identity``1(Z0.Logix.ILogicExpr{``0})           | Defines a typed logical identity expression
Method      | Z0.Logix.BitLogicSpec.unary(Z0.UnaryBitLogic,Z0.Logix.ILogicExpr)     | Defines a unary logic operator over an expression
Method      | Z0.Logix.BitLogicSpec.unary``1(Z0.UnaryBitLogic,Z0.Logix.ILogicExpr{``0})| Defines a unary logic operator over an expression
Method      | Z0.Logix.BitLogicSpec.unary``1(Z0.UnaryBitLogic,Z0.bit)               | Defines a unary logic operator over a typed literal operand
Method      | Z0.Logix.BitLogicSpec.unary(Z0.UnaryBitLogic,Z0.bit)                  | Defines a unary logic operator over a literal
Method      | Z0.Logix.BitLogicSpec.binary(Z0.BinaryLogicKind,Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)| Defines a binary logic operator over expression operands
Method      | Z0.Logix.BitLogicSpec.binary``1(Z0.BinaryLogicKind,Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a binary logic operator over typed expression operands
Method      | Z0.Logix.BitLogicSpec.binary(Z0.BinaryLogicKind,Z0.bit,Z0.bit)        | Defines a binary logic operator over bit literal operands
Method      | Z0.Logix.BitLogicSpec.binary``1(Z0.BinaryLogicKind,Z0.bit,Z0.bit)     | Defines a binary logic operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.ternary(Z0.TernaryBitLogic,Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr,Z0.Logix.ILogicExpr)| Defines a ternary logic operator over expression operands
Method      | Z0.Logix.BitLogicSpec.ternary``1(Z0.TernaryBitLogic,Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0},Z0.Logix.ILogicExpr{``0})| Defines a ternary logic operator over expression operands
Method      | Z0.Logix.BitLogicSpec.ternary(Z0.TernaryBitLogic,Z0.bit,Z0.bit,Z0.bit)| Defines a ternary logic operator over bit literal operands
Method      | Z0.Logix.BitLogicSpec.ternary``1(Z0.TernaryBitLogic,Z0.bit,Z0.bit,Z0.bit)| Defines a ternary logic operator over typed literal operands
Method      | Z0.Logix.BitLogicSpec.lvar(System.String,Z0.bit)                      | Defines a bit variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvar(System.Char,Z0.bit)                        | Defines a bit variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvar(System.UInt32,Z0.bit)                      | Defines a bit variable expression initialized to a literal value            and the variable name is defined by an integer
Method      | Z0.Logix.BitLogicSpec.lvar``1(System.String,Z0.bit)                   | Defines a typed logic variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvar``1(System.String,Z0.Logix.ILogicExpr{``0}) | Defines a typed logic variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvar``1(System.Char,Z0.bit)                     | Defines a typed logic variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvar``1(System.UInt32,Z0.bit)                   | Defines a typed logic variable expression initialized to a literal value
Method      | Z0.Logix.BitLogicSpec.lvars(System.Int32)                             | Defines a specified number n of logic variable expressions where each variable is respectively named 0,..., n - 1
Method      | Z0.Logix.BitLogicSpec.lvars``1(System.Int32)                          | Defines a specified number n of typed logic variable expressions where each variable is respectively named 0,..., n - 1
Method      | Z0.Logix.BitLogicSpec.varied(Z0.Logix.ILogicExpr,Z0.Logix.LogicVariable[])| Creates a varied expression predicated on a specified variable sequence
Method      | Z0.Logix.BitLogicSpec.varied``1(Z0.Logix.ILogicExpr{``0},Z0.Logix.LogicVariable{``0}[])| Creates a varied expression predicated on a specified variable sequence
Method      | Z0.Logix.ExprX.Set``1(Z0.Logix.IVarExpr{``0},Z0.IPolyrand)            | Assigns a random value to a variable and returns that value to the caller
Method      | Z0.Logix.ExprX.Set``1(Z0.Logix.IVarExpr{``0},Z0.IPolyrand,``0,``0)    | Assigns a random value to a variable and returns that value to the caller
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N1,``0})                | Returns the source expression variable at index 0
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N1,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N1,``0},``0)            | Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N2,``0})                | Returns the source expression variable at index 0
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N2,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N2,``0},``0)            | Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N2,``0})                | Returns the source expression variable at index 1
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N2,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 1, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N2,``0},``0)            | Returns the source expression variable at index 1, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N3,``0})                | Returns the source expression variable at index 0
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N3,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var0``1(Z0.Logix.VariedExpr{Z0.N3,``0},``0)            | Returns the source expression variable at index 0, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N3,``0})                | Returns the source expression variable at index 1
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N3,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 1, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var1``1(Z0.Logix.VariedExpr{Z0.N3,``0},``0)            | Returns the source expression variable at index 1, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var2``1(Z0.Logix.VariedExpr{Z0.N3,``0})                | Returns the source expression variable at index 2
Method      | Z0.Logix.ExprX.Var2``1(Z0.Logix.VariedExpr{Z0.N3,``0},Z0.Logix.IExpr{``0})| Returns the source expression variable at index 2, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.Var2``1(Z0.Logix.VariedExpr{Z0.N3,``0},``0)            | Returns the source expression variable at index 2, optionally assigned to supplied value
Method      | Z0.Logix.ExprX.ToLogicSeq(Z0.BitString)                               | Transforms a bitstring into a literal logic sequence
Method      | Z0.Logix.ExprX.ToLogicSeq``1(Z0.BitString,``0)                        | Transforms a bitstring into a literal logic sequence of natural length
Property    | Z0.Logix.LogicIdentities.AndOverOr                                    | Specifies the identity and(a,or(b,c)) == or(and(a,b), and(a,c))
Property    | Z0.Logix.LogicIdentities.AndOverXOr                                   | Specifies the identity and(a,xor(b,c)) == xor(and(a,b), and(a,c))
Property    | Z0.Logix.LogicIdentities.OrOverAnd                                    | Specifies the identity or(a,and(b,c)) == and(or(a,b), or(a,c))
Property    | Z0.Logix.LogicIdentities.NotOverAnd                                   | Specifies the identity not(and(a,b)) == or(not(x),not(y))
Property    | Z0.Logix.LogicIdentities.NotOverXOr                                   | Specifies the identity not(xor(a,b)) == xor(not(x),y)
Method      | Z0.Logix.TypedIdentities.AndOverOr``1                                 | Specifies the identity and(a,or(b,c)) == or(and(a,b), and(a,c))
Method      | Z0.Logix.TypedIdentities.AndOverXOr``1                                | Specifies the identity and(a,xor(b,c)) == xor(and(a,b), and(a,c))
Method      | Z0.Logix.TypedIdentities.OrOverAnd``1                                 | Specifies the identity or(a,and(b,c)) == and(or(a,b), or(a,c))
Method      | Z0.Logix.TypedIdentities.NotOverAnd``1                                | Specifies the identity not(and(a,b)) == or(not(x),not(y))
Method      | Z0.Logix.TypedIdentities.NotOverXOr``1                                | Specifies the identity not(xor(a,b)) == xor(not(x),y)
Method      | Z0.Logix.TypedLogicSpec.true``1                                       | Defines a typed literal where all bits are on
Method      | Z0.Logix.TypedLogicSpec.true``1(Z0.N128)                              | Defines a 128-bit cpu vector where all bits are on
Method      | Z0.Logix.TypedLogicSpec.true``1(Z0.N256)                              | Defines a 128-bit cpu vector where all bits are on
Method      | Z0.Logix.TypedLogicSpec.false``1                                      | Defines a typed literal where all bits are off
Method      | Z0.Logix.TypedLogicSpec.and``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise and expression
Method      | Z0.Logix.TypedLogicSpec.and``1(``0,``0)                               | Defines a bitwise and expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.or``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise or expression
Method      | Z0.Logix.TypedLogicSpec.or``1(``0,``0)                                | Defines a bitwise or expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.xor``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise xor expression
Method      | Z0.Logix.TypedLogicSpec.xor``1(``0,``0)                               | Defines a bitwise xor expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.not``1(Z0.Logix.IExpr{``0})                   | Defines a a bitwise complement expression
Method      | Z0.Logix.TypedLogicSpec.not``1(``0)                                   | Defines a a bitwise complement expression with a literal operand
Method      | Z0.Logix.TypedLogicSpec.nand``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise NAND expression
Method      | Z0.Logix.TypedLogicSpec.nand``1(``0,``0)                              | Defines a bitwise NAND expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.nor``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise NOR expression
Method      | Z0.Logix.TypedLogicSpec.nor``1(``0,``0)                               | Defines a bitwise NOR expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.xnor``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a bitwise XNOR expression
Method      | Z0.Logix.TypedLogicSpec.xnor``1(``0,``0)                              | Defines a bitwise XNOR expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.literal``1(``0)                               | Creates a literal expression
Method      | Z0.Logix.TypedLogicSpec.unary``1(Z0.UnaryBitLogic,Z0.Logix.IExpr{``0})| Creates a bitwise unary expression
Method      | Z0.Logix.TypedLogicSpec.binary``1(Z0.BinaryLogicKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Creates a bitwise binary expression
Method      | Z0.Logix.TypedLogicSpec.binary``1(Z0.BinaryComparisonKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Creates a binary comparison expression
Method      | Z0.Logix.TypedLogicSpec.ternary``1(Z0.TernaryBitLogic,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Creates a bitwise ternary expression
Method      | Z0.Logix.TypedLogicSpec.rangexpr``1(``0,``0,System.Nullable{``0})     | Defines a scalar range expression
Method      | Z0.Logix.TypedLogicSpec.shift``1(Z0.BitShiftKind,Z0.Logix.IExpr{``0},System.Byte)| Creates a shift expression
Method      | Z0.Logix.TypedLogicSpec.shiftx``1(Z0.BitShiftKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{System.Byte})| Creates a shift expression
Method      | Z0.Logix.TypedLogicSpec.sll``1(Z0.Logix.IExpr{``0},System.Byte)       | Defines a bitwise sll expression
Method      | Z0.Logix.TypedLogicSpec.sll``1(``0,System.Byte)                       | Defines a bitwise sll expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.srl``1(Z0.Logix.IExpr{``0},System.Byte)       | Defines a bitwise srl expression
Method      | Z0.Logix.TypedLogicSpec.srl``1(``0,System.Byte)                       | Defines a bitwise srl expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.rotr``1(Z0.Logix.IExpr{``0},System.Byte)      | Defines a bitwise rotr expression
Method      | Z0.Logix.TypedLogicSpec.rotr``1(``0,System.Byte)                      | Defines a bitwise rotr expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.rotl``1(Z0.Logix.IExpr{``0},System.Byte)      | Defines a bitwise rotl expression
Method      | Z0.Logix.TypedLogicSpec.rotl``1(``0,System.Byte)                      | Defines a bitwise rotl expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.sll``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{System.Byte})| Defines a bitwise sll expression
Method      | Z0.Logix.TypedLogicSpec.sllx``1(``0,Z0.Logix.IExpr{System.Byte})      | Defines a bitwise sll expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.srl``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{System.Byte})| Defines a bitwise srl expression
Method      | Z0.Logix.TypedLogicSpec.srl``1(``0,Z0.Logix.IExpr{System.Byte})       | Defines a bitwise srl expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.rotr``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{System.Byte})| Defines a bitwise rotr expression
Method      | Z0.Logix.TypedLogicSpec.rotr``1(``0,Z0.Logix.IExpr{System.Byte})      | Defines a bitwise rotr expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.rotl``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{System.Byte})| Defines a bitwise rotl expression
Method      | Z0.Logix.TypedLogicSpec.rotl``1(``0,Z0.Logix.IExpr{System.Byte})      | Defines a bitwise rotl expression with literal operands
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.String,Z0.Logix.IExpr{``0})| Defines a variable expression
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.Char,Z0.Logix.IExpr{``0})  | Defines a variable expression
Method      | Z0.Logix.TypedLogicSpec.variable``1(Z0.AsciLetterLo,Z0.Logix.IExpr{``0})| Defines a variable expression
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.UInt32,Z0.Logix.IExpr{``0})| Defines a bit variable expression where the variable name is defined by an integer
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.String,``0)                | Defines a variable expression with an initial value specified by a literal
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.Char,``0)                  | Defines a variable expression with an initial value specified by a literal
Method      | Z0.Logix.TypedLogicSpec.variable``1(Z0.AsciLetterLo,``0)              | Defines a variable expression with an initial value specified by a literal
Method      | Z0.Logix.TypedLogicSpec.variable``1(System.UInt32,``0)                | Defines a variable expression where the variable name is defined by an integer and             an initial value is specified by a literal
Method      | Z0.Logix.TypedLogicSpec.varied``1(Z0.Logix.IExpr{``0},Z0.Logix.VariableExpr{``0}[])| Creates a varied expression predicated on a typed variable sequence
Method      | Z0.Logix.TypedLogicSpec.varied``2(``0,Z0.Logix.IExpr{``1},Z0.Logix.IVarExpr{``1}[])| Creates a varied expression predicated on a typed variable sequence of natural length
Method      | Z0.Logix.TypedLogicSpec.varied``1(Z0.N1,Z0.Logix.IExpr{``0},Z0.Logix.IVarExpr{``0})| Defines a varied expression of 1 variable
Method      | Z0.Logix.TypedLogicSpec.varied``1(Z0.N2,Z0.Logix.IExpr{``0},Z0.Logix.IVarExpr{``0},Z0.Logix.IVarExpr{``0})| Defines a varied expression of 2 variables
Method      | Z0.Logix.TypedLogicSpec.varied``1(Z0.N3,Z0.Logix.IExpr{``0},Z0.Logix.IVarExpr{``0},Z0.Logix.IVarExpr{``0},Z0.Logix.IVarExpr{``0})| Defines a varied expression of 3 variables
Method      | Z0.Logix.TypedLogicSpec.equals``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0},Z0.Logix.IVarExpr{``0}[])| Defines a typed test expression
Type        | Z0.Logix.TypedComparisonSpec                                          | Constructs type operator comparison expressions
Method      | Z0.Logix.TypedComparisonSpec.compare``1(Z0.BinaryComparisonKind,Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a comparison expression of specified kind over typed expressions
Method      | Z0.Logix.TypedComparisonSpec.compare``1(Z0.BinaryComparisonKind,``0,``0)| Defines a comparison expression of specified kind over literals
Method      | Z0.Logix.TypedComparisonSpec.equals``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines an equals operator expression
Method      | Z0.Logix.TypedComparisonSpec.equals``1(``0,``0)                       | Defines an equals operator expression over literal values
Method      | Z0.Logix.TypedComparisonSpec.neq``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a not equal operator expression
Method      | Z0.Logix.TypedComparisonSpec.neq``1(``0,``0)                          | Defines a not equal operator expression over literal values
Method      | Z0.Logix.TypedComparisonSpec.lt``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a less than operator expression
Method      | Z0.Logix.TypedComparisonSpec.lt``1(``0,``0)                           | Defines an less than operator expression over literal values
Method      | Z0.Logix.TypedComparisonSpec.lteq``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a less than or equal operator expression
Method      | Z0.Logix.TypedComparisonSpec.lteq``1(``0,``0)                         | Defines an less than or equal operator expression over literal values
Method      | Z0.Logix.TypedComparisonSpec.gt``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a greater than operator expression
Method      | Z0.Logix.TypedComparisonSpec.gt``1(``0,``0)                           | Defines greater than operator expression over literal values
Method      | Z0.Logix.TypedComparisonSpec.gteq``1(Z0.Logix.IExpr{``0},Z0.Logix.IExpr{``0})| Defines a greater than or equal operator expression
Method      | Z0.Logix.TypedComparisonSpec.gteq``1(``0,``0)                         | Defines a greater than or equal operator expression over literal values
Type        | Z0.Logix.BinaryArithmeticOpExpr`1                                     | Defines a typed binary arithmetic operator expression
Property    | Z0.Logix.BinaryArithmeticOpExpr`1.OpKind                              | The operator kind
Property    | Z0.Logix.BinaryArithmeticOpExpr`1.LeftArg                             | The left operand
Property    | Z0.Logix.BinaryArithmeticOpExpr`1.RightArg                            | The right operand
Method      | Z0.Logix.BinaryArithmeticOpExpr`1.Format                              | Renders the expression in canonical form
Type        | Z0.Logix.UnaryAritheticOpExpr`1                                       | Defines a typed unary arithmetic operator expression
Property    | Z0.Logix.UnaryAritheticOpExpr`1.OpKind                                | The operator kind
Property    | Z0.Logix.UnaryAritheticOpExpr`1.Arg                                   | The operand
Type        | Z0.Logix.BinaryBitwiseOpExpr`1                                        | Captures a binary bitwise operator along with with its operands
Property    | Z0.Logix.BinaryBitwiseOpExpr`1.OpKind                                 | The operator kind
Property    | Z0.Logix.BinaryBitwiseOpExpr`1.LeftArg                                | The left operand
Property    | Z0.Logix.BinaryBitwiseOpExpr`1.RightArg                               | The right operand
Method      | Z0.Logix.BinaryBitwiseOpExpr`1.Format                                 | Renders the expression in canonical form
Type        | Z0.Logix.ShiftOpExpr`1                                                | Defines a bitwise shift operator expression
Property    | Z0.Logix.ShiftOpExpr`1.OpKind                                         | The operator kind
Property    | Z0.Logix.ShiftOpExpr`1.Subject                                        | The operand
Property    | Z0.Logix.ShiftOpExpr`1.Offset                                         | The magnitude of the shift
Type        | Z0.Logix.TernaryBitwiseOpExpr`1                                       | Defines a typed ternary bitwise operator expression
Property    | Z0.Logix.TernaryBitwiseOpExpr`1.OpKind                                | The operator kind
Property    | Z0.Logix.TernaryBitwiseOpExpr`1.FirstArg                              | The first operand
Property    | Z0.Logix.TernaryBitwiseOpExpr`1.SecondArg                             | The second operand
Property    | Z0.Logix.TernaryBitwiseOpExpr`1.ThirdArg                              | The third operand
Type        | Z0.Logix.UnaryBitwiseOpExpr`1                                         | Defines a unary bitwise operator expression
Property    | Z0.Logix.UnaryBitwiseOpExpr`1.OpKind                                  | The operator kind
Property    | Z0.Logix.UnaryBitwiseOpExpr`1.Arg                                     | The operand
Type        | Z0.Logix.FormulaExpr                                                  | Defines an untyped identified expression, identifier := expression
Property    | Z0.Logix.FormulaExpr.Name                                             | The identifier
Property    | Z0.Logix.FormulaExpr.Encoding                                         | The identified expression
Type        | Z0.Logix.FormulaExpr`1                                                | Defines a typed identified expression, identifier := expression
Property    | Z0.Logix.FormulaExpr`1.Name                                           | The identifier
Property    | Z0.Logix.FormulaExpr`1.Encoding                                       | The identified expression
Method      | Z0.Logix.VarRandom.SetNext``1(Z0.IPolyrand,Z0.Logix.VariableExpr{``0})| Obtains the next primal value from the random source, assigns the            variable to this value and returns the value to the caller
Type        | Z0.Logix.RangeExpr`1                                                  | Defines a stewise-contiguous sequence of scalar values, available on-demand,             that satisfy upper/lower bound constraints
Field       | Z0.Logix.RangeExpr`1.Min                                              | The min value in the range
Field       | Z0.Logix.RangeExpr`1.Max                                              | The max value in the range
Field       | Z0.Logix.RangeExpr`1.Step                                             | The distance between successive range points
Type        | Z0.Logix.LiteralExpr`1                                                | Lifts a literal value to an expression
Property    | Z0.Logix.LiteralExpr`1.Value                                          | The literal value
Method      | Z0.Logix.LiteralExpr`1.op_Implicit(Z0.Logix.LiteralExpr{`0})~`0       | Implicitly converts a literal expression to the underlying value
Method      | Z0.Logix.LiteralExpr`1.op_Implicit(`0)~Z0.Logix.LiteralExpr{`0}       | Implicitly converts a value to a literal expression
Property    | Z0.Logix.VariableExpr`1.Name                                          | The name of the variable
Property    | Z0.Logix.VariableExpr`1.Value                                         | The value of the variable
Method      | Z0.Logix.VariableExpr`1.Set(Z0.Logix.IExpr{`0})                       | Updates the variable's value
Type        | Z0.Logix.VariedExpr`1                                                 | Defines a variable-dependent typed expression
Property    | Z0.Logix.VariedExpr`1.BaseExpr                                        | A variable-dependent expression
Property    | Z0.Logix.VariedExpr`1.Vars                                            | The variables upon which the expression depends
Type        | Z0.Logix.VariedExpr`2                                                 | Defines a typed expression over a variable sequence of natural length
Type        | Z0.Logix.ComparisonExpr                                               | Defines an untyped comparison expression
Property    | Z0.Logix.ComparisonExpr.ComparisonKind                                | The operator kind
Property    | Z0.Logix.ComparisonExpr.Lhs                                           | The left operand
Property    | Z0.Logix.ComparisonExpr.Rhs                                           | The right operand
Property    | Z0.Logix.ComparisonExpr.Vars                                          | The variables upon which the operands depend
Type        | Z0.Logix.ComparisonExpr`1                                             | Defines a typed comparison expression
Property    | Z0.Logix.ComparisonExpr`1.ComparisonKind                              | The operator kind
Property    | Z0.Logix.ComparisonExpr`1.LeftArg                                     | The left expression
Property    | Z0.Logix.ComparisonExpr`1.RightArg                                    | The right expression
Property    | Z0.Logix.ComparisonExpr`1.Vars                                        | The variables upon which the operands depend
Type        | Z0.Logix.ComparisonPredExpr`1                                         | Defines a typed comparison predicate
Property    | Z0.Logix.ComparisonPredExpr`1.ComparisonKind                          | The operator kind
Property    | Z0.Logix.ComparisonPredExpr`1.LeftArg                                 | The left operand
Property    | Z0.Logix.ComparisonPredExpr`1.RightArg                                | The right operand
Property    | Z0.Logix.ComparisonPredExpr`1.Vars                                    | The variables upon which the operands depend
Type        | Z0.Logix.BinaryLogicOpExpr                                            | Definesan untyped binary logical operator expression
Property    | Z0.Logix.BinaryLogicOpExpr.OpKind                                     | The operator kind
Property    | Z0.Logix.BinaryLogicOpExpr.LeftArg                                    | The left operand
Property    | Z0.Logix.BinaryLogicOpExpr.RightArg                                   | The right operand
Type        | Z0.Logix.BinaryLogicOpExpr`1                                          | Defines a typed binary logical operator expression
Property    | Z0.Logix.BinaryLogicOpExpr`1.LeftArg                                  | The left operand
Property    | Z0.Logix.BinaryLogicOpExpr`1.RightArg                                 | The right operand
Property    | Z0.Logix.BinaryLogicOpExpr`1.OpKind                                   | The operator kind
Type        | Z0.Logix.LiteralLogicSeqExpr`1                                        | Defines a natural-length sequence of literal bit values
Type        | Z0.Logix.LiteralLogicExpr                                             | Defines an untyped literal logic expression
Property    | Z0.Logix.LiteralLogicExpr.Value                                       | The literal value
Method      | Z0.Logix.LiteralLogicExpr.op_Implicit(Z0.Logix.LiteralLogicExpr)~Z0.bit| Implicitly converts a literal expression to the underlying value
Method      | Z0.Logix.LiteralLogicExpr.op_Implicit(Z0.bit)~Z0.Logix.LiteralLogicExpr| Implicitly converts a value to a literal expression
Type        | Z0.Logix.LiteralLogicExpr`1                                           | Defines a typed literal logic expression
Property    | Z0.Logix.LiteralLogicExpr`1.Value                                     | The literal value
Type        | Z0.Logix.LiteralLogicSeqExpr                                          | Defines a sequence of literal bit values
Property    | Z0.Logix.LiteralLogicSeqExpr.ExprKind                                 | The expression classifier
Type        | Z0.Logix.LogicVariable                                                | Defines an untyped logic variable
Property    | Z0.Logix.LogicVariable.Name                                           | The variable name
Property    | Z0.Logix.LogicVariable.Value                                          | The varible value
Type        | Z0.Logix.LogicVariable`1                                              | Defines a typed logic variable expression
Property    | Z0.Logix.LogicVariable`1.Name                                         | The variable name
Property    | Z0.Logix.LogicVariable`1.Value                                        | The varible value
Type        | Z0.Logix.TernaryLogicOpExpr                                           | Defines the application of an untyped ternary logic operator
Property    | Z0.Logix.TernaryLogicOpExpr.OpKind                                    | The operator kind
Property    | Z0.Logix.TernaryLogicOpExpr.FirstArg                                  | The first operand
Property    | Z0.Logix.TernaryLogicOpExpr.SecondArg                                 | The second operand
Property    | Z0.Logix.TernaryLogicOpExpr.ThirdArg                                  | The third operand
Type        | Z0.Logix.TernaryLogicOpExpr`1                                         | Defines a typed ternary logic operator expression
Property    | Z0.Logix.TernaryLogicOpExpr`1.OpKind                                  | The operator kind
Property    | Z0.Logix.TernaryLogicOpExpr`1.FirstArg                                | The first operand
Property    | Z0.Logix.TernaryLogicOpExpr`1.SecondArg                               | The second operand
Property    | Z0.Logix.TernaryLogicOpExpr`1.ThirdArg                                | The third operand
Type        | Z0.Logix.UnaryLogicOpExpr                                             | Defines an untyped unary logic operator expression
Property    | Z0.Logix.UnaryLogicOpExpr.OpKind                                      | The operator kind
Property    | Z0.Logix.UnaryLogicOpExpr.Arg                                         | The operand
Type        | Z0.Logix.VariedLogicExpr                                              | Defines an untyped logic expression over one or more variables
Property    | Z0.Logix.VariedLogicExpr.BaseExpr                                     | The variable-dependent expression
Property    | Z0.Logix.VariedLogicExpr.Vars                                         | The variables that parametrize the base expression
Type        | Z0.Logix.VariedLogicExpr`1                                            | Defines a typed logic expression over one or more variables
Property    | Z0.Logix.VariedLogicExpr`1.BaseExpr                                   | The variable-dependent expression
Property    | Z0.Logix.VariedLogicExpr`1.Vars                                       | The variables that parametrize the base expression
Type        | Z0.Logix.Question`1                                                   | Defines a question in the context of a survey
Property    | Z0.Logix.Question`1.Id                                                | Uniquely identifies a question relative to a survey
Property    | Z0.Logix.Question`1.Label                                             | The question statement
Property    | Z0.Logix.Question`1.MaxSelect                                         | The maximum number of choices allowed for a response, between 0 and the number of available choices
Property    | Z0.Logix.Question`1.Choices                                           | The potiential choices/answers
Type        | Z0.Logix.QuestionChoice`1                                             | Defines a choice in the context of a survey question
Property    | Z0.Logix.QuestionChoice`1.Id                                          | Uniquely identifies a choice relative to a question
Property    | Z0.Logix.QuestionChoice`1.Label                                       | The meaning of the choice
Type        | Z0.Logix.QuestionResponse`1                                           | Defines a response to a survey question
Method      | Z0.Logix.Survey.Template``1(System.UInt32,System.String,System.Int32,System.Int32)| Creates a stock survey that contains no meaningful content
Method      | Z0.Logix.Survey.Template``1(System.UInt32,System.String)              | Creates a stock survey with the maximum number of questions/choices supported by the primal type
Method      | Z0.Logix.Survey.Template``1(System.UInt32,System.String,System.Int32) | Creates a stock survey with a specified number of questions, each of which has the maximum number             of choices supported by the primal type
Method      | Z0.Logix.Survey.Choice``1(``0,System.String)                          | Creates a choice for a survey question
Method      | Z0.Logix.Survey.Question``1(System.UInt32,System.String,System.Int32,Z0.Logix.QuestionChoice{``0}[])| Creates a question for a survey
Method      | Z0.Logix.Survey.Response``1(System.UInt32,Z0.Logix.QuestionChoice{``0}[])| Creates a response to a survey question
Method      | Z0.Logix.Survey.Response``1(System.UInt32,Z0.Logix.QuestionResponse{``0}[])| Creates a response to a survey
Method      | Z0.Logix.Survey.CreateSuvey``1(System.UInt32,System.String,Z0.Logix.Question{``0}[])| Creates a survey
Method      | Z0.Logix.Survey.Vector``1(Z0.Logix.Question{``0}@)                    | Creates a bitvector representation of a question
Method      | Z0.Logix.Survey.Vector``1(Z0.Logix.QuestionResponse{``0}@)            | Creates a bitvector representation of a question response
Method      | Z0.Logix.Survey.Matrix``1(Z0.Logix.SurveyResponse{``0}@)              | Creates a bitmatrix representation of a survey response
Method      | Z0.Logix.Survey.Matrix``1(Z0.Logix.Survey{``0}@)                      | Creates a bitmatrix representation of a survey
Property    | Z0.Logix.Survey.ChoiceCodes                                           | The numeric codes for the asci characters 'A' .. 'Z'
Type        | Z0.Logix.Survey`1                                                     | Defines a survey predicated on primal type evaluation
Type        | Z0.Logix.SurveyResponse`1                                             | Defines a response to a survey
Field       | Z0.Logix.SurveyResponse`1.SurveyId                                    | The survey identifier
Field       | Z0.Logix.SurveyResponse`1.Answered                                    | The answered survey questions
Type        | Z0.LogicExprKind                                                      | Classifier for logical expressions
Field       | Z0.LogicExprKind.Variable                                             | Classifies boolean bariables
Field       | Z0.LogicExprKind.Varied                                               | Classifies a boolean expression that depends on one or more variables
Field       | Z0.LogicExprKind.Literal                                              | Classifies a boolean literal expression
Field       | Z0.LogicExprKind.Comparison                                           | Classifies a boolean comparison expression
Field       | Z0.LogicExprKind.UnaryOperator                                        | Classifies a boolean unary operator
Field       | Z0.LogicExprKind.BinaryOperator                                       | Classifies a boolean binary operator
Field       | Z0.LogicExprKind.TernaryOperator                                      | Classifies a boolean ternary operator
Type        | Z0.TimeRelationKind                                                   | Classifies the chronological disposition of one instant in time with respect to another
Field       | Z0.TimeRelationKind.Before                                            | Indicates the subject is antecedent to the comperand
Field       | Z0.TimeRelationKind.Matches                                           | Indicates the subject is identical to the comperand
Field       | Z0.TimeRelationKind.After                                             | Indicates the subject follows the comperand
Field       | Z0.TimeRelationKind.Between                                           | Indicates the subject is inclusively between a start date and an end date
Type        | Z0.TypedExprKind                                                      | Classifies typed expressions
Field       | Z0.TypedExprKind.Variable                                             | Classifies a variable
Field       | Z0.TypedExprKind.Varied                                               | Classifies an expression that depends on one or more variables
Field       | Z0.TypedExprKind.Literal                                              | Classifies a literal expression
Field       | Z0.TypedExprKind.Comparison                                           | Classifies a comparison expression
Field       | Z0.TypedExprKind.UnaryOperator                                        | Classifies a unary operator
Field       | Z0.TypedExprKind.BinaryOperator                                       | Classifies a binary operator
Field       | Z0.TypedExprKind.TernaryOperator                                      | Classifies a ternary operator
Field       | Z0.TypedExprKind.ShiftExpr                                            | Classifies a shift expression
Type        | Z0.Choice16                                                           | Reprsents a subset of 16 distinct choices, including the empty set
Type        | Z0.Choice32                                                           | Reprsents a subset of 32 distinct choices, including the empty set
Type        | Z0.Choice8                                                            | Reprsents a subset of 8 distinct choices, including the empty set
