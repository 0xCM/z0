| M:Z0.As.generic``1(System.Span{System.Byte})      | 
            <summary>
            Reimagines a span of bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.UInt32})    | 
            <summary>
            Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.SByte})     | 
            <summary>
            Reimagines a span of signed bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Int16})     | 
            <summary>
            Reimagines a span of signed 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.UInt16})    | 
            <summary>
            Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Int32})     | 
            <summary>
            Reimagines a span of unsigned 32-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Int64})     | 
            <summary>
            Reimagines a span of unsigned 64-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.UInt64})    | 
            <summary>
            Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Single})    | 
            <summary>
            Reimagines a span of unsigned 32-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Double})    | 
            <summary>
            Reimagines a span of unsigned 64-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.Span{System.Decimal})   | 
            <summary>
            Presents a span of 128-bit decimal values as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.SByte})| 
            <summary>
            Reimagines a span of signed bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Reimagines a span of bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Int16})| 
            <summary>
            Reimagines a span of signed 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.UInt16})| 
            <summary>
            Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Int32})| 
            <summary>
            Reimagines a span of unsigned 32-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Int64})| 
            <summary>
            Reimagines a span of unsigned 64-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Single})| 
            <summary>
            Reimagines a span of unsigned 32-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Double})| 
            <summary>
            Presents a span of 64-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.As.generic``1(System.ReadOnlySpan{System.Decimal})| 
            <summary>
            Presents a span of 128-bit decimals as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.As.add``1(``0@,System.Int32)                 | 
            <summary>
            Adds an offset to a reference
            </summary>
            <param name="src">The source reference</param>
            <param name="offset">The source-relative offset amount</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>
            u8:  movsxd rax,edx -&gt; add rax,rcx
            u16: movsxd rax,edx -&gt; lea rax,[rcx+rax*2]
            u32: movsxd rax,edx -&gt; lea rax,[rcx+rax*4]
            u64: movsxd rax,edx -&gt; lea rax,[rcx+rax*8]
            </remarks>
        
| M:Z0.As.add``2(``0@,System.Int32)                 | 
            <summary>
            Adds a T-counted offset to a readonly S-reference and returns the result for
            the greater, or perhaps lesser, good
            </summary>
            <param name="src">The data source</param>
            <param name="tCount">The T-cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.As.edit``1(``0@)                             | 
            <summary>
            Transforms a readonly T-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.edit``2(``0@)                             | 
            <summary>
            Transforms a readonly S-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.edit``2(``0@,``1@)                        | 
            <summary>
            Transforms a readonly S-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <param name="dst">The target cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.inc``1(``0@)                              | 
            <summary>
            Increments a cell reference by a unit
            </summary>
            <param name="src">The source cell</param>
            <param name="count">The cell offset count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.read``1(Z0.W8,``0@)                       | 
            <summary>
            Interprets a readonly generic reference as a readonly uint8 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.read``1(Z0.W16,``0@)                      | 
            <summary>
            Interprets a readonly generic reference as a readonly uint16 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.read``1(Z0.W32,``0@)                      | 
            <summary>
            Interprets a readonly generic reference as a readonly uint32 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.read``1(Z0.W64,``0@)                      | 
            <summary>
            Interprets a readonly generic reference as a readonly uint64 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.read``1(``0*,System.Int32,``0@)           | 
            <summary>
            Deposits a source value, identified by pointer and offset, into a target reference
            </summary>
            <param name="pSrc">The data source</param>
            <param name="offset">The value offset</param>
            <param name="dst">The receiving reference</param>
            <typeparam name="T">The value type</typeparam>
            <remarks>u8:  movsxd rax,edx -&gt; movzx eax,byte ptr [rcx+rax] -&gt; mov [r8],al -&gt; mov rax,r8 </remarks>
            <remarks>u16: movsxd rax,edx -&gt; movzx eax,word ptr [rcx+rax*2] -&gt; mov [r8],ax -&gt; mov rax,r8 </remarks>
            <remarks>u32: movsxd rax,edx -&gt; mov eax,[rcx+rax*4] -&gt; mov [r8],eax -&gt; mov rax,r8 </remarks>
            <remarks>u64: movsxd rax,edx -&gt; mov rax,[rcx+rax*8] -&gt; mov [r8],rax -&gt; mov rax,r8 </remarks>
        
| M:Z0.As.read``1(``0*,System.Int32,``0@,System.Int32)| 
            <summary>
            Deposits a range of source values into a target reference
            </summary>
            <param name="pSrc">The data source</param>
            <param name="offset">The value offset</param>
            <param name="dst">The receiving reference</param>
            <param name="count">The number of values to extract/deposit</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.As.read``2(``0@)                             | 
            <summary>
            Reads a T-value from an S-source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.As.read``2(``0@,System.Int32)                | 
            <summary>
            Reads a T-value from an S-source after skipping a specified count of S-elements
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of S-cells to skip</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.As.read``1(System.Byte@)                     | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.SByte@)                    | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int16@)                    | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt16@)                   | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int32@)                    | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt32@)                   | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int64@)                    | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt64@)                   | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Single@)                   | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Double@)                   | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Boolean@)                  | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Char@)                     | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Decimal@)                  | 
            <summary>
            Reads a T-cell from a specified data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Byte@,System.Int32)        | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.SByte@,System.Int32)       | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int16@,System.Int32)       | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt16@,System.Int32)      | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int32@,System.Int32)       | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt32@,System.Int32)      | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Int64@,System.Int32)       | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.UInt64@,System.Int32)      | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Single@,System.Int32)      | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Double@,System.Int32)      | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Boolean@,System.Int32)     | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Char@,System.Int32)        | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.read``1(System.Decimal@,System.Int32)     | 
            <summary>
            Reads a T-cell from a specified data source after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.ref``1(``0*)                              | 
            <summary>
            Presents a pointer as a reference
            </summary>
            <param name="ptr">The source pointer</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.As.ref``1(Z0.W8,``0@)                        | 
            <summary>
            Presents a T-reference as a byte reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.seekw``1(Z0.W8,``0@,System.Int32)         | 
            <summary>
            Interprets a generic element source as a uint8 element source and skips {count} elments of bit-width 8
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 8-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.seekw``1(Z0.W16,``0@,System.Int32)        | 
            <summary>
            Interprets a generic element source as a uint16 element source and skips {count} elments of bit-width 16
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 16-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.seekw``1(Z0.W32,``0@,System.Int32)        | 
            <summary>
            Interprets a generic element source as a uint32 element source and skips {count} elments of bit-width 32
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 32-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.seekw``1(Z0.W64,``0@,System.Int32)        | 
            <summary>
            Interprets a generic element source as a uint64 element source and skips {count} elments of bit-width 64
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 64-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.As.skip8``1(``0@,System.Int32)               | 
            <summary>
            Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.As.skipw``1(Z0.W8,``0@,System.Int32)         | 
            <summary>
            Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.As.skip16``1(``0@,System.Int32)              | 
            <summary>
            Skips a specified number of 16-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 16-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.As.skip32``1(``0@,System.Int32)              | 
            <summary>
            Skips a specified number of 32-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.As.skip64``1(``0@,System.Int32)              | 
            <summary>
            Skips a specified number of 64-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.As.take``2(``0@,``1@)                        | 
            <summary>
            Takes a T-cell from an S-cell source
            </summary>
            <param name="src">The source cell</param>
            <param name="dst">The target</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.as``2(``0@)                               | 
            <summary>
            Envisions an S-cell as a T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.as``2(``0@,``1@)                          | 
            <summary>
            Envisions an S-cell as a T-cell
            </summary>
            <param name="src">The source cell</param>
            <param name="src">The target cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.view``2(``0@)                             | 
            <summary>
            Views an S-cell as a T-cell
            </summary>
            <param name="src">The source</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.SByte},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Byte},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Int16},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.UInt16},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Int32},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.UInt32},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Int64},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Single},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Double},System.Span{``0})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.SByte})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Int16})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.UInt16})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.transform``1(System.ReadOnlySpan{System.Int32})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Int64})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Single})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.ReadOnlySpan{System.Double})| 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.SByte})     | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.Byte})      | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.Int16})     | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.UInt16})    | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.Int32})     | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.UInt32})    | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.transform``1(System.Span{System.Int64})   | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.UInt64})    | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.Single})    | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``1(System.Span{System.Double})    | 
            <summary>
            Transforms values from a source span to an allocated target span with cells of parametric numeric kind
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.As.convert``2(System.ReadOnlySpan{``0}@,System.Span{``1}@)| 
            <summary>
            Applies the unconditional numeric conversion S -&gt; T for each source element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.convert``2(System.Span{``0})              | 
            <summary>
            Applies the unconditional conversion S -&gt; T for each source element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.convert``2(System.ReadOnlySpan{``0})      | 
            <summary>
            Converts values in the source to values of the target type
            </summary>
            <param name="src">The source values</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.As.cover``1(``0*,System.Int32)               | 
            <summary>
            Covers a pointer-identified T-counted buffer with a span
            </summary>
            <param name="pSrc">The memory source</param>
            <param name="count">The number of bytes to cover</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.As.cover``1(``0@,System.Int32)               | 
            <summary>
            Covers a reference-identified T-counted buffer with a span
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The number of T-cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.cover``2(``0@,System.Int32)               | 
            <summary>
            Creates a span over a sequence of T-cells from a specified number of S-cells
            </summary>
            <param name="src">The data source</param>
            <param name="count">The S-cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.As.cover``2(``0@)                            | 
            <summary>
            Creates a span over a sequence of T-cells from a single S-cell
            </summary>
            <param name="src">The data source</param>
            <param name="count">The S-cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.As.first``1(System.Span{``0})                | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(System.ReadOnlySpan{``0})        | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W8,System.ReadOnlySpan{``0})  | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W16,System.ReadOnlySpan{``0}) | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W32,System.ReadOnlySpan{``0}) | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W64,System.ReadOnlySpan{``0}) | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W8,System.Span{``0})          | 
            <summary>
            Presents the span head as a reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W16,System.Span{``0})         | 
            <summary>
            Presents the span head as a reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W32,System.Span{``0})         | 
            <summary>
            Presents the span head as a reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.first``1(Z0.W64,System.Span{``0})         | 
            <summary>
            Presents the span head as a reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.readonly``1(System.Span{``0})             | 
            <summary>
            Reflects the immutable self
            </summary>
            <param name="src">The self</param>
            <typeparam name="T">The self cell type</typeparam>
        
| M:Z0.As.readonly``1(``0[])                        | 
            <summary>
            Reflects the content of an array as a readonly span
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.slice``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:ReadOnlySpan[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.slice``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)| 
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.slice``1(System.Span{``0},System.Int32)   | 
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:Span[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.slice``1(System.Span{``0},System.Int32,System.Int32)| 
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector128{System.Double}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Single}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.As.vgeneric``1(System.Runtime.Intrinsics.Vector256{System.Double}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.AsInternal.seek``1(``0@,System.Int32)        | 
            <summary>
            Adds a T-counted offset to a T-reference
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.AsInternal.skip``1(``0@,System.Byte)         | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.AsInternal.skip``1(``0@,System.Int32)        | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| T:Z0.Imagine                                      | 
            <summary>
            Presents the world as one wishes it to be, though usage could be disastrous if reality and expectation diverge
            </summary>
        
| M:Z0.XTend.As``2(System.Span{``0})                | 
            <summary>
            Presents a span of one value-type as a span of another value-type
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source span element type</typeparam>
            <typeparam name="T">The target span element type</typeparam>
        
| M:Z0.XTend.As``2(System.ReadOnlySpan{``0})        | 
            <summary>
            Presents a readonly span of one value-type as a span of another value-type
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source span element type</typeparam>
            <typeparam name="T">The target span element type</typeparam>
        
| M:Z0.XTend.As``1(System.Span{System.Byte})        | 
            <summary>
            Reimagines a span of bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.As``1(System.Span{System.UInt32})      | 
            <summary>
            Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsBytes``1(System.Span{``0},System.Int32,System.Nullable{System.Int32})| 
            <summary>
            Presents selected span content as a span of bytes
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The source length</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.XTend.AsBytes``1(System.Span{``0})           | 
            <summary>
            Reimagines a span of generic values as a span of bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsBytes``1(System.ReadOnlySpan{``0},System.Int32,System.Nullable{System.Int32})| 
            <summary>
            Presents selected span content as a readonly span of bytes
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The source length</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.XTend.AsBytes``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Reimagines a readonly span of generic values as a span of readonly bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source span element type</typeparam>
        
| M:Z0.XTend.AsSBytes``1(System.Span{``0})          | 
            <summary>
            Reimagines a readonly span of generic values as a span of signed bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsSBytes``1(System.ReadOnlySpan{``0})  | 
            <summary>
            Reimagines a readonly span of generic values as a span of signed bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source span element type</typeparam>
        
| M:Z0.XTend.AsChar``1(System.Span{``0})            | 
            <summary>
            Reimagines a span of generic values as a span of chars
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt16``1(System.Span{``0})           | 
            <summary>
            Reimagines a span of generic values as a span of signed 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt16``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Reimagines a span of generic values as a span of signed 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt16``1(System.Span{``0})          | 
            <summary>
            Reimagines a span of generic values as a span of unsigned 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt16``1(System.ReadOnlySpan{``0})  | 
            <summary>
            Reimagines a span of generic values as a span of unsigned 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt32``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Reimagines a span of generic values as a span of signed 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt32``1(System.Span{``0})           | 
            <summary>
            Reimagines a span of generic values as a span of signed 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt32``1(System.Span{``0})          | 
            <summary>
            Reimagines a span of generic values as a span of unsigned 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt32``1(System.ReadOnlySpan{``0})  | 
            <summary>
            Reimagines a span of generic values as a span of unsigned 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt64``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit signed integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt64``1(System.ReadOnlySpan{``0})  | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit unsigned integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsInt64``1(System.Span{``0})           | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit signed integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsUInt64``1(System.Span{``0})          | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit unsigned integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsFloat32``1(System.Span{``0})         | 
            <summary>
            Reimagines a span of generic values as a span of 32-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsFloat32``1(System.ReadOnlySpan{``0}) | 
            <summary>
            Reimagines a span of generic values as a span of 32-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsFloat64``1(System.Span{``0})         | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.AsFloat64``1(System.ReadOnlySpan{``0}) | 
            <summary>
            Reimagines a span of generic values as a span of 64-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.XTend.Singleton``2(System.Span{``0},System.Int32,System.Nullable{System.Int32})| 
            <summary>
            Renders a non-allocating mutable view over a source span segment that is presented as an individual target value
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The index of the first source element</param>
            <param name="length">The number of source elements required to constitute a target type</param>
            <typeparam name="S">The source element type</typeparam>
            <typeparam name="T">The target element type</typeparam>
        
| M:Z0.XTend.TrimEnd(System.Span{System.Byte})      | 
            <summary>
            Eliminates trailing zeros in the source span
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.SpanTake.TakeScalar``1(System.Span{System.Byte})| 
            <summary>
            Reads a partial value if there aren't a sufficient number of bytes to comprise a target value
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.SpanTake.TakeBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})| 
            <summary>
            Copies at most n bytes from the source span to the target span where n is the length of the target span
            </summary>
            <param name="src">The source span</param>
            <param name="dst">The target span</param>
        
| M:Z0.SpanTake.TakeUInt24``1(System.Span{``0})     | 
            <summary>
            Converts the leading elements of a primal source span to a 24-bit usigned integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The primal source type</typeparam>
        
