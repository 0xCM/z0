Method      | Z0.ICheckClose.close``1(System.Span{``0},System.Span{``0},``0,System.String,System.String,System.Nullable{System.Int32})| Asserts that corresponding elements of two source spans of the same length are "close" as determined by a specified tolerance
Method      | Z0.ICheckVectors.veq``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.String,System.String,System.Nullable{System.Int32})| Asserts the equality of two vectors
Method      | Z0.ICheckVectors.veq``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.String,System.String,System.Nullable{System.Int32})| Asserts the equality of two vectors
Type        | Z0.enum`2                                                             | Defines a model of an enum literal that is parametric in both the declaring enum            and the underlying primal type it refines
Method      | Z0.gmath.abs``1(``0)                                                  | Computes the absolute value of a primal operand
Method      | Z0.gmath.add``1(``0,``0)                                              | Adds two primal values
Method      | Z0.gmath.avgz``1(``0,``0)                                             | Computes the average of unsigned integral operands, rounding toward zero
Method      | Z0.gmath.avgi``1(``0,``0)                                             | Computes the average of unsigned integral operands, rounding toward infinity
Method      | Z0.gmath.clamp``1(``0,``0)                                            | Clamps the source value to an inclusive maximum
Method      | Z0.gmath.dist``1(``0,``0)                                             | Computes the nonnegative distance between two values
Method      | Z0.gmath.div``1(``0,``0)                                              | Divides the first value by the second
Method      | Z0.gmath.divmod``1(``0,``0)                                           | Computes dst = (div(a,b), mod(a,b))
Method      | Z0.gmath.dot``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})    | Imagines the source operands are vectors of identical length and computes their canonical scalar product
Method      | Z0.gmath.fma``1(``0,``0,``0)                                          | Computes r := x*y + z for primal values x, y, and z
Method      | Z0.gmath.mod``1(``0,``0)                                              | Computes b := a % m
Method      | Z0.gmath.modmul``1(``0,``0,``0)                                       | Computes z := (a*b) mod m
Method      | Z0.gmath.mul``1(``0,``0)                                              | Multiplies two primal values
Method      | Z0.gmath.negate``1(``0)                                               | If the source value is signed, negates it; otherwise, computes            the two's complement negation
Method      | Z0.gmath.odd``1(``0)                                                  | Returns true if a primal integer is odd; false otherwise
Method      | Z0.gmath.even``1(``0)                                                 | Returns true if a primal integer is even; false otherwise
Method      | Z0.gmath.pow2``1(System.Byte)                                         | Computes 2^i where i is an integer value in the interval [0,63]            and 2^i does not exceed the maximum value of T
Method      | Z0.gmath.signum``1(``0)                                               | Computes the sign of a primal operand
Method      | Z0.gmath.sub``1(``0,``0)                                              | Subtracts the right value from the left
Method      | Z0.gmath.cimpl``1(``0,``0)                                            | Computes the converse implication c := ~a | b integral values a and b
Method      | Z0.gmath.impl``1(``0,``0)                                             | Computes the material implication c := a | ~b for integral values a and b
Method      | Z0.gmath.nor``1(``0,``0)                                              | Computes the bitwise nor c := ~(a | b) for integral values a and b
Method      | Z0.gmath.or``1(``0,``0)                                               | Computes the bitwise or between two primal values
Method      | Z0.gmath.or``1(``0,``0,``0)                                           | Computes the bitwise or among three primal values
Method      | Z0.gmath.or``1(``0,``0,``0,``0)                                       | Computes the bitwise or among four primal values
Method      | Z0.gmath.or``1(``0,``0,``0,``0,``0)                                   | Computes the bitwise or among five primal values
Method      | Z0.gmath.blend``1(``0,``0,``0)                                        | This operator is equivalent to select, but is implemented xor(b, and(xor(b,a),  mask))
Method      | Z0.gmath.xor``1(``0,``0)                                              | Computes the XOR of two primal values
Method      | Z0.gmath.xornot``1(``0,``0)                                           | Computes xor(a,not(b))
Method      | Z0.gmath.sal``1(``0,System.Byte)                                      | Applies an arithmetic left-shift to an integer
Method      | Z0.gmath.sra``1(``0,System.Byte)                                      | Applies an arithmetic left-shift to an integer
Method      | Z0.gmath.sll``1(``0,System.Byte)                                      | Applies a logical left-shift to an integral value
Method      | Z0.gmath.srl``1(``0,System.Byte)                                      | Applies a logical right-shift to an integral value
Method      | Z0.gmath.xorsl``1(``0,System.Byte)                                    | Computes a^(a &gt;&gt; offset)
Method      | Z0.gmath.xorsr``1(``0,System.Byte)                                    | Computes a^(a &gt;&gt; offset)
Method      | Z0.gmath.eqz``1(``0,``0)                                              | Defines the operator eqz:T = eq(a,b) ? ones[T] : zero[T]
Method      | Z0.gmath.ltz``1(``0,``0)                                              | Defines the operator ltz:T = lt(a,b) ? ones[T] : zero[T]
Method      | Z0.gmath.gtz``1(``0,``0)                                              | Defines the operator gtz:T = gt(a,b) ? ones[T] : zero[T]
Method      | Z0.gmath.comparer``1                                                  | Creates a parametric numeric comparer
Method      | Z0.gmath.eq``1(``0,``0)                                               | Defines the test eq:bit := a == b, succeeding if numeric equality holds between the operands
Method      | Z0.gmath.gt``1(``0,``0)                                               | Defines the test gt:bit := a &gt; b, succeeding if the left operand is larger than the right operand
Method      | Z0.gmath.gteq``1(``0,``0)                                             | Defines the test gt:bit := a &gt;= b, succeeding if the first operand is larger than or equal to the second
Method      | Z0.gmath.neq``1(``0,``0)                                              | Defines the test neq:bit := a != b, succeeding if the operands are not equal
Method      | Z0.gmath.nonz``1(``0,``0)                                             | Returns an alternate value if the nonz test succeeds for the source value
Method      | Z0.gmath.nonz``1(``0)                                                 | Defines the test nonz:bit := a != 0, succeeding if the source operand is nonzero
Method      | Z0.gmath.positive``1(``0)                                             | Defines the test t:bit = src &gt; 0
Method      | Z0.gmath.counted``1(``0)                                              | Defines a scalar sequence {0,1,...,count-1}
Method      | Z0.gmath.decrements``1(System.Int32,``0@)                             | Populates a memory target with consecutive values count-1, count - 2, ..., 0
Method      | Z0.gmath.decrements``1(``0,System.Int32,``0@)                         | Populates a memory target with consecutive values first, first - 1, ... first - (n - 1)
Method      | Z0.gmath.decrements``1(``0,System.Span{``0})                          | Populates a span with consecutive values first, first - 1, ... first - (n - 1)
Method      | Z0.gmath.increments``1(System.Span{``0})                              | Populates a span of length n with consecutive values 0,1,...n - 1
Method      | Z0.gmath.increments``1(``0,System.Int32,``0@)                         | Populates a memory target with values first, first + 1, ... first + (n - 1)
Method      | Z0.gmath.increments``1(System.Int32,``0@)                             | Populates a memory target with consecutive values 0,1,...count-1
Method      | Z0.gmath.increments``1(``0,System.Span{``0})                          | Populates a span with values first, first + 1, ... first + (n - 1)
Method      | Z0.gmath.range``1(``0)                                                | Creates the numeric sequence {0,1,...,count-1}
Method      | Z0.gmath.range``1(``0,``0)                                            | Creates a numeric sequence that ranges between inclusive upper and lower bounds
Method      | Z0.gmath.range``1(``0,``0,``0)                                        | Creates a numeric sequence that ranges between inclusive upper and lower bounds
Method      | Z0.gmath.squeeze``1(``0,``0)                                          | Evenly projects points from the interval [0,maxval[T]] onto the interval [0,max]
Method      | Z0.gmath.squeeze(System.Byte,System.Byte)                             | Evenly projects points from the interval [0,2^8 - 1] onto the interval [0,max]
Method      | Z0.gmath.squeeze(System.UInt16,System.UInt16)                         | Evenly projects points from the interval [0,2^15 - 1] onto the interval [0,max]
Method      | Z0.gmath.squeeze(System.UInt32,System.UInt32)                         | Evenly projects points from the interval [0,2^31 - 1] onto the interval [0,max]
Method      | Z0.gmath.squeeze(System.UInt64,System.UInt64)                         | Evenly projects points from the interval [0,2^63 - 1] onto the interval [0,max]
Method      | Z0.gmath.zclear``1(``0)                                               | If the source value is nonzero, it is returned unmolested; othwewise, -1 is returned
Method      | Z0.Partition.stream``1(Z0.Interval{``0},``0,System.Nullable{System.Int32})| Slices an interval into manageable pieces, disjoint even
Method      | Z0.Partition.measured``1(Z0.Interval{``0},``0)                        | Computes the points that determine a partitioning predicated on partition width
Method      | Z0.Partition.counted``1(Z0.Interval{``0},System.Int32)                | Calculates the points that determine a partitioning predicated on partition count
Method      | Z0.Partition.counted``2(Z0.Interval{``1},System.Int32)                | Partitions an interval predicated on partition count
Method      | Z0.Partition.width``1(Z0.Interval{``0},``0)                           | Partiions an invterval predicated on partition width
Method      | Z0.Partition.integral``1(Z0.Interval{``0},``0)                        | Computes the points that determine a partitioning predicated on partition width
Method      | Z0.XTend.Permute``1(System.ReadOnlySpan{``0},Z0.Perm)                 | Shuffles span content as determined by a permutation
Method      | Z0.XTend.Permute``1(System.Span{``0},Z0.Perm)                         | Shuffles span content as determined by a permutation
Method      | Z0.XTend.Swap``1(System.Span{``0},Z0.Swap[])                          | Applies a sequence of transpositions to source span elements
Method      | Z0.XTend.FormatAsPerm``1(System.Span{``0},System.Nullable{System.Int32})| Formats the terms of a permutation
Method      | Z0.XTend.FormatAsPerm``1(System.ReadOnlySpan{``0},System.Nullable{System.Int32})| Formats the terms of a permutation
Method      | Z0.XTend.Format(Z0.Swap[])                                            | Formats a sequence of successive transpositions (a chain)
Method      | Z0.XTend.Contains``1(Z0.Interval{``0},``0)                            | Determines whether an interval contains a specified point
Method      | Z0.XTend.Contains``1(System.ReadOnlySpan{``0},``0)                    | Determines whether any elements of the source match the target
Method      | Z0.XTend.Identical``1(System.Span{``0},System.Span{``0})              | Returns 1 if the left and right spans contain identical content and 0 otherwise
Method      | Z0.XTend.Identical``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| Returns 1 if the left and right spans contain identical content and 0 otherwise
Method      | Z0.XTend.WithEndpoints``2(``0,``1,``1)                                | Creates the same kind of interval with alternate endpoints
Type        | Z0.DivisorIndex`1                                                     | Associates a contiguous sequence of dividends with their divisor lists
Type        | Z0.DivisorList`1                                                      | Encapsulates a divisor along with its dividends
Property    | Z0.DivisorList`1.Dividend                                             | The dividend
Property    | Z0.DivisorList`1.Divisors                                             | The values that divide the dividend
Method      | Z0.Divisors.DefineList``1(``0,``0[])                                  | Constructs a divisor list
Method      | Z0.Divisors`1.index(Z0.Interval{`0})                                  | Computes the divisors for each number in a specified interval
Method      | Z0.Divisors`1.indices(Z0.Interval{`0},`0)                             | Computes a divisor index stream
Method      | Z0.IntervalOps.Length``1(Z0.Interval{``0})                            | Computes the length of the interval by finding the magnituded of the difference             between its left/right endpoints
Method      | Z0.nonzero.create``1(``0)                                             | Manufactures a numeric proxy defined over the punctured domain T / {0}. If a            zero value is supplied, it is replaced with -1
Type        | Z0.NatPerm`1                                                          | Defines a permutation of natural length N over the natural numbers 0,1,...,N-1
Property    | Z0.NatPerm`1.Identity                                                 | The canonical identity permutation of length N
Property    | Z0.NatPerm`1.Empty                                                    | The empty permutation of length N
Method      | Z0.NatPerm`1.Alloc                                                    | Allocates an empty permutation
Method      | Z0.NatPerm`1.op_Implicit(Z0.NatPerm{`0})~Z0.Perm                      | Implicitly converts the source to an unsized permutation
Method      | Z0.NatPerm`1.op_Multiply(Z0.NatPerm{`0},Z0.NatPerm{`0})               | Computes the composition h of f and g where h(i) = g(f(i)) for i = 0, ... n
Method      | Z0.NatPerm`1.op_OnesComplement(Z0.NatPerm{`0})                        | Computes the inverse of f
Method      | Z0.NatPerm`1.#ctor(Z0.NatSwap{`0}[])                                  | Initializes a permutation with the identity followed by a sequence of transpostions
Method      | Z0.NatPerm`1.#ctor(System.Int32[])                                    | Initializes a permutation with array content that implicitly defines a permutation
Property    | Z0.NatPerm`1.Item(System.Int32)                                       | Term evaluator/manipulator where
Property    | Z0.NatPerm`1.Length                                                   | The permutation length
Method      | Z0.NatPerm`1.Swap(Z0.NatSwap{`0}@)                                    | Effects a transposition (i,j) -&gt; (j, i)
Method      | Z0.NatPerm`1.Swap(System.Int32,System.Int32)                          | Effects a transposition (i,j) -&gt; (j, i)
Method      | Z0.NatPerm`1.Swap(System.ValueTuple{System.Int32,System.Int32}[])     | Effects a sequence of transpositions
Method      | Z0.NatPerm`1.Swap(Z0.NatSwap{`0}[])                                   | Effects a sequence of transpositions
Method      | Z0.NatPerm`1.Replicate                                                | Clones the permutation
Method      | Z0.NatPerm`1.Replicate(Z0.NatSwap{`0}@)                               | Clones the permutation and applies the transposition (i,j)
Method      | Z0.NatPerm`1.Reverse                                                  | Reverses the permutation in-place
Method      | Z0.NatPerm`1.Invert                                                   | Computes the inverse permutation t of the current permutation p             such that p*t = t*p = I where I denotes the identity permutation
Method      | Z0.NatPerm`1.Compose(Z0.NatPerm{`0})                                  | Creates a new permutation p via composition, p[i] = g(f(i)) for i = 0, ... n            where f denotes the current permutation
Method      | Z0.NatPerm`1.Inc                                                      | Applies a modular increment to the permutation in-place
Method      | Z0.NatPerm`1.Dec                                                      | Applies a modular decrement to the permutation in-place
Method      | Z0.NatPerm`1.Cycle(System.Int32)                                      | Computes a permutation cycle originating at a specified point
Method      | Z0.NatPerm`1.Format(System.Nullable{System.Int32})                    | Formats a permutation as a 2-column matrix
Type        | Z0.NatPerm`2                                                          | Defines a permutation of natural length N over the natural numbers 0,1,...,N-1
Property    | Z0.NatPerm`2.Identity                                                 | The canonical identity permutation of length N
Property    | Z0.NatPerm`2.Empty                                                    | The empty permutation of length N
Method      | Z0.NatPerm`2.Alloc                                                    | Allocates an empty permutation
Method      | Z0.NatPerm`2.op_Implicit(Z0.NatPerm{`0,`1})~Z0.Perm{`1}               | Implicitly converts the source to an unsized permutation
Method      | Z0.NatPerm`2.op_Multiply(Z0.NatPerm{`0,`1},Z0.NatPerm{`0,`1})         | Computes the composition h of f and g where h(i) = g(f(i)) for i = 0, ... n
Method      | Z0.NatPerm`2.op_OnesComplement(Z0.NatPerm{`0,`1})                     | Computes the inverse of f
Method      | Z0.NatPerm`2.#ctor(Z0.NatSwap{`0,`1}[])                               | Initializes a permutation with the identity followed by a sequence of transpostions
Method      | Z0.NatPerm`2.#ctor(`1[])                                              | Initializes a permutation with array content that implicitly defines a permutation
Property    | Z0.NatPerm`2.Item(System.Int32)                                       | Term evaluator/manipulator
Property    | Z0.NatPerm`2.Item(`1)                                                 | Term evaluator/manipulator
Property    | Z0.NatPerm`2.Length                                                   | The permutation length
Method      | Z0.NatPerm`2.Swap(Z0.NatSwap{`0}@)                                    | Effects a transposition (i,j) -&gt; (j, i)
Method      | Z0.NatPerm`2.Swap(System.Int32,System.Int32)                          | Effects a transposition (i,j) -&gt; (j, i)
Method      | Z0.NatPerm`2.Swap(System.ValueTuple{System.Int32,System.Int32}[])     | Effects a sequence of transpositions
Method      | Z0.NatPerm`2.Swap(Z0.NatSwap{`0}[])                                   | Effects a sequence of transpositions
Method      | Z0.NatPerm`2.Swap(Z0.NatSwap{`0,`1}[])                                | Effects a sequence of transpositions
Method      | Z0.NatPerm`2.Replicate                                                | Clones the permutation
Method      | Z0.NatPerm`2.Replicate(Z0.NatSwap{`0}@)                               | Clones the permutation and applies the transposition (i,j)
Method      | Z0.NatPerm`2.Reverse                                                  | Reverses the permutation in-place
Method      | Z0.NatPerm`2.Invert                                                   | Computes the inverse permutation t of the current permutation p             such that p*t = t*p = I where I denotes the identity permutation
Method      | Z0.NatPerm`2.Compose(Z0.NatPerm{`0,`1})                               | Creates a new permutation p via composition, p[i] = g(f(i)) for i = 0, ... n            where f denotes the current permutation
Method      | Z0.NatPerm`2.Inc                                                      | Applies a modular increment to the permutation in-place
Method      | Z0.NatPerm`2.Dec                                                      | Applies a modular decrement to the permutation in-place
Method      | Z0.NatPerm`2.Cycle(System.Int32)                                      | Computes a permutation cycle originating at a specified point
Method      | Z0.NatPerm`2.Cycle(`1)                                                | Computes a permutation cycle originating at a specified point
Method      | Z0.NatPerm`2.Format(System.Nullable{System.Int32})                    | Formats a permutation as a 2-column matrix
Type        | Z0.NatSwap`1                                                          | Defines a transposition in the context of a permutation of natural length
Field       | Z0.NatSwap`1.i                                                        | The first index
Field       | Z0.NatSwap`1.j                                                        | The second index
Property    | Z0.NatSwap`1.Empty                                                    | The empty element
Property    | Z0.NatSwap`1.Zero                                                     | The monodial zero
Method      | Z0.NatSwap`1.Chain(Z0.NatSwap{`0},System.Int32)                       | Creates a chain of transpositions, that includes the initial transposition
Method      | Z0.NatSwap`1.Parse(System.String)                                     | Parses a transposition in canonical form (i j), if possible; otherwise            returns the empty transposition
Method      | Z0.NatSwap`1.Format                                                   | Renders the tranposition as text in canonical form
Method      | Z0.NatSwap`1.Equals(Z0.NatSwap{`0})                                   | Determines whether this transposition is identical to another.            Note that the order of indices is immaterial
Method      | Z0.NatSwap`1.Replicate                                                | Creates a copy
Type        | Z0.NatSwap`2                                                          | Defines a transposition in the context of a permutation of natural length
Field       | Z0.NatSwap`2.i                                                        | The first index
Field       | Z0.NatSwap`2.j                                                        | The second index
Field       | Z0.NatSwap`2.Zero                                                     | The monodial zero
Method      | Z0.NatSwap`2.Chain(Z0.NatSwap{`0,`1},System.Int32)                    | Creates a chain of transpositions, that includes the initial transposition
Method      | Z0.NatSwap`2.Parse(System.String)                                     | Parses a transposition in canonical form (i j), if possible; otherwise            returns the empty transposition
Method      | Z0.NatSwap`2.FromTuple(System.ValueTuple{`1,`1})                      | Converts a tuple representation to a swap
Method      | Z0.NatSwap`2.op_Implicit(Z0.NatSwap{`0,`1})~Z0.Swap{`1}               | Implicitly converts the transpostion to its unsized representation
Method      | Z0.NatSwap`2.op_Implicit(Z0.NatSwap{`0,`1})~System.ValueTuple{`1,`1}  | Implicitly converts the transpostion to its canonical tuple representation
Method      | Z0.NatSwap`2.Format                                                   | Renders the tranposition as text in canonical form
Method      | Z0.NatSwap`2.Equals(Z0.NatSwap{`0,`1})                                | Determines whether this transposition is identical to another.            Note that the order of indices is immaterial
Method      | Z0.NatSwap`2.ToTuple                                                  | Converts the transpostion to its canonical tuple representation
Method      | Z0.NatSwap`2.Replicate                                                | Creates a copy
Type        | Z0.Perm                                                               | Defines a permutation over the integers [0, 1, ..., n - 1] where n is the permutation length
Field       | Z0.Perm.terms                                                         | Defines the permutation (0 -&gt; terms[0], 1 -&gt; terms[1], ..., n - 1 -&gt; terms[n-1])            where n is the length of the array
Method      | Z0.Perm.Build``1(``0,System.ValueTuple{``0,``0}[])                    | Creates a generic permutation by application of a sequence of transpositions to the identity permutation
Method      | Z0.Perm.Build``1(``0,Z0.Swap{``0}[])                                  | Creates a generic permutation by application of a sequence of transpositions to the identity permutation
Method      | Z0.Perm.Alloc(System.Int32)                                           | Allocates an empty permutation
Method      | Z0.Perm.Alloc``1(System.Int32)                                        | Allocates an empty permutation of specified length
Method      | Z0.Perm.Identity(System.Int32)                                        | Defines an untyped identity permutation
Method      | Z0.Perm.identity``1(``0)                                              | Defines an identity permutation on n symbols
Method      | Z0.Perm.Init(System.ReadOnlySpan{System.Int32})                       | Defines an untyped permutation determined by values in a source span
Method      | Z0.Perm.Init``1(System.ReadOnlySpan{``0})                             | Creates a permutation from the elements in a readonly span
Method      | Z0.Perm.Init``1(``0,System.ValueTuple{``0,``0}[])                     | Initializes permutation with the identity followed by a sequence of transpostions
Method      | Z0.Perm.Init``1(``0,Z0.Swap{``0}[])                                   | Initializes permutation with the identity followed by a sequence of transpostions
Method      | Z0.Perm.Init``1(System.Span{``0})                                     | Creates a permutation from the elements in a span
Method      | Z0.Perm.Init``1(``0[])                                                | Creates a permutation from the elements in a parameter array
Method      | Z0.Perm.Identity``1(``0)                                              | Defines an identity permutation on n symbols
Method      | Z0.Perm.op_Multiply(Z0.Perm,Z0.Perm)                                  | Computes the composition h of f and g where f and g have common length n and            h(i) = g(f(i)) for i = 0, ... n-1
Property    | Z0.Perm.Item(System.Int32)                                            | Term accessor where the term index is in the inclusive range [0, N-1]
Method      | Z0.Perm.Swap(System.ValueTuple{System.Int32,System.Int32}[])          | Effects a sequence of in-place transpositions
Method      | Z0.Perm.Apply(Z0.Swap[])                                              | Effects a sequence of in-place transpositions
Property    | Z0.Perm.Length                                                        | The length of the permutation
Method      | Z0.Perm.Replicate                                                     | Clones the permutation
Method      | Z0.Perm.Compose(Z0.Perm)                                              | Creates a new permutation p via composition, p[i] = g(f(i)) for i = 0, ... n            where f denotes the current permutation
Method      | Z0.Perm.Reverse                                                       | Reverses the permutation in-place
Method      | Z0.Perm.Invert                                                        | Computes the inverse permutation t of the current permutation p             such that p*t = t*p = I where I denotes the identity permutation
Method      | Z0.Perm.Inc                                                           | Applies a modular increment to the permutation in-place
Method      | Z0.Perm.Dec                                                           | Applies a modular decrement to the permutation in-place
Method      | Z0.Perm.Convert``1                                                    | Converts the permutation to a generic permutation over the specified target type
Method      | Z0.Perm.Cycle(System.Int32)                                           | Computes a permutation cycle originating at a specified point
Method      | Z0.Perm.Format(System.Nullable{System.Int32})                         | Formats a permutation as a 2-column matrix
Type        | Z0.PermCycle                                                          | Describes cycle in a perutation
Field       | Z0.PermCycle.Terms                                                    | The terms that define the cycle
Type        | Z0.PermCycle`1                                                        | Describes cycle in a perutation
Field       | Z0.PermCycle`1.Terms                                                  | The terms that define the cycle
Type        | Z0.Perm`1                                                             | Defines a permutation over an integral type based at 0, [0, 1, ..., n - 1] where n is the permutation length
Field       | Z0.Perm`1.terms                                                       | Defines the permutation (0 -&gt; terms[0], 1 -&gt; terms[1], ..., n - 1 -&gt; terms[n-1]) where n is the length of the array
Method      | Z0.Perm`1.From(System.ReadOnlySpan{`0})                               | Defines an untyped permutation determined by values in a source span
Method      | Z0.Perm`1.op_Implicit(`0)~Z0.Perm{`0}                                 | Implicitly converts an integral value n into an identity permutation of length n
Method      | Z0.Perm`1.op_Multiply(Z0.Perm{`0}@,Z0.Perm{`0}@)                      | Computes the composition h of f and g where f and g have common length n and h(i) = g(f(i)) for i = 0, ... n-1
Method      | Z0.Perm`1.#ctor(`0,System.ValueTuple{`0,`0}[])                        | Initializes permutation with the identity followed by a sequence of transpostions
Method      | Z0.Perm`1.#ctor(`0,Z0.Swap{`0}[])                                     | Initializes permutation with the identity followed by a sequence of transpostions
Property    | Z0.Perm`1.Item(System.Int32)                                          | Term accessor where the term index is in the inclusive range [0, N-1]
Property    | Z0.Perm`1.Item(`0)                                                    | Term accessor where the term index is in the inclusive range [0, N-1]
Method      | Z0.Perm`1.Swap(System.ValueTuple{`0,`0}[])                            | Effects a sequence of in-place transpositions
Method      | Z0.Perm`1.Swap(System.ValueTuple{System.Int32,System.Int32}[])        | Effects a sequence of in-place transpositions
Method      | Z0.Perm`1.Swap(Z0.Swap[])                                             | Effects a sequence of in-place transpositions
Method      | Z0.Perm`1.Swap(Z0.Swap{`0}[])                                         | Effects a sequence of in-place transpositions
Property    | Z0.Perm`1.Length                                                      | The length of the permutation
Method      | Z0.Perm`1.Inc                                                         | Applies a modular increment to the permutation in-place
Method      | Z0.Perm`1.Dec                                                         | Applies a modular decrement to the permutation in-place
Method      | Z0.Perm`1.Replicate                                                   | Clones the permutation
Method      | Z0.Perm`1.Compose(Z0.Perm{`0}@)                                       | Creates a new permutation p via composition, p[i] = g(f(i)) for i = 0, ... n where f denotes the current permutation
Method      | Z0.Perm`1.Reverse                                                     | Reverses the permutation in-place
Method      | Z0.Perm`1.Invert                                                      | Computes the inverse permutation t of the current permutation p such that p*t = t*p = I where I denotes the identity permutation
Method      | Z0.Perm`1.Cycle(`0)                                                   | Computes a permutation cycle originating at a specified point
Type        | Z0.PermTerm                                                           | Describes an indivual term of a permutation p, i.e. the point             of evaluation i and its image p(i)
Field       | Z0.PermTerm.Source                                                    | The point at which the permuation is evaluated
Field       | Z0.PermTerm.Target                                                    | The result of evaluating the permuation over the source
Type        | Z0.PermTerm`1                                                         | Describes an indivual term of a permutation p: the point of evaluation i and its image p(i)
Field       | Z0.PermTerm`1.Source                                                  | The point at which the permuation is evaluated
Field       | Z0.PermTerm`1.Target                                                  | The result of evaluating the permuation over the source
Type        | Z0.Swap                                                               | Defines a transposition, i.e. a specification for a two-element position exchange            Typically denoted by an ordered pair of space-delimited indices (i j)
Property    | Z0.Swap.Zero                                                          | The monodial zero
Property    | Z0.Swap.Empty                                                         | The empty element, which is not Zero
Field       | Z0.Swap.i                                                             | The first index
Field       | Z0.Swap.j                                                             | The second index
Method      | Z0.Swap.apply``1(System.Span{``0},Z0.Swap[])                          | Applies a sequence of transpositions to source span elements
Method      | Z0.Swap.inc(Z0.Swap@)                                                 | Effects (i j) -&gt; ((i + 1) (j+ 1))
Method      | Z0.Swap.dec(Z0.Swap@)                                                 | Effects (i j) -&gt; ((i - 1) (j - 1)) where decremented indices are clamped to 0
Method      | Z0.Swap.Chain(Z0.Swap,System.Int32)                                   | Creates a sequence of transpositions
Method      | Z0.Swap.Parse(System.String)                                          | Parses a transposition in canonical form (i j), if possible; otherwise            returns the empty transposition
Method      | Z0.Swap.Format                                                        | Renders the tranposition as text in canonical form
Method      | Z0.Swap.Equals(Z0.Swap)                                               | Determines whether this transposition is identical to another.            Note that the order of indices is immaterial
Method      | Z0.Swap.Replicate                                                     | Creates a copy
Type        | Z0.Swap`1                                                             | Defines a transposition, i.e. a specification for the transposition            of two elements, denoted by an ordered pair of space-delimited indices (i j)
Field       | Z0.Swap`1.i                                                           | The first index
Field       | Z0.Swap`1.j                                                           | The second index
Property    | Z0.Swap`1.Zero                                                        | The monodial zero
Method      | Z0.Swap`1.Chain(Z0.Swap{`0},System.Int32)                             | Creates a chain of transpositions, that includes the initial transposition
Method      | Z0.Swap`1.Format                                                      | Renders the tranposition as text in canonical form
Method      | Z0.Swap`1.Equals(Z0.Swap{`0})                                         | Determines whether this transposition is identical to another.            Note that the order of indices is immaterial
Method      | Z0.Swap`1.Replicate                                                   | Creates a copy
Type        | Z0.Monomial`1                                                         | Represents a one-term polynomial or component of a polynomial with more than one term
Field       | Z0.Monomial`1.Scalar                                                  | The monomial coefficient
Field       | Z0.Monomial`1.Exp                                                     | The monomial exponent/order
Method      | Z0.Monomial`1.Zero(System.UInt32)                                     | Produces the zero monomial of a given order
Property    | Z0.Monomial`1.Nonzero                                                 | Specifies whether the coeifficient, and thus the monomial, is nonzero
Method      | Z0.Monomial`1.Eval(`0)                                                | Evaluates the monomial at a specified point
Type        | Z0.Monomial`2                                                         | Represents a one-term polynomial or component of a polynomial with more than one term            where the scalar coefficient has modulus M
Field       | Z0.Monomial`2.Scalar                                                  | The monomial coefficient
Field       | Z0.Monomial`2.Exp                                                     | The monomial exponent/order
Property    | Z0.Monomial`2.Nonzero                                                 | Specifies whether the coeifficient, and thus the monomial, is nonzero
Type        | Z0.Polynomial`1                                                       | Represents a polynomial
Field       | Z0.Polynomial`1.Zero                                                  | The canonical zero polynomial - with one term of order 0 with coefficient 0
Method      | Z0.Polynomial`1.Define(System.ValueTuple{`0,System.UInt32}[])         | Constructs a polynomial from a sparse term sequence of scalar coefficients  paired with the            corresponding term exponent value
Method      | Z0.Polynomial`1.#ctor(Z0.Monomial{`0}[])                              | Initializes a polynomial from a dense sequence of monomials
Property    | Z0.Polynomial`1.Degree                                                | Specifies the degree of the polynomial as determined by the value of            the exponent of greatest order
Property    | Z0.Polynomial`1.Terms                                                 | The dense sequence of terms that define the polynomial
Property    | Z0.Polynomial`1.Item(System.UInt32)                                   | Selects the term with the specified order if it exists; otherwise, returns the zero monomial
Property    | Z0.Polynomial`1.Item(System.Int32)                                    | Selects the term with the specified order if it exists; otherwise, returns the zero monomial
Property    | Z0.Polynomial`1.Nonzero                                               | Specifies whether some term has a nonzero coeficient value
Method      | Z0.Polynomial`1.Term(System.UInt32)                                   | Selects the term with the specified order if it exists;            otherwise, returns the zero monomial
Method      | Z0.Polynomial`1.Eval(`0)                                              | Evaluates the polynomial at a specified point
Method      | Z0.Polynomial`1.Format(System.Nullable{System.Char})                  | Formats the polynomial in canonical form
Type        | Z0.Polynomial`3                                                       | Represents a base-M polynomial of degree N over values of primal type T
Field       | Z0.Polynomial`3.Zero                                                  | The zero polynomial of degree N
Property    | Z0.Polynomial`3.Item(System.UInt32)                                   | Selects the term with the specified order if it exists;            otherwise, returns the zero monomial
Method      | Z0.Polynomial`3.Term(System.UInt32)                                   | Selects the term with the specified order if it exists;            otherwise, returns the zero monomial
Type        | Z0.NumericSeq`1                                                       | Defines a data structure for sparse/partial sequence representation
Property    | Z0.NumericSeq`1.Terms                                                 | The sequence terms
Property    | Z0.NumericSeq`1.Length                                                | The number of terms in the sequence
Property    | Z0.NumericSeq`1.Item(System.Int32)                                    | Returns a reference to an index-identified term
Property    | Z0.NumericSeq`1.First                                                 | Returns a reference to the first term of the seqence
Type        | Z0.NumericSeqTerm`1                                                   | Defines a sequence term
Field       | Z0.NumericSeqTerm`1.Index                                             | The integer that maps to the term value
Field       | Z0.NumericSeqTerm`1.Value                                             | The term's value
Property    | Z0.NumericSeqTerm`1.IsEmpty                                           | Specifies whether the term is empty
Method      | Z0.NumericSeqTerm`1.Format(System.Nullable{System.Char})              | Renders the term by default as 'a_i = Value' where i denotes the term index
Type        | Z0.gfp                                                                | Defines generic floating-point operations
Method      | Z0.gfp.abs``1(``0)                                                    | Computes the absolute value of a primal FP scalar
Method      | Z0.gfp.dec``1(``0)                                                    | Decrements the source value
Method      | Z0.gfp.div``1(``0,``0)                                                | Computes the quotient of floating-point operands
Method      | Z0.gfp.divmod``1(``0,``0)                                             | Computes dst = (div(a,b), mod(a,b)) for floating-point numeric types
Method      | Z0.gfp.fma``1(``0,``0,``0)                                            | Computes and returns the result r = x*y + z
Method      | Z0.gfp.inc``1(``0)                                                    | Increments the source value
Method      | Z0.gfp.mod``1(``0,``0)                                                | Computes the modulus of floating-point operands
Method      | Z0.gfp.exp``1(``0)                                                    | Raises e to a specified exponent
Method      | Z0.Algorithms.steps``1(``0,``0,System.Int32,``0@)                     | Populates a memory target with values first, first + 1*step, first + 2*step ... first + (n - 1)*step
Method      | Z0.Algorithms.contains``1(Z0.Interval{``0},``0)                       | Determines whether an interval contains a specified point
Method      | Z0.Algorithms.contains``1(``0@,``0,System.Int32)                      | Adapted from corefx repo
Method      | Z0.Algorithms.sequence``1(``0,``0)                                    | Creates an enumerable sequence that ranges between inclusive upper and lower bounds
Method      | Z0.Algorithms.counted``1(``0)                                         | Defines a scalar sequence {0,1,...,count-1}
Method      | Z0.Algorithms.range``1(``0,``0)                                       | Creates a numeric sequence that ranges between inclusive upper and lower bounds
Method      | Z0.Algorithms.range``1(``0,``0,``0)                                   | Creates a numeric sequence that ranges between inclusive upper and lower bounds
Method      | Z0.Algorithms.identical``1(System.Span{``0},System.Span{``0})         | Returns 1 if the left and right spans contain identical content and 0 otherwise
Method      | Z0.Algorithms.identical``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| Returns 1 if the left and right spans contain identical content and 0 otherwise
Method      | Z0.Algorithms.identical``1(``0@,``0@,System.Int32)                    | Adapted from corefx repo
Type        | Z0.Collector                                                          | A basic statistical accumulator that accrues information over an arbitrary number of input sequences
Method      | Z0.Collector.Create``1(``0)                                           | Creates a collector seeded with the first value
Property    | Z0.Collector.Count                                                    | The number of accumulated observations
Property    | Z0.Collector.Mean                                                     | The accumulated mean
Property    | Z0.Collector.Variance                                                 | The accumulated variance
Property    | Z0.Collector.Stdev                                                    | The accumulated standard deviation
Property    | Z0.Collector.Min                                                      | The accumulated minimum
Property    | Z0.Collector.Max                                                      | The accumulated maximum
Method      | Z0.Collector.Collect``1(``0)                                          | Accumulates a single value
Method      | Z0.Collector.Collect``1(System.Collections.Generic.IEnumerable{``0})  | Accumulates a stream of values
Method      | Z0.Collector.CollectItems``1(``0[])                                   | Accumulates a span of values
Method      | Z0.Collector.Collect``1(System.ReadOnlySpan{``0})                     | Accumulates a span of values
Method      | Z0.Collector.Collect``1(System.Span{``0})                             | Accumulates a span of values
Method      | Z0.genum.sll``3(``0,System.Byte,``1,``2)                              | Converts a source enume value src:E to a parametrically-identified numeric type S,            shifts the converted value to the left a specified number of bits then converts            the outcome of this computation to a numeric type T
Method      | Z0.genum.sll``4(``0,``1,``2,``3)                                      | Converts a source enume value src:E to a parametrically-identified numeric type S,            shifts the converted value to the left a specified number of bits then converts            the outcome of this computation to a numeric type T
Type        | Z0.IAs`2                                                              | Characterizes a value presentation service that overlays a value viewed through the lens of one type            as a value viewed through the lens of another.
Method      | Z0.IAs`2.As(`0)                                                       | Presents src:S as dst:T
Type        | Z0.IAsNumeric`2                                                       | Characterizes a numeric value presentation service
Type        | Z0.IAsNumeric`3                                                       | Characterizes a numeric value presentation service F-bound polymorphic reification
