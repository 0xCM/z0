# Opcode Column in the Instruction Summary Table (Instructions without VEX Prefix), Intel Vol2 Table 3-1
-----------------------------------------------------------------------------------------------------------------------------------------------------
| Identifier | Syntax | Meaning                                                                                                                                    |
| NP         | NP     | Indicates the use of 66/F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction         |
| NFx        | NFx    | Indicates the use of F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction.           |
| RexㆍW     | REX.W  | Indicates the use of a REX prefix that affects operand size or instruction semantics ;REX prefixes that promote legacy instructions        |
|            |        | to 64-bit behavior are not listed explicitly in the opcode column.                                                                         |
| ﾉ0         | /0     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 0 provides an extension to the instruction's opcode |
| ﾉ1         | /1     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 1 provides an extension to the instruction's opcode |
| ﾉ2         | /2     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 2 provides an extension to the instruction's opcode |
| ﾉ3         | /3     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 3 provides an extension to the instruction's opcode |
| ﾉ4         | /4     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 4 provides an extension to the instruction's opcode |
| ﾉ5         | /5     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 5 provides an extension to the instruction's opcode |
| ﾉ6         | /6     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 6 provides an extension to the instruction's opcode |
| ﾉ7         | /7     | The ModR/M byte of the instruction uses only the r/m operand. The register field digit 7 provides an extension to the instruction's opcode |
| ﾉr         | /r     | Indicates that the ModR/M byte of the instruction contains a register operand and an r/m operand.                                          |
| cb         | cb     | A 1-byte value following the opcode to specify a code offset and/or new value for the code segment register.                               |
| cw         | cw     | A 2-byte value following the opcode to specify a code offset and/or new value for the code segment register.                               |
| cd         | cd     | A 4-byte value following the opcode to specify a code offset and/or new value for the code segment register.                               |
| cp         | cp     | A 6-byte value following the opcode to specify a code offset and/or new value for the code segment register.                               |
| co         | co     | A 8-byte value following the opcode to specify a code offset and/or new value for the code segment register.                               |
| ct         | ct     | A 10-byte value following the opcode to specify a code offset and/or new value for the code segment register.                              |
| ib         | ib     | A 1-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.                             |
|            |        | The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.   |
| iw         | iw     | A 2-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.                             |
|            |        | The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.   |
| id         | id     | A 4-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.                             |
|            |        | The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.   |
| io         | io     | A 8-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.                             |
|            |        | The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.   |
| ᕀrb        | +rb    | For an 8-bit register indicates:                                                                                                           |
|            |        | In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte.                                               |
|            |        | In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction                          |
| ᕀrw        | +rw    | For a 16-bit register indicates:                                                                                                           |
|            |        | In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte.                                               |
|            |        | In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction                          |
| ᕀrd        | +rd    | For a 32-bit register indicates:                                                                                                           |
|            |        | In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte.                                               |
|            |        | In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction                          |
| ᕀro        | +ro    | For a 64-bit register, indicates the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction         |
| NE         | N.E    | Not encodable                                                                                                                              |
| ᕀi         | +i     | A number used in floating-point instructions when one of the operands is ST(i) from the FPU register stack. The number i                   |
|            |        | (which can range from 0 to 7) is added to the hexadecimal byte given at the left of the plus sign to form a single opcode byte.            |