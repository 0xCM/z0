<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.vsvc</name>
    </assembly>
    <members>
        <member name="M:Z0.ICheckSVF.CheckPattern``2(``0,System.Runtime.Intrinsics.Vector128{``1})">
            <summary>
            Verifies that a vectorized pattern source produces the expected pattern
            </summary>
            <param name="f">The pattern source</param>
            <param name="expect">The expected pattern</param>
            <typeparam name="F">The pattern source type</typeparam>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF.CheckPattern``2(``0,System.Runtime.Intrinsics.Vector256{``1})">
            <summary>
            Verifies that a vectorized pattern source produces the expected pattern
            </summary>
            <param name="f">The pattern source</param>
            <param name="expect">The expected pattern</param>
            <typeparam name="F">The pattern source type</typeparam>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF.CheckFactory``4(Z0.N128,``0,``1,``2,``3)">
            <summary>
            Verifies the correct function of a vectorized factory operator
            </summary>
            <param name="w">The vector width selector</param>
            <param name="f">The factory operator to verify</param>
            <param name="check">The adjudication operator</param>
            <param name="s">A factory input type representative</param>
            <param name="t">A target vector component type representative</param>
            <typeparam name="F">The factory type</typeparam>
            <typeparam name="C">The check operator type</typeparam>
            <typeparam name="S">The factory input type</typeparam>
            <typeparam name="T">The target vector component type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF.CheckFactory``4(Z0.N256,``0,``1,``2,``3)">
            <summary>
            Verifies the correct function of a vectorized factory operator
            </summary>
            <param name="w">The vector width selector</param>
            <param name="f">The factory operator to verify</param>
            <param name="check">The adjudication operator</param>
            <param name="s">A factory input type representative</param>
            <param name="t">A target vector component type representative</param>
            <typeparam name="F">The factory type</typeparam>
            <typeparam name="C">The check operator type</typeparam>
            <typeparam name="S">The factory input type</typeparam>
            <typeparam name="T">The target vector component type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CellCount``1(``0)">
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.UnaryOpClass,Z0.W128)">
            <summary>
            Validates a 128-bit unary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="op">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.UnaryOpClass,Z0.W256)">
            <summary>
            Validates a 256-bit unary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="op">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.BinaryOpClass,Z0.W128)">
            <summary>
            Validates a 128-bit binary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="op">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.BinaryOpClass,Z0.W256)">
            <summary>
            Validates a 256-bit binary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="k">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.TernaryOpClass,Z0.W128)">
            <summary>
            Validates a 128-bit ternary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="op">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.ICheckSVF`1.CheckSVF``1(``0,Z0.TernaryOpClass,Z0.W256)">
            <summary>
            Validates a 256-bit ternary operator via cellular decomposition
            </summary>
            <param name="f">The function</param>
            <param name="op">The operator arity selector</param>
            <param name="w">The vector width selector</param>
            <typeparam name="F">The function type</typeparam>
        </member>
        <member name="M:Z0.TCheckBlocks.eq``1(Z0.SpanBlock128{``0},Z0.SpanBlock128{``0},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Asserts content equality for two 128-bit blocks
            </summary>
            <param name="xb">The left span</param>
            <param name="yb">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.TCheckBlocks.eq``1(Z0.SpanBlock256{``0},Z0.SpanBlock256{``0},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Asserts content equality for two 256-bit blocks
            </summary>
            <param name="xb">The left block</param>
            <param name="yb">The right block</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.TCheckBlocks.eq``1(Z0.SpanBlock512{``0},Z0.SpanBlock512{``0},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Asserts content equality for two 512-bit blocks
            </summary>
            <param name="xb">The left block</param>
            <param name="yb">The right block</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        </member>
    </members>
</doc>
