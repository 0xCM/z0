OVERVIEW: llvm machine code playground

USAGE: llvm-mc.exe [options] <input file>

OPTIONS:
  -I=<directory>                                    - Directory of include files
  -W                                                - Alias for --no-warn
  --aarch64-mark-bti-property                       - Add .note.gnu.property with BTI to assembly files
  --aarch64-neon-syntax=<value>                     - Choose style of NEON code to emit from AArch64 backend:
    =generic                                        -   Emit generic NEON assembly
    =apple                                          -   Emit Apple-style NEON assembly
  --amdhsa-code-object-version=<uint>               - AMDHSA Code Object Version
  --arch=<string>                                   - Target arch to assemble for, see -version for available targets
  --arm-add-build-attributes                        - 
  --arm-implicit-it=<value>                         - Allow conditional instructions outdside of an IT block
    =always                                         -   Accept in both ISAs, emit implicit ITs in Thumb
    =never                                          -   Warn in ARM, reject in Thumb
    =arm                                            -   Accept in ARM, reject in Thumb
    =thumb                                          -   Warn in ARM, emit implicit ITs in Thumb
  --as-secure-log-file-name=<value>                 - As secure log file name (initialized from AS_SECURE_LOG_FILE env variable)
  --asm-macro-max-nesting-depth=<uint>              - The maximum nesting depth allowed for assembly macros.
  --asm-show-inst                                   - Emit internal instruction representation to assembly file
  --color                                           - Use colors in output (default=autodetect)
  --compress-debug-sections=<value>                 - Choose DWARF debug sections compression:
    =none                                           -   No compression
    =zlib                                           -   Use zlib compression
    =zlib-gnu                                       -   Use zlib-gnu compression (deprecated)
  --defsym=<string>                                 - Defines a symbol to be an integer constant
  --disable-hexagon-shuffle                         - Disable Hexagon instruction shuffling
  --disable-symbolication                           - Disable symbolizing crash backtraces.
  Action to perform:
      --as-lex                                         - Lex tokens from a .s file
      --assemble                                       - Assemble a .s file (default)
      --disassemble                                    - Disassemble strings of hex bytes
      --mdis                                           - Marked up disassembly of strings of hex bytes
  --dwarf-extended-loc=<value>                      - Disable emission of the extended flags in .loc directives.
    =Default                                        -   Default for platform
    =Enable                                         -   Enabled
    =Disable                                        -   Disabled
  --dwarf-version=<int>                             - Dwarf version
  --dwarf64                                         - Generate debugging info in the 64-bit DWARF format
  --fatal-warnings                                  - Treat warnings as errors
  --fdebug-compilation-dir=<string>                 - Specifies the debug info's compilation dir
  --fdebug-prefix-map=<= separated key-value pairs> - Map file source paths in debug info
  --filetype=<value>                                - Choose an output file type:
    =asm                                            -   Emit an assembly ('.s') file
    =null                                           -   Don't emit anything (for timing purposes)
    =obj                                            -   Emit a native object ('.o') file
  -g                                                - Generate dwarf debugging info for assembly source files
  --gpsize=<uint>                                   - Global Pointer Addressing Size.  The default size is 8.
  -h                                                - Alias for --help
  --help                                            - Display available options (--help-hidden for more)
  --help-hidden                                     - Display all available options
  --help-list                                       - Display list of available options (--help-list-hidden for more)
  --help-list-hidden                                - Display list of all available options
  --import-constants-with-refs                      - Import constant global variables with references
  --incremental-linker-compatible                   - When used with filetype=obj, emit an object file which can be used with an incremental linker
  --info-output-file=<filename>                     - File to append -stats and -timer output to
  --large-code-model                                - Create cfi directives that assume the code might be more than 2gb away
  --main-file-name=<string>                         - Specifies the name we should consider the input file
  --mark-data-regions                               - Mark code section jump table data regions.
  --masm-hexfloats                                  - Enable MASM-style hex float initializers (3F800000r)
  --masm-integers                                   - Enable binary and hex masm integers (0b110 and 0ABCh)
  --mattr=<a1,+a2,-a3,...>                          - Target specific attributes (-mattr=help for details)
  --mc-relax-all                                    - When used with filetype=obj, relax all fixups in the emitted object file
  --mcpu=<cpu-name>                                 - Target a specific cpu type (-mcpu=help for details)
  --merror-missing-parenthesis                      - Error for missing parenthesis around predicate registers
  --merror-noncontigious-register                   - Error for register names that aren't contigious
  --mhvx                                            - Enable Hexagon Vector eXtensions
  --mhvx=<value>                                    - Enable Hexagon Vector eXtensions
    =v60                                            -   Build for HVX v60
    =v62                                            -   Build for HVX v62
    =v65                                            -   Build for HVX v65
    =v66                                            -   Build for HVX v66
    =v67                                            -   Build for HVX v67
  --mips-jalr-reloc                                 - MIPS: Emit R_{MICRO}MIPS_JALR relocation with jalr
  --mips-round-section-sizes                        - Round section sizes up to the section alignment
  --mno-compound                                    - Disable looking for compound instructions for Hexagon
  --mno-fixup                                       - Disable fixing up resolved relocations for Hexagon
  --mno-hvx                                         - Disable Hexagon Vector eXtensions
  --mno-pairing                                     - Disable looking for duplex instructions for Hexagon
  --mv5                                             - Build for Hexagon V5
  --mv55                                            - Build for Hexagon V55
  --mv60                                            - Build for Hexagon V60
  --mv62                                            - Build for Hexagon V62
  --mv65                                            - Build for Hexagon V65
  --mv66                                            - Build for Hexagon V66
  --mv67                                            - Build for Hexagon V67
  --mv67t                                           - Build for Hexagon V67T
  --mwarn-missing-parenthesis                       - Warn for missing parenthesis around predicate registers
  --mwarn-noncontigious-register                    - Warn for register names that arent contigious
  --mwarn-sign-mismatch                             - Warn for mismatching a signed and unsigned value
  -n                                                - Don't assume assembly file starts in the text section
  --no-deprecated-warn                              - Suppress all deprecated warnings
  --no-exec-stack                                   - File doesn't need an exec stack
  --no-warn                                         - Suppress all warnings
  --non-global-value-max-name-size=<uint>           - Maximum size for the name of non-global values.
  -o=<filename>                                     - Output filename
  --opt-bisect-limit=<int>                          - Maximum optimization to perform
  --output-asm-variant=<uint>                       - Syntax variant to use for output printing
  --pass-remarks=<pattern>                          - Enable optimization remarks from passes whose name match the given regular expression
  --pass-remarks-analysis=<pattern>                 - Enable optimization analysis remarks from passes whose name match the given regular expression
  --pass-remarks-missed=<pattern>                   - Enable missed optimization remarks from passes whose name match the given regular expression
  --position-independent                            - Position independent
  --ppc-asm-full-reg-names                          - Use full register names when printing assembly
  --ppc-reg-with-percent-prefix                     - Prints full register names with percent
  --ppc-vsr-nums-as-vr                              - Prints full register names with vs{31-63} as v{0-31}
  --preserve-comments                               - Preserve Comments in outputted assembly
  --print-all-options                               - Print all option values after command line parsing
  --print-imm-hex                                   - Prefer hex format for immediate values
  --print-options                                   - Print non-default options after command line parsing
  --propagate-attrs                                 - Propagate attributes in index
  --relax-nv-checks                                 - Relax checks of new-value validity
  --relax-relocations                               - Emit R_X86_64_GOTPCRELX instead of R_X86_64_GOTPCREL
  --remarks-section                                 - Emit a section containing remark diagnostics metadata. By default, this is enabled for the following formats: yaml-strtab, bitstream.
  --riscv-arch-reg-names                            - Print architectural register names rather than the ABI names (such as x2 instead of sp)
  --riscv-no-aliases                                - Disable the emission of assembler pseudo instructions
  --rng-seed=<seed>                                 - Seed for the random number generator
  --save-temp-labels                                - Don't discard temporary labels
  --show-encoding                                   - Show instruction encodings
  --show-inst                                       - Show internal instruction representation
  --show-inst-operands                              - Show instructions operands as parsed
  --split-dwarf-file=<filename>                     - DWO output filename
  --stats                                           - Enable statistics output from program (available with Asserts)
  --stats-json                                      - Display statistics as json data
  --target-abi=<string>                             - The name of the ABI to be targeted from the backend.
  --track-memory                                    - Enable -time-passes memory tracking (this may be slow)
  --triple=<string>                                 - Target triple to assemble for, see -version for available targets
  --use-dbg-addr                                    - Use llvm.dbg.addr for all local variables
  --version                                         - Display the version of this program
  --x86-align-branch=<string>                       - Specify types of branches to align (plus separated list of types):
                                                      jcc      indicates conditional jumps
                                                      fused    indicates fused conditional jumps
                                                      jmp      indicates direct unconditional jumps
                                                      call     indicates direct and indirect calls
                                                      ret      indicates rets
                                                      indirect indicates indirect unconditional jumps
  --x86-align-branch-boundary=<uint>                - Control how the assembler should align branches with NOP. If the boundary's size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches.
  --x86-asm-syntax=<value>                          - Choose style of code to emit from X86 backend:
    =att                                            -   Emit AT&T-style assembly
    =intel                                          -   Emit Intel-style assembly
  --x86-branches-within-32B-boundaries              - Align selected instructions to mitigate negative performance impact of Intel's micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution.
  --x86-experimental-lvi-inline-asm-hardening       - Harden inline assembly code that may be vulnerable to Load Value Injection (LVI). This feature is experimental.
  --x86-pad-for-align                               - Pad previous instructions to implement align directives
  --x86-pad-for-branch-align                        - Pad previous instructions to implement branch alignment
  --x86-pad-max-prefix-size=<uint>                  - Maximum number of prefixes to use for padding
