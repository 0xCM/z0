| Opcode            | Instruction              | Op/En | 64-Bit Mode | Compat/Leg Mode | Description                                                    |
| 88 /r             | MOV r/m8,r8              | MR    | Valid       | Valid           | Move r8 to r/m8.                                               |
| REX + 88 /r       | MOV r/m8 ***, r8 ***     | MR    | Valid       | N.E.            | Move r8 to r/m8.                                               |
| 89 /r             | MOV r/m16,r16            | MR    | Valid       | Valid           | Move r16 to r/m16.                                             |
| 89 /r             | MOV r/m32,r32            | MR    | Valid       | Valid           | Move r32 to r/m32.                                             |
| REX.W + 89 /r     | MOV r/m64,r64            | MR    | Valid       | N.E.            | Move r64 to r/m64.                                             |
| 8A /r             | MOV r8,r/m8              | RM    | Valid       | Valid           | Move r/m8 to r8.                                               |
| REX + 8A /r       | MOV r8***,r/m8***        | RM    | Valid       | N.E.            | Move r/m8 to r8.                                               |
| 8B /r             | MOV r16,r/m16            | RM    | Valid       | Valid           | Move r/m16 to r16.                                             |
| 8B /r             | MOV r32,r/m32            | RM    | Valid       | Valid           | Move r/m32 to r32.                                             |
| REX.W + 8B /r     | MOV r64,r/m64            | RM    | Valid       | N.E.            | Move r/m64 to r64.                                             |
| 8C /r             | MOV r/m16,Sreg **        | MR    | Valid       | Valid           | Move segment register to r/m16.                                |
| REX.W + 8C /r     | MOV r16/r32/m16, Sreg ** | MR    | Valid       | Valid           | Move zero extended 16-bit segment register to r16/r32/r64/m16. |
| REX.W + 8C /r     | MOV r64/m16, Sreg **     | MR    | Valid       | Valid           | Move zero extended 16-bit segment register to r64/m16.         |
| 8E /r             | MOV Sreg,r/m16 **        | RM    | Valid       | Valid           | Move r/m16 to segment register.                                |
| REX.W + 8E /r     | MOV Sreg,r/m64 **        | RM    | Valid       | Valid           | Move lower 16 bits of r/m64 to segment register.               |
| A0                | MOV AL, moffs8 *         | FD    | Valid       | Valid           | Move byte at ( seg:offset ) to AL.                             |
| REX.W + A0        | MOV AL, moffs8 *         | FD    | Valid       | N.E.            | Move byte at ( offset ) to AL.                                 |
| A1                | MOV AX, moffs16 *        | FD    | Valid       | Valid           | Move word at ( seg:offset ) to AX.                             |
| A1                | MOV EAX, moffs32 *       | FD    | Valid       | Valid           | Move doubleword at ( seg:offset ) to EAX.                      |
| REX.W + A1        | MOV RAX, moffs64 *       | FD    | Valid       | N.E.            | Move quadword at ( offset ) to RAX.                            |
| A2                | MOV moffs8 ,AL           | TD    | Valid       | Valid           | Move AL to ( seg:offset ).                                     |
| REX.W + A2        | MOV moffs8 *** ,AL       | TD    | Valid       | N.E.            | Move AL to ( offset ).                                         |
| A3                | MOV moffs16 *,AX         | TD    | Valid       | Valid           | Move AX to ( seg:offset ).                                     |
| A3                | MOV moffs32 *,EAX        | TD    | Valid       | Valid           | Move EAX to ( seg:offset ).                                    |
| REX.W + A3        | MOV moffs64 *,RAX        | TD    | Valid       | N.E.            | Move RAX to ( offset ).                                        |
| B0+ rb ib         | MOV r8, imm8             | OI    | Valid       | Valid           | Move imm8 to r8.                                               |
| REX + B0+ rb ib   | MOV r8 *** , imm8        | OI    | Valid       | N.E.            | Move imm8 to r8.                                               |
| B8+ rw iw         | MOV r16, imm16           | OI    | Valid       | Valid           | Move imm16 to r16.                                             |
| B8+ rd id         | MOV r32, imm32           | OI    | Valid       | Valid           | Move imm32 to r32.                                             |
| REX.W + B8+ rd io | MOV r64, imm64           | OI    | Valid       | N.E.            | Move imm64 to r64.                                             |
| C6 / 0 ib         | MOV r/m8, imm8           | MI    | Valid       | Valid           | Move imm8 to r/m8.                                             |
| REX + C6 / 0 ib   | MOV r/m8***, imm8        | MI    | Valid       | N.E.            | Move imm8 to r/m8.                                             |
| C7 / 0 iw         | MOV r/m16, imm16         | MI    | Valid       | Valid           | Move imm16 to r/m16.                                           |
| C7 / 0 id         | MOV r/m32, imm32         | MI    | Valid       | Valid           | Move imm32 to r/m32.                                           |
| REX.W + C7 / 0 id | MOV r/m64, imm32         | MI    | Valid       | N.E.            | Move imm32 sign extended to 64-bits to r/m64.                  |

# MOV Data
| register1 to register2                            | 0100 0R0B : 1000 100w : 11 reg1 reg2          |
| qwordregister1 to qwordregister2                  | 0100 1R0B 1000 1001 : 11 qwordeg1 qwordreg2   |
| register2 to register1                            | 0100 0R0B : 1000 101w : 11 reg1 reg2          |
| qwordregister2 to qwordregister1                  | 0100 1R0B 1000 1011 : 11 qwordreg1 qwordreg2  |
| memory to reg                                     | 0100 0RXB : 1000 101w : mod reg r/m           |
| memory64 to qwordregister                         | 0100 1RXB 1000 1011 : mod qwordreg r/m        |
| reg to memory                                     | 0100 0RXB : 1000 100w : mod reg r/m           |
| qwordregister to memory64                         | 0100 1RXB 1000 1001 : mod qwordreg r/m        |
| immediate to register                             | 0100 000B : 1100 011w : 11 000 reg : imm      |
| immediate32 to qwordregister (zero extend)        | 0100 100B 1100 0111 : 11 000 qwordreg : imm32 |
| immediate to register (alternate encoding)        | 0100 000B : 1011 w reg : imm                  |
| immediate64 to qwordregister (alternate encoding) | 0100 100B 1011 1000 reg : imm64               |
| immediate to memory                               | 0100 00XB : 1100 011w : mod 000 r/m : imm     |
| immediate32 to memory64 (zero extend)             | 0100 10XB 1100 0111 : mod 000 r/m : imm32     |
| memory to AL, AX, or EAX                          | 0100 0000 : 1010 000w : displacement          |
| memory64 to RAX                                   | 0100 1000 1010 0001 : displacement64          |
| AL, AX, or EAX to memory                          | 0100 0000 : 1010 001w : displacement          |
| RAX to memory64                                   | 0100 1000 1010 0011 : displacement64          |

# MOV to/from Segment Registers
| register to segment register                      | 0100 W00Bw : 1000 1110 : 11 sreg reg   |
| register to SS                                    | 0100 000B : 1000 1110 : 11 sreg reg    |
| memory to segment register                        | 0100 00XB : 1000 1110 : mod sreg r/m   |
| memory64 to segment register (lower 16 bits)      | 0100 10XB 1000 1110 : mod sreg r/m     |
| memory to SS                                      | 0100 00XB : 1000 1110 : mod sreg r/m   |
| segment register to register                      | 0100 000B : 1000 1100 : 11 sreg reg    |
| segment register to qwordregister (zero extended) | 0100 100B 1000 1100 : 11 sreg qwordreg |
| segment register to memory                        | 0100 00XB : 1000 1100 : mod sreg r/m   |
| segment register to memory64 (zero extended)      | 0100 10XB 1000 1100 : mod sreg3 r/m    |