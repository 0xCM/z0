<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.matrix</name>
    </assembly>
    <members>
        <member name="T:Z0.MatMod">
            <summary>
            Defines Modular matrix operations
            </summary>
            <remarks>
            Algorithms taken from SSJ; see LICENSE file in this project root
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Z0.MatMod.fma(System.UInt32,System.UInt32,System.UInt32,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:Z0.MatMod.fma(System.UInt64,System.UInt64,System.UInt64,System.UInt64)" -->
        <!-- Badly formed XML comment ignored for member "M:Z0.MatMod.fma(System.Double,System.Double,System.Double,System.Double)" -->
        <member name="M:Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.UInt32}@,Z0.RowVector{``0,System.UInt32}@,System.UInt32,Z0.RowVector{``0,System.UInt32}@)">
            <summary>
            Computes the vector u = As (mod m)
            </summary>
            <param name="A">The matrix operand</param>
            <param name="v">The vector to be transformed</param>
            <param name="u">The transformed vector</param>
            <param name="m">The modulus</param>
        </member>
        <member name="M:Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.UInt64}@,Z0.RowVector{``0,System.UInt64}@,System.UInt64,Z0.RowVector{``0,System.UInt64}@)">
            <summary>
            Computes the vector v = As (mod m)
            </summary>
            <param name="A">The matrix operand</param>
            <param name="v">The vector to be transformed</param>
            <param name="u">The transformed vector</param>
            <param name="m">The modulus</param>
        </member>
        <member name="M:Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.Double}@,Z0.RowVector{``0,System.Double}@,System.Double,Z0.RowVector{``0,System.Double}@)">
            <summary>
            Computes the vector u = Av (mod m)
            </summary>
            <param name="A">The matrix operand</param>
            <param name="v">The vector to be transformed</param>
            <param name="u">The transformed vector</param>
            <param name="m">The modulus</param>
        </member>
        <member name="M:Z0.MatMod.mul``1(Z0.Matrix{``0,System.UInt32}@,Z0.Matrix{``0,System.UInt32}@,System.UInt32,Z0.Matrix{``0,System.UInt32}@)">
            <summary>
            Computes the product of square matricies C = AB (mod m)
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="C">The target matrix</param>
            <param name="m">The modulus</param>
            <typeparam name="N">The matrix order type</typeparam>
        </member>
        <member name="M:Z0.MatMod.mul``1(Z0.Matrix{``0,System.UInt64}@,Z0.Matrix{``0,System.UInt64}@,System.UInt64,Z0.Matrix{``0,System.UInt64}@)">
            <summary>
            Computes the matrix product C = AB (mod m)
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="C">The result matrix</param>
            <param name="m">The modulus</param>
        </member>
        <member name="M:Z0.MatMod.mul``1(Z0.Matrix{``0,System.Double}@,Z0.Matrix{``0,System.Double}@,System.Double,Z0.Matrix{``0,System.Double}@)">
            <summary>
            Computes the matrix product C = AB (mod m)
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="C">The result matrix</param>
            <param name="m">The modulus</param>
        </member>
        <member name="M:Z0.MatMod.pow``1(Z0.Matrix{``0,System.UInt32}@,System.UInt32,System.UInt32,Z0.Matrix{``0,System.UInt32}@)">
            <summary>
            Computes B = A^e (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="M:Z0.MatMod.pow``1(Z0.Matrix{``0,System.UInt64}@,System.UInt32,System.UInt64,Z0.Matrix{``0,System.UInt64}@)">
            <summary>
            Computes B = A^e (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="M:Z0.MatMod.pow``1(Z0.Matrix{``0,System.Double}@,System.UInt32,System.Double,Z0.Matrix{``0,System.Double}@)">
            <summary>
            Computes B = A^c (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="M:Z0.MatMod.pow2``1(Z0.Matrix{``0,System.UInt32}@,System.UInt32,System.UInt32,Z0.Matrix{``0,System.UInt32}@)">
            <summary>
            Computes B = A^{2^e} (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The base-2 log of the exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="M:Z0.MatMod.pow2``1(Z0.Matrix{``0,System.UInt64}@,System.UInt32,System.UInt64,Z0.Matrix{``0,System.UInt64}@)">
            <summary>
            Computes B = A^{2^e} (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The base-2 log of the exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="M:Z0.MatMod.pow2``1(Z0.Matrix{``0,System.Double}@,System.UInt32,System.Double,Z0.Matrix{``0,System.Double}@)">
            <summary>
            Computes B = A^{2^e} (mod m)
            </summary>
            <param name="A">The source matrix</param>
            <param name="e">The base-2 log of the exponent</param>
            <param name="m">The modulus</param>
            <param name="B">The result matrix</param>
        </member>
        <member name="T:Z0.Matrix">
            <summary>
            Defines the matrix api surface
            </summary>
        </member>
        <member name="M:Z0.Matrix.natspan``2(Z0.SpanBlock256{``1}@,``0)">
            <summary>
            Loads a natural block from blocked storage
            </summary>
            <param name="src">The source reference</param>
            <param name="n">The length representative</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Matrix.array``1(System.Int32,System.Nullable{``0})">
            <summary>
            Allocates a memory span of specified length
            </summary>
            <param name="len">The data length</param>
            <param name="fill">An optional fill value</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Matrix.alloc``2(``0,``1)">
            <summary>
            Allocates a square matrix of natual dimension
            </summary>
            <param name="n">The square dimension; specified, if desired, to aid type inference</param>
            <param name="fill">A value to which each cell is initialized</param>
            <typeparam name="N">The natural dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockalloc``2(``0,``1)">
            <summary>
            Allocates a blocked square matrix of natual dimension
            </summary>
            <param name="n">The square dimension; specified, if desired, to aid type inference</param>
            <param name="t">An example value; specified, if desired, to aid type inference</param>
            <typeparam name="N">The natural dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockalloc``3(``0,``1,``2)">
            <summary>
            Allocates a blocked matrix of natual dimensions
            </summary>
            <param name="m">The row count, specified if desired to aid type inference</param>
            <param name="n">The column count, specified if desired to aid type inference</param>
            <param name="t">An example value, specified if desired to aid type inference</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.alloc``3(``0,``1,``2)">
            <summary>
            Allocates a matrix of natual dimensions
            </summary>
            <param name="m">The row count, specified if desired to aid type inference</param>
            <param name="n">The column count, specified if desired to aid type inference</param>
            <param name="fill">A value to which each cell is initialized</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.load``3(``2[],``0,``1)">
            <summary>
            Loads a matrix of natural dimensions from an array
            </summary>
            <param name="src">The source span</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockload``3(Z0.SpanBlock256{``2},``0,``1)">
            <summary>
            Loads a matrix of natural dimensions from a blocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockload``2(Z0.SpanBlock256{``1},``0)">
            <summary>
            Loads a square matrix of natural dimensions from a blocked span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockload``2(``1[],``0)">
            <summary>
            Defines a square matrix
            </summary>
            <param name="src">The source data </param>
            <param name="n">The order</param>
            <typeparam name="N">The square dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockload``2(``0,``1[])">
            <summary>
            Defines a square matrix
            </summary>
            <param name="src">The source data </param>
            <param name="n">The order</param>
            <typeparam name="N">The square dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.load``2(``0,``1[])">
            <summary>
            Loads a square matrix of natural order from an array
            </summary>
            <param name="src">The source span</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.filename``3(System.Nullable{System.Int32})">
            <summary>
            Defines the canonical filename for a matrix data file
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.write``3(Z0.Matrix256{``0,``1,``2},System.IO.StreamWriter,System.Boolean,System.Nullable{Z0.TextDocFormat})">
            <summary>
            Writes a matrix to a delimited file
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target file</param>
            <typeparam name="M">The natural row count type</typeparam>
            <typeparam name="N">The natural column count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Matrix.blockread``3(Z0.FS.FilePath)">
            <summary>
            Reads a matrix from a delimited file
            </summary>
            <param name="src">The source file</param>
            <param name="fmt">The file format</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="T:Z0.Matrix256`3">
            <summary>
            Defines a blocked primal matrix of natural dimensions
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="P:Z0.Matrix256`3.Rows">
            <summary>
            The number of matrix rows
            </summary>
        </member>
        <member name="P:Z0.Matrix256`3.Cols">
            <summary>
            The number of matrix colums
            </summary>
        </member>
        <member name="P:Z0.Matrix256`3.Capacity">
            <summary>
            The total number of matrix cells
            </summary>
        </member>
        <member name="M:Z0.Matrix256`3.SetCol(System.Int32,Z0.Block256{`0,`2})">
            <summary>
            Replaces an index-identied column of data with the content of a column vector
            </summary>
            <param name="col">The column index</param>
        </member>
        <member name="M:Z0.Matrix256`3.Transpose">
            <summary>
            Interchages rows and columns
            </summary>
        </member>
        <member name="P:Z0.Matrix256`3.Unblocked">
            <summary>
            Provides access to the underlying data as a linear unblocked span
            </summary>
        </member>
        <member name="P:Z0.Matrix256`3.Unsized">
            <summary>
            Provides access to the underlying data as a 256-bit blocked span
            </summary>
        </member>
        <member name="P:Z0.Matrix256`3.Natural">
            <summary>
            Provides access to the underlying data as a span of natural dimensions
            </summary>
        </member>
        <member name="M:Z0.Matrix256`3.Apply(System.Func{`2,`2})">
            <summary>
            Applies a function to each cell and overwites the existing cell value with the result
            </summary>
            <param name="f">The function to apply</param>
        </member>
        <member name="M:Z0.Matrix256`3.Convert``1">
            <summary>
            Converts the entries of the matrix to a specified type and
            populates a new matrix with the converted values
            </summary>
            <typeparam name="U">The conversion target type</typeparam>
        </member>
        <member name="M:Z0.Matrix256`3.Convert``1(Z0.Matrix256{`0,`1,``0}@)">
            <summary>
            Converts the entries of the matrix to a specified type and
            populates a new matrix with the converted values
            </summary>
            <typeparam name="U">The conversion target type</typeparam>
        </member>
        <member name="M:Z0.Matrix256`3.As``1">
            <summary>
            Reinterprets the primal type of the matrix
            </summary>
            <typeparam name="U">The target type</typeparam>
        </member>
        <member name="M:Z0.Matrix256`3.As``1(Z0.Matrix256{`0,`1,``0}@)">
            <summary>
            Reinterprets the primal type of the matrix
            </summary>
            <typeparam name="U">The target type</typeparam>
        </member>
        <member name="T:Z0.Matrix256`2">
            <summary>
            Defines a primal square matrix of natural order
            </summary>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="P:Z0.Matrix256`2.Order">
            <summary>
            The square matrix dimension
            </summary>
        </member>
        <member name="P:Z0.Matrix256`2.CellCount">
            <summary>
            The total number of allocated elements
            </summary>
        </member>
        <member name="P:Z0.Matrix256`2.Unblocked">
            <summary>
            Provides access to the underlying data as a linear unblocked span
            </summary>
        </member>
        <member name="P:Z0.Matrix256`2.Unsized">
            <summary>
            Provides access to the underlying data as a 256-bit blocked span
            </summary>
        </member>
        <member name="P:Z0.Matrix256`2.Natural">
            <summary>
            Provides access to the underlying data as a span of natural dimensions
            </summary>
        </member>
        <member name="M:Z0.Matrix256`2.Apply(System.Func{`1,`1})">
            <summary>
            Applies a function to each cell and overwites the existing cell value with the result
            </summary>
            <param name="f">The function to apply</param>
        </member>
        <member name="M:Z0.Matrix256`2.Replicate">
            <summary>
            Creates a copy of the matrix
            </summary>
        </member>
        <member name="M:Z0.MatrixFormat.Fomat``2(Z0.Block256{``0,``1})">
            <summary>
            Renders the source vector as text
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="F:Z0.TriangularKind.Lower">
            <summary>
            Classifies a matrix as lower-triangular
            </summary>
        </member>
        <member name="F:Z0.TriangularKind.Upper">
            <summary>
            Classifies a matrix as upper-triangular
            </summary>
        </member>
        <member name="T:Z0.Matrix`3">
            <summary>
            Defines a blocked primal matrix of natural dimensions
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="P:Z0.Matrix`3.Rows">
            <summary>
            The number of rows in the structure
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.Cols">
            <summary>
            The number of columns in the structure
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.Cells">
            <summary>
            The total number of allocated elements
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.RowCount">
            <summary>
            The number of rows in the matrix
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.ColCount">
            <summary>
            The number of columns in the matrix
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.Data">
            <summary>
            Provides access to the underlying data as a linear unblocked span
            </summary>
        </member>
        <member name="P:Z0.Matrix`3.Item(System.Int32)">
            <summary>
            Returns a row data copy
            </summary>
        </member>
        <member name="M:Z0.Matrix`3.SetCol(System.Int32,Z0.Block256{`0,`2})">
            <summary>
            Replaces an index-identied column of data with the content of a column vector
            </summary>
            <param name="col">The column index</param>
        </member>
        <member name="M:Z0.Matrix`3.Transpose">
            <summary>
            Interchages rows and columns
            </summary>
        </member>
        <member name="M:Z0.Matrix`3.Apply(System.Func{`2,`2})">
            <summary>
            Applies a function to each cell and overwites the existing cell value with the result
            </summary>
            <param name="f">The function to apply</param>
        </member>
        <member name="M:Z0.Matrix`3.Convert``1">
            <summary>
            Converts the entries of the matrix to a specified type and
            populates a new matrix with the converted values
            </summary>
            <typeparam name="U">The conversion target type</typeparam>
        </member>
        <member name="M:Z0.Matrix`3.Convert``1(Z0.Matrix{`0,`1,``0}@)">
            <summary>
            Converts the entries of the matrix to a specified type and
            populates a new matrix with the converted values
            </summary>
            <typeparam name="U">The conversion target type</typeparam>
        </member>
        <member name="T:Z0.Matrix`2">
            <summary>
            Defines a primal square matrix of natural order
            </summary>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="P:Z0.Matrix`2.Order">
            <summary>
            The square matrix dimension
            </summary>
        </member>
        <member name="P:Z0.Matrix`2.Cells">
            <summary>
            The total number of allocated elements
            </summary>
        </member>
        <member name="P:Z0.Matrix`2.Data">
            <summary>
            The data contained in the matrix
            </summary>
        </member>
        <member name="P:Z0.Matrix`2.Span">
            <summary>
            The data contained in the matrix
            </summary>
            <value></value>
        </member>
        <member name="P:Z0.Matrix`2.RowCount">
            <summary>
            The number of rows in the matrix
            </summary>
        </member>
        <member name="P:Z0.Matrix`2.ColCount">
            <summary>
            The number of columns in the matrix
            </summary>
        </member>
        <member name="P:Z0.Matrix`2.Item(System.Int32)">
            <summary>
            Returns a row data copy
            </summary>
        </member>
        <member name="M:Z0.Matrix`2.Transpose">
            <summary>
            Interchages rows and columns
            </summary>
        </member>
        <member name="M:Z0.Matrix`2.Apply(System.Func{`1,`1})">
            <summary>
            Applies a function to each cell and overwites the existing cell value with the result
            </summary>
            <param name="f">The function to apply</param>
        </member>
        <member name="M:Z0.Matrix`2.First(System.Func{`1,System.Boolean},System.ValueTuple{System.Int32,System.Int32}@)">
            <summary>
            Returns the first cell value, if any, that satisfies a supplied predicate
            </summary>
            <param name="f">The predicate</param>
            <param name="pos">The cell position where the match was found</param>
        </member>
        <member name="M:Z0.Matrix`2.Replicate">
            <summary>
            Creates a copy of the matrix
            </summary>
        </member>
        <member name="T:Z0.RandomMatrix">
            <summary>
            Defines the matrix api surface
            </summary>
        </member>
        <member name="M:Z0.RandomMatrix.Matrix``3(Z0.IPolyrand,``0,``1)">
            <summary>
            Allocates and fills a matrix of natural dimensions with random values
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The range of potiential random values</param>
            <param name="m">The natural number of rows</param>
            <param name="n">The natural number of columns</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The column Type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.Matrix``3(Z0.IPolyrand,Z0.Interval{``2},``0,``1)">
            <summary>
            Allocates and fills a matrix of natural dimensions with random values
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The range of potiential random values</param>
            <param name="m">The natural number of rows</param>
            <param name="n">The natural number of columns</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The column Type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.Matrix``2(Z0.IPolyrand,``0,``1,``1)">
            <summary>
            Samples a square matrix of natural order
            </summary>
            <param name="random">The random source</param>
            <param name="min">The min random value</param>
            <param name="max">The max random value</param>
            <param name="transformer">The max random value</param>
            <typeparam name="N">The dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlock``3(Z0.IPolyrand)">
            <summary>
            Samples a blocked matrix of natural dimensions where the entries are constrained to a specified domain
            </summary>
            <param name="random">The random source</param>
            <param name="m">The number of matrix rows</param>
            <param name="n">The number of matrix columns</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The column Type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlock``3(Z0.IPolyrand,Z0.Interval{``2},``0,``1)">
            <summary>
            Samples a blocked matrix of natural dimensions where the entries are constrained to a specified domain
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain to which the entry values are constrained</param>
            <param name="m">The number of matrix rows</param>
            <param name="n">The number of matrix columns</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The column Type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlock``2(Z0.IPolyrand,System.Nullable{Z0.Interval{``1}})">
            <summary>
            Samples a square matrix of natural order
            </summary>
            <param name="random">The random source</param>
            <typeparam name="N">The dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlock``4(Z0.IPolyrand,``0,``1,``3)">
            <summary>
            Samples values over an S-domain, transforms the sample into a T-domain and from this transformed
            sample constructs a matrix of natural dimensions
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The sample domain</param>
            <param name="m">The row count</param>
            <param name="n">The column count</param>
            <param name="rep">A scalar representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The column type</typeparam>
            <typeparam name="S">The sample type</typeparam>
            <typeparam name="T">The matrix element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlockF32``3(Z0.IPolyrand,System.Nullable{System.Int32},System.Nullable{System.Int32},``0)">
            <summary>
            Samples 32-bit integers that are converted to 32-bit floats to populate a square matrix
            </summary>
            <param name="random">The random source</param>
            <param name="n">The matrix order</param>
            <param name="min">The minimum entry value</param>
            <param name="min">The maximum entry value</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="S">The sample type</typeparam>
            <typeparam name="T">The matrix element type</typeparam>
        </member>
        <member name="M:Z0.RandomMatrix.MatrixBlockF64``3(Z0.IPolyrand,System.Nullable{System.Int64},System.Nullable{System.Int64},``0)">
            <summary>
            Samples 64-bit integers that are converted to 64-bit floats to populate a square matrix
            </summary>
            <param name="random">The random source</param>
            <param name="n">The matrix order</param>
            <param name="min">The minimum entry value</param>
            <param name="min">The maximum entry value</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="S">The sample type</typeparam>
            <typeparam name="T">The matrix element type</typeparam>
        </member>
        <member name="T:Z0.IRngSuite256`1">
            <summary>
            Characterizes a suite of random number generators
            </summary>
            <typeparam name="N">The number of generators in the suite</typeparam>
        </member>
        <member name="M:Z0.IRngSuite256`1.Next``1">
            <summary>
            Retrieves the next vector from the suite, where the components 
            are bound only by the domain of the type
            </summary>
        </member>
        <member name="M:Z0.IRngSuite256`1.Next``1(``0)">
            <summary>
            Retrieves the next vector from the suite, where each component is 
            constrained by an upper bound
            </summary>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The point type</typeparam>
        </member>
        <member name="M:Z0.IRngSuite256`1.Next``1(``0,``0)">
            <summary>
            Retrieves the next vector from the suite, where each component is 
            constrained by both lower and upper bounds
            </summary>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The point type</typeparam>
        </member>
        <member name="M:Z0.IRngSuite256`1.Next``1(Z0.Interval{``0})">
            <summary>
            Retrieves the next vector from the suite, where each component is 
            constrained by an interval domain
            </summary>
            <param name="domain">The range</param>
            <typeparam name="T">The point type</typeparam>
        </member>
        <member name="M:Z0.IRngSuite256`1.Select(System.Int32)">
            <summary>
            Retrieves the generator corresponding to a specified index that
            is in the range 0, 1, ..., N - 1
            </summary>
            <param name="index">The rng index</param>
        </member>
        <member name="T:Z0.RngSuite256`1">
            <summary>
            Defines a suite of random number generators
            </summary>
            <typeparam name="N">The number of generators in the suite</typeparam>
        </member>
        <member name="T:Z0.RandomVector">
            <summary>
            Defines the matrix api surface
            </summary>
        </member>
        <member name="M:Z0.RandomVector.VectorBlock``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})">
            <summary>
            Produces a blocked vector
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})">
            <summary>
            Produces a generic random vector over one domain and converts it to a vector over another
            </summary>
            <param name="random">The random source</param>
            <param name="len">The vector length</param>
            <param name="domain">The domain over which random selection will occur</param>
            <param name="t">A target domain representative</param>
            <typeparam name="S">The source domain type</typeparam>
            <typeparam name="T">The target domain type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,Z0.Interval{``1},``0)">
            <summary>
            Allocates and populates a vector of natural length
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.VectorBlock``3(Z0.IPolyrand,Z0.Interval{``1},``0)">
            <summary>
            Allocates and populates a vector of natural length
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="n">The natural vector length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="S">The sample domain type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,``0,``1)">
            <summary>
            Allocates and populates a vector of natural length
            </summary>
            <param name="random">The random source</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Interval{``1},Z0.Block256{``0,``1}@,``0)">
            <summary>
            Populates a vector of natural length with random values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="vector">The vector to populate</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Block256{``0,``1}@,``0)">
            <summary>
            Populates a vector of natural length with random values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="vector">The vector to populate</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})">
            <summary>
            Produces a generic vector
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``2(Z0.IPolyrand,Z0.Interval{``1},``0)">
            <summary>
            Produces a natural vector
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``2(Z0.IPolyrand,``1,``1,``0)">
            <summary>
            Produces a natural vector
            </summary>
            <param name="random">The random source</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``2(Z0.IPolyrand,``0)">
            <summary>
            Allocates and populates a vector of natural length
            </summary>
            <param name="random">The random source</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``3(Z0.IPolyrand,Z0.Interval{``1},``0)">
            <summary>
            Produces a natural vector over one domain and converts it to another
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="n">The natural vector length</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="S">The sample domain type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Vector``2(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})">
            <summary>
            Produces a natural vector over one domain and converts it to another
            </summary>
            <param name="random">The random source</param>
            <param name="len">The vector length</param>
            <param name="domain">The domain over which random selection will occur</param>
            <param name="rep">A target domain representative</param>
            <typeparam name="S">The source domain type</typeparam>
            <typeparam name="T">The target domain type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Interval{``1},Z0.RowVector{``0,``1}@,``0)">
            <summary>
            Populates a vector of natural length with random values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="vector">The vector to populate</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.RowVector{``0,``1}@,``0)">
            <summary>
            Populates a vector of natural length with random values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="vector">The vector to populate</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Contract``2(Z0.Block256{``0,``1},Z0.Block256{``0,``1})">
            <summary>
            Effects a component-wise contraction on the source vector on a source vector of unsigned primal type,
            dst[i] = src[i].Contract(max[i])
            </summary>
            <param name="src">The vector to contract</param>
            <param name="max">The upper bound</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The unsigned primal type</typeparam>
        </member>
        <member name="M:Z0.RandomVector.Contract``1(Z0.RowVector256{``0},Z0.RowVector256{``0})">
            <summary>
            Effects a component-wise contraction on the source vector on a source vector of unsigned primal type,
            dst[i] = src[i].Contract(max[i])
            </summary>
            <param name="src">The vector to contract</param>
            <param name="max">The upper bound</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The unsigned primal type</typeparam>
        </member>
    </members>
</doc>
