<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.logix</name>
    </assembly>
    <members>
        <member name="M:Z0.Logix.LogicEngine.eval(Z0.ILogicExpr)">
            <summary>
            Evaluates an untyped expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.ILogicExpr{``0})">
            <summary>
            Evaluates a typed logic expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IExpr{``0})">
            <summary>
            Evaluates a typed scalar expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IComparisonExpr{``0})">
            <summary>
            Evaluates a comparison expression, returning literal expression over the comparison type
            and the interpretation of this literal is type-dependent
            </summary>
            <param name="expr">The predicate to evaluate</param>
            <typeparam name="T">The type over which the comparison is defined</typeparam>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IComparisonExpr{System.Runtime.Intrinsics.Vector128{``0}})">
            <summary>
            Evaluates a comparison expression over 128-bit intrinsic vectors
            </summary>
            <param name="expr">The expression to evaluate</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IComparisonExpr{System.Runtime.Intrinsics.Vector256{``0}})">
            <summary>
            Evaluates a comparison expression over 256-bit intrinsic vectors
            </summary>
            <param name="expr">The expression to evaluate</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IComparisonPredExpr{``0})">
            <summary>
            Evaluates a comparison predicate, returning an enabled bit if the comparison succeeds and
            a disabled bit otherwise
            </summary>
            <param name="expr">The predicate to evaluate</param>
            <typeparam name="T">The type over which the comparison is defined</typeparam>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IArithmeticExpr{``0})">
            <summary>
            Evaluates a typed scalar expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IExpr{System.Runtime.Intrinsics.Vector128{``0}})">
            <summary>
            Evaluates a typed 128-bit intrinsic expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.eval``1(Z0.IExpr{System.Runtime.Intrinsics.Vector256{``0}})">
            <summary>
            Evaluates a typed 256-bit intrinsic expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.satisfied(Z0.ComparisonExpr,Z0.Bit32,Z0.Bit32)">
            <summary>
            Returns an enabled bit if the equality expression is satisfied with
            specified variable values and a disabled bit otherwise
            </summary>
            <param name="expr">The expression to test</param>
            <param name="a">The first variable value</param>
            <param name="b">The second variable value</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.satisfied``1(Z0.ComparisonExpr{``0},``0,``0)">
            <summary>
            Returns an enabled bit if the equality expression is satisfied with
            specified variable values and a disabled bit otherwise
            </summary>
            <param name="expr">The expression to test</param>
            <param name="a">The first variable value</param>
            <param name="b">The second variable value</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.satisfied``1(Z0.ComparisonExpr{System.Runtime.Intrinsics.Vector128{``0}},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Returns an enabled bit if the equality expression is satisfied with
            specified variable values and a disabled bit otherwise
            </summary>
            <param name="expr">The expression to test</param>
            <param name="a">The first variable value</param>
            <param name="b">The second variable value</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.satisfied``1(Z0.ComparisonExpr{System.Runtime.Intrinsics.Vector256{``0}},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Returns an enabled bit if the equality expression is satisfied with
            specified variable values and a disabled bit otherwise
            </summary>
            <param name="expr">The expression to test</param>
            <param name="a">The first variable value</param>
            <param name="b">The second variable value</param>
        </member>
        <member name="M:Z0.Logix.LogicEngine.equal(Z0.VariedLogicExpr,Z0.VariedLogicExpr)">
            <summary>
            Determines by exhaustion whether the left and right operands are equal
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
        </member>
        <member name="M:Z0.Logix.LogicExprEval.eval(Z0.ILogicOpExpr)">
            <summary>
            Evaluates a logical operator expression
            </summary>
            <param name="expr">The expression to evaluate</param>
        </member>
        <member name="M:Z0.XTend.ToLogicSeq(Z0.BitString)">
            <summary>
            Transforms a bitstring into a literal logic sequence
            </summary>
            <param name="bs">The source bitstring</param>
        </member>
        <member name="M:Z0.XTend.ToLogicSeq``1(Z0.BitString,``0)">
            <summary>
            Transforms a bitstring into a literal logic sequence of natural length
            </summary>
            <param name="bs">The source bitstring</param>
            <typeparam name="N">The length type</typeparam>
        </member>
        <member name="M:Z0.Survey.Vector``1(Z0.Question{``0}@)">
            <summary>
            Creates a bitvector representation of a question
            </summary>
            <param name="src">The question upon which the bitvector will be predicated</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.Survey.Vector``1(Z0.QuestionResponse{``0}@)">
            <summary>
            Creates a bitvector representation of a question response
            </summary>
            <param name="src">The response upon which the bitvector will be predicated</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.Survey.Matrix``1(Z0.SurveyResponse{``0}@)">
            <summary>
            Creates a bitmatrix representation of a survey response
            </summary>
            <param name="src">The survey upon which the matrix will be predicated</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.Survey.Matrix``1(Z0.Survey{``0}@)">
            <summary>
            Creates a bitmatrix representation of a survey
            </summary>
            <param name="src">The survey upon which the matrix will be predicated</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.template``1(System.UInt32,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a stock survey that contains no meaningful content
            </summary>
            <param name="id">The survey id</param>
            <param name="name">The survey name</param>
            <param name="length">The number of questions in the survey</param>
            <param name="width">The (uniform) number of choices in each question</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.template``1(System.UInt32,System.String)">
            <summary>
            Creates a stock survey with the maximum number of questions/choices supported by the primal type
            </summary>
            <param name="id">The survey id</param>
            <param name="name">The survey name</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.template``1(System.UInt32,System.String,System.Int32)">
            <summary>
            Creates a stock survey with a specified number of questions, each of which has the maximum number
            of choices supported by the primal type
            </summary>
            <param name="id">The survey id</param>
            <param name="name">The survey name</param>
            <param name="length">The number of questions in the survey</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.choice``1(``0,System.String)">
            <summary>
            Creates a choice for a survey question
            </summary>
            <param name="id">The question-relative choice identifier</param>
            <param name="label">The choice name</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.question``1(System.UInt32,System.String,System.Int32,Z0.QuestionChoice{``0}[])">
            <summary>
            Creates a question for a survey
            </summary>
            <param name="id">The survey-relative question identifier</param>
            <param name="statement">The question statement</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.response``1(System.UInt32,Z0.QuestionChoice{``0}[])">
            <summary>
            Creates a response to a survey question
            </summary>
            <param name="questionId">The id of the question to which a response is given</param>
            <param name="chosen">The selected choices</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.response``1(System.UInt32,Z0.QuestionResponse{``0}[])">
            <summary>
            Creates a response to a survey
            </summary>
            <param name="surveyId">The id of the question to which a response is given</param>
            <param name="answered">The selected choices</param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
        <member name="M:Z0.SurveyBuilder.Survey``1(System.UInt32,System.String,Z0.Question{``0}[])">
            <summary>
            Creates a survey
            </summary>
            <param name="id">The survey identifier, unique within some external scope</param>
            <param name="name">The name of the survey, unique within some external scope</param>
            <param name="questions"></param>
            <typeparam name="T">The primal data type used for survey aspect representation</typeparam>
        </member>
    </members>
</doc>
