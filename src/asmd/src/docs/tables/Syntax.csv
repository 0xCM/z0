# OpCode Column

| Np    | NP     | Indicates the use of 66/F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction                                                                                                                       |
| Nfx   | NFx    | Indicates the use of F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction.                                                                                                                         |
| RexW  | REX.W  | Indicates the use of a REX prefix that affects operand size or instruction semantics ;REX prefixes that promote legacy instructions to 64-bit behavior are not listed explicitly in the opcode column.                                                   |
| Digit | /digit | A digit between 0 and 7 indicates that the ModR/M byte of the instruction uses only the r/m (register or memory) operand.                                                                                                                                |
|       |        | The reg field contains the digit that provides an extension to the instruction's opcode.                                                                                                                                                                 |
| ModRm | /r     | Indicates that the ModR/M byte of the instruction contains a register operand and an r/m operand.                                                                                                                                                        |
| Cb    | cb     | A 1-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                        |
| Cw    | cw     | A 2-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                        |
| Cd    | cd     | A 4-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                        |
| Cp    | cp     | A 6-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                        |
| Co    | co     | A 8-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                        |
| Ct    | ct     | A 10-byte value following the opcode; can be used to specify a code offset and possibly a new value for the code segment register.                                                                                                                       |
| Ib    | ib     | A 1-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.  |
| Iw    | iw     | A 2-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.  |
| Id    | id     | A 4-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.  |
| Io    | io     | A 8-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed value. All words and doublewords and quadwords are given with the low-order byte first.  |
| Rb    | +rb    | The instruction lists the corresponding hexadecimal value of the opcode byte with low 3 bits as 000b.                                                                                                                                                    |
|       |        | Indicates the lower 3 bits of the opcode byte is used to encode the register operand without a modR/M byte.                                                                                                                                              |
| Rw    | +rw    | The instruction lists the corresponding hexadecimal value of the opcode byte with low 3 bits as 000b.                                                                                                                                                    |
|       |        | Indicates the lower 3 bits of the opcode byte is used to encode the register operand without a modR/M byte.                                                                                                                                              |
| Rd    | +rd    | The instruction lists the corresponding hexadecimal value of the opcode byte with low 3 bits as 000b.                                                                                                                                                    |
|       |        | Indicates the lower 3 bits of the opcode byte is used to encode the register operand without a modR/M byte.                                                                                                                                              |
| Ro    | +ro    | The instruction lists the corresponding hexadecimal value of the opcode byte with low 3 bits as 000b.Indicates the lower 3 bits of the opcode byte is used to encode the register operand without a modR/M byte.                                         |
| NE    | N.E    | Not encodable                                                                                                                                                                                                                                            |
| Sti   | +i     | A number used in floating-point instructions when one of the operands is ST(i) from the FPU register stack. The number i (which can range from 0 to 7) is added to the hexadecimal byte given at the left of the plus sign to form a single opcode byte. |

# Instruction Column

| Identifier     | Symbol           | Description|
| Bnd            | bnd              | A 128-bit bounds register. BND0 through|
| Dst            | DST              | the destination in an instruction. This field is encoded by reg_field|
| Erc            | {er}             | Indicates support for embedded rounding control, which is only applicable to the register-register|
|                |                  | form of the instruction. This also implies support for SAE (Suppress All Exceptions|
| Imm8           | imm8             | An immediate byte value. The imm8 symbol is a signed number between –128 and +127 inclusive|
|                |                  | For instructions in which imm8 is combined with a word or doubleword operand, the immediate value|
|                |                  | is sign-extended to form a word or doubleword. The upper byte of the word is filled with the topmost bit of the immediate value|
| Imm16          | imm16            | An immediate word value used for instructions whose operand-size attribute is 16 bits|
|                |                  | This is a number between [–32,768] and [+32,767] inclusive|
| Imm32          | imm32            | An immediate doubleword value used for instructions whose operand-size attribute is 32 bits. It allows the use of a number between [+2147483647, –2147483648] inclusive|
| Imm64          | imm64            | An immediate quadword value used for instructions whose operand-size attribute is 64 bits. The value allows the use of a number between +9,223,372,036,854,775,807 and –9,223,372,036,854,775,808 inclusive|
| K1             | k1               | A mask register used as a regular operand (either destination or source). The 64-bit k registers are: k0 through k|
| Mem            | m                | A 16- 32- or 64-bit operand in memory|
| Mem8           | m8               | A byte operand in memory ( usually expressed as a variable or array name) but pointed to by the|
|                |                  | DS:(E)SI or ES:(E)DI registers. In 64-bit mode, it is pointed to by the RSI or RDI registers|
| Mem16          | m16              | A word operand in memory (usually expressed as a variable or array name) but pointed to by the DS:(E)SI or ES:(E)DI registers. This nomenclature is used only with the string instructions|
| Mem32          | m32              | A doubleword operand in memory (usually expressed as a variable or array name) but pointed to by the DS:(E)SI or ES:(E)DI registers. This nomenclature is used only with the string instructions|
| Mem64          | m64              | A memory quadword operand in memory|
| Mem128         | m128             | A memory double quadword operand in memory|
| MemPtr16Offs16 | m16:16           | A memory operand containing a far pointer composed of two numbers. The number to the left of the colon|
|                |                  | corresponds to the pointer's segment selector. The number to the right corresponds to its offset|
| MemPtr16Offs32 | m16:32           | A memory operand containing a far pointer composed of two numbers|
|                |                  | The number to the left of the colon corresponds to the pointer's segment selector. The number to the right corresponds to its offset|
| MemPtr16Offs64 | m16:64           | A memory operand containing a far pointer composed of two numbers. The number to the left of the colon|
|                |                  | corresponds to the pointer's segment selector. The number to the right corresponds to its offset|
| Mem16x32       | m16&32           | A memory operand consisting of data item pairs whose sizes are indicated on the left and the right|
|                |                  | side of the ampersand. All memory addressing modes are allowed. The m16&16 and m32&32 operands are used by the|
|                |                  | BOUND instruction to provide an operand containing an upper and lower bounds for array indices|
|                |                  | The m16&32 operand is used by LIDT and LGDT to provide a word with which to load the limit field, and a                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
|                |                  | doubleword with which to load the base field of the corresponding GDTR and IDTR registers. The m16&64 operand is used|
|                |                  | by LIDT and LGDT in 64-bit mode to provide a word with which to load the limit field, and a quadword with which to load the|
|                |                  | base field of the corresponding GDTR and IDTR registers|
| Mem16x16       | m16&16           | A memory operand consisting of data item pairs whose sizes are indicated on the left and|
|                |                  | the right side of the ampersand. All memory addressing modes are allowed. The m16&16 and m32&32 operands are used by the BOUND instruction to provide an operand containing an upper and lower bounds for array indices. The m16&32 operand is used by LIDT and LGDT to provide a word with which to load the limit field, and a doubleword with which to load the base field of the corresponding GDTR and IDTR registers. The m16&64 operand is used by LIDT and LGDT in 64-bit mode to provide a word with which to load the limit field, and a quadword with which to load the base field of the corresponding GDTR and IDTR registers.                                                                                          |
| Mem32x32       | m32&32           | A memory operand consisting of data item pairs whose sizes are indicated on the left and|
|                |                  | the right side of the ampersand. All memory addressing modes are allowed. The m16&16 and m32&32 operands are used by the BOUND instruction to provide an operand containing an upper and lower bounds for array indices. The m16&32 operand is used by LIDT and LGDT to provide a word with which to load the limit field, and a doubleword with which to load the base field of the corresponding GDTR and IDTR registers. The m16&64 operand is used by LIDT and LGDT in 64-bit mode to provide a word with which to load the limit field, and a quadword with which to load the base field of the corresponding GDTR and IDTR registers.                                                                                          |
| Mem16x64       | m16&64           | A memory operand consisting of data item pairs whose sizes are indicated on the left and the right side of the ampersand. All memory addressing modes are allowed. The m16&16 and m32&32 operands are used by the BOUND instruction to provide an operand containing an upper and lower bounds for array indices. The m16&32 operand is used by LIDT and LGDT to provide a word with which to load the limit field, and a doubleword with which to load the base field of the corresponding GDTR and IDTR registers. The m16&64 operand is used by LIDT and LGDT in 64-bit mode to provide a word with which to load the limit field, and a quadword with which to load the base field of the corresponding GDTR and IDTR registers. |
| Memf32         | m32fp            | A single-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions|
| Memf64         | m64fp            | A double-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Memf80         | m80fp            | A double extended-precision floating-point operand in memory. These symbols designate floating-point values that are used as operands for x87 FPU floating-point instructions|
| Memf16i        | m16int           | A word integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions|
| Memf32i        | m32int           | A doubleword integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions|
| Memf64i        | m64int           | A quadword integer operand in memory. These symbols designate integers that are used as operands for x87 FPU integer instructions|
| Mm             | mm               | An MMX register. The 64-bit MMX registers are: MM0 through|
| Mm32           | mm/m32           | The low order 32 bits of an MMX register or a 32-bit memory operand. The 64-bit MMX registers are: MM0 through MM7. The contents of memory are found at the address provided by the effective address computation|
| Mm64           | mm/m64           | An MMX register or a 64-bit memory operand. The 64-bit MMX registers are: MM0 through MM7. The contents of memory are found at the address provided by the effective address computation|
| Mib            | mib              | A memory operand using SIB addressing form, where the index register is not used in address calculation, Scale is ignored. Only the base and displacement are used in effective address calculation|
| Moffs8         | moffs8           | A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.                                                                                                                                                                                                                                                                                                                                                               |
| Moffs16        | moffs16          | A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.                                                                                                                                                                                                                                                                                                                                                               |
| Moffs32        | moffs32          | A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.                                                                                                                                                                                                                                                                                                                                                               |
| Moffs64        | moffs64          | A simple memory variable (memory offset) of type byte, word, or doubleword used by some variants of the MOV instruction. The actual address is given by a simple offset relative to the segment base. No ModR/M byte is used in the instruction. The number shown with moffs indicates its size, which is determined by the address-size attribute of the instruction.                                                                                                                                                                                                                                                                                                                                                               |
| Ptr16Offs16    | ptr16:16         | A far pointer typically to a code segment different from that of the instruction. The notation 16:16 indicates that the value of the pointer has two parts. The value to the left of the colon is a 16- bit selector or value destined for the code segment register. The value to the right corresponds to the offset within the destination segment. The ptr16:16 symbol is used when the instruction's operand-size attribute is 16 bits                                                                                                                                                                                                                                                                                          |
| Ptr16Offs32    | ptr16:32         | A far pointer typically to a code segment different from that of the instruction and similar to ptr16:16 notation; in this case the ptr16:32 symbol is used when the operand-size attribute is 32 bits|
| R8             | r8               | One of the byte general-purpose registers: {AL CL DL BL AH CH DH BH BPL SPL DIL SIL}|
|                |                  | or one of the byte registers (R8L-R15L) available when using REX.R and 64-bit mode|
| R16            | r16              | One of the word general-purpose registers: {AX CX DX BX SP BP SI DI}; or one of the word registers (R8-R15) available when using REX.R and 64-bit mode|
| R32            | r32              | One of the doubleword general-purpose registers: {EAX ECX EDX EBX ESP EBP ESI EDI}; or one of the doubleword registers (R8D - R15D) available when using REX.R in 64-bit mode.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| R64            | r64              | One of the quadword general-purpose registers: {RAX RBX RCX RDX RDI RSI RBP RSP R8–R15}; These are available when using REX.R and 64-bit mode|
| Rel8           | rel8             | A relative address in the range from 128 bytes before the end of the instruction to 127 bytes after the end of the instruction|
| Rel16          | rel16            | A relative address within the same code segment as the instruction assembled. The rel16 symbol applies to instructions with an operand-size attribute of 16 bits|
| Rel32          | rel32            | A relative address within the same code segment as the instruction assembled. The rel32 symbol applies to instructions with an operand-size attribute of 32 bits|
| Rm8            | r/m8             | A byte operand that is either the contents of a byte general-purpose register: {AL CL DL BL AH CH DH BH BPL SPL DIL SIL}; or a byte from memory. Byte registers R8L - R15L are available using REX.R in 64-bit mode.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Rm16           | r/m16            | A word general-purpose register or memory operand used for instructions whose operand-size attribute is 16 bits. The word general-purpose registers are: AX, CX, DX, BX, SP, BP, SI, DI. The contents of memory are found at the address provided by the effective address computation. Word registers R8W - R15W are available using REX.R in 64-bit mode.                                                                                                                                                                                                                                                                                                                                                                          |
| Rm32           | r/m32            | A doubleword general-purpose register or memory operand used for instructions whose operand size attribute is 32 bits. The doubleword general-purpose registers are: EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI. The contents of memory are found at the address provided by the effective address computation. Doubleword registers R8D - R15D are available when using REX.R in 64-bit mode.                                                                                                                                                                                                                                                                                                                                           |
| Rm64           | r/m64            | A quadword general-purpose register or memory operand used for instructions whose operand-size attribute is 64 bits when using REX.W. Quadword general-purpose registers are: RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8–R15; these are available only in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.                                                                                                                                                                                                                                                                                                                                                                |
| SegReg         | Sreg             | A segment register. The segment register bit assignments are ES = 0, CS = 1, SS = 2, DS = 3, FS = 4, and GS = 5.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| Sae            | {sae}            | Indicates support for SAE (Suppress All Exceptions). This is used for instructions that support SAE, but do not support embedded rounding control|
| Src            | SRC              | The source in a single-source instruction|
| Src1           | SRC1             | Denotes the first source operand in the instruction syntax of an instruction encoded with the VEX/EVEX prefix and having two or more source operands|
| Src2           | SRC2             | Denotes the second source operand in the instruction syntax of an instruction encoded with the VEX/EVEX prefix and having two or more source operands|
| Src3           | SRC3             | Denotes the third source operand in the instruction syntax of an instruction encoded with the VEX/EVEX prefix and having three source operands|
| St             | ST               | The top element of the FPU register stack; a synonym for|
| St0            | ST(0)            | The top element of the FPU register stack|
| Xmm,           | xmm              | An XMM register. The 128-bit XMM registers are: XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode|
| XmmMem32       | xmm/m32          | An XMM register or a 32-bit memory operand. The 128-bit XMM registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| XmmMem64       | xmm/m64          | An XMM register or a 64-bit memory operand. The 128-bit SIMD floating-point registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| XmmMem128      | xmm/m128         | An XMM register or a 128-bit memory operand. The 128-bit XMM registers are XMM0 through XMM7; XMM8 through XMM15 are available using REX.R in 64-bit mode. The contents of memory are found at the address provided by the effective address computation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| Xmm0           | <XMM0>           | Indicates implied use of the XMM0 register. When there is ambiguity xmm1 indicates the first source operand using an XMM register and xmm2 the second source operand using an XMM register. Some instructions use the XMM0 register as the third source operand, indicated by <XMM0>. The use of the third XMM register operand is implicit in the instruction encoding and does not affect the ModR/M encoding.                                                                                                                                                                                                                                                                                                                     |
| Ymm            | ymm              | A YMM register. The 256-bit YMM registers are: YMM0 through YMM7; YMM8 through YMM15 are available in 64-bit mode|
| Mem256         | m256             | A 32-byte operand in memory. This nomenclature is used only with AVX instructions|
| Ymm256         | ymm/m256         | A YMM register or 256-bit memory operand|
| Ymm0           | <YMM0>           | Indicates use of the YMM0 register as an implicit argument.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| Zmm            | zmm              | A ZMM register|
| Mem512         | m512             | A 64-byte operand in memory|
| Zmm256         | zmm/m512         | A ZMM register or 512-bit memory operand|
| MemV           | mV               | A vector memory operand; the operand size is dependent on the instruction|
| Mem32BCast     | m32bcst          | A broadcast from a 32-bit memory location|
| Mem64BCast     | m64bcst          | A broadcast from a 64-bit memory location|
| ZmmRm32Bc      | zmm/m512/m32bcst | An operand that can be a ZMM register, a 512-bit memory location or a 512-bit vector loaded from a 32-bit memory location|
| ZmmRm64Bc      | zmm/m512/m64bcst | An operand that can be a ZMM register, a 512-bit memory location or a 512-bit vector loaded from a 64-bit memory location|
| Zmm0           | <ZMM0>           | Indicates use of the ZMM0 register as an implicit argument|


64-bit mode

| Identifier | Symbol | Description                                                                                                                                                                                                   |
| Yea        | V      | Supported                                                                                                                                                                                                     |
| Nea        | I      | Not supported.                                                                                                                                                                                                |
| NE         | N.E.   | Indicates an instruction syntax is not encodable in 64-bit mode (it may represent part of a sequence of valid instructions in other modes).                                                                   |
| NP         | N.P.   | Indicates the REX prefix does not affect the legacy instruction in 64-bit mode.                                                                                                                               |
| NI         | N.I.   | Indicates the opcode is treated as a new instruction in 64-bit mode.                                                                                                                                          |
| NS         | N.S.   | Indicates an instruction syntax that requires an address override prefix in 64-bit mode and is not supported. Using an address override prefix in 64-bit mode may result in model-specific execution behavior |

# Legacy Mode

| Identifier | Symbol | Description                                                              |
| Yea        | V      | Supported.                                                               |
| Nea        | I      | Not supported.                                                           |
| NE         | N.E.   | Indicates an Intel 64 instruction mnemonics/syntax that is not encodable |

# Encoding

| Identifier | Symbol    | Description                                                                             |
| VexBits    | Vex.vvvv  | The VEX bit field specifying a source or destination register (in 1’s complement form). |
| RmField    | rm_field  | The ModR/M r/m field and any REX.B                                                      |
| RegField   | reg_field | The ModR/M reg field and any REX.R                                                      |

# Parametric

| Identifier    | Sort        | Symbol      | Description                                                                                                                                                                                                                                                                                                                                                     |
| Stᐸiᐳ         | Instruction | ST(i)       | The i th element from the top of the FPU register stack (i ← 0 through 7).                                                                                                                                                                                                                                                                                      |
| Vm32ᐸxㆍyㆍzᐳ | Instruction | vm32{x,y,z} | A vector array of memory operands specified using VSIB memory addressing. The                                                                                                                                                                                                                                                                                   |
|               |             |             | array of memory addresses are specified using a common base register, a constant scale factor,                                                                                                                                                                                                                                                                  |
|               |             |             | and a vector index register with individual elements of 32-bit index value in an XMM register (vm32x), a YMM register (vm32y) or a ZMM register (vm32z).                                                                                                                                                                                                        |
| Vm64ᐸxㆍyㆍzᐳ | Instruction | vm64{x,y,z} | A vector array of memory operands specified using VSIB memory addressing. The array of memory addresses are specified using a common base register, a constant scale factor, and a vector index register with individual elements of 64-bit index value in an XMM register (vm64x), a YMM register (vm64y) or a ZMM register (vm64z).                           |
| Mask<k1ᐳ      | Instruction | {k1}        | A mask register used as instruction writemask for instructions that do not allow zeroing-masking but support merging-masking. This corresponds to instructions that require the value of the aaa field to be different than 0 (e.g., gather) and store-type instructions which allow only merging-masking.                                                      |
| Maskᐸk1ㆍzᐳ   | Instruction | {k1}{z}     | A mask register used as instruction writemask. The 64-bit k registers are: k1 through k7. Writemask specification is available exclusively via EVEX prefix. The masking can either be done as a merging masking, where the old values are preserved for masked out elements or as a zeroing masking. The type of masking is determined by using the EVEX.z bit. |
| Digitᐸd>      | OpCode      | /digit      | A digit between 0 and 7 indicates that the ModR/M byte of the instruction uses only the r/m (register or memory) operand. The reg field contains the digit that provides an extension to the instruction's opcode.                                                                                                                                              |

# OpCode Tables: Operand type codes

| Symbol | Meaning                                                                             |
| dq     | Double-quadword, regardless of operand-size attribute.                              |
| p      | 32-bit, 48-bit, or 80-bit pointer, depending on operand-size attribute.             |
| pd     | 128-bit or 256-bit packed double-precision floating-point data.                     |
| pi     | Quadword MMX technology register (for example: mm0).                                |
| ps     | 128-bit or 256-bit packed single-precision floating-point data.                     |
| q      | Quadword, regardless of operand-size attribute.                                     |
| qq     | Quad-Quadword (256-bits), regardless of operand-size attribute.                     |
| s      | 6-byte or 10-byte pseudo-descriptor.                                                |
| sd     | Scalar element of a 128-bit double-precision floating data.                         |
| ss     | Scalar element of a 128-bit single-precision floating data.                         |
| si     | Doubleword integer register (for example: eax).                                     |
| v      | Word, doubleword or quadword (in 64-bit mode), depending on operand-size attribute. |
| w      | Word, regardless of operand-size attribute.                                         |
| x      | dq or qq based on the operand-size attribute.                                       |
| y      | Doubleword or quadword (in 64-bit mode), depending on operand-size attribute.       |
| z      | Word for 16-bit operand-size or doubleword for 32 or 64-bit operand-size.           |

# OpCode Tables: Register Codes

| Symbol | Meaning                                                                                              | Example                                                                                                                                             |
| eXX    | Form of register identifier that indicates 16 or 32-bit widths are applicable                        | eAX indicates that the AX register is used when the operand-size attribute is 16 and the EAX register is used when the operand-size attribute is 32 |
| rXX    | Form of register identifier that indicates 16, 32 or 64-bit widths are applicable                    | rAX can indicate AX, EAX or RAX.                                                                                                                                                    |
| /x     | Indicates that the Rex.B bit is used to modify the register specified in the reg field of the opcode | rCX/r9 is used to indicate that the register could either be rCX or r9                                                                                                                                                    |

# OpCode Tables: Superscripts

| Symbol | Meaning                                                                                                                                                                                                                                                                              |
| 1A     | Bits 5, 4, and 3 of ModR/M byte used as an opcode extension (refer to Section A.4, “Opcode Extensions For One-Byte And Two-byte Opcodes”).                                                                                                                                           |
| 1B     | Use the 0F0B opcode (UD2 instruction), the 0FB9H opcode (UD1 instruction), or the 0FFFH opcode (UD0 instruction) when deliberately trying to generate an invalid opcode exception (#UD).                                                                                             |
| 1C     | Some instructions use the same two-byte opcode. If the instruction has variations, or the opcode represents different instructions, the ModR/M byte will be used to differentiate the instruction. For the value of the ModR/M byte needed to decode the instruction, see Table A-6. |
| i64    | The instruction is invalid or not encodable in 64-bit mode. 40 through 4F (single-byte INC and DEC) are REX prefix combinations when in 64-bit mode (use FE/FF Grp 4 and 5 for INC and DEC).                                                                                         |
| o64    | Instruction is only available when in 64-bit mode.                                                                                                                                                                                                                                   |
| d64    | When in 64-bit mode, instruction defaults to 64-bit operand size and cannot encode 32-bit operand size.                                                                                                                                                                              |
| f64    | The operand size is forced to a 64-bit operand size when in 64-bit mode (prefixes that change operand size are ignored for this instruction in 64-bit mode).                                                                                                                         |
| v      | VEX form only exists. There is no legacy SSE form of the instruction. For Integer GPR instructions it means VEX prefix required.                                                                                                                                                     |
| v1     | VEX128 & SSE forms only exist (no VEX256), when can’t be inferred from the data size                                                                                                                                                                                                 |

# OpCode Tables: Combined Notation

| Symbol | Meaning                                                                    |
| Ev     | The ModR/M byte follows the opcode to specify a word or doubleword operand |
| Gv     | The reg field of the ModR/M byte selects a general-purpose register        |
| Ib     | Immediate data is encoded in the subsequent byte of the instruction.       |

# Instruction Encodings

| Symbol | Bit Count | Meaning                                                                                    |
| reg    | 3         | General-register specifier (see Table B-4 or B-5)                                          |
| w      | 1         | Specifies if data is byte or full-sized, where full-sized is 16 or 32 bits (see Table B-6) |
| s      | 1         | Specifies sign extension of an immediate field (see Table B-7)                             |
| sreg2  | 2         | Segment register specifier for CS, SS, DS, ES (see Table B-8)                              |
| sreg3  | 3         | Segment register specifier for CS, SS, DS, ES, FS, GS (see Table B-8)                      |
| eee    | 3         | Specifies a special-purpose (control or debug) register (see Table B-9)                    |
| tttn   | 4         | For conditional instructions, specifies a condition asserted or negated (see Table B-12)   |
| d      | 1         | Specifies direction of data operation (see Table B-11)1                                    |


