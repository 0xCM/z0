

64-bit mode
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Identifier | Symbol | Description                                                                                                                                                                                                   |
| Yea        | V      | Supported                                                                                                                                                                                                     |
| Nea        | I      | Not supported.                                                                                                                                                                                                |
| NE         | N.E.   | Indicates an instruction syntax is not encodable in 64-bit mode (it may represent part of a sequence of valid instructions in other modes).                                                                   |
| NP         | N.P.   | Indicates the REX prefix does not affect the legacy instruction in 64-bit mode.                                                                                                                               |
| NI         | N.I.   | Indicates the opcode is treated as a new instruction in 64-bit mode.                                                                                                                                          |
| NS         | N.S.   | Indicates an instruction syntax that requires an address override prefix in 64-bit mode and is not supported. Using an address override prefix in 64-bit mode may result in model-specific execution behavior |

# Legacy Mode

| Identifier | Symbol | Description                                                              |
| Yea        | V      | Supported.                                                               |
| Nea        | I      | Not supported.                                                           |
| NE         | N.E.   | Indicates an Intel 64 instruction mnemonics/syntax that is not encodable |


# Parametric

| Identifier    | Sort        | Symbol      | Description                                                                                                                                                                                                                                                                                                                                                     |
| Stᐸiᐳ         | Instruction | ST(i)       | The i th element from the top of the FPU register stack (i ← 0 through 7).                                                                                                                                                                                                                                                                                      |
| Vm32ᐸxㆍyㆍzᐳ | Instruction | vm32{x,y,z} | A vector array of memory operands specified using VSIB memory addressing. The                                                                                                                                                                                                                                                                                   |
|               |             |             | array of memory addresses are specified using a common base register, a constant scale factor,                                                                                                                                                                                                                                                                  |
|               |             |             | and a vector index register with individual elements of 32-bit index value in an XMM register (vm32x), a YMM register (vm32y) or a ZMM register (vm32z).                                                                                                                                                                                                        |
| Vm64ᐸxㆍyㆍzᐳ | Instruction | vm64{x,y,z} | A vector array of memory operands specified using VSIB memory addressing. The array of memory addresses are specified using a common base register, a constant scale factor, and a vector index register with individual elements of 64-bit index value in an XMM register (vm64x), a YMM register (vm64y) or a ZMM register (vm64z).                           |
| Mask<k1ᐳ      | Instruction | {k1}        | A mask register used as instruction writemask for instructions that do not allow zeroing-masking but support merging-masking. This corresponds to instructions that require the value of the aaa field to be different than 0 (e.g., gather) and store-type instructions which allow only merging-masking.                                                      |
| Maskᐸk1ㆍzᐳ   | Instruction | {k1}{z}     | A mask register used as instruction writemask. The 64-bit k registers are: k1 through k7. Writemask specification is available exclusively via EVEX prefix. The masking can either be done as a merging masking, where the old values are preserved for masked out elements or as a zeroing masking. The type of masking is determined by using the EVEX.z bit. |

# OpCode Tables: Operand type codes

| Symbol | Meaning                                                                             |
| dq     | Double-quadword, regardless of operand-size attribute.                              |
| p      | 32-bit, 48-bit, or 80-bit pointer, depending on operand-size attribute.             |
| pd     | 128-bit or 256-bit packed double-precision floating-point data.                     |
| pi     | Quadword MMX technology register (for example: mm0).                                |
| ps     | 128-bit or 256-bit packed single-precision floating-point data.                     |
| q      | Quadword, regardless of operand-size attribute.                                     |
| qq     | Quad-Quadword (256-bits), regardless of operand-size attribute.                     |
| s      | 6-byte or 10-byte pseudo-descriptor.                                                |
| sd     | Scalar element of a 128-bit double-precision floating data.                         |
| ss     | Scalar element of a 128-bit single-precision floating data.                         |
| si     | Doubleword integer register (for example: eax).                                     |
| v      | Word, doubleword or quadword (in 64-bit mode), depending on operand-size attribute. |
| w      | Word, regardless of operand-size attribute.                                         |
| x      | dq or qq based on the operand-size attribute.                                       |
| y      | Doubleword or quadword (in 64-bit mode), depending on operand-size attribute.       |
| z      | Word for 16-bit operand-size or doubleword for 32 or 64-bit operand-size.           |

# OpCode Tables: Register Codes

| Symbol | Meaning                                                                                              | Example                                                                                                                                             |
| eXX    | Form of register identifier that indicates 16 or 32-bit widths are applicable                        | eAX indicates that the AX register is used when the operand-size attribute is 16 and the EAX register is used when the operand-size attribute is 32 |
| rXX    | Form of register identifier that indicates 16, 32 or 64-bit widths are applicable                    | rAX can indicate AX, EAX or RAX.                                                                                                                                                    |
| /x     | Indicates that the Rex.B bit is used to modify the register specified in the reg field of the opcode | rCX/r9 is used to indicate that the register could either be rCX or r9                                                                                                                                                    |

# OpCode Tables: Superscripts

| Symbol | Meaning                                                                                                                                                                                                                                                                              |
| 1A     | Bits 5, 4, and 3 of ModR/M byte used as an opcode extension (refer to Section A.4, “Opcode Extensions For One-Byte And Two-byte Opcodes”).                                                                                                                                           |
| 1B     | Use the 0F0B opcode (UD2 instruction), the 0FB9H opcode (UD1 instruction), or the 0FFFH opcode (UD0 instruction) when deliberately trying to generate an invalid opcode exception (#UD).                                                                                             |
| 1C     | Some instructions use the same two-byte opcode. If the instruction has variations, or the opcode represents different instructions, the ModR/M byte will be used to differentiate the instruction. For the value of the ModR/M byte needed to decode the instruction, see Table A-6. |
| i64    | The instruction is invalid or not encodable in 64-bit mode. 40 through 4F (single-byte INC and DEC) are REX prefix combinations when in 64-bit mode (use FE/FF Grp 4 and 5 for INC and DEC).                                                                                         |
| o64    | Instruction is only available when in 64-bit mode.                                                                                                                                                                                                                                   |
| d64    | When in 64-bit mode, instruction defaults to 64-bit operand size and cannot encode 32-bit operand size.                                                                                                                                                                              |
| f64    | The operand size is forced to a 64-bit operand size when in 64-bit mode (prefixes that change operand size are ignored for this instruction in 64-bit mode).                                                                                                                         |
| v      | VEX form only exists. There is no legacy SSE form of the instruction. For Integer GPR instructions it means VEX prefix required.                                                                                                                                                     |
| v1     | VEX128 & SSE forms only exist (no VEX256), when can’t be inferred from the data size                                                                                                                                                                                                 |

# OpCode Tables: Combined Notation

| Symbol | Meaning                                                                    |
| Ev     | The ModR/M byte follows the opcode to specify a word or doubleword operand |
| Gv     | The reg field of the ModR/M byte selects a general-purpose register        |
| Ib     | Immediate data is encoded in the subsequent byte of the instruction.       |

# Instruction Encodings

| Symbol | Bit Count | Meaning                                                                                    |
| reg    | 3         | General-register specifier (see Table B-4 or B-5)                                          |
| w      | 1         | Specifies if data is byte or full-sized, where full-sized is 16 or 32 bits (see Table B-6) |
| s      | 1         | Specifies sign extension of an immediate field (see Table B-7)                             |
| sreg2  | 2         | Segment register specifier for CS, SS, DS, ES (see Table B-8)                              |
| sreg3  | 3         | Segment register specifier for CS, SS, DS, ES, FS, GS (see Table B-8)                      |
| eee    | 3         | Specifies a special-purpose (control or debug) register (see Table B-9)                    |
| tttn   | 4         | For conditional instructions, specifies a condition asserted or negated (see Table B-12)   |
| d      | 1         | Specifies direction of data operation (see Table B-11)1                                    |

# EFLAGS X-REF Ledger | Table A-2 Intel Vol1
-------------------------------------------------------------------------------------
| Symbol | Meaning                                                                  |
| T      | Instruction tests flag.                                                  |
| M      | Instruction modifies flag (either sets or resets depending on operands). |
| 0      | Instruction resets flag.                                                 |
| 1      | Instruction sets flag.                                                   |
| _      | Instruction's effect on flag is undefined.                               |
| R      | Instruction restores prior value of flag.                                |
| Blank  | Instruction does not affect flag.                                        |


# EFLAGS Condition Codes Encoding Notes

| Code   | Description
| ttt0   | Tests the condition
| ttn1   | Tests the negated condition

1-byte primary opcodes => the tttn field is located in bits 3, 2, 1, and 0 of the opcode byte.
2-byte primary opcodes => the tttn field is located in bits 3, 2, 1, and 0 of the second opcode byte.
