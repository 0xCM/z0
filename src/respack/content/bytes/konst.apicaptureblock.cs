//-----------------------------------------------------------------------------
// Copyright   :  (c) Chris Moore, 2020
// License     :  MIT
// Generated   : 2021-02-26 14:33:08 -06:00
//-----------------------------------------------------------------------------
namespace Z0.ByteCode
{
    using System;
    using System.Runtime.CompilerServices;


    public static class konst_apicaptureblock
    {
        public static ReadOnlySpan<byte> get_ArtifactKey_ᐤᐤ  =>  new byte[179]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xec,0x20,0xc5,0xf8,0x77,0x48,0x8b,0xf2,0x48,0x8b,0x39,0x48,0x8b,0xcf,0x48,0x8b,0x07,0x48,0x8b,0x40,0x40,0xff,0x50,0x38,0x48,0x8b,0xd8,0x48,0x8b,0xcb,0x48,0x8b,0x03,0x48,0x8b,0x40,0x58,0xff,0x50,0x08,0x48,0x8b,0xc8,0xe8,0x38,0x7a,0x7a,0xfb,0x8b,0xe8,0x48,0x8b,0xcb,0x48,0x8b,0x03,0x48,0x8b,0x40,0x50,0xff,0x50,0x08,0x8b,0xd8,0x48,0x8b,0xd7,0x48,0xb9,0xa8,0x9c,0x83,0xde,0xfd,0x7f,0x00,0x00,0xe8,0x75,0x1b,0x1f,0x59,0x48,0x85,0xc0,0x74,0x05,0x48,0x8b,0xc8,0xeb,0x02,0x33,0xc9,0x48,0x85,0xc0,0x0f,0x95,0xc0,0x0f,0xb6,0xc0,0x85,0xc0,0x74,0x07,0x44,0x0f,0xb7,0x71,0x18,0xeb,0x03,0x45,0x33,0xf6,0x48,0x8b,0xcf,0x48,0x8b,0x07,0x48,0x8b,0x40,0x50,0xff,0x50,0x08,0xc5,0xf9,0x6e,0xc5,0xc4,0xe3,0x79,0x22,0xc3,0x01,0xc4,0xc3,0x79,0x22,0xc6,0x02,0xc4,0xe3,0x79,0x22,0xc0,0x03,0xc5,0xf9,0x11,0x06,0x48,0x8b,0xc6,0x48,0x83,0xc4,0x20,0x5b,0x5d,0x5e,0x5f,0x41,0x5e,0xc3};

        public static ReadOnlySpan<byte> get_InputData_ᐤᐤ  =>  new byte[46]{0x0f,0x1f,0x44,0x00,0x00,0x39,0x09,0x48,0x83,0xc1,0x10,0x48,0x8b,0x41,0x08,0x48,0x85,0xc0,0x75,0x07,0x33,0xc9,0x45,0x33,0xc0,0xeb,0x08,0x48,0x8d,0x48,0x10,0x44,0x8b,0x40,0x08,0x48,0x89,0x0a,0x44,0x89,0x42,0x08,0x48,0x8b,0xc2,0xc3};

        public static ReadOnlySpan<byte> get_OutputData_ᐤᐤ  =>  new byte[46]{0x0f,0x1f,0x44,0x00,0x00,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x85,0xc0,0x75,0x07,0x33,0xc9,0x45,0x33,0xc0,0xeb,0x08,0x48,0x8d,0x48,0x10,0x44,0x8b,0x40,0x08,0x48,0x89,0x0a,0x44,0x89,0x42,0x08,0x48,0x8b,0xc2,0xc3};

        public static ReadOnlySpan<byte> get_InputSize_ᐤᐤ  =>  new byte[31]{0x0f,0x1f,0x44,0x00,0x00,0x39,0x09,0x48,0x83,0xc1,0x10,0x48,0x8b,0x41,0x08,0x48,0x85,0xc0,0x75,0x04,0x33,0xd2,0xeb,0x03,0x8b,0x50,0x08,0x48,0x63,0xc2,0xc3};

        public static ReadOnlySpan<byte> get_OutputSize_ᐤᐤ  =>  new byte[31]{0x0f,0x1f,0x44,0x00,0x00,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x85,0xc0,0x75,0x04,0x33,0xd2,0xeb,0x03,0x8b,0x50,0x08,0x48,0x63,0xc2,0xc3};

        public static ReadOnlySpan<byte> get_Length_ᐤᐤ  =>  new byte[28]{0x0f,0x1f,0x44,0x00,0x00,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x85,0xc0,0x75,0x04,0x33,0xc0,0xeb,0x03,0x8b,0x40,0x08,0xc3};

        public static ReadOnlySpan<byte> get_Item_ᐤ64iᐤ  =>  new byte[122]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x8b,0x48,0x08,0x48,0x63,0xc9,0x48,0x3b,0xd1,0x73,0x0a,0x48,0x8d,0x44,0x10,0x10,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x37,0xdb,0x3c,0x5b,0xcc,0x00,0x00,0x19,0x04,0x01,0x00,0x04,0x42,0x00,0x00,0x40,0x00,0x00,0x00,0xd8,0xf4,0xe5,0xde,0xfd,0x7f,0x00,0x00,0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x85,0xd2,0x7c,0x15,0x8b,0x48,0x08,0x48,0x63,0xc9,0x48,0x3b,0xd1,0x73,0x10,0x48,0x8d,0x44,0x10,0x10,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x42,0xd9,0x3c,0x5b,0xcc,0xe8,0xec,0xda,0x3c,0x5b,0xcc,0x00,0x00,0x00,0x19,0x04};

        public static ReadOnlySpan<byte> get_Item_ᐤ64uᐤ  =>  new byte[58]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x85,0xd2,0x7c,0x15,0x8b,0x48,0x08,0x48,0x63,0xc9,0x48,0x3b,0xd1,0x73,0x10,0x48,0x8d,0x44,0x10,0x10,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x42,0xd9,0x3c,0x5b,0xcc,0xe8,0xec,0xda,0x3c,0x5b,0xcc,0x00,0x00,0x00,0x19,0x04};

        public static ReadOnlySpan<byte> get_IsEmpty_ᐤᐤ  =>  new byte[182]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x8b,0xd0,0x48,0x85,0xd2,0x74,0x25,0x8b,0x50,0x08,0x85,0xd2,0x74,0x1e,0x8b,0x50,0x08,0x83,0xfa,0x01,0x75,0x12,0x83,0x78,0x08,0x00,0x76,0x1a,0x80,0x78,0x10,0x00,0x0f,0x94,0xc0,0x0f,0xb6,0xc0,0xeb,0x09,0x33,0xc0,0xeb,0x05,0xb8,0x01,0x00,0x00,0x00,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x85,0xda,0x3c,0x5b,0xcc,0x19,0x04,0x01,0x00,0x04,0x42,0x00,0x00,0x40,0x00,0x00,0x00,0xb0,0xf5,0xe5,0xde,0xfd,0x7f,0x00,0x00,0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x8b,0xd0,0x48,0x85,0xd2,0x74,0x25,0x8b,0x50,0x08,0x85,0xd2,0x74,0x1e,0x8b,0x50,0x08,0x83,0xfa,0x01,0x75,0x12,0x83,0x78,0x08,0x00,0x76,0x22,0x80,0x78,0x10,0x00,0x0f,0x94,0xc0,0x0f,0xb6,0xc0,0xeb,0x09,0x33,0xc0,0xeb,0x05,0xb8,0x01,0x00,0x00,0x00,0x85,0xc0,0x0f,0x94,0xc0,0x0f,0xb6,0xc0,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x1d,0xda,0x3c,0x5b,0xcc,0x19,0x04};

        public static ReadOnlySpan<byte> get_IsNonEmpty_ᐤᐤ  =>  new byte[86]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x41,0x08,0x48,0x8b,0xd0,0x48,0x85,0xd2,0x74,0x25,0x8b,0x50,0x08,0x85,0xd2,0x74,0x1e,0x8b,0x50,0x08,0x83,0xfa,0x01,0x75,0x12,0x83,0x78,0x08,0x00,0x76,0x22,0x80,0x78,0x10,0x00,0x0f,0x94,0xc0,0x0f,0xb6,0xc0,0xeb,0x09,0x33,0xc0,0xeb,0x05,0xb8,0x01,0x00,0x00,0x00,0x85,0xc0,0x0f,0x94,0xc0,0x0f,0xb6,0xc0,0x48,0x83,0xc4,0x28,0xc3,0xe8,0x1d,0xda,0x3c,0x5b,0xcc,0x19,0x04};

        public static ReadOnlySpan<byte> get_CodeBlock_ᐤᐤ  =>  new byte[225]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xec,0xc0,0x00,0x00,0x00,0xc5,0xf8,0x77,0x48,0x8b,0xf1,0x48,0x8d,0x3c,0x24,0xb9,0x30,0x00,0x00,0x00,0x33,0xc0,0xf3,0xab,0x48,0x8b,0xce,0x48,0x8b,0xd9,0x48,0x8b,0xea,0x48,0x8d,0x4b,0x10,0x4c,0x8b,0x31,0x48,0x8d,0x73,0x30,0x48,0x8d,0x7c,0x24,0x68,0xb9,0x0b,0x00,0x00,0x00,0xf3,0x48,0xa5,0x48,0x83,0xc3,0x20,0x48,0x8b,0x0b,0x48,0x8b,0x5b,0x08,0x33,0xc9,0x48,0x8d,0x04,0x24,0xc5,0xf8,0x57,0xc0,0xc5,0xfa,0x7f,0x00,0xc5,0xfa,0x7f,0x40,0x10,0xc5,0xfa,0x7f,0x40,0x20,0xc5,0xfa,0x7f,0x40,0x30,0xc5,0xfa,0x7f,0x40,0x40,0xc5,0xfa,0x7f,0x40,0x50,0x48,0x89,0x48,0x60,0x48,0x8d,0x3c,0x24,0x48,0x8d,0x74,0x24,0x68,0xb9,0x0b,0x00,0x00,0x00,0xf3,0x48,0xa5,0x48,0x8d,0x44,0x24,0x58,0x4c,0x89,0x30,0x48,0x89,0x58,0x08,0x48,0x8b,0xfd,0x48,0x8d,0x34,0x24,0xe8,0x80,0x45,0x2a,0x5b,0xe8,0x7b,0x45,0x2a,0x5b,0x48,0xa5,0xe8,0x74,0x45,0x2a,0x5b,0xe8,0x6f,0x45,0x2a,0x5b,0x48,0xa5,0xe8,0x68,0x45,0x2a,0x5b,0xe8,0x63,0x45,0x2a,0x5b,0xe8,0x5e,0x45,0x2a,0x5b,0xe8,0x59,0x45,0x2a,0x5b,0x48,0xa5,0x48,0xa5,0xe8,0x50,0x45,0x2a,0x5b,0x48,0x8b,0xc5,0x48,0x81,0xc4,0xc0,0x00,0x00,0x00,0x5b,0x5d,0x5e,0x5f,0x41,0x5e,0xc3};

        public static ReadOnlySpan<byte> get_MemberId_ᐤᐤ  =>  new byte[53]{0x57,0x56,0x53,0x66,0x90,0x48,0x8b,0xda,0x39,0x09,0x48,0x83,0xc1,0x30,0x48,0x8b,0xf1,0x48,0x83,0xc6,0x30,0x48,0x8b,0xfb,0xe8,0xf3,0x44,0x2a,0x5b,0xe8,0xee,0x44,0x2a,0x5b,0xe8,0xe9,0x44,0x2a,0x5b,0xe8,0xe4,0x44,0x2a,0x5b,0x48,0xa5,0x48,0x8b,0xc3,0x5b,0x5e,0x5f,0xc3};

        public static ReadOnlySpan<byte> get_BaseAddress_ᐤᐤ  =>  new byte[13]{0x0f,0x1f,0x44,0x00,0x00,0x48,0x83,0xc1,0x10,0x48,0x8b,0x01,0xc3};

        public static ReadOnlySpan<byte> get_Hash_ᐤᐤ  =>  new byte[28]{0x0f,0x1f,0x44,0x00,0x00,0x48,0x83,0xc1,0x10,0x48,0x8b,0x01,0x48,0x8b,0xd0,0x48,0xc1,0xea,0x20,0x69,0xd2,0x29,0x55,0x55,0xa5,0x03,0xc2,0xc3};

        public static ReadOnlySpan<byte> get_Hash64_ᐤᐤ  =>  new byte[13]{0x0f,0x1f,0x44,0x00,0x00,0x48,0x83,0xc1,0x10,0x48,0x8b,0x01,0xc3};

        public static ReadOnlySpan<byte> Identical_ᐤApiCaptureBlockᕀinᐤ  =>  new byte[39]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x83,0xc2,0x20,0x48,0x8b,0x02,0x48,0x8b,0x52,0x08,0x48,0x8b,0x49,0x08,0xe8,0x29,0x1d,0xc9,0xfd,0x0f,0xb6,0xc0,0x48,0x83,0xc4,0x28,0xc3};

        public static ReadOnlySpan<byte> Compare_ᐤApiCaptureBlockᕀinᐤ  =>  new byte[95]{0x57,0x56,0x53,0x48,0x81,0xec,0xc0,0x00,0x00,0x00,0x48,0x8b,0xf1,0x48,0x8d,0x7c,0x24,0x08,0xb9,0x2e,0x00,0x00,0x00,0x33,0xc0,0xf3,0xab,0x48,0x8b,0xce,0x48,0x83,0xc1,0x10,0x48,0x8b,0x19,0x48,0x8d,0x7c,0x24,0x08,0x48,0x8b,0xf2,0xb9,0x17,0x00,0x00,0x00,0xf3,0x48,0xa5,0x48,0x8b,0x44,0x24,0x18,0x48,0x3b,0xd8,0x74,0x13,0x48,0x3b,0xd8,0x72,0x07,0xb8,0x01,0x00,0x00,0x00,0xeb,0x09,0xb8,0xff,0xff,0xff,0xff,0xeb,0x02,0x33,0xc0,0x48,0x81,0xc4,0xc0,0x00,0x00,0x00,0x5b,0x5e,0x5f,0xc3};

        public static ReadOnlySpan<byte> Format_ᐤᐤ  =>  new byte[26]{0x48,0x83,0xec,0x28,0x90,0x39,0x09,0x48,0x83,0xc1,0x20,0x48,0x8b,0x49,0x08,0xe8,0xec,0x2a,0x97,0xff,0x90,0x48,0x83,0xc4,0x28,0xc3};

        public static ReadOnlySpan<byte> get_Empty_ᐤᐤ  =>  new byte[29]{0x56,0x0f,0x1f,0x40,0x00,0x48,0x8b,0xf1,0x33,0xd2,0x48,0x8b,0xce,0x41,0xb8,0xb8,0x00,0x00,0x00,0xe8,0xf8,0x44,0x2a,0x5b,0x48,0x8b,0xc6,0x5e,0xc3};

    }
}
