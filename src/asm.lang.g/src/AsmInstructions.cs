//-----------------------------------------------------------------------------
// Generated   :  2021-06-09.00.04.02.895
// Copyright   :  (c) Chris Moore, 2021
// License     :  MIT
//-----------------------------------------------------------------------------
namespace Z0.Asm
{
    using System.Runtime.CompilerServices;
    using static Root;

    public readonly struct AsmInstructions
    {
        public struct Aaa : ITypedInstruction<Aaa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aaa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AAA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aaa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aaa src) => AsmMnemonics.AAA;

            public static implicit operator AsmHexCode(Aaa src) => src.Encoded;

            public static implicit operator Aaa(AsmHexCode src) => new Aaa(src);
        }

        public Aaa aaa() => default;

        [MethodImpl(Inline), Op]
        public Aaa aaa(AsmHexCode encoded) => new Aaa(encoded);

        public struct Aad : ITypedInstruction<Aad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aad src) => AsmMnemonics.AAD;

            public static implicit operator AsmHexCode(Aad src) => src.Encoded;

            public static implicit operator Aad(AsmHexCode src) => new Aad(src);
        }

        public Aad aad() => default;

        [MethodImpl(Inline), Op]
        public Aad aad(AsmHexCode encoded) => new Aad(encoded);

        public struct Aam : ITypedInstruction<Aam>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aam(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AAM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aam src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aam src) => AsmMnemonics.AAM;

            public static implicit operator AsmHexCode(Aam src) => src.Encoded;

            public static implicit operator Aam(AsmHexCode src) => new Aam(src);
        }

        public Aam aam() => default;

        [MethodImpl(Inline), Op]
        public Aam aam(AsmHexCode encoded) => new Aam(encoded);

        public struct Aas : ITypedInstruction<Aas>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aas(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AAS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aas src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aas src) => AsmMnemonics.AAS;

            public static implicit operator AsmHexCode(Aas src) => src.Encoded;

            public static implicit operator Aas(AsmHexCode src) => new Aas(src);
        }

        public Aas aas() => default;

        [MethodImpl(Inline), Op]
        public Aas aas(AsmHexCode encoded) => new Aas(encoded);

        public struct Adc : ITypedInstruction<Adc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Adc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Adc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Adc src) => AsmMnemonics.ADC;

            public static implicit operator AsmHexCode(Adc src) => src.Encoded;

            public static implicit operator Adc(AsmHexCode src) => new Adc(src);
        }

        public Adc adc() => default;

        [MethodImpl(Inline), Op]
        public Adc adc(AsmHexCode encoded) => new Adc(encoded);

        public struct Adc_lock : ITypedInstruction<Adc_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Adc_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADC_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Adc_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Adc_lock src) => AsmMnemonics.ADC_LOCK;

            public static implicit operator AsmHexCode(Adc_lock src) => src.Encoded;

            public static implicit operator Adc_lock(AsmHexCode src) => new Adc_lock(src);
        }

        public Adc_lock adc_lock() => default;

        [MethodImpl(Inline), Op]
        public Adc_lock adc_lock(AsmHexCode encoded) => new Adc_lock(encoded);

        public struct Adcx : ITypedInstruction<Adcx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Adcx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADCX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Adcx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Adcx src) => AsmMnemonics.ADCX;

            public static implicit operator AsmHexCode(Adcx src) => src.Encoded;

            public static implicit operator Adcx(AsmHexCode src) => new Adcx(src);
        }

        public Adcx adcx() => default;

        [MethodImpl(Inline), Op]
        public Adcx adcx(AsmHexCode encoded) => new Adcx(encoded);

        public struct Add : ITypedInstruction<Add>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Add(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Add src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Add src) => AsmMnemonics.ADD;

            public static implicit operator AsmHexCode(Add src) => src.Encoded;

            public static implicit operator Add(AsmHexCode src) => new Add(src);
        }

        public Add add() => default;

        [MethodImpl(Inline), Op]
        public Add add(AsmHexCode encoded) => new Add(encoded);

        public struct Add_lock : ITypedInstruction<Add_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Add_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADD_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Add_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Add_lock src) => AsmMnemonics.ADD_LOCK;

            public static implicit operator AsmHexCode(Add_lock src) => src.Encoded;

            public static implicit operator Add_lock(AsmHexCode src) => new Add_lock(src);
        }

        public Add_lock add_lock() => default;

        [MethodImpl(Inline), Op]
        public Add_lock add_lock(AsmHexCode encoded) => new Add_lock(encoded);

        public struct Addpd : ITypedInstruction<Addpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addpd src) => AsmMnemonics.ADDPD;

            public static implicit operator AsmHexCode(Addpd src) => src.Encoded;

            public static implicit operator Addpd(AsmHexCode src) => new Addpd(src);
        }

        public Addpd addpd() => default;

        [MethodImpl(Inline), Op]
        public Addpd addpd(AsmHexCode encoded) => new Addpd(encoded);

        public struct Addps : ITypedInstruction<Addps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addps src) => AsmMnemonics.ADDPS;

            public static implicit operator AsmHexCode(Addps src) => src.Encoded;

            public static implicit operator Addps(AsmHexCode src) => new Addps(src);
        }

        public Addps addps() => default;

        [MethodImpl(Inline), Op]
        public Addps addps(AsmHexCode encoded) => new Addps(encoded);

        public struct Addsd : ITypedInstruction<Addsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addsd src) => AsmMnemonics.ADDSD;

            public static implicit operator AsmHexCode(Addsd src) => src.Encoded;

            public static implicit operator Addsd(AsmHexCode src) => new Addsd(src);
        }

        public Addsd addsd() => default;

        [MethodImpl(Inline), Op]
        public Addsd addsd(AsmHexCode encoded) => new Addsd(encoded);

        public struct Addss : ITypedInstruction<Addss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addss src) => AsmMnemonics.ADDSS;

            public static implicit operator AsmHexCode(Addss src) => src.Encoded;

            public static implicit operator Addss(AsmHexCode src) => new Addss(src);
        }

        public Addss addss() => default;

        [MethodImpl(Inline), Op]
        public Addss addss(AsmHexCode encoded) => new Addss(encoded);

        public struct Addsubpd : ITypedInstruction<Addsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addsubpd src) => AsmMnemonics.ADDSUBPD;

            public static implicit operator AsmHexCode(Addsubpd src) => src.Encoded;

            public static implicit operator Addsubpd(AsmHexCode src) => new Addsubpd(src);
        }

        public Addsubpd addsubpd() => default;

        [MethodImpl(Inline), Op]
        public Addsubpd addsubpd(AsmHexCode encoded) => new Addsubpd(encoded);

        public struct Addsubps : ITypedInstruction<Addsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Addsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADDSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Addsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Addsubps src) => AsmMnemonics.ADDSUBPS;

            public static implicit operator AsmHexCode(Addsubps src) => src.Encoded;

            public static implicit operator Addsubps(AsmHexCode src) => new Addsubps(src);
        }

        public Addsubps addsubps() => default;

        [MethodImpl(Inline), Op]
        public Addsubps addsubps(AsmHexCode encoded) => new Addsubps(encoded);

        public struct Adox : ITypedInstruction<Adox>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Adox(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ADOX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Adox src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Adox src) => AsmMnemonics.ADOX;

            public static implicit operator AsmHexCode(Adox src) => src.Encoded;

            public static implicit operator Adox(AsmHexCode src) => new Adox(src);
        }

        public Adox adox() => default;

        [MethodImpl(Inline), Op]
        public Adox adox(AsmHexCode encoded) => new Adox(encoded);

        public struct Aesdec : ITypedInstruction<Aesdec>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdec(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDEC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdec src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdec src) => AsmMnemonics.AESDEC;

            public static implicit operator AsmHexCode(Aesdec src) => src.Encoded;

            public static implicit operator Aesdec(AsmHexCode src) => new Aesdec(src);
        }

        public Aesdec aesdec() => default;

        [MethodImpl(Inline), Op]
        public Aesdec aesdec(AsmHexCode encoded) => new Aesdec(encoded);

        public struct Aesdec128kl : ITypedInstruction<Aesdec128kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdec128kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDEC128KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdec128kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdec128kl src) => AsmMnemonics.AESDEC128KL;

            public static implicit operator AsmHexCode(Aesdec128kl src) => src.Encoded;

            public static implicit operator Aesdec128kl(AsmHexCode src) => new Aesdec128kl(src);
        }

        public Aesdec128kl aesdec128kl() => default;

        [MethodImpl(Inline), Op]
        public Aesdec128kl aesdec128kl(AsmHexCode encoded) => new Aesdec128kl(encoded);

        public struct Aesdec256kl : ITypedInstruction<Aesdec256kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdec256kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDEC256KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdec256kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdec256kl src) => AsmMnemonics.AESDEC256KL;

            public static implicit operator AsmHexCode(Aesdec256kl src) => src.Encoded;

            public static implicit operator Aesdec256kl(AsmHexCode src) => new Aesdec256kl(src);
        }

        public Aesdec256kl aesdec256kl() => default;

        [MethodImpl(Inline), Op]
        public Aesdec256kl aesdec256kl(AsmHexCode encoded) => new Aesdec256kl(encoded);

        public struct Aesdeclast : ITypedInstruction<Aesdeclast>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdeclast(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDECLAST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdeclast src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdeclast src) => AsmMnemonics.AESDECLAST;

            public static implicit operator AsmHexCode(Aesdeclast src) => src.Encoded;

            public static implicit operator Aesdeclast(AsmHexCode src) => new Aesdeclast(src);
        }

        public Aesdeclast aesdeclast() => default;

        [MethodImpl(Inline), Op]
        public Aesdeclast aesdeclast(AsmHexCode encoded) => new Aesdeclast(encoded);

        public struct Aesdecwide128kl : ITypedInstruction<Aesdecwide128kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdecwide128kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDECWIDE128KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdecwide128kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdecwide128kl src) => AsmMnemonics.AESDECWIDE128KL;

            public static implicit operator AsmHexCode(Aesdecwide128kl src) => src.Encoded;

            public static implicit operator Aesdecwide128kl(AsmHexCode src) => new Aesdecwide128kl(src);
        }

        public Aesdecwide128kl aesdecwide128kl() => default;

        [MethodImpl(Inline), Op]
        public Aesdecwide128kl aesdecwide128kl(AsmHexCode encoded) => new Aesdecwide128kl(encoded);

        public struct Aesdecwide256kl : ITypedInstruction<Aesdecwide256kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesdecwide256kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESDECWIDE256KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesdecwide256kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesdecwide256kl src) => AsmMnemonics.AESDECWIDE256KL;

            public static implicit operator AsmHexCode(Aesdecwide256kl src) => src.Encoded;

            public static implicit operator Aesdecwide256kl(AsmHexCode src) => new Aesdecwide256kl(src);
        }

        public Aesdecwide256kl aesdecwide256kl() => default;

        [MethodImpl(Inline), Op]
        public Aesdecwide256kl aesdecwide256kl(AsmHexCode encoded) => new Aesdecwide256kl(encoded);

        public struct Aesenc : ITypedInstruction<Aesenc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesenc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesenc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesenc src) => AsmMnemonics.AESENC;

            public static implicit operator AsmHexCode(Aesenc src) => src.Encoded;

            public static implicit operator Aesenc(AsmHexCode src) => new Aesenc(src);
        }

        public Aesenc aesenc() => default;

        [MethodImpl(Inline), Op]
        public Aesenc aesenc(AsmHexCode encoded) => new Aesenc(encoded);

        public struct Aesenc128kl : ITypedInstruction<Aesenc128kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesenc128kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENC128KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesenc128kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesenc128kl src) => AsmMnemonics.AESENC128KL;

            public static implicit operator AsmHexCode(Aesenc128kl src) => src.Encoded;

            public static implicit operator Aesenc128kl(AsmHexCode src) => new Aesenc128kl(src);
        }

        public Aesenc128kl aesenc128kl() => default;

        [MethodImpl(Inline), Op]
        public Aesenc128kl aesenc128kl(AsmHexCode encoded) => new Aesenc128kl(encoded);

        public struct Aesenc256kl : ITypedInstruction<Aesenc256kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesenc256kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENC256KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesenc256kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesenc256kl src) => AsmMnemonics.AESENC256KL;

            public static implicit operator AsmHexCode(Aesenc256kl src) => src.Encoded;

            public static implicit operator Aesenc256kl(AsmHexCode src) => new Aesenc256kl(src);
        }

        public Aesenc256kl aesenc256kl() => default;

        [MethodImpl(Inline), Op]
        public Aesenc256kl aesenc256kl(AsmHexCode encoded) => new Aesenc256kl(encoded);

        public struct Aesenclast : ITypedInstruction<Aesenclast>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesenclast(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENCLAST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesenclast src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesenclast src) => AsmMnemonics.AESENCLAST;

            public static implicit operator AsmHexCode(Aesenclast src) => src.Encoded;

            public static implicit operator Aesenclast(AsmHexCode src) => new Aesenclast(src);
        }

        public Aesenclast aesenclast() => default;

        [MethodImpl(Inline), Op]
        public Aesenclast aesenclast(AsmHexCode encoded) => new Aesenclast(encoded);

        public struct Aesencwide128kl : ITypedInstruction<Aesencwide128kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesencwide128kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENCWIDE128KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesencwide128kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesencwide128kl src) => AsmMnemonics.AESENCWIDE128KL;

            public static implicit operator AsmHexCode(Aesencwide128kl src) => src.Encoded;

            public static implicit operator Aesencwide128kl(AsmHexCode src) => new Aesencwide128kl(src);
        }

        public Aesencwide128kl aesencwide128kl() => default;

        [MethodImpl(Inline), Op]
        public Aesencwide128kl aesencwide128kl(AsmHexCode encoded) => new Aesencwide128kl(encoded);

        public struct Aesencwide256kl : ITypedInstruction<Aesencwide256kl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesencwide256kl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESENCWIDE256KL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesencwide256kl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesencwide256kl src) => AsmMnemonics.AESENCWIDE256KL;

            public static implicit operator AsmHexCode(Aesencwide256kl src) => src.Encoded;

            public static implicit operator Aesencwide256kl(AsmHexCode src) => new Aesencwide256kl(src);
        }

        public Aesencwide256kl aesencwide256kl() => default;

        [MethodImpl(Inline), Op]
        public Aesencwide256kl aesencwide256kl(AsmHexCode encoded) => new Aesencwide256kl(encoded);

        public struct Aesimc : ITypedInstruction<Aesimc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aesimc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESIMC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aesimc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aesimc src) => AsmMnemonics.AESIMC;

            public static implicit operator AsmHexCode(Aesimc src) => src.Encoded;

            public static implicit operator Aesimc(AsmHexCode src) => new Aesimc(src);
        }

        public Aesimc aesimc() => default;

        [MethodImpl(Inline), Op]
        public Aesimc aesimc(AsmHexCode encoded) => new Aesimc(encoded);

        public struct Aeskeygenassist : ITypedInstruction<Aeskeygenassist>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Aeskeygenassist(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AESKEYGENASSIST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Aeskeygenassist src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Aeskeygenassist src) => AsmMnemonics.AESKEYGENASSIST;

            public static implicit operator AsmHexCode(Aeskeygenassist src) => src.Encoded;

            public static implicit operator Aeskeygenassist(AsmHexCode src) => new Aeskeygenassist(src);
        }

        public Aeskeygenassist aeskeygenassist() => default;

        [MethodImpl(Inline), Op]
        public Aeskeygenassist aeskeygenassist(AsmHexCode encoded) => new Aeskeygenassist(encoded);

        public struct And : ITypedInstruction<And>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public And(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(And src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(And src) => AsmMnemonics.AND;

            public static implicit operator AsmHexCode(And src) => src.Encoded;

            public static implicit operator And(AsmHexCode src) => new And(src);
        }

        public And and() => default;

        [MethodImpl(Inline), Op]
        public And and(AsmHexCode encoded) => new And(encoded);

        public struct And_lock : ITypedInstruction<And_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public And_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.AND_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(And_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(And_lock src) => AsmMnemonics.AND_LOCK;

            public static implicit operator AsmHexCode(And_lock src) => src.Encoded;

            public static implicit operator And_lock(AsmHexCode src) => new And_lock(src);
        }

        public And_lock and_lock() => default;

        [MethodImpl(Inline), Op]
        public And_lock and_lock(AsmHexCode encoded) => new And_lock(encoded);

        public struct Andn : ITypedInstruction<Andn>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Andn(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ANDN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Andn src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Andn src) => AsmMnemonics.ANDN;

            public static implicit operator AsmHexCode(Andn src) => src.Encoded;

            public static implicit operator Andn(AsmHexCode src) => new Andn(src);
        }

        public Andn andn() => default;

        [MethodImpl(Inline), Op]
        public Andn andn(AsmHexCode encoded) => new Andn(encoded);

        public struct Andnpd : ITypedInstruction<Andnpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Andnpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ANDNPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Andnpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Andnpd src) => AsmMnemonics.ANDNPD;

            public static implicit operator AsmHexCode(Andnpd src) => src.Encoded;

            public static implicit operator Andnpd(AsmHexCode src) => new Andnpd(src);
        }

        public Andnpd andnpd() => default;

        [MethodImpl(Inline), Op]
        public Andnpd andnpd(AsmHexCode encoded) => new Andnpd(encoded);

        public struct Andnps : ITypedInstruction<Andnps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Andnps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ANDNPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Andnps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Andnps src) => AsmMnemonics.ANDNPS;

            public static implicit operator AsmHexCode(Andnps src) => src.Encoded;

            public static implicit operator Andnps(AsmHexCode src) => new Andnps(src);
        }

        public Andnps andnps() => default;

        [MethodImpl(Inline), Op]
        public Andnps andnps(AsmHexCode encoded) => new Andnps(encoded);

        public struct Andpd : ITypedInstruction<Andpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Andpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ANDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Andpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Andpd src) => AsmMnemonics.ANDPD;

            public static implicit operator AsmHexCode(Andpd src) => src.Encoded;

            public static implicit operator Andpd(AsmHexCode src) => new Andpd(src);
        }

        public Andpd andpd() => default;

        [MethodImpl(Inline), Op]
        public Andpd andpd(AsmHexCode encoded) => new Andpd(encoded);

        public struct Andps : ITypedInstruction<Andps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Andps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ANDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Andps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Andps src) => AsmMnemonics.ANDPS;

            public static implicit operator AsmHexCode(Andps src) => src.Encoded;

            public static implicit operator Andps(AsmHexCode src) => new Andps(src);
        }

        public Andps andps() => default;

        [MethodImpl(Inline), Op]
        public Andps andps(AsmHexCode encoded) => new Andps(encoded);

        public struct Arpl : ITypedInstruction<Arpl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Arpl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ARPL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Arpl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Arpl src) => AsmMnemonics.ARPL;

            public static implicit operator AsmHexCode(Arpl src) => src.Encoded;

            public static implicit operator Arpl(AsmHexCode src) => new Arpl(src);
        }

        public Arpl arpl() => default;

        [MethodImpl(Inline), Op]
        public Arpl arpl(AsmHexCode encoded) => new Arpl(encoded);

        public struct Bextr : ITypedInstruction<Bextr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bextr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BEXTR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bextr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bextr src) => AsmMnemonics.BEXTR;

            public static implicit operator AsmHexCode(Bextr src) => src.Encoded;

            public static implicit operator Bextr(AsmHexCode src) => new Bextr(src);
        }

        public Bextr bextr() => default;

        [MethodImpl(Inline), Op]
        public Bextr bextr(AsmHexCode encoded) => new Bextr(encoded);

        public struct Bextr_xop : ITypedInstruction<Bextr_xop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bextr_xop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BEXTR_XOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bextr_xop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bextr_xop src) => AsmMnemonics.BEXTR_XOP;

            public static implicit operator AsmHexCode(Bextr_xop src) => src.Encoded;

            public static implicit operator Bextr_xop(AsmHexCode src) => new Bextr_xop(src);
        }

        public Bextr_xop bextr_xop() => default;

        [MethodImpl(Inline), Op]
        public Bextr_xop bextr_xop(AsmHexCode encoded) => new Bextr_xop(encoded);

        public struct Blcfill : ITypedInstruction<Blcfill>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blcfill(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLCFILL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blcfill src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blcfill src) => AsmMnemonics.BLCFILL;

            public static implicit operator AsmHexCode(Blcfill src) => src.Encoded;

            public static implicit operator Blcfill(AsmHexCode src) => new Blcfill(src);
        }

        public Blcfill blcfill() => default;

        [MethodImpl(Inline), Op]
        public Blcfill blcfill(AsmHexCode encoded) => new Blcfill(encoded);

        public struct Blci : ITypedInstruction<Blci>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blci(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLCI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blci src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blci src) => AsmMnemonics.BLCI;

            public static implicit operator AsmHexCode(Blci src) => src.Encoded;

            public static implicit operator Blci(AsmHexCode src) => new Blci(src);
        }

        public Blci blci() => default;

        [MethodImpl(Inline), Op]
        public Blci blci(AsmHexCode encoded) => new Blci(encoded);

        public struct Blcic : ITypedInstruction<Blcic>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blcic(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLCIC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blcic src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blcic src) => AsmMnemonics.BLCIC;

            public static implicit operator AsmHexCode(Blcic src) => src.Encoded;

            public static implicit operator Blcic(AsmHexCode src) => new Blcic(src);
        }

        public Blcic blcic() => default;

        [MethodImpl(Inline), Op]
        public Blcic blcic(AsmHexCode encoded) => new Blcic(encoded);

        public struct Blcmsk : ITypedInstruction<Blcmsk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blcmsk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLCMSK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blcmsk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blcmsk src) => AsmMnemonics.BLCMSK;

            public static implicit operator AsmHexCode(Blcmsk src) => src.Encoded;

            public static implicit operator Blcmsk(AsmHexCode src) => new Blcmsk(src);
        }

        public Blcmsk blcmsk() => default;

        [MethodImpl(Inline), Op]
        public Blcmsk blcmsk(AsmHexCode encoded) => new Blcmsk(encoded);

        public struct Blcs : ITypedInstruction<Blcs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blcs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLCS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blcs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blcs src) => AsmMnemonics.BLCS;

            public static implicit operator AsmHexCode(Blcs src) => src.Encoded;

            public static implicit operator Blcs(AsmHexCode src) => new Blcs(src);
        }

        public Blcs blcs() => default;

        [MethodImpl(Inline), Op]
        public Blcs blcs(AsmHexCode encoded) => new Blcs(encoded);

        public struct Blendpd : ITypedInstruction<Blendpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blendpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLENDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blendpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blendpd src) => AsmMnemonics.BLENDPD;

            public static implicit operator AsmHexCode(Blendpd src) => src.Encoded;

            public static implicit operator Blendpd(AsmHexCode src) => new Blendpd(src);
        }

        public Blendpd blendpd() => default;

        [MethodImpl(Inline), Op]
        public Blendpd blendpd(AsmHexCode encoded) => new Blendpd(encoded);

        public struct Blendps : ITypedInstruction<Blendps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blendps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLENDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blendps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blendps src) => AsmMnemonics.BLENDPS;

            public static implicit operator AsmHexCode(Blendps src) => src.Encoded;

            public static implicit operator Blendps(AsmHexCode src) => new Blendps(src);
        }

        public Blendps blendps() => default;

        [MethodImpl(Inline), Op]
        public Blendps blendps(AsmHexCode encoded) => new Blendps(encoded);

        public struct Blendvpd : ITypedInstruction<Blendvpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blendvpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLENDVPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blendvpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blendvpd src) => AsmMnemonics.BLENDVPD;

            public static implicit operator AsmHexCode(Blendvpd src) => src.Encoded;

            public static implicit operator Blendvpd(AsmHexCode src) => new Blendvpd(src);
        }

        public Blendvpd blendvpd() => default;

        [MethodImpl(Inline), Op]
        public Blendvpd blendvpd(AsmHexCode encoded) => new Blendvpd(encoded);

        public struct Blendvps : ITypedInstruction<Blendvps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blendvps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLENDVPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blendvps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blendvps src) => AsmMnemonics.BLENDVPS;

            public static implicit operator AsmHexCode(Blendvps src) => src.Encoded;

            public static implicit operator Blendvps(AsmHexCode src) => new Blendvps(src);
        }

        public Blendvps blendvps() => default;

        [MethodImpl(Inline), Op]
        public Blendvps blendvps(AsmHexCode encoded) => new Blendvps(encoded);

        public struct Blsfill : ITypedInstruction<Blsfill>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blsfill(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLSFILL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blsfill src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blsfill src) => AsmMnemonics.BLSFILL;

            public static implicit operator AsmHexCode(Blsfill src) => src.Encoded;

            public static implicit operator Blsfill(AsmHexCode src) => new Blsfill(src);
        }

        public Blsfill blsfill() => default;

        [MethodImpl(Inline), Op]
        public Blsfill blsfill(AsmHexCode encoded) => new Blsfill(encoded);

        public struct Blsi : ITypedInstruction<Blsi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blsi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLSI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blsi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blsi src) => AsmMnemonics.BLSI;

            public static implicit operator AsmHexCode(Blsi src) => src.Encoded;

            public static implicit operator Blsi(AsmHexCode src) => new Blsi(src);
        }

        public Blsi blsi() => default;

        [MethodImpl(Inline), Op]
        public Blsi blsi(AsmHexCode encoded) => new Blsi(encoded);

        public struct Blsic : ITypedInstruction<Blsic>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blsic(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLSIC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blsic src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blsic src) => AsmMnemonics.BLSIC;

            public static implicit operator AsmHexCode(Blsic src) => src.Encoded;

            public static implicit operator Blsic(AsmHexCode src) => new Blsic(src);
        }

        public Blsic blsic() => default;

        [MethodImpl(Inline), Op]
        public Blsic blsic(AsmHexCode encoded) => new Blsic(encoded);

        public struct Blsmsk : ITypedInstruction<Blsmsk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blsmsk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLSMSK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blsmsk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blsmsk src) => AsmMnemonics.BLSMSK;

            public static implicit operator AsmHexCode(Blsmsk src) => src.Encoded;

            public static implicit operator Blsmsk(AsmHexCode src) => new Blsmsk(src);
        }

        public Blsmsk blsmsk() => default;

        [MethodImpl(Inline), Op]
        public Blsmsk blsmsk(AsmHexCode encoded) => new Blsmsk(encoded);

        public struct Blsr : ITypedInstruction<Blsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Blsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BLSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Blsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Blsr src) => AsmMnemonics.BLSR;

            public static implicit operator AsmHexCode(Blsr src) => src.Encoded;

            public static implicit operator Blsr(AsmHexCode src) => new Blsr(src);
        }

        public Blsr blsr() => default;

        [MethodImpl(Inline), Op]
        public Blsr blsr(AsmHexCode encoded) => new Blsr(encoded);

        public struct Bndcl : ITypedInstruction<Bndcl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndcl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDCL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndcl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndcl src) => AsmMnemonics.BNDCL;

            public static implicit operator AsmHexCode(Bndcl src) => src.Encoded;

            public static implicit operator Bndcl(AsmHexCode src) => new Bndcl(src);
        }

        public Bndcl bndcl() => default;

        [MethodImpl(Inline), Op]
        public Bndcl bndcl(AsmHexCode encoded) => new Bndcl(encoded);

        public struct Bndcn : ITypedInstruction<Bndcn>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndcn(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDCN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndcn src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndcn src) => AsmMnemonics.BNDCN;

            public static implicit operator AsmHexCode(Bndcn src) => src.Encoded;

            public static implicit operator Bndcn(AsmHexCode src) => new Bndcn(src);
        }

        public Bndcn bndcn() => default;

        [MethodImpl(Inline), Op]
        public Bndcn bndcn(AsmHexCode encoded) => new Bndcn(encoded);

        public struct Bndcu : ITypedInstruction<Bndcu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndcu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDCU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndcu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndcu src) => AsmMnemonics.BNDCU;

            public static implicit operator AsmHexCode(Bndcu src) => src.Encoded;

            public static implicit operator Bndcu(AsmHexCode src) => new Bndcu(src);
        }

        public Bndcu bndcu() => default;

        [MethodImpl(Inline), Op]
        public Bndcu bndcu(AsmHexCode encoded) => new Bndcu(encoded);

        public struct Bndldx : ITypedInstruction<Bndldx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndldx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDLDX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndldx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndldx src) => AsmMnemonics.BNDLDX;

            public static implicit operator AsmHexCode(Bndldx src) => src.Encoded;

            public static implicit operator Bndldx(AsmHexCode src) => new Bndldx(src);
        }

        public Bndldx bndldx() => default;

        [MethodImpl(Inline), Op]
        public Bndldx bndldx(AsmHexCode encoded) => new Bndldx(encoded);

        public struct Bndmk : ITypedInstruction<Bndmk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndmk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDMK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndmk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndmk src) => AsmMnemonics.BNDMK;

            public static implicit operator AsmHexCode(Bndmk src) => src.Encoded;

            public static implicit operator Bndmk(AsmHexCode src) => new Bndmk(src);
        }

        public Bndmk bndmk() => default;

        [MethodImpl(Inline), Op]
        public Bndmk bndmk(AsmHexCode encoded) => new Bndmk(encoded);

        public struct Bndmov : ITypedInstruction<Bndmov>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndmov(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDMOV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndmov src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndmov src) => AsmMnemonics.BNDMOV;

            public static implicit operator AsmHexCode(Bndmov src) => src.Encoded;

            public static implicit operator Bndmov(AsmHexCode src) => new Bndmov(src);
        }

        public Bndmov bndmov() => default;

        [MethodImpl(Inline), Op]
        public Bndmov bndmov(AsmHexCode encoded) => new Bndmov(encoded);

        public struct Bndstx : ITypedInstruction<Bndstx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bndstx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BNDSTX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bndstx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bndstx src) => AsmMnemonics.BNDSTX;

            public static implicit operator AsmHexCode(Bndstx src) => src.Encoded;

            public static implicit operator Bndstx(AsmHexCode src) => new Bndstx(src);
        }

        public Bndstx bndstx() => default;

        [MethodImpl(Inline), Op]
        public Bndstx bndstx(AsmHexCode encoded) => new Bndstx(encoded);

        public struct Bound : ITypedInstruction<Bound>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bound(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BOUND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bound src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bound src) => AsmMnemonics.BOUND;

            public static implicit operator AsmHexCode(Bound src) => src.Encoded;

            public static implicit operator Bound(AsmHexCode src) => new Bound(src);
        }

        public Bound bound() => default;

        [MethodImpl(Inline), Op]
        public Bound bound(AsmHexCode encoded) => new Bound(encoded);

        public struct Bsf : ITypedInstruction<Bsf>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bsf(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BSF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bsf src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bsf src) => AsmMnemonics.BSF;

            public static implicit operator AsmHexCode(Bsf src) => src.Encoded;

            public static implicit operator Bsf(AsmHexCode src) => new Bsf(src);
        }

        public Bsf bsf() => default;

        [MethodImpl(Inline), Op]
        public Bsf bsf(AsmHexCode encoded) => new Bsf(encoded);

        public struct Bsr : ITypedInstruction<Bsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bsr src) => AsmMnemonics.BSR;

            public static implicit operator AsmHexCode(Bsr src) => src.Encoded;

            public static implicit operator Bsr(AsmHexCode src) => new Bsr(src);
        }

        public Bsr bsr() => default;

        [MethodImpl(Inline), Op]
        public Bsr bsr(AsmHexCode encoded) => new Bsr(encoded);

        public struct Bswap : ITypedInstruction<Bswap>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bswap(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BSWAP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bswap src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bswap src) => AsmMnemonics.BSWAP;

            public static implicit operator AsmHexCode(Bswap src) => src.Encoded;

            public static implicit operator Bswap(AsmHexCode src) => new Bswap(src);
        }

        public Bswap bswap() => default;

        [MethodImpl(Inline), Op]
        public Bswap bswap(AsmHexCode encoded) => new Bswap(encoded);

        public struct Bt : ITypedInstruction<Bt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bt src) => AsmMnemonics.BT;

            public static implicit operator AsmHexCode(Bt src) => src.Encoded;

            public static implicit operator Bt(AsmHexCode src) => new Bt(src);
        }

        public Bt bt() => default;

        [MethodImpl(Inline), Op]
        public Bt bt(AsmHexCode encoded) => new Bt(encoded);

        public struct Btc : ITypedInstruction<Btc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Btc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Btc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Btc src) => AsmMnemonics.BTC;

            public static implicit operator AsmHexCode(Btc src) => src.Encoded;

            public static implicit operator Btc(AsmHexCode src) => new Btc(src);
        }

        public Btc btc() => default;

        [MethodImpl(Inline), Op]
        public Btc btc(AsmHexCode encoded) => new Btc(encoded);

        public struct Btc_lock : ITypedInstruction<Btc_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Btc_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTC_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Btc_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Btc_lock src) => AsmMnemonics.BTC_LOCK;

            public static implicit operator AsmHexCode(Btc_lock src) => src.Encoded;

            public static implicit operator Btc_lock(AsmHexCode src) => new Btc_lock(src);
        }

        public Btc_lock btc_lock() => default;

        [MethodImpl(Inline), Op]
        public Btc_lock btc_lock(AsmHexCode encoded) => new Btc_lock(encoded);

        public struct Btr : ITypedInstruction<Btr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Btr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Btr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Btr src) => AsmMnemonics.BTR;

            public static implicit operator AsmHexCode(Btr src) => src.Encoded;

            public static implicit operator Btr(AsmHexCode src) => new Btr(src);
        }

        public Btr btr() => default;

        [MethodImpl(Inline), Op]
        public Btr btr(AsmHexCode encoded) => new Btr(encoded);

        public struct Btr_lock : ITypedInstruction<Btr_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Btr_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTR_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Btr_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Btr_lock src) => AsmMnemonics.BTR_LOCK;

            public static implicit operator AsmHexCode(Btr_lock src) => src.Encoded;

            public static implicit operator Btr_lock(AsmHexCode src) => new Btr_lock(src);
        }

        public Btr_lock btr_lock() => default;

        [MethodImpl(Inline), Op]
        public Btr_lock btr_lock(AsmHexCode encoded) => new Btr_lock(encoded);

        public struct Bts : ITypedInstruction<Bts>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bts(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bts src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bts src) => AsmMnemonics.BTS;

            public static implicit operator AsmHexCode(Bts src) => src.Encoded;

            public static implicit operator Bts(AsmHexCode src) => new Bts(src);
        }

        public Bts bts() => default;

        [MethodImpl(Inline), Op]
        public Bts bts(AsmHexCode encoded) => new Bts(encoded);

        public struct Bts_lock : ITypedInstruction<Bts_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bts_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BTS_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bts_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bts_lock src) => AsmMnemonics.BTS_LOCK;

            public static implicit operator AsmHexCode(Bts_lock src) => src.Encoded;

            public static implicit operator Bts_lock(AsmHexCode src) => new Bts_lock(src);
        }

        public Bts_lock bts_lock() => default;

        [MethodImpl(Inline), Op]
        public Bts_lock bts_lock(AsmHexCode encoded) => new Bts_lock(encoded);

        public struct Bzhi : ITypedInstruction<Bzhi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Bzhi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.BZHI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Bzhi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Bzhi src) => AsmMnemonics.BZHI;

            public static implicit operator AsmHexCode(Bzhi src) => src.Encoded;

            public static implicit operator Bzhi(AsmHexCode src) => new Bzhi(src);
        }

        public Bzhi bzhi() => default;

        [MethodImpl(Inline), Op]
        public Bzhi bzhi(AsmHexCode encoded) => new Bzhi(encoded);

        public struct Call_far : ITypedInstruction<Call_far>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Call_far(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CALL_FAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Call_far src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Call_far src) => AsmMnemonics.CALL_FAR;

            public static implicit operator AsmHexCode(Call_far src) => src.Encoded;

            public static implicit operator Call_far(AsmHexCode src) => new Call_far(src);
        }

        public Call_far call_far() => default;

        [MethodImpl(Inline), Op]
        public Call_far call_far(AsmHexCode encoded) => new Call_far(encoded);

        public struct Call_near : ITypedInstruction<Call_near>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Call_near(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CALL_NEAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Call_near src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Call_near src) => AsmMnemonics.CALL_NEAR;

            public static implicit operator AsmHexCode(Call_near src) => src.Encoded;

            public static implicit operator Call_near(AsmHexCode src) => new Call_near(src);
        }

        public Call_near call_near() => default;

        [MethodImpl(Inline), Op]
        public Call_near call_near(AsmHexCode encoded) => new Call_near(encoded);

        public struct Cbw : ITypedInstruction<Cbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cbw src) => AsmMnemonics.CBW;

            public static implicit operator AsmHexCode(Cbw src) => src.Encoded;

            public static implicit operator Cbw(AsmHexCode src) => new Cbw(src);
        }

        public Cbw cbw() => default;

        [MethodImpl(Inline), Op]
        public Cbw cbw(AsmHexCode encoded) => new Cbw(encoded);

        public struct Cdq : ITypedInstruction<Cdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cdq src) => AsmMnemonics.CDQ;

            public static implicit operator AsmHexCode(Cdq src) => src.Encoded;

            public static implicit operator Cdq(AsmHexCode src) => new Cdq(src);
        }

        public Cdq cdq() => default;

        [MethodImpl(Inline), Op]
        public Cdq cdq(AsmHexCode encoded) => new Cdq(encoded);

        public struct Cdqe : ITypedInstruction<Cdqe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cdqe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CDQE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cdqe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cdqe src) => AsmMnemonics.CDQE;

            public static implicit operator AsmHexCode(Cdqe src) => src.Encoded;

            public static implicit operator Cdqe(AsmHexCode src) => new Cdqe(src);
        }

        public Cdqe cdqe() => default;

        [MethodImpl(Inline), Op]
        public Cdqe cdqe(AsmHexCode encoded) => new Cdqe(encoded);

        public struct Clac : ITypedInstruction<Clac>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clac(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLAC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clac src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clac src) => AsmMnemonics.CLAC;

            public static implicit operator AsmHexCode(Clac src) => src.Encoded;

            public static implicit operator Clac(AsmHexCode src) => new Clac(src);
        }

        public Clac clac() => default;

        [MethodImpl(Inline), Op]
        public Clac clac(AsmHexCode encoded) => new Clac(encoded);

        public struct Clc : ITypedInstruction<Clc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clc src) => AsmMnemonics.CLC;

            public static implicit operator AsmHexCode(Clc src) => src.Encoded;

            public static implicit operator Clc(AsmHexCode src) => new Clc(src);
        }

        public Clc clc() => default;

        [MethodImpl(Inline), Op]
        public Clc clc(AsmHexCode encoded) => new Clc(encoded);

        public struct Cld : ITypedInstruction<Cld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cld src) => AsmMnemonics.CLD;

            public static implicit operator AsmHexCode(Cld src) => src.Encoded;

            public static implicit operator Cld(AsmHexCode src) => new Cld(src);
        }

        public Cld cld() => default;

        [MethodImpl(Inline), Op]
        public Cld cld(AsmHexCode encoded) => new Cld(encoded);

        public struct Cldemote : ITypedInstruction<Cldemote>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cldemote(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLDEMOTE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cldemote src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cldemote src) => AsmMnemonics.CLDEMOTE;

            public static implicit operator AsmHexCode(Cldemote src) => src.Encoded;

            public static implicit operator Cldemote(AsmHexCode src) => new Cldemote(src);
        }

        public Cldemote cldemote() => default;

        [MethodImpl(Inline), Op]
        public Cldemote cldemote(AsmHexCode encoded) => new Cldemote(encoded);

        public struct Clflush : ITypedInstruction<Clflush>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clflush(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLFLUSH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clflush src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clflush src) => AsmMnemonics.CLFLUSH;

            public static implicit operator AsmHexCode(Clflush src) => src.Encoded;

            public static implicit operator Clflush(AsmHexCode src) => new Clflush(src);
        }

        public Clflush clflush() => default;

        [MethodImpl(Inline), Op]
        public Clflush clflush(AsmHexCode encoded) => new Clflush(encoded);

        public struct Clflushopt : ITypedInstruction<Clflushopt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clflushopt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLFLUSHOPT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clflushopt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clflushopt src) => AsmMnemonics.CLFLUSHOPT;

            public static implicit operator AsmHexCode(Clflushopt src) => src.Encoded;

            public static implicit operator Clflushopt(AsmHexCode src) => new Clflushopt(src);
        }

        public Clflushopt clflushopt() => default;

        [MethodImpl(Inline), Op]
        public Clflushopt clflushopt(AsmHexCode encoded) => new Clflushopt(encoded);

        public struct Clgi : ITypedInstruction<Clgi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clgi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLGI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clgi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clgi src) => AsmMnemonics.CLGI;

            public static implicit operator AsmHexCode(Clgi src) => src.Encoded;

            public static implicit operator Clgi(AsmHexCode src) => new Clgi(src);
        }

        public Clgi clgi() => default;

        [MethodImpl(Inline), Op]
        public Clgi clgi(AsmHexCode encoded) => new Clgi(encoded);

        public struct Cli : ITypedInstruction<Cli>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cli(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cli src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cli src) => AsmMnemonics.CLI;

            public static implicit operator AsmHexCode(Cli src) => src.Encoded;

            public static implicit operator Cli(AsmHexCode src) => new Cli(src);
        }

        public Cli cli() => default;

        [MethodImpl(Inline), Op]
        public Cli cli(AsmHexCode encoded) => new Cli(encoded);

        public struct Clrssbsy : ITypedInstruction<Clrssbsy>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clrssbsy(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLRSSBSY;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clrssbsy src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clrssbsy src) => AsmMnemonics.CLRSSBSY;

            public static implicit operator AsmHexCode(Clrssbsy src) => src.Encoded;

            public static implicit operator Clrssbsy(AsmHexCode src) => new Clrssbsy(src);
        }

        public Clrssbsy clrssbsy() => default;

        [MethodImpl(Inline), Op]
        public Clrssbsy clrssbsy(AsmHexCode encoded) => new Clrssbsy(encoded);

        public struct Clts : ITypedInstruction<Clts>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clts(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLTS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clts src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clts src) => AsmMnemonics.CLTS;

            public static implicit operator AsmHexCode(Clts src) => src.Encoded;

            public static implicit operator Clts(AsmHexCode src) => new Clts(src);
        }

        public Clts clts() => default;

        [MethodImpl(Inline), Op]
        public Clts clts(AsmHexCode encoded) => new Clts(encoded);

        public struct Clui : ITypedInstruction<Clui>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clui(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLUI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clui src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clui src) => AsmMnemonics.CLUI;

            public static implicit operator AsmHexCode(Clui src) => src.Encoded;

            public static implicit operator Clui(AsmHexCode src) => new Clui(src);
        }

        public Clui clui() => default;

        [MethodImpl(Inline), Op]
        public Clui clui(AsmHexCode encoded) => new Clui(encoded);

        public struct Clwb : ITypedInstruction<Clwb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clwb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clwb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clwb src) => AsmMnemonics.CLWB;

            public static implicit operator AsmHexCode(Clwb src) => src.Encoded;

            public static implicit operator Clwb(AsmHexCode src) => new Clwb(src);
        }

        public Clwb clwb() => default;

        [MethodImpl(Inline), Op]
        public Clwb clwb(AsmHexCode encoded) => new Clwb(encoded);

        public struct Clzero : ITypedInstruction<Clzero>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Clzero(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CLZERO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Clzero src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Clzero src) => AsmMnemonics.CLZERO;

            public static implicit operator AsmHexCode(Clzero src) => src.Encoded;

            public static implicit operator Clzero(AsmHexCode src) => new Clzero(src);
        }

        public Clzero clzero() => default;

        [MethodImpl(Inline), Op]
        public Clzero clzero(AsmHexCode encoded) => new Clzero(encoded);

        public struct Cmc : ITypedInstruction<Cmc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmc src) => AsmMnemonics.CMC;

            public static implicit operator AsmHexCode(Cmc src) => src.Encoded;

            public static implicit operator Cmc(AsmHexCode src) => new Cmc(src);
        }

        public Cmc cmc() => default;

        [MethodImpl(Inline), Op]
        public Cmc cmc(AsmHexCode encoded) => new Cmc(encoded);

        public struct Cmovb : ITypedInstruction<Cmovb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovb src) => AsmMnemonics.CMOVB;

            public static implicit operator AsmHexCode(Cmovb src) => src.Encoded;

            public static implicit operator Cmovb(AsmHexCode src) => new Cmovb(src);
        }

        public Cmovb cmovb() => default;

        [MethodImpl(Inline), Op]
        public Cmovb cmovb(AsmHexCode encoded) => new Cmovb(encoded);

        public struct Cmovbe : ITypedInstruction<Cmovbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovbe src) => AsmMnemonics.CMOVBE;

            public static implicit operator AsmHexCode(Cmovbe src) => src.Encoded;

            public static implicit operator Cmovbe(AsmHexCode src) => new Cmovbe(src);
        }

        public Cmovbe cmovbe() => default;

        [MethodImpl(Inline), Op]
        public Cmovbe cmovbe(AsmHexCode encoded) => new Cmovbe(encoded);

        public struct Cmovl : ITypedInstruction<Cmovl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovl src) => AsmMnemonics.CMOVL;

            public static implicit operator AsmHexCode(Cmovl src) => src.Encoded;

            public static implicit operator Cmovl(AsmHexCode src) => new Cmovl(src);
        }

        public Cmovl cmovl() => default;

        [MethodImpl(Inline), Op]
        public Cmovl cmovl(AsmHexCode encoded) => new Cmovl(encoded);

        public struct Cmovle : ITypedInstruction<Cmovle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovle src) => AsmMnemonics.CMOVLE;

            public static implicit operator AsmHexCode(Cmovle src) => src.Encoded;

            public static implicit operator Cmovle(AsmHexCode src) => new Cmovle(src);
        }

        public Cmovle cmovle() => default;

        [MethodImpl(Inline), Op]
        public Cmovle cmovle(AsmHexCode encoded) => new Cmovle(encoded);

        public struct Cmovnb : ITypedInstruction<Cmovnb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnb src) => AsmMnemonics.CMOVNB;

            public static implicit operator AsmHexCode(Cmovnb src) => src.Encoded;

            public static implicit operator Cmovnb(AsmHexCode src) => new Cmovnb(src);
        }

        public Cmovnb cmovnb() => default;

        [MethodImpl(Inline), Op]
        public Cmovnb cmovnb(AsmHexCode encoded) => new Cmovnb(encoded);

        public struct Cmovnbe : ITypedInstruction<Cmovnbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnbe src) => AsmMnemonics.CMOVNBE;

            public static implicit operator AsmHexCode(Cmovnbe src) => src.Encoded;

            public static implicit operator Cmovnbe(AsmHexCode src) => new Cmovnbe(src);
        }

        public Cmovnbe cmovnbe() => default;

        [MethodImpl(Inline), Op]
        public Cmovnbe cmovnbe(AsmHexCode encoded) => new Cmovnbe(encoded);

        public struct Cmovnl : ITypedInstruction<Cmovnl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnl src) => AsmMnemonics.CMOVNL;

            public static implicit operator AsmHexCode(Cmovnl src) => src.Encoded;

            public static implicit operator Cmovnl(AsmHexCode src) => new Cmovnl(src);
        }

        public Cmovnl cmovnl() => default;

        [MethodImpl(Inline), Op]
        public Cmovnl cmovnl(AsmHexCode encoded) => new Cmovnl(encoded);

        public struct Cmovnle : ITypedInstruction<Cmovnle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnle src) => AsmMnemonics.CMOVNLE;

            public static implicit operator AsmHexCode(Cmovnle src) => src.Encoded;

            public static implicit operator Cmovnle(AsmHexCode src) => new Cmovnle(src);
        }

        public Cmovnle cmovnle() => default;

        [MethodImpl(Inline), Op]
        public Cmovnle cmovnle(AsmHexCode encoded) => new Cmovnle(encoded);

        public struct Cmovno : ITypedInstruction<Cmovno>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovno(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovno src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovno src) => AsmMnemonics.CMOVNO;

            public static implicit operator AsmHexCode(Cmovno src) => src.Encoded;

            public static implicit operator Cmovno(AsmHexCode src) => new Cmovno(src);
        }

        public Cmovno cmovno() => default;

        [MethodImpl(Inline), Op]
        public Cmovno cmovno(AsmHexCode encoded) => new Cmovno(encoded);

        public struct Cmovnp : ITypedInstruction<Cmovnp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnp src) => AsmMnemonics.CMOVNP;

            public static implicit operator AsmHexCode(Cmovnp src) => src.Encoded;

            public static implicit operator Cmovnp(AsmHexCode src) => new Cmovnp(src);
        }

        public Cmovnp cmovnp() => default;

        [MethodImpl(Inline), Op]
        public Cmovnp cmovnp(AsmHexCode encoded) => new Cmovnp(encoded);

        public struct Cmovns : ITypedInstruction<Cmovns>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovns(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovns src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovns src) => AsmMnemonics.CMOVNS;

            public static implicit operator AsmHexCode(Cmovns src) => src.Encoded;

            public static implicit operator Cmovns(AsmHexCode src) => new Cmovns(src);
        }

        public Cmovns cmovns() => default;

        [MethodImpl(Inline), Op]
        public Cmovns cmovns(AsmHexCode encoded) => new Cmovns(encoded);

        public struct Cmovnz : ITypedInstruction<Cmovnz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovnz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVNZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovnz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovnz src) => AsmMnemonics.CMOVNZ;

            public static implicit operator AsmHexCode(Cmovnz src) => src.Encoded;

            public static implicit operator Cmovnz(AsmHexCode src) => new Cmovnz(src);
        }

        public Cmovnz cmovnz() => default;

        [MethodImpl(Inline), Op]
        public Cmovnz cmovnz(AsmHexCode encoded) => new Cmovnz(encoded);

        public struct Cmovo : ITypedInstruction<Cmovo>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovo(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovo src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovo src) => AsmMnemonics.CMOVO;

            public static implicit operator AsmHexCode(Cmovo src) => src.Encoded;

            public static implicit operator Cmovo(AsmHexCode src) => new Cmovo(src);
        }

        public Cmovo cmovo() => default;

        [MethodImpl(Inline), Op]
        public Cmovo cmovo(AsmHexCode encoded) => new Cmovo(encoded);

        public struct Cmovp : ITypedInstruction<Cmovp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovp src) => AsmMnemonics.CMOVP;

            public static implicit operator AsmHexCode(Cmovp src) => src.Encoded;

            public static implicit operator Cmovp(AsmHexCode src) => new Cmovp(src);
        }

        public Cmovp cmovp() => default;

        [MethodImpl(Inline), Op]
        public Cmovp cmovp(AsmHexCode encoded) => new Cmovp(encoded);

        public struct Cmovs : ITypedInstruction<Cmovs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovs src) => AsmMnemonics.CMOVS;

            public static implicit operator AsmHexCode(Cmovs src) => src.Encoded;

            public static implicit operator Cmovs(AsmHexCode src) => new Cmovs(src);
        }

        public Cmovs cmovs() => default;

        [MethodImpl(Inline), Op]
        public Cmovs cmovs(AsmHexCode encoded) => new Cmovs(encoded);

        public struct Cmovz : ITypedInstruction<Cmovz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmovz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMOVZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmovz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmovz src) => AsmMnemonics.CMOVZ;

            public static implicit operator AsmHexCode(Cmovz src) => src.Encoded;

            public static implicit operator Cmovz(AsmHexCode src) => new Cmovz(src);
        }

        public Cmovz cmovz() => default;

        [MethodImpl(Inline), Op]
        public Cmovz cmovz(AsmHexCode encoded) => new Cmovz(encoded);

        public struct Cmp : ITypedInstruction<Cmp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmp src) => AsmMnemonics.CMP;

            public static implicit operator AsmHexCode(Cmp src) => src.Encoded;

            public static implicit operator Cmp(AsmHexCode src) => new Cmp(src);
        }

        public Cmp cmp() => default;

        [MethodImpl(Inline), Op]
        public Cmp cmp(AsmHexCode encoded) => new Cmp(encoded);

        public struct Cmppd : ITypedInstruction<Cmppd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmppd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmppd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmppd src) => AsmMnemonics.CMPPD;

            public static implicit operator AsmHexCode(Cmppd src) => src.Encoded;

            public static implicit operator Cmppd(AsmHexCode src) => new Cmppd(src);
        }

        public Cmppd cmppd() => default;

        [MethodImpl(Inline), Op]
        public Cmppd cmppd(AsmHexCode encoded) => new Cmppd(encoded);

        public struct Cmpps : ITypedInstruction<Cmpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpps src) => AsmMnemonics.CMPPS;

            public static implicit operator AsmHexCode(Cmpps src) => src.Encoded;

            public static implicit operator Cmpps(AsmHexCode src) => new Cmpps(src);
        }

        public Cmpps cmpps() => default;

        [MethodImpl(Inline), Op]
        public Cmpps cmpps(AsmHexCode encoded) => new Cmpps(encoded);

        public struct Cmpsb : ITypedInstruction<Cmpsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpsb src) => AsmMnemonics.CMPSB;

            public static implicit operator AsmHexCode(Cmpsb src) => src.Encoded;

            public static implicit operator Cmpsb(AsmHexCode src) => new Cmpsb(src);
        }

        public Cmpsb cmpsb() => default;

        [MethodImpl(Inline), Op]
        public Cmpsb cmpsb(AsmHexCode encoded) => new Cmpsb(encoded);

        public struct Cmpsd : ITypedInstruction<Cmpsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpsd src) => AsmMnemonics.CMPSD;

            public static implicit operator AsmHexCode(Cmpsd src) => src.Encoded;

            public static implicit operator Cmpsd(AsmHexCode src) => new Cmpsd(src);
        }

        public Cmpsd cmpsd() => default;

        [MethodImpl(Inline), Op]
        public Cmpsd cmpsd(AsmHexCode encoded) => new Cmpsd(encoded);

        public struct Cmpsd_xmm : ITypedInstruction<Cmpsd_xmm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpsd_xmm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSD_XMM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpsd_xmm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpsd_xmm src) => AsmMnemonics.CMPSD_XMM;

            public static implicit operator AsmHexCode(Cmpsd_xmm src) => src.Encoded;

            public static implicit operator Cmpsd_xmm(AsmHexCode src) => new Cmpsd_xmm(src);
        }

        public Cmpsd_xmm cmpsd_xmm() => default;

        [MethodImpl(Inline), Op]
        public Cmpsd_xmm cmpsd_xmm(AsmHexCode encoded) => new Cmpsd_xmm(encoded);

        public struct Cmpsq : ITypedInstruction<Cmpsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpsq src) => AsmMnemonics.CMPSQ;

            public static implicit operator AsmHexCode(Cmpsq src) => src.Encoded;

            public static implicit operator Cmpsq(AsmHexCode src) => new Cmpsq(src);
        }

        public Cmpsq cmpsq() => default;

        [MethodImpl(Inline), Op]
        public Cmpsq cmpsq(AsmHexCode encoded) => new Cmpsq(encoded);

        public struct Cmpss : ITypedInstruction<Cmpss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpss src) => AsmMnemonics.CMPSS;

            public static implicit operator AsmHexCode(Cmpss src) => src.Encoded;

            public static implicit operator Cmpss(AsmHexCode src) => new Cmpss(src);
        }

        public Cmpss cmpss() => default;

        [MethodImpl(Inline), Op]
        public Cmpss cmpss(AsmHexCode encoded) => new Cmpss(encoded);

        public struct Cmpsw : ITypedInstruction<Cmpsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpsw src) => AsmMnemonics.CMPSW;

            public static implicit operator AsmHexCode(Cmpsw src) => src.Encoded;

            public static implicit operator Cmpsw(AsmHexCode src) => new Cmpsw(src);
        }

        public Cmpsw cmpsw() => default;

        [MethodImpl(Inline), Op]
        public Cmpsw cmpsw(AsmHexCode encoded) => new Cmpsw(encoded);

        public struct Cmpxchg : ITypedInstruction<Cmpxchg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg src) => AsmMnemonics.CMPXCHG;

            public static implicit operator AsmHexCode(Cmpxchg src) => src.Encoded;

            public static implicit operator Cmpxchg(AsmHexCode src) => new Cmpxchg(src);
        }

        public Cmpxchg cmpxchg() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg cmpxchg(AsmHexCode encoded) => new Cmpxchg(encoded);

        public struct Cmpxchg_lock : ITypedInstruction<Cmpxchg_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg_lock src) => AsmMnemonics.CMPXCHG_LOCK;

            public static implicit operator AsmHexCode(Cmpxchg_lock src) => src.Encoded;

            public static implicit operator Cmpxchg_lock(AsmHexCode src) => new Cmpxchg_lock(src);
        }

        public Cmpxchg_lock cmpxchg_lock() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg_lock cmpxchg_lock(AsmHexCode encoded) => new Cmpxchg_lock(encoded);

        public struct Cmpxchg16b : ITypedInstruction<Cmpxchg16b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg16b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG16B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg16b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg16b src) => AsmMnemonics.CMPXCHG16B;

            public static implicit operator AsmHexCode(Cmpxchg16b src) => src.Encoded;

            public static implicit operator Cmpxchg16b(AsmHexCode src) => new Cmpxchg16b(src);
        }

        public Cmpxchg16b cmpxchg16b() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg16b cmpxchg16b(AsmHexCode encoded) => new Cmpxchg16b(encoded);

        public struct Cmpxchg16b_lock : ITypedInstruction<Cmpxchg16b_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg16b_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG16B_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg16b_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg16b_lock src) => AsmMnemonics.CMPXCHG16B_LOCK;

            public static implicit operator AsmHexCode(Cmpxchg16b_lock src) => src.Encoded;

            public static implicit operator Cmpxchg16b_lock(AsmHexCode src) => new Cmpxchg16b_lock(src);
        }

        public Cmpxchg16b_lock cmpxchg16b_lock() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg16b_lock cmpxchg16b_lock(AsmHexCode encoded) => new Cmpxchg16b_lock(encoded);

        public struct Cmpxchg8b : ITypedInstruction<Cmpxchg8b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg8b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG8B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg8b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg8b src) => AsmMnemonics.CMPXCHG8B;

            public static implicit operator AsmHexCode(Cmpxchg8b src) => src.Encoded;

            public static implicit operator Cmpxchg8b(AsmHexCode src) => new Cmpxchg8b(src);
        }

        public Cmpxchg8b cmpxchg8b() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg8b cmpxchg8b(AsmHexCode encoded) => new Cmpxchg8b(encoded);

        public struct Cmpxchg8b_lock : ITypedInstruction<Cmpxchg8b_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cmpxchg8b_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CMPXCHG8B_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cmpxchg8b_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cmpxchg8b_lock src) => AsmMnemonics.CMPXCHG8B_LOCK;

            public static implicit operator AsmHexCode(Cmpxchg8b_lock src) => src.Encoded;

            public static implicit operator Cmpxchg8b_lock(AsmHexCode src) => new Cmpxchg8b_lock(src);
        }

        public Cmpxchg8b_lock cmpxchg8b_lock() => default;

        [MethodImpl(Inline), Op]
        public Cmpxchg8b_lock cmpxchg8b_lock(AsmHexCode encoded) => new Cmpxchg8b_lock(encoded);

        public struct Comisd : ITypedInstruction<Comisd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Comisd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.COMISD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Comisd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Comisd src) => AsmMnemonics.COMISD;

            public static implicit operator AsmHexCode(Comisd src) => src.Encoded;

            public static implicit operator Comisd(AsmHexCode src) => new Comisd(src);
        }

        public Comisd comisd() => default;

        [MethodImpl(Inline), Op]
        public Comisd comisd(AsmHexCode encoded) => new Comisd(encoded);

        public struct Comiss : ITypedInstruction<Comiss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Comiss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.COMISS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Comiss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Comiss src) => AsmMnemonics.COMISS;

            public static implicit operator AsmHexCode(Comiss src) => src.Encoded;

            public static implicit operator Comiss(AsmHexCode src) => new Comiss(src);
        }

        public Comiss comiss() => default;

        [MethodImpl(Inline), Op]
        public Comiss comiss(AsmHexCode encoded) => new Comiss(encoded);

        public struct Cpuid : ITypedInstruction<Cpuid>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cpuid(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CPUID;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cpuid src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cpuid src) => AsmMnemonics.CPUID;

            public static implicit operator AsmHexCode(Cpuid src) => src.Encoded;

            public static implicit operator Cpuid(AsmHexCode src) => new Cpuid(src);
        }

        public Cpuid cpuid() => default;

        [MethodImpl(Inline), Op]
        public Cpuid cpuid(AsmHexCode encoded) => new Cpuid(encoded);

        public struct Cqo : ITypedInstruction<Cqo>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cqo(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CQO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cqo src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cqo src) => AsmMnemonics.CQO;

            public static implicit operator AsmHexCode(Cqo src) => src.Encoded;

            public static implicit operator Cqo(AsmHexCode src) => new Cqo(src);
        }

        public Cqo cqo() => default;

        [MethodImpl(Inline), Op]
        public Cqo cqo(AsmHexCode encoded) => new Cqo(encoded);

        public struct Crc32 : ITypedInstruction<Crc32>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Crc32(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CRC32;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Crc32 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Crc32 src) => AsmMnemonics.CRC32;

            public static implicit operator AsmHexCode(Crc32 src) => src.Encoded;

            public static implicit operator Crc32(AsmHexCode src) => new Crc32(src);
        }

        public Crc32 crc32() => default;

        [MethodImpl(Inline), Op]
        public Crc32 crc32(AsmHexCode encoded) => new Crc32(encoded);

        public struct Cvtdq2pd : ITypedInstruction<Cvtdq2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtdq2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTDQ2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtdq2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtdq2pd src) => AsmMnemonics.CVTDQ2PD;

            public static implicit operator AsmHexCode(Cvtdq2pd src) => src.Encoded;

            public static implicit operator Cvtdq2pd(AsmHexCode src) => new Cvtdq2pd(src);
        }

        public Cvtdq2pd cvtdq2pd() => default;

        [MethodImpl(Inline), Op]
        public Cvtdq2pd cvtdq2pd(AsmHexCode encoded) => new Cvtdq2pd(encoded);

        public struct Cvtdq2ps : ITypedInstruction<Cvtdq2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtdq2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTDQ2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtdq2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtdq2ps src) => AsmMnemonics.CVTDQ2PS;

            public static implicit operator AsmHexCode(Cvtdq2ps src) => src.Encoded;

            public static implicit operator Cvtdq2ps(AsmHexCode src) => new Cvtdq2ps(src);
        }

        public Cvtdq2ps cvtdq2ps() => default;

        [MethodImpl(Inline), Op]
        public Cvtdq2ps cvtdq2ps(AsmHexCode encoded) => new Cvtdq2ps(encoded);

        public struct Cvtpd2dq : ITypedInstruction<Cvtpd2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtpd2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPD2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtpd2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtpd2dq src) => AsmMnemonics.CVTPD2DQ;

            public static implicit operator AsmHexCode(Cvtpd2dq src) => src.Encoded;

            public static implicit operator Cvtpd2dq(AsmHexCode src) => new Cvtpd2dq(src);
        }

        public Cvtpd2dq cvtpd2dq() => default;

        [MethodImpl(Inline), Op]
        public Cvtpd2dq cvtpd2dq(AsmHexCode encoded) => new Cvtpd2dq(encoded);

        public struct Cvtpd2pi : ITypedInstruction<Cvtpd2pi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtpd2pi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPD2PI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtpd2pi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtpd2pi src) => AsmMnemonics.CVTPD2PI;

            public static implicit operator AsmHexCode(Cvtpd2pi src) => src.Encoded;

            public static implicit operator Cvtpd2pi(AsmHexCode src) => new Cvtpd2pi(src);
        }

        public Cvtpd2pi cvtpd2pi() => default;

        [MethodImpl(Inline), Op]
        public Cvtpd2pi cvtpd2pi(AsmHexCode encoded) => new Cvtpd2pi(encoded);

        public struct Cvtpd2ps : ITypedInstruction<Cvtpd2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtpd2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPD2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtpd2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtpd2ps src) => AsmMnemonics.CVTPD2PS;

            public static implicit operator AsmHexCode(Cvtpd2ps src) => src.Encoded;

            public static implicit operator Cvtpd2ps(AsmHexCode src) => new Cvtpd2ps(src);
        }

        public Cvtpd2ps cvtpd2ps() => default;

        [MethodImpl(Inline), Op]
        public Cvtpd2ps cvtpd2ps(AsmHexCode encoded) => new Cvtpd2ps(encoded);

        public struct Cvtpi2pd : ITypedInstruction<Cvtpi2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtpi2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPI2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtpi2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtpi2pd src) => AsmMnemonics.CVTPI2PD;

            public static implicit operator AsmHexCode(Cvtpi2pd src) => src.Encoded;

            public static implicit operator Cvtpi2pd(AsmHexCode src) => new Cvtpi2pd(src);
        }

        public Cvtpi2pd cvtpi2pd() => default;

        [MethodImpl(Inline), Op]
        public Cvtpi2pd cvtpi2pd(AsmHexCode encoded) => new Cvtpi2pd(encoded);

        public struct Cvtpi2ps : ITypedInstruction<Cvtpi2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtpi2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPI2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtpi2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtpi2ps src) => AsmMnemonics.CVTPI2PS;

            public static implicit operator AsmHexCode(Cvtpi2ps src) => src.Encoded;

            public static implicit operator Cvtpi2ps(AsmHexCode src) => new Cvtpi2ps(src);
        }

        public Cvtpi2ps cvtpi2ps() => default;

        [MethodImpl(Inline), Op]
        public Cvtpi2ps cvtpi2ps(AsmHexCode encoded) => new Cvtpi2ps(encoded);

        public struct Cvtps2dq : ITypedInstruction<Cvtps2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtps2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPS2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtps2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtps2dq src) => AsmMnemonics.CVTPS2DQ;

            public static implicit operator AsmHexCode(Cvtps2dq src) => src.Encoded;

            public static implicit operator Cvtps2dq(AsmHexCode src) => new Cvtps2dq(src);
        }

        public Cvtps2dq cvtps2dq() => default;

        [MethodImpl(Inline), Op]
        public Cvtps2dq cvtps2dq(AsmHexCode encoded) => new Cvtps2dq(encoded);

        public struct Cvtps2pd : ITypedInstruction<Cvtps2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtps2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPS2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtps2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtps2pd src) => AsmMnemonics.CVTPS2PD;

            public static implicit operator AsmHexCode(Cvtps2pd src) => src.Encoded;

            public static implicit operator Cvtps2pd(AsmHexCode src) => new Cvtps2pd(src);
        }

        public Cvtps2pd cvtps2pd() => default;

        [MethodImpl(Inline), Op]
        public Cvtps2pd cvtps2pd(AsmHexCode encoded) => new Cvtps2pd(encoded);

        public struct Cvtps2pi : ITypedInstruction<Cvtps2pi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtps2pi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTPS2PI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtps2pi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtps2pi src) => AsmMnemonics.CVTPS2PI;

            public static implicit operator AsmHexCode(Cvtps2pi src) => src.Encoded;

            public static implicit operator Cvtps2pi(AsmHexCode src) => new Cvtps2pi(src);
        }

        public Cvtps2pi cvtps2pi() => default;

        [MethodImpl(Inline), Op]
        public Cvtps2pi cvtps2pi(AsmHexCode encoded) => new Cvtps2pi(encoded);

        public struct Cvtsd2si : ITypedInstruction<Cvtsd2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtsd2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSD2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtsd2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtsd2si src) => AsmMnemonics.CVTSD2SI;

            public static implicit operator AsmHexCode(Cvtsd2si src) => src.Encoded;

            public static implicit operator Cvtsd2si(AsmHexCode src) => new Cvtsd2si(src);
        }

        public Cvtsd2si cvtsd2si() => default;

        [MethodImpl(Inline), Op]
        public Cvtsd2si cvtsd2si(AsmHexCode encoded) => new Cvtsd2si(encoded);

        public struct Cvtsd2ss : ITypedInstruction<Cvtsd2ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtsd2ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSD2SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtsd2ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtsd2ss src) => AsmMnemonics.CVTSD2SS;

            public static implicit operator AsmHexCode(Cvtsd2ss src) => src.Encoded;

            public static implicit operator Cvtsd2ss(AsmHexCode src) => new Cvtsd2ss(src);
        }

        public Cvtsd2ss cvtsd2ss() => default;

        [MethodImpl(Inline), Op]
        public Cvtsd2ss cvtsd2ss(AsmHexCode encoded) => new Cvtsd2ss(encoded);

        public struct Cvtsi2sd : ITypedInstruction<Cvtsi2sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtsi2sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSI2SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtsi2sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtsi2sd src) => AsmMnemonics.CVTSI2SD;

            public static implicit operator AsmHexCode(Cvtsi2sd src) => src.Encoded;

            public static implicit operator Cvtsi2sd(AsmHexCode src) => new Cvtsi2sd(src);
        }

        public Cvtsi2sd cvtsi2sd() => default;

        [MethodImpl(Inline), Op]
        public Cvtsi2sd cvtsi2sd(AsmHexCode encoded) => new Cvtsi2sd(encoded);

        public struct Cvtsi2ss : ITypedInstruction<Cvtsi2ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtsi2ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSI2SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtsi2ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtsi2ss src) => AsmMnemonics.CVTSI2SS;

            public static implicit operator AsmHexCode(Cvtsi2ss src) => src.Encoded;

            public static implicit operator Cvtsi2ss(AsmHexCode src) => new Cvtsi2ss(src);
        }

        public Cvtsi2ss cvtsi2ss() => default;

        [MethodImpl(Inline), Op]
        public Cvtsi2ss cvtsi2ss(AsmHexCode encoded) => new Cvtsi2ss(encoded);

        public struct Cvtss2sd : ITypedInstruction<Cvtss2sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtss2sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSS2SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtss2sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtss2sd src) => AsmMnemonics.CVTSS2SD;

            public static implicit operator AsmHexCode(Cvtss2sd src) => src.Encoded;

            public static implicit operator Cvtss2sd(AsmHexCode src) => new Cvtss2sd(src);
        }

        public Cvtss2sd cvtss2sd() => default;

        [MethodImpl(Inline), Op]
        public Cvtss2sd cvtss2sd(AsmHexCode encoded) => new Cvtss2sd(encoded);

        public struct Cvtss2si : ITypedInstruction<Cvtss2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvtss2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTSS2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvtss2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvtss2si src) => AsmMnemonics.CVTSS2SI;

            public static implicit operator AsmHexCode(Cvtss2si src) => src.Encoded;

            public static implicit operator Cvtss2si(AsmHexCode src) => new Cvtss2si(src);
        }

        public Cvtss2si cvtss2si() => default;

        [MethodImpl(Inline), Op]
        public Cvtss2si cvtss2si(AsmHexCode encoded) => new Cvtss2si(encoded);

        public struct Cvttpd2dq : ITypedInstruction<Cvttpd2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttpd2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTPD2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttpd2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttpd2dq src) => AsmMnemonics.CVTTPD2DQ;

            public static implicit operator AsmHexCode(Cvttpd2dq src) => src.Encoded;

            public static implicit operator Cvttpd2dq(AsmHexCode src) => new Cvttpd2dq(src);
        }

        public Cvttpd2dq cvttpd2dq() => default;

        [MethodImpl(Inline), Op]
        public Cvttpd2dq cvttpd2dq(AsmHexCode encoded) => new Cvttpd2dq(encoded);

        public struct Cvttpd2pi : ITypedInstruction<Cvttpd2pi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttpd2pi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTPD2PI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttpd2pi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttpd2pi src) => AsmMnemonics.CVTTPD2PI;

            public static implicit operator AsmHexCode(Cvttpd2pi src) => src.Encoded;

            public static implicit operator Cvttpd2pi(AsmHexCode src) => new Cvttpd2pi(src);
        }

        public Cvttpd2pi cvttpd2pi() => default;

        [MethodImpl(Inline), Op]
        public Cvttpd2pi cvttpd2pi(AsmHexCode encoded) => new Cvttpd2pi(encoded);

        public struct Cvttps2dq : ITypedInstruction<Cvttps2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttps2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTPS2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttps2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttps2dq src) => AsmMnemonics.CVTTPS2DQ;

            public static implicit operator AsmHexCode(Cvttps2dq src) => src.Encoded;

            public static implicit operator Cvttps2dq(AsmHexCode src) => new Cvttps2dq(src);
        }

        public Cvttps2dq cvttps2dq() => default;

        [MethodImpl(Inline), Op]
        public Cvttps2dq cvttps2dq(AsmHexCode encoded) => new Cvttps2dq(encoded);

        public struct Cvttps2pi : ITypedInstruction<Cvttps2pi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttps2pi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTPS2PI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttps2pi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttps2pi src) => AsmMnemonics.CVTTPS2PI;

            public static implicit operator AsmHexCode(Cvttps2pi src) => src.Encoded;

            public static implicit operator Cvttps2pi(AsmHexCode src) => new Cvttps2pi(src);
        }

        public Cvttps2pi cvttps2pi() => default;

        [MethodImpl(Inline), Op]
        public Cvttps2pi cvttps2pi(AsmHexCode encoded) => new Cvttps2pi(encoded);

        public struct Cvttsd2si : ITypedInstruction<Cvttsd2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttsd2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTSD2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttsd2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttsd2si src) => AsmMnemonics.CVTTSD2SI;

            public static implicit operator AsmHexCode(Cvttsd2si src) => src.Encoded;

            public static implicit operator Cvttsd2si(AsmHexCode src) => new Cvttsd2si(src);
        }

        public Cvttsd2si cvttsd2si() => default;

        [MethodImpl(Inline), Op]
        public Cvttsd2si cvttsd2si(AsmHexCode encoded) => new Cvttsd2si(encoded);

        public struct Cvttss2si : ITypedInstruction<Cvttss2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cvttss2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CVTTSS2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cvttss2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cvttss2si src) => AsmMnemonics.CVTTSS2SI;

            public static implicit operator AsmHexCode(Cvttss2si src) => src.Encoded;

            public static implicit operator Cvttss2si(AsmHexCode src) => new Cvttss2si(src);
        }

        public Cvttss2si cvttss2si() => default;

        [MethodImpl(Inline), Op]
        public Cvttss2si cvttss2si(AsmHexCode encoded) => new Cvttss2si(encoded);

        public struct Cwd : ITypedInstruction<Cwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cwd src) => AsmMnemonics.CWD;

            public static implicit operator AsmHexCode(Cwd src) => src.Encoded;

            public static implicit operator Cwd(AsmHexCode src) => new Cwd(src);
        }

        public Cwd cwd() => default;

        [MethodImpl(Inline), Op]
        public Cwd cwd(AsmHexCode encoded) => new Cwd(encoded);

        public struct Cwde : ITypedInstruction<Cwde>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Cwde(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.CWDE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Cwde src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Cwde src) => AsmMnemonics.CWDE;

            public static implicit operator AsmHexCode(Cwde src) => src.Encoded;

            public static implicit operator Cwde(AsmHexCode src) => new Cwde(src);
        }

        public Cwde cwde() => default;

        [MethodImpl(Inline), Op]
        public Cwde cwde(AsmHexCode encoded) => new Cwde(encoded);

        public struct Daa : ITypedInstruction<Daa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Daa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DAA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Daa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Daa src) => AsmMnemonics.DAA;

            public static implicit operator AsmHexCode(Daa src) => src.Encoded;

            public static implicit operator Daa(AsmHexCode src) => new Daa(src);
        }

        public Daa daa() => default;

        [MethodImpl(Inline), Op]
        public Daa daa(AsmHexCode encoded) => new Daa(encoded);

        public struct Das : ITypedInstruction<Das>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Das(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DAS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Das src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Das src) => AsmMnemonics.DAS;

            public static implicit operator AsmHexCode(Das src) => src.Encoded;

            public static implicit operator Das(AsmHexCode src) => new Das(src);
        }

        public Das das() => default;

        [MethodImpl(Inline), Op]
        public Das das(AsmHexCode encoded) => new Das(encoded);

        public struct Dec : ITypedInstruction<Dec>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Dec(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DEC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Dec src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Dec src) => AsmMnemonics.DEC;

            public static implicit operator AsmHexCode(Dec src) => src.Encoded;

            public static implicit operator Dec(AsmHexCode src) => new Dec(src);
        }

        public Dec dec() => default;

        [MethodImpl(Inline), Op]
        public Dec dec(AsmHexCode encoded) => new Dec(encoded);

        public struct Dec_lock : ITypedInstruction<Dec_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Dec_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DEC_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Dec_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Dec_lock src) => AsmMnemonics.DEC_LOCK;

            public static implicit operator AsmHexCode(Dec_lock src) => src.Encoded;

            public static implicit operator Dec_lock(AsmHexCode src) => new Dec_lock(src);
        }

        public Dec_lock dec_lock() => default;

        [MethodImpl(Inline), Op]
        public Dec_lock dec_lock(AsmHexCode encoded) => new Dec_lock(encoded);

        public struct Div : ITypedInstruction<Div>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Div(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DIV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Div src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Div src) => AsmMnemonics.DIV;

            public static implicit operator AsmHexCode(Div src) => src.Encoded;

            public static implicit operator Div(AsmHexCode src) => new Div(src);
        }

        public Div div() => default;

        [MethodImpl(Inline), Op]
        public Div div(AsmHexCode encoded) => new Div(encoded);

        public struct Divpd : ITypedInstruction<Divpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Divpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DIVPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Divpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Divpd src) => AsmMnemonics.DIVPD;

            public static implicit operator AsmHexCode(Divpd src) => src.Encoded;

            public static implicit operator Divpd(AsmHexCode src) => new Divpd(src);
        }

        public Divpd divpd() => default;

        [MethodImpl(Inline), Op]
        public Divpd divpd(AsmHexCode encoded) => new Divpd(encoded);

        public struct Divps : ITypedInstruction<Divps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Divps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DIVPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Divps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Divps src) => AsmMnemonics.DIVPS;

            public static implicit operator AsmHexCode(Divps src) => src.Encoded;

            public static implicit operator Divps(AsmHexCode src) => new Divps(src);
        }

        public Divps divps() => default;

        [MethodImpl(Inline), Op]
        public Divps divps(AsmHexCode encoded) => new Divps(encoded);

        public struct Divsd : ITypedInstruction<Divsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Divsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DIVSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Divsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Divsd src) => AsmMnemonics.DIVSD;

            public static implicit operator AsmHexCode(Divsd src) => src.Encoded;

            public static implicit operator Divsd(AsmHexCode src) => new Divsd(src);
        }

        public Divsd divsd() => default;

        [MethodImpl(Inline), Op]
        public Divsd divsd(AsmHexCode encoded) => new Divsd(encoded);

        public struct Divss : ITypedInstruction<Divss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Divss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DIVSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Divss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Divss src) => AsmMnemonics.DIVSS;

            public static implicit operator AsmHexCode(Divss src) => src.Encoded;

            public static implicit operator Divss(AsmHexCode src) => new Divss(src);
        }

        public Divss divss() => default;

        [MethodImpl(Inline), Op]
        public Divss divss(AsmHexCode encoded) => new Divss(encoded);

        public struct Dppd : ITypedInstruction<Dppd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Dppd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DPPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Dppd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Dppd src) => AsmMnemonics.DPPD;

            public static implicit operator AsmHexCode(Dppd src) => src.Encoded;

            public static implicit operator Dppd(AsmHexCode src) => new Dppd(src);
        }

        public Dppd dppd() => default;

        [MethodImpl(Inline), Op]
        public Dppd dppd(AsmHexCode encoded) => new Dppd(encoded);

        public struct Dpps : ITypedInstruction<Dpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Dpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.DPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Dpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Dpps src) => AsmMnemonics.DPPS;

            public static implicit operator AsmHexCode(Dpps src) => src.Encoded;

            public static implicit operator Dpps(AsmHexCode src) => new Dpps(src);
        }

        public Dpps dpps() => default;

        [MethodImpl(Inline), Op]
        public Dpps dpps(AsmHexCode encoded) => new Dpps(encoded);

        public struct Emms : ITypedInstruction<Emms>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Emms(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.EMMS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Emms src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Emms src) => AsmMnemonics.EMMS;

            public static implicit operator AsmHexCode(Emms src) => src.Encoded;

            public static implicit operator Emms(AsmHexCode src) => new Emms(src);
        }

        public Emms emms() => default;

        [MethodImpl(Inline), Op]
        public Emms emms(AsmHexCode encoded) => new Emms(encoded);

        public struct Encls : ITypedInstruction<Encls>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Encls(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENCLS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Encls src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Encls src) => AsmMnemonics.ENCLS;

            public static implicit operator AsmHexCode(Encls src) => src.Encoded;

            public static implicit operator Encls(AsmHexCode src) => new Encls(src);
        }

        public Encls encls() => default;

        [MethodImpl(Inline), Op]
        public Encls encls(AsmHexCode encoded) => new Encls(encoded);

        public struct Enclu : ITypedInstruction<Enclu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Enclu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENCLU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Enclu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Enclu src) => AsmMnemonics.ENCLU;

            public static implicit operator AsmHexCode(Enclu src) => src.Encoded;

            public static implicit operator Enclu(AsmHexCode src) => new Enclu(src);
        }

        public Enclu enclu() => default;

        [MethodImpl(Inline), Op]
        public Enclu enclu(AsmHexCode encoded) => new Enclu(encoded);

        public struct Enclv : ITypedInstruction<Enclv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Enclv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENCLV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Enclv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Enclv src) => AsmMnemonics.ENCLV;

            public static implicit operator AsmHexCode(Enclv src) => src.Encoded;

            public static implicit operator Enclv(AsmHexCode src) => new Enclv(src);
        }

        public Enclv enclv() => default;

        [MethodImpl(Inline), Op]
        public Enclv enclv(AsmHexCode encoded) => new Enclv(encoded);

        public struct Encodekey128 : ITypedInstruction<Encodekey128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Encodekey128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENCODEKEY128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Encodekey128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Encodekey128 src) => AsmMnemonics.ENCODEKEY128;

            public static implicit operator AsmHexCode(Encodekey128 src) => src.Encoded;

            public static implicit operator Encodekey128(AsmHexCode src) => new Encodekey128(src);
        }

        public Encodekey128 encodekey128() => default;

        [MethodImpl(Inline), Op]
        public Encodekey128 encodekey128(AsmHexCode encoded) => new Encodekey128(encoded);

        public struct Encodekey256 : ITypedInstruction<Encodekey256>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Encodekey256(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENCODEKEY256;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Encodekey256 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Encodekey256 src) => AsmMnemonics.ENCODEKEY256;

            public static implicit operator AsmHexCode(Encodekey256 src) => src.Encoded;

            public static implicit operator Encodekey256(AsmHexCode src) => new Encodekey256(src);
        }

        public Encodekey256 encodekey256() => default;

        [MethodImpl(Inline), Op]
        public Encodekey256 encodekey256(AsmHexCode encoded) => new Encodekey256(encoded);

        public struct Endbr32 : ITypedInstruction<Endbr32>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Endbr32(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENDBR32;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Endbr32 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Endbr32 src) => AsmMnemonics.ENDBR32;

            public static implicit operator AsmHexCode(Endbr32 src) => src.Encoded;

            public static implicit operator Endbr32(AsmHexCode src) => new Endbr32(src);
        }

        public Endbr32 endbr32() => default;

        [MethodImpl(Inline), Op]
        public Endbr32 endbr32(AsmHexCode encoded) => new Endbr32(encoded);

        public struct Endbr64 : ITypedInstruction<Endbr64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Endbr64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENDBR64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Endbr64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Endbr64 src) => AsmMnemonics.ENDBR64;

            public static implicit operator AsmHexCode(Endbr64 src) => src.Encoded;

            public static implicit operator Endbr64(AsmHexCode src) => new Endbr64(src);
        }

        public Endbr64 endbr64() => default;

        [MethodImpl(Inline), Op]
        public Endbr64 endbr64(AsmHexCode encoded) => new Endbr64(encoded);

        public struct Enqcmd : ITypedInstruction<Enqcmd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Enqcmd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENQCMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Enqcmd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Enqcmd src) => AsmMnemonics.ENQCMD;

            public static implicit operator AsmHexCode(Enqcmd src) => src.Encoded;

            public static implicit operator Enqcmd(AsmHexCode src) => new Enqcmd(src);
        }

        public Enqcmd enqcmd() => default;

        [MethodImpl(Inline), Op]
        public Enqcmd enqcmd(AsmHexCode encoded) => new Enqcmd(encoded);

        public struct Enqcmds : ITypedInstruction<Enqcmds>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Enqcmds(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENQCMDS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Enqcmds src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Enqcmds src) => AsmMnemonics.ENQCMDS;

            public static implicit operator AsmHexCode(Enqcmds src) => src.Encoded;

            public static implicit operator Enqcmds(AsmHexCode src) => new Enqcmds(src);
        }

        public Enqcmds enqcmds() => default;

        [MethodImpl(Inline), Op]
        public Enqcmds enqcmds(AsmHexCode encoded) => new Enqcmds(encoded);

        public struct Enter : ITypedInstruction<Enter>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Enter(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ENTER;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Enter src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Enter src) => AsmMnemonics.ENTER;

            public static implicit operator AsmHexCode(Enter src) => src.Encoded;

            public static implicit operator Enter(AsmHexCode src) => new Enter(src);
        }

        public Enter enter() => default;

        [MethodImpl(Inline), Op]
        public Enter enter(AsmHexCode encoded) => new Enter(encoded);

        public struct Extractps : ITypedInstruction<Extractps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Extractps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.EXTRACTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Extractps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Extractps src) => AsmMnemonics.EXTRACTPS;

            public static implicit operator AsmHexCode(Extractps src) => src.Encoded;

            public static implicit operator Extractps(AsmHexCode src) => new Extractps(src);
        }

        public Extractps extractps() => default;

        [MethodImpl(Inline), Op]
        public Extractps extractps(AsmHexCode encoded) => new Extractps(encoded);

        public struct Extrq : ITypedInstruction<Extrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Extrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.EXTRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Extrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Extrq src) => AsmMnemonics.EXTRQ;

            public static implicit operator AsmHexCode(Extrq src) => src.Encoded;

            public static implicit operator Extrq(AsmHexCode src) => new Extrq(src);
        }

        public Extrq extrq() => default;

        [MethodImpl(Inline), Op]
        public Extrq extrq(AsmHexCode encoded) => new Extrq(encoded);

        public struct F2xm1 : ITypedInstruction<F2xm1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public F2xm1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.F2XM1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(F2xm1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(F2xm1 src) => AsmMnemonics.F2XM1;

            public static implicit operator AsmHexCode(F2xm1 src) => src.Encoded;

            public static implicit operator F2xm1(AsmHexCode src) => new F2xm1(src);
        }

        public F2xm1 f2xm1() => default;

        [MethodImpl(Inline), Op]
        public F2xm1 f2xm1(AsmHexCode encoded) => new F2xm1(encoded);

        public struct Fabs : ITypedInstruction<Fabs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fabs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FABS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fabs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fabs src) => AsmMnemonics.FABS;

            public static implicit operator AsmHexCode(Fabs src) => src.Encoded;

            public static implicit operator Fabs(AsmHexCode src) => new Fabs(src);
        }

        public Fabs fabs() => default;

        [MethodImpl(Inline), Op]
        public Fabs fabs(AsmHexCode encoded) => new Fabs(encoded);

        public struct Fadd : ITypedInstruction<Fadd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fadd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fadd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fadd src) => AsmMnemonics.FADD;

            public static implicit operator AsmHexCode(Fadd src) => src.Encoded;

            public static implicit operator Fadd(AsmHexCode src) => new Fadd(src);
        }

        public Fadd fadd() => default;

        [MethodImpl(Inline), Op]
        public Fadd fadd(AsmHexCode encoded) => new Fadd(encoded);

        public struct Faddp : ITypedInstruction<Faddp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Faddp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FADDP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Faddp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Faddp src) => AsmMnemonics.FADDP;

            public static implicit operator AsmHexCode(Faddp src) => src.Encoded;

            public static implicit operator Faddp(AsmHexCode src) => new Faddp(src);
        }

        public Faddp faddp() => default;

        [MethodImpl(Inline), Op]
        public Faddp faddp(AsmHexCode encoded) => new Faddp(encoded);

        public struct Fbld : ITypedInstruction<Fbld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fbld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FBLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fbld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fbld src) => AsmMnemonics.FBLD;

            public static implicit operator AsmHexCode(Fbld src) => src.Encoded;

            public static implicit operator Fbld(AsmHexCode src) => new Fbld(src);
        }

        public Fbld fbld() => default;

        [MethodImpl(Inline), Op]
        public Fbld fbld(AsmHexCode encoded) => new Fbld(encoded);

        public struct Fbstp : ITypedInstruction<Fbstp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fbstp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FBSTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fbstp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fbstp src) => AsmMnemonics.FBSTP;

            public static implicit operator AsmHexCode(Fbstp src) => src.Encoded;

            public static implicit operator Fbstp(AsmHexCode src) => new Fbstp(src);
        }

        public Fbstp fbstp() => default;

        [MethodImpl(Inline), Op]
        public Fbstp fbstp(AsmHexCode encoded) => new Fbstp(encoded);

        public struct Fchs : ITypedInstruction<Fchs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fchs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCHS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fchs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fchs src) => AsmMnemonics.FCHS;

            public static implicit operator AsmHexCode(Fchs src) => src.Encoded;

            public static implicit operator Fchs(AsmHexCode src) => new Fchs(src);
        }

        public Fchs fchs() => default;

        [MethodImpl(Inline), Op]
        public Fchs fchs(AsmHexCode encoded) => new Fchs(encoded);

        public struct Fcmovb : ITypedInstruction<Fcmovb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovb src) => AsmMnemonics.FCMOVB;

            public static implicit operator AsmHexCode(Fcmovb src) => src.Encoded;

            public static implicit operator Fcmovb(AsmHexCode src) => new Fcmovb(src);
        }

        public Fcmovb fcmovb() => default;

        [MethodImpl(Inline), Op]
        public Fcmovb fcmovb(AsmHexCode encoded) => new Fcmovb(encoded);

        public struct Fcmovbe : ITypedInstruction<Fcmovbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovbe src) => AsmMnemonics.FCMOVBE;

            public static implicit operator AsmHexCode(Fcmovbe src) => src.Encoded;

            public static implicit operator Fcmovbe(AsmHexCode src) => new Fcmovbe(src);
        }

        public Fcmovbe fcmovbe() => default;

        [MethodImpl(Inline), Op]
        public Fcmovbe fcmovbe(AsmHexCode encoded) => new Fcmovbe(encoded);

        public struct Fcmove : ITypedInstruction<Fcmove>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmove(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmove src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmove src) => AsmMnemonics.FCMOVE;

            public static implicit operator AsmHexCode(Fcmove src) => src.Encoded;

            public static implicit operator Fcmove(AsmHexCode src) => new Fcmove(src);
        }

        public Fcmove fcmove() => default;

        [MethodImpl(Inline), Op]
        public Fcmove fcmove(AsmHexCode encoded) => new Fcmove(encoded);

        public struct Fcmovnb : ITypedInstruction<Fcmovnb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovnb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovnb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovnb src) => AsmMnemonics.FCMOVNB;

            public static implicit operator AsmHexCode(Fcmovnb src) => src.Encoded;

            public static implicit operator Fcmovnb(AsmHexCode src) => new Fcmovnb(src);
        }

        public Fcmovnb fcmovnb() => default;

        [MethodImpl(Inline), Op]
        public Fcmovnb fcmovnb(AsmHexCode encoded) => new Fcmovnb(encoded);

        public struct Fcmovnbe : ITypedInstruction<Fcmovnbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovnbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVNBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovnbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovnbe src) => AsmMnemonics.FCMOVNBE;

            public static implicit operator AsmHexCode(Fcmovnbe src) => src.Encoded;

            public static implicit operator Fcmovnbe(AsmHexCode src) => new Fcmovnbe(src);
        }

        public Fcmovnbe fcmovnbe() => default;

        [MethodImpl(Inline), Op]
        public Fcmovnbe fcmovnbe(AsmHexCode encoded) => new Fcmovnbe(encoded);

        public struct Fcmovne : ITypedInstruction<Fcmovne>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovne(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVNE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovne src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovne src) => AsmMnemonics.FCMOVNE;

            public static implicit operator AsmHexCode(Fcmovne src) => src.Encoded;

            public static implicit operator Fcmovne(AsmHexCode src) => new Fcmovne(src);
        }

        public Fcmovne fcmovne() => default;

        [MethodImpl(Inline), Op]
        public Fcmovne fcmovne(AsmHexCode encoded) => new Fcmovne(encoded);

        public struct Fcmovnu : ITypedInstruction<Fcmovnu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovnu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVNU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovnu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovnu src) => AsmMnemonics.FCMOVNU;

            public static implicit operator AsmHexCode(Fcmovnu src) => src.Encoded;

            public static implicit operator Fcmovnu(AsmHexCode src) => new Fcmovnu(src);
        }

        public Fcmovnu fcmovnu() => default;

        [MethodImpl(Inline), Op]
        public Fcmovnu fcmovnu(AsmHexCode encoded) => new Fcmovnu(encoded);

        public struct Fcmovu : ITypedInstruction<Fcmovu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcmovu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCMOVU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcmovu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcmovu src) => AsmMnemonics.FCMOVU;

            public static implicit operator AsmHexCode(Fcmovu src) => src.Encoded;

            public static implicit operator Fcmovu(AsmHexCode src) => new Fcmovu(src);
        }

        public Fcmovu fcmovu() => default;

        [MethodImpl(Inline), Op]
        public Fcmovu fcmovu(AsmHexCode encoded) => new Fcmovu(encoded);

        public struct Fcom : ITypedInstruction<Fcom>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcom(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcom src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcom src) => AsmMnemonics.FCOM;

            public static implicit operator AsmHexCode(Fcom src) => src.Encoded;

            public static implicit operator Fcom(AsmHexCode src) => new Fcom(src);
        }

        public Fcom fcom() => default;

        [MethodImpl(Inline), Op]
        public Fcom fcom(AsmHexCode encoded) => new Fcom(encoded);

        public struct Fcomi : ITypedInstruction<Fcomi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcomi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOMI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcomi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcomi src) => AsmMnemonics.FCOMI;

            public static implicit operator AsmHexCode(Fcomi src) => src.Encoded;

            public static implicit operator Fcomi(AsmHexCode src) => new Fcomi(src);
        }

        public Fcomi fcomi() => default;

        [MethodImpl(Inline), Op]
        public Fcomi fcomi(AsmHexCode encoded) => new Fcomi(encoded);

        public struct Fcomip : ITypedInstruction<Fcomip>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcomip(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOMIP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcomip src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcomip src) => AsmMnemonics.FCOMIP;

            public static implicit operator AsmHexCode(Fcomip src) => src.Encoded;

            public static implicit operator Fcomip(AsmHexCode src) => new Fcomip(src);
        }

        public Fcomip fcomip() => default;

        [MethodImpl(Inline), Op]
        public Fcomip fcomip(AsmHexCode encoded) => new Fcomip(encoded);

        public struct Fcomp : ITypedInstruction<Fcomp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcomp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOMP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcomp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcomp src) => AsmMnemonics.FCOMP;

            public static implicit operator AsmHexCode(Fcomp src) => src.Encoded;

            public static implicit operator Fcomp(AsmHexCode src) => new Fcomp(src);
        }

        public Fcomp fcomp() => default;

        [MethodImpl(Inline), Op]
        public Fcomp fcomp(AsmHexCode encoded) => new Fcomp(encoded);

        public struct Fcompp : ITypedInstruction<Fcompp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcompp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOMPP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcompp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcompp src) => AsmMnemonics.FCOMPP;

            public static implicit operator AsmHexCode(Fcompp src) => src.Encoded;

            public static implicit operator Fcompp(AsmHexCode src) => new Fcompp(src);
        }

        public Fcompp fcompp() => default;

        [MethodImpl(Inline), Op]
        public Fcompp fcompp(AsmHexCode encoded) => new Fcompp(encoded);

        public struct Fcos : ITypedInstruction<Fcos>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fcos(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FCOS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fcos src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fcos src) => AsmMnemonics.FCOS;

            public static implicit operator AsmHexCode(Fcos src) => src.Encoded;

            public static implicit operator Fcos(AsmHexCode src) => new Fcos(src);
        }

        public Fcos fcos() => default;

        [MethodImpl(Inline), Op]
        public Fcos fcos(AsmHexCode encoded) => new Fcos(encoded);

        public struct Fdecstp : ITypedInstruction<Fdecstp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdecstp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDECSTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdecstp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdecstp src) => AsmMnemonics.FDECSTP;

            public static implicit operator AsmHexCode(Fdecstp src) => src.Encoded;

            public static implicit operator Fdecstp(AsmHexCode src) => new Fdecstp(src);
        }

        public Fdecstp fdecstp() => default;

        [MethodImpl(Inline), Op]
        public Fdecstp fdecstp(AsmHexCode encoded) => new Fdecstp(encoded);

        public struct Fdisi8087_nop : ITypedInstruction<Fdisi8087_nop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdisi8087_nop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDISI8087_NOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdisi8087_nop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdisi8087_nop src) => AsmMnemonics.FDISI8087_NOP;

            public static implicit operator AsmHexCode(Fdisi8087_nop src) => src.Encoded;

            public static implicit operator Fdisi8087_nop(AsmHexCode src) => new Fdisi8087_nop(src);
        }

        public Fdisi8087_nop fdisi8087_nop() => default;

        [MethodImpl(Inline), Op]
        public Fdisi8087_nop fdisi8087_nop(AsmHexCode encoded) => new Fdisi8087_nop(encoded);

        public struct Fdiv : ITypedInstruction<Fdiv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdiv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDIV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdiv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdiv src) => AsmMnemonics.FDIV;

            public static implicit operator AsmHexCode(Fdiv src) => src.Encoded;

            public static implicit operator Fdiv(AsmHexCode src) => new Fdiv(src);
        }

        public Fdiv fdiv() => default;

        [MethodImpl(Inline), Op]
        public Fdiv fdiv(AsmHexCode encoded) => new Fdiv(encoded);

        public struct Fdivp : ITypedInstruction<Fdivp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdivp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDIVP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdivp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdivp src) => AsmMnemonics.FDIVP;

            public static implicit operator AsmHexCode(Fdivp src) => src.Encoded;

            public static implicit operator Fdivp(AsmHexCode src) => new Fdivp(src);
        }

        public Fdivp fdivp() => default;

        [MethodImpl(Inline), Op]
        public Fdivp fdivp(AsmHexCode encoded) => new Fdivp(encoded);

        public struct Fdivr : ITypedInstruction<Fdivr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdivr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDIVR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdivr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdivr src) => AsmMnemonics.FDIVR;

            public static implicit operator AsmHexCode(Fdivr src) => src.Encoded;

            public static implicit operator Fdivr(AsmHexCode src) => new Fdivr(src);
        }

        public Fdivr fdivr() => default;

        [MethodImpl(Inline), Op]
        public Fdivr fdivr(AsmHexCode encoded) => new Fdivr(encoded);

        public struct Fdivrp : ITypedInstruction<Fdivrp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fdivrp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FDIVRP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fdivrp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fdivrp src) => AsmMnemonics.FDIVRP;

            public static implicit operator AsmHexCode(Fdivrp src) => src.Encoded;

            public static implicit operator Fdivrp(AsmHexCode src) => new Fdivrp(src);
        }

        public Fdivrp fdivrp() => default;

        [MethodImpl(Inline), Op]
        public Fdivrp fdivrp(AsmHexCode encoded) => new Fdivrp(encoded);

        public struct Femms : ITypedInstruction<Femms>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Femms(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FEMMS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Femms src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Femms src) => AsmMnemonics.FEMMS;

            public static implicit operator AsmHexCode(Femms src) => src.Encoded;

            public static implicit operator Femms(AsmHexCode src) => new Femms(src);
        }

        public Femms femms() => default;

        [MethodImpl(Inline), Op]
        public Femms femms(AsmHexCode encoded) => new Femms(encoded);

        public struct Feni8087_nop : ITypedInstruction<Feni8087_nop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Feni8087_nop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FENI8087_NOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Feni8087_nop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Feni8087_nop src) => AsmMnemonics.FENI8087_NOP;

            public static implicit operator AsmHexCode(Feni8087_nop src) => src.Encoded;

            public static implicit operator Feni8087_nop(AsmHexCode src) => new Feni8087_nop(src);
        }

        public Feni8087_nop feni8087_nop() => default;

        [MethodImpl(Inline), Op]
        public Feni8087_nop feni8087_nop(AsmHexCode encoded) => new Feni8087_nop(encoded);

        public struct Ffree : ITypedInstruction<Ffree>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ffree(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FFREE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ffree src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ffree src) => AsmMnemonics.FFREE;

            public static implicit operator AsmHexCode(Ffree src) => src.Encoded;

            public static implicit operator Ffree(AsmHexCode src) => new Ffree(src);
        }

        public Ffree ffree() => default;

        [MethodImpl(Inline), Op]
        public Ffree ffree(AsmHexCode encoded) => new Ffree(encoded);

        public struct Ffreep : ITypedInstruction<Ffreep>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ffreep(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FFREEP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ffreep src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ffreep src) => AsmMnemonics.FFREEP;

            public static implicit operator AsmHexCode(Ffreep src) => src.Encoded;

            public static implicit operator Ffreep(AsmHexCode src) => new Ffreep(src);
        }

        public Ffreep ffreep() => default;

        [MethodImpl(Inline), Op]
        public Ffreep ffreep(AsmHexCode encoded) => new Ffreep(encoded);

        public struct Fiadd : ITypedInstruction<Fiadd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fiadd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FIADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fiadd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fiadd src) => AsmMnemonics.FIADD;

            public static implicit operator AsmHexCode(Fiadd src) => src.Encoded;

            public static implicit operator Fiadd(AsmHexCode src) => new Fiadd(src);
        }

        public Fiadd fiadd() => default;

        [MethodImpl(Inline), Op]
        public Fiadd fiadd(AsmHexCode encoded) => new Fiadd(encoded);

        public struct Ficom : ITypedInstruction<Ficom>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ficom(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FICOM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ficom src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ficom src) => AsmMnemonics.FICOM;

            public static implicit operator AsmHexCode(Ficom src) => src.Encoded;

            public static implicit operator Ficom(AsmHexCode src) => new Ficom(src);
        }

        public Ficom ficom() => default;

        [MethodImpl(Inline), Op]
        public Ficom ficom(AsmHexCode encoded) => new Ficom(encoded);

        public struct Ficomp : ITypedInstruction<Ficomp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ficomp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FICOMP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ficomp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ficomp src) => AsmMnemonics.FICOMP;

            public static implicit operator AsmHexCode(Ficomp src) => src.Encoded;

            public static implicit operator Ficomp(AsmHexCode src) => new Ficomp(src);
        }

        public Ficomp ficomp() => default;

        [MethodImpl(Inline), Op]
        public Ficomp ficomp(AsmHexCode encoded) => new Ficomp(encoded);

        public struct Fidiv : ITypedInstruction<Fidiv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fidiv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FIDIV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fidiv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fidiv src) => AsmMnemonics.FIDIV;

            public static implicit operator AsmHexCode(Fidiv src) => src.Encoded;

            public static implicit operator Fidiv(AsmHexCode src) => new Fidiv(src);
        }

        public Fidiv fidiv() => default;

        [MethodImpl(Inline), Op]
        public Fidiv fidiv(AsmHexCode encoded) => new Fidiv(encoded);

        public struct Fidivr : ITypedInstruction<Fidivr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fidivr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FIDIVR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fidivr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fidivr src) => AsmMnemonics.FIDIVR;

            public static implicit operator AsmHexCode(Fidivr src) => src.Encoded;

            public static implicit operator Fidivr(AsmHexCode src) => new Fidivr(src);
        }

        public Fidivr fidivr() => default;

        [MethodImpl(Inline), Op]
        public Fidivr fidivr(AsmHexCode encoded) => new Fidivr(encoded);

        public struct Fild : ITypedInstruction<Fild>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fild(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FILD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fild src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fild src) => AsmMnemonics.FILD;

            public static implicit operator AsmHexCode(Fild src) => src.Encoded;

            public static implicit operator Fild(AsmHexCode src) => new Fild(src);
        }

        public Fild fild() => default;

        [MethodImpl(Inline), Op]
        public Fild fild(AsmHexCode encoded) => new Fild(encoded);

        public struct Fimul : ITypedInstruction<Fimul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fimul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FIMUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fimul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fimul src) => AsmMnemonics.FIMUL;

            public static implicit operator AsmHexCode(Fimul src) => src.Encoded;

            public static implicit operator Fimul(AsmHexCode src) => new Fimul(src);
        }

        public Fimul fimul() => default;

        [MethodImpl(Inline), Op]
        public Fimul fimul(AsmHexCode encoded) => new Fimul(encoded);

        public struct Fincstp : ITypedInstruction<Fincstp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fincstp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FINCSTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fincstp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fincstp src) => AsmMnemonics.FINCSTP;

            public static implicit operator AsmHexCode(Fincstp src) => src.Encoded;

            public static implicit operator Fincstp(AsmHexCode src) => new Fincstp(src);
        }

        public Fincstp fincstp() => default;

        [MethodImpl(Inline), Op]
        public Fincstp fincstp(AsmHexCode encoded) => new Fincstp(encoded);

        public struct Fist : ITypedInstruction<Fist>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fist(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FIST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fist src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fist src) => AsmMnemonics.FIST;

            public static implicit operator AsmHexCode(Fist src) => src.Encoded;

            public static implicit operator Fist(AsmHexCode src) => new Fist(src);
        }

        public Fist fist() => default;

        [MethodImpl(Inline), Op]
        public Fist fist(AsmHexCode encoded) => new Fist(encoded);

        public struct Fistp : ITypedInstruction<Fistp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fistp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FISTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fistp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fistp src) => AsmMnemonics.FISTP;

            public static implicit operator AsmHexCode(Fistp src) => src.Encoded;

            public static implicit operator Fistp(AsmHexCode src) => new Fistp(src);
        }

        public Fistp fistp() => default;

        [MethodImpl(Inline), Op]
        public Fistp fistp(AsmHexCode encoded) => new Fistp(encoded);

        public struct Fisttp : ITypedInstruction<Fisttp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fisttp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FISTTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fisttp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fisttp src) => AsmMnemonics.FISTTP;

            public static implicit operator AsmHexCode(Fisttp src) => src.Encoded;

            public static implicit operator Fisttp(AsmHexCode src) => new Fisttp(src);
        }

        public Fisttp fisttp() => default;

        [MethodImpl(Inline), Op]
        public Fisttp fisttp(AsmHexCode encoded) => new Fisttp(encoded);

        public struct Fisub : ITypedInstruction<Fisub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fisub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FISUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fisub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fisub src) => AsmMnemonics.FISUB;

            public static implicit operator AsmHexCode(Fisub src) => src.Encoded;

            public static implicit operator Fisub(AsmHexCode src) => new Fisub(src);
        }

        public Fisub fisub() => default;

        [MethodImpl(Inline), Op]
        public Fisub fisub(AsmHexCode encoded) => new Fisub(encoded);

        public struct Fisubr : ITypedInstruction<Fisubr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fisubr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FISUBR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fisubr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fisubr src) => AsmMnemonics.FISUBR;

            public static implicit operator AsmHexCode(Fisubr src) => src.Encoded;

            public static implicit operator Fisubr(AsmHexCode src) => new Fisubr(src);
        }

        public Fisubr fisubr() => default;

        [MethodImpl(Inline), Op]
        public Fisubr fisubr(AsmHexCode encoded) => new Fisubr(encoded);

        public struct Fld : ITypedInstruction<Fld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fld src) => AsmMnemonics.FLD;

            public static implicit operator AsmHexCode(Fld src) => src.Encoded;

            public static implicit operator Fld(AsmHexCode src) => new Fld(src);
        }

        public Fld fld() => default;

        [MethodImpl(Inline), Op]
        public Fld fld(AsmHexCode encoded) => new Fld(encoded);

        public struct Fld1 : ITypedInstruction<Fld1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fld1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLD1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fld1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fld1 src) => AsmMnemonics.FLD1;

            public static implicit operator AsmHexCode(Fld1 src) => src.Encoded;

            public static implicit operator Fld1(AsmHexCode src) => new Fld1(src);
        }

        public Fld1 fld1() => default;

        [MethodImpl(Inline), Op]
        public Fld1 fld1(AsmHexCode encoded) => new Fld1(encoded);

        public struct Fldcw : ITypedInstruction<Fldcw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldcw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDCW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldcw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldcw src) => AsmMnemonics.FLDCW;

            public static implicit operator AsmHexCode(Fldcw src) => src.Encoded;

            public static implicit operator Fldcw(AsmHexCode src) => new Fldcw(src);
        }

        public Fldcw fldcw() => default;

        [MethodImpl(Inline), Op]
        public Fldcw fldcw(AsmHexCode encoded) => new Fldcw(encoded);

        public struct Fldenv : ITypedInstruction<Fldenv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldenv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDENV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldenv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldenv src) => AsmMnemonics.FLDENV;

            public static implicit operator AsmHexCode(Fldenv src) => src.Encoded;

            public static implicit operator Fldenv(AsmHexCode src) => new Fldenv(src);
        }

        public Fldenv fldenv() => default;

        [MethodImpl(Inline), Op]
        public Fldenv fldenv(AsmHexCode encoded) => new Fldenv(encoded);

        public struct Fldl2e : ITypedInstruction<Fldl2e>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldl2e(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDL2E;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldl2e src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldl2e src) => AsmMnemonics.FLDL2E;

            public static implicit operator AsmHexCode(Fldl2e src) => src.Encoded;

            public static implicit operator Fldl2e(AsmHexCode src) => new Fldl2e(src);
        }

        public Fldl2e fldl2e() => default;

        [MethodImpl(Inline), Op]
        public Fldl2e fldl2e(AsmHexCode encoded) => new Fldl2e(encoded);

        public struct Fldl2t : ITypedInstruction<Fldl2t>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldl2t(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDL2T;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldl2t src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldl2t src) => AsmMnemonics.FLDL2T;

            public static implicit operator AsmHexCode(Fldl2t src) => src.Encoded;

            public static implicit operator Fldl2t(AsmHexCode src) => new Fldl2t(src);
        }

        public Fldl2t fldl2t() => default;

        [MethodImpl(Inline), Op]
        public Fldl2t fldl2t(AsmHexCode encoded) => new Fldl2t(encoded);

        public struct Fldlg2 : ITypedInstruction<Fldlg2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldlg2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDLG2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldlg2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldlg2 src) => AsmMnemonics.FLDLG2;

            public static implicit operator AsmHexCode(Fldlg2 src) => src.Encoded;

            public static implicit operator Fldlg2(AsmHexCode src) => new Fldlg2(src);
        }

        public Fldlg2 fldlg2() => default;

        [MethodImpl(Inline), Op]
        public Fldlg2 fldlg2(AsmHexCode encoded) => new Fldlg2(encoded);

        public struct Fldln2 : ITypedInstruction<Fldln2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldln2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDLN2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldln2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldln2 src) => AsmMnemonics.FLDLN2;

            public static implicit operator AsmHexCode(Fldln2 src) => src.Encoded;

            public static implicit operator Fldln2(AsmHexCode src) => new Fldln2(src);
        }

        public Fldln2 fldln2() => default;

        [MethodImpl(Inline), Op]
        public Fldln2 fldln2(AsmHexCode encoded) => new Fldln2(encoded);

        public struct Fldpi : ITypedInstruction<Fldpi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldpi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDPI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldpi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldpi src) => AsmMnemonics.FLDPI;

            public static implicit operator AsmHexCode(Fldpi src) => src.Encoded;

            public static implicit operator Fldpi(AsmHexCode src) => new Fldpi(src);
        }

        public Fldpi fldpi() => default;

        [MethodImpl(Inline), Op]
        public Fldpi fldpi(AsmHexCode encoded) => new Fldpi(encoded);

        public struct Fldz : ITypedInstruction<Fldz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fldz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FLDZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fldz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fldz src) => AsmMnemonics.FLDZ;

            public static implicit operator AsmHexCode(Fldz src) => src.Encoded;

            public static implicit operator Fldz(AsmHexCode src) => new Fldz(src);
        }

        public Fldz fldz() => default;

        [MethodImpl(Inline), Op]
        public Fldz fldz(AsmHexCode encoded) => new Fldz(encoded);

        public struct Fmul : ITypedInstruction<Fmul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fmul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FMUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fmul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fmul src) => AsmMnemonics.FMUL;

            public static implicit operator AsmHexCode(Fmul src) => src.Encoded;

            public static implicit operator Fmul(AsmHexCode src) => new Fmul(src);
        }

        public Fmul fmul() => default;

        [MethodImpl(Inline), Op]
        public Fmul fmul(AsmHexCode encoded) => new Fmul(encoded);

        public struct Fmulp : ITypedInstruction<Fmulp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fmulp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FMULP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fmulp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fmulp src) => AsmMnemonics.FMULP;

            public static implicit operator AsmHexCode(Fmulp src) => src.Encoded;

            public static implicit operator Fmulp(AsmHexCode src) => new Fmulp(src);
        }

        public Fmulp fmulp() => default;

        [MethodImpl(Inline), Op]
        public Fmulp fmulp(AsmHexCode encoded) => new Fmulp(encoded);

        public struct Fnclex : ITypedInstruction<Fnclex>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnclex(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNCLEX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnclex src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnclex src) => AsmMnemonics.FNCLEX;

            public static implicit operator AsmHexCode(Fnclex src) => src.Encoded;

            public static implicit operator Fnclex(AsmHexCode src) => new Fnclex(src);
        }

        public Fnclex fnclex() => default;

        [MethodImpl(Inline), Op]
        public Fnclex fnclex(AsmHexCode encoded) => new Fnclex(encoded);

        public struct Fninit : ITypedInstruction<Fninit>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fninit(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNINIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fninit src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fninit src) => AsmMnemonics.FNINIT;

            public static implicit operator AsmHexCode(Fninit src) => src.Encoded;

            public static implicit operator Fninit(AsmHexCode src) => new Fninit(src);
        }

        public Fninit fninit() => default;

        [MethodImpl(Inline), Op]
        public Fninit fninit(AsmHexCode encoded) => new Fninit(encoded);

        public struct Fnop : ITypedInstruction<Fnop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnop src) => AsmMnemonics.FNOP;

            public static implicit operator AsmHexCode(Fnop src) => src.Encoded;

            public static implicit operator Fnop(AsmHexCode src) => new Fnop(src);
        }

        public Fnop fnop() => default;

        [MethodImpl(Inline), Op]
        public Fnop fnop(AsmHexCode encoded) => new Fnop(encoded);

        public struct Fnsave : ITypedInstruction<Fnsave>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnsave(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNSAVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnsave src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnsave src) => AsmMnemonics.FNSAVE;

            public static implicit operator AsmHexCode(Fnsave src) => src.Encoded;

            public static implicit operator Fnsave(AsmHexCode src) => new Fnsave(src);
        }

        public Fnsave fnsave() => default;

        [MethodImpl(Inline), Op]
        public Fnsave fnsave(AsmHexCode encoded) => new Fnsave(encoded);

        public struct Fnstcw : ITypedInstruction<Fnstcw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnstcw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNSTCW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnstcw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnstcw src) => AsmMnemonics.FNSTCW;

            public static implicit operator AsmHexCode(Fnstcw src) => src.Encoded;

            public static implicit operator Fnstcw(AsmHexCode src) => new Fnstcw(src);
        }

        public Fnstcw fnstcw() => default;

        [MethodImpl(Inline), Op]
        public Fnstcw fnstcw(AsmHexCode encoded) => new Fnstcw(encoded);

        public struct Fnstenv : ITypedInstruction<Fnstenv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnstenv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNSTENV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnstenv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnstenv src) => AsmMnemonics.FNSTENV;

            public static implicit operator AsmHexCode(Fnstenv src) => src.Encoded;

            public static implicit operator Fnstenv(AsmHexCode src) => new Fnstenv(src);
        }

        public Fnstenv fnstenv() => default;

        [MethodImpl(Inline), Op]
        public Fnstenv fnstenv(AsmHexCode encoded) => new Fnstenv(encoded);

        public struct Fnstsw : ITypedInstruction<Fnstsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fnstsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FNSTSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fnstsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fnstsw src) => AsmMnemonics.FNSTSW;

            public static implicit operator AsmHexCode(Fnstsw src) => src.Encoded;

            public static implicit operator Fnstsw(AsmHexCode src) => new Fnstsw(src);
        }

        public Fnstsw fnstsw() => default;

        [MethodImpl(Inline), Op]
        public Fnstsw fnstsw(AsmHexCode encoded) => new Fnstsw(encoded);

        public struct Fpatan : ITypedInstruction<Fpatan>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fpatan(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FPATAN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fpatan src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fpatan src) => AsmMnemonics.FPATAN;

            public static implicit operator AsmHexCode(Fpatan src) => src.Encoded;

            public static implicit operator Fpatan(AsmHexCode src) => new Fpatan(src);
        }

        public Fpatan fpatan() => default;

        [MethodImpl(Inline), Op]
        public Fpatan fpatan(AsmHexCode encoded) => new Fpatan(encoded);

        public struct Fprem : ITypedInstruction<Fprem>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fprem(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FPREM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fprem src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fprem src) => AsmMnemonics.FPREM;

            public static implicit operator AsmHexCode(Fprem src) => src.Encoded;

            public static implicit operator Fprem(AsmHexCode src) => new Fprem(src);
        }

        public Fprem fprem() => default;

        [MethodImpl(Inline), Op]
        public Fprem fprem(AsmHexCode encoded) => new Fprem(encoded);

        public struct Fprem1 : ITypedInstruction<Fprem1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fprem1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FPREM1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fprem1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fprem1 src) => AsmMnemonics.FPREM1;

            public static implicit operator AsmHexCode(Fprem1 src) => src.Encoded;

            public static implicit operator Fprem1(AsmHexCode src) => new Fprem1(src);
        }

        public Fprem1 fprem1() => default;

        [MethodImpl(Inline), Op]
        public Fprem1 fprem1(AsmHexCode encoded) => new Fprem1(encoded);

        public struct Fptan : ITypedInstruction<Fptan>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fptan(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FPTAN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fptan src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fptan src) => AsmMnemonics.FPTAN;

            public static implicit operator AsmHexCode(Fptan src) => src.Encoded;

            public static implicit operator Fptan(AsmHexCode src) => new Fptan(src);
        }

        public Fptan fptan() => default;

        [MethodImpl(Inline), Op]
        public Fptan fptan(AsmHexCode encoded) => new Fptan(encoded);

        public struct Frndint : ITypedInstruction<Frndint>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Frndint(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FRNDINT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Frndint src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Frndint src) => AsmMnemonics.FRNDINT;

            public static implicit operator AsmHexCode(Frndint src) => src.Encoded;

            public static implicit operator Frndint(AsmHexCode src) => new Frndint(src);
        }

        public Frndint frndint() => default;

        [MethodImpl(Inline), Op]
        public Frndint frndint(AsmHexCode encoded) => new Frndint(encoded);

        public struct Frstor : ITypedInstruction<Frstor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Frstor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FRSTOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Frstor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Frstor src) => AsmMnemonics.FRSTOR;

            public static implicit operator AsmHexCode(Frstor src) => src.Encoded;

            public static implicit operator Frstor(AsmHexCode src) => new Frstor(src);
        }

        public Frstor frstor() => default;

        [MethodImpl(Inline), Op]
        public Frstor frstor(AsmHexCode encoded) => new Frstor(encoded);

        public struct Fscale : ITypedInstruction<Fscale>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fscale(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSCALE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fscale src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fscale src) => AsmMnemonics.FSCALE;

            public static implicit operator AsmHexCode(Fscale src) => src.Encoded;

            public static implicit operator Fscale(AsmHexCode src) => new Fscale(src);
        }

        public Fscale fscale() => default;

        [MethodImpl(Inline), Op]
        public Fscale fscale(AsmHexCode encoded) => new Fscale(encoded);

        public struct Fsetpm287_nop : ITypedInstruction<Fsetpm287_nop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsetpm287_nop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSETPM287_NOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsetpm287_nop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsetpm287_nop src) => AsmMnemonics.FSETPM287_NOP;

            public static implicit operator AsmHexCode(Fsetpm287_nop src) => src.Encoded;

            public static implicit operator Fsetpm287_nop(AsmHexCode src) => new Fsetpm287_nop(src);
        }

        public Fsetpm287_nop fsetpm287_nop() => default;

        [MethodImpl(Inline), Op]
        public Fsetpm287_nop fsetpm287_nop(AsmHexCode encoded) => new Fsetpm287_nop(encoded);

        public struct Fsin : ITypedInstruction<Fsin>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsin(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSIN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsin src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsin src) => AsmMnemonics.FSIN;

            public static implicit operator AsmHexCode(Fsin src) => src.Encoded;

            public static implicit operator Fsin(AsmHexCode src) => new Fsin(src);
        }

        public Fsin fsin() => default;

        [MethodImpl(Inline), Op]
        public Fsin fsin(AsmHexCode encoded) => new Fsin(encoded);

        public struct Fsincos : ITypedInstruction<Fsincos>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsincos(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSINCOS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsincos src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsincos src) => AsmMnemonics.FSINCOS;

            public static implicit operator AsmHexCode(Fsincos src) => src.Encoded;

            public static implicit operator Fsincos(AsmHexCode src) => new Fsincos(src);
        }

        public Fsincos fsincos() => default;

        [MethodImpl(Inline), Op]
        public Fsincos fsincos(AsmHexCode encoded) => new Fsincos(encoded);

        public struct Fsqrt : ITypedInstruction<Fsqrt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsqrt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSQRT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsqrt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsqrt src) => AsmMnemonics.FSQRT;

            public static implicit operator AsmHexCode(Fsqrt src) => src.Encoded;

            public static implicit operator Fsqrt(AsmHexCode src) => new Fsqrt(src);
        }

        public Fsqrt fsqrt() => default;

        [MethodImpl(Inline), Op]
        public Fsqrt fsqrt(AsmHexCode encoded) => new Fsqrt(encoded);

        public struct Fst : ITypedInstruction<Fst>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fst(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fst src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fst src) => AsmMnemonics.FST;

            public static implicit operator AsmHexCode(Fst src) => src.Encoded;

            public static implicit operator Fst(AsmHexCode src) => new Fst(src);
        }

        public Fst fst() => default;

        [MethodImpl(Inline), Op]
        public Fst fst(AsmHexCode encoded) => new Fst(encoded);

        public struct Fstp : ITypedInstruction<Fstp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fstp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSTP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fstp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fstp src) => AsmMnemonics.FSTP;

            public static implicit operator AsmHexCode(Fstp src) => src.Encoded;

            public static implicit operator Fstp(AsmHexCode src) => new Fstp(src);
        }

        public Fstp fstp() => default;

        [MethodImpl(Inline), Op]
        public Fstp fstp(AsmHexCode encoded) => new Fstp(encoded);

        public struct Fstpnce : ITypedInstruction<Fstpnce>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fstpnce(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSTPNCE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fstpnce src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fstpnce src) => AsmMnemonics.FSTPNCE;

            public static implicit operator AsmHexCode(Fstpnce src) => src.Encoded;

            public static implicit operator Fstpnce(AsmHexCode src) => new Fstpnce(src);
        }

        public Fstpnce fstpnce() => default;

        [MethodImpl(Inline), Op]
        public Fstpnce fstpnce(AsmHexCode encoded) => new Fstpnce(encoded);

        public struct Fsub : ITypedInstruction<Fsub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsub src) => AsmMnemonics.FSUB;

            public static implicit operator AsmHexCode(Fsub src) => src.Encoded;

            public static implicit operator Fsub(AsmHexCode src) => new Fsub(src);
        }

        public Fsub fsub() => default;

        [MethodImpl(Inline), Op]
        public Fsub fsub(AsmHexCode encoded) => new Fsub(encoded);

        public struct Fsubp : ITypedInstruction<Fsubp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsubp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSUBP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsubp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsubp src) => AsmMnemonics.FSUBP;

            public static implicit operator AsmHexCode(Fsubp src) => src.Encoded;

            public static implicit operator Fsubp(AsmHexCode src) => new Fsubp(src);
        }

        public Fsubp fsubp() => default;

        [MethodImpl(Inline), Op]
        public Fsubp fsubp(AsmHexCode encoded) => new Fsubp(encoded);

        public struct Fsubr : ITypedInstruction<Fsubr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsubr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSUBR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsubr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsubr src) => AsmMnemonics.FSUBR;

            public static implicit operator AsmHexCode(Fsubr src) => src.Encoded;

            public static implicit operator Fsubr(AsmHexCode src) => new Fsubr(src);
        }

        public Fsubr fsubr() => default;

        [MethodImpl(Inline), Op]
        public Fsubr fsubr(AsmHexCode encoded) => new Fsubr(encoded);

        public struct Fsubrp : ITypedInstruction<Fsubrp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fsubrp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FSUBRP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fsubrp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fsubrp src) => AsmMnemonics.FSUBRP;

            public static implicit operator AsmHexCode(Fsubrp src) => src.Encoded;

            public static implicit operator Fsubrp(AsmHexCode src) => new Fsubrp(src);
        }

        public Fsubrp fsubrp() => default;

        [MethodImpl(Inline), Op]
        public Fsubrp fsubrp(AsmHexCode encoded) => new Fsubrp(encoded);

        public struct Ftst : ITypedInstruction<Ftst>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ftst(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FTST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ftst src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ftst src) => AsmMnemonics.FTST;

            public static implicit operator AsmHexCode(Ftst src) => src.Encoded;

            public static implicit operator Ftst(AsmHexCode src) => new Ftst(src);
        }

        public Ftst ftst() => default;

        [MethodImpl(Inline), Op]
        public Ftst ftst(AsmHexCode encoded) => new Ftst(encoded);

        public struct Fucom : ITypedInstruction<Fucom>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fucom(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FUCOM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fucom src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fucom src) => AsmMnemonics.FUCOM;

            public static implicit operator AsmHexCode(Fucom src) => src.Encoded;

            public static implicit operator Fucom(AsmHexCode src) => new Fucom(src);
        }

        public Fucom fucom() => default;

        [MethodImpl(Inline), Op]
        public Fucom fucom(AsmHexCode encoded) => new Fucom(encoded);

        public struct Fucomi : ITypedInstruction<Fucomi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fucomi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FUCOMI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fucomi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fucomi src) => AsmMnemonics.FUCOMI;

            public static implicit operator AsmHexCode(Fucomi src) => src.Encoded;

            public static implicit operator Fucomi(AsmHexCode src) => new Fucomi(src);
        }

        public Fucomi fucomi() => default;

        [MethodImpl(Inline), Op]
        public Fucomi fucomi(AsmHexCode encoded) => new Fucomi(encoded);

        public struct Fucomip : ITypedInstruction<Fucomip>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fucomip(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FUCOMIP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fucomip src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fucomip src) => AsmMnemonics.FUCOMIP;

            public static implicit operator AsmHexCode(Fucomip src) => src.Encoded;

            public static implicit operator Fucomip(AsmHexCode src) => new Fucomip(src);
        }

        public Fucomip fucomip() => default;

        [MethodImpl(Inline), Op]
        public Fucomip fucomip(AsmHexCode encoded) => new Fucomip(encoded);

        public struct Fucomp : ITypedInstruction<Fucomp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fucomp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FUCOMP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fucomp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fucomp src) => AsmMnemonics.FUCOMP;

            public static implicit operator AsmHexCode(Fucomp src) => src.Encoded;

            public static implicit operator Fucomp(AsmHexCode src) => new Fucomp(src);
        }

        public Fucomp fucomp() => default;

        [MethodImpl(Inline), Op]
        public Fucomp fucomp(AsmHexCode encoded) => new Fucomp(encoded);

        public struct Fucompp : ITypedInstruction<Fucompp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fucompp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FUCOMPP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fucompp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fucompp src) => AsmMnemonics.FUCOMPP;

            public static implicit operator AsmHexCode(Fucompp src) => src.Encoded;

            public static implicit operator Fucompp(AsmHexCode src) => new Fucompp(src);
        }

        public Fucompp fucompp() => default;

        [MethodImpl(Inline), Op]
        public Fucompp fucompp(AsmHexCode encoded) => new Fucompp(encoded);

        public struct Fwait : ITypedInstruction<Fwait>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fwait(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FWAIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fwait src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fwait src) => AsmMnemonics.FWAIT;

            public static implicit operator AsmHexCode(Fwait src) => src.Encoded;

            public static implicit operator Fwait(AsmHexCode src) => new Fwait(src);
        }

        public Fwait fwait() => default;

        [MethodImpl(Inline), Op]
        public Fwait fwait(AsmHexCode encoded) => new Fwait(encoded);

        public struct Fxam : ITypedInstruction<Fxam>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxam(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXAM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxam src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxam src) => AsmMnemonics.FXAM;

            public static implicit operator AsmHexCode(Fxam src) => src.Encoded;

            public static implicit operator Fxam(AsmHexCode src) => new Fxam(src);
        }

        public Fxam fxam() => default;

        [MethodImpl(Inline), Op]
        public Fxam fxam(AsmHexCode encoded) => new Fxam(encoded);

        public struct Fxch : ITypedInstruction<Fxch>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxch(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXCH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxch src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxch src) => AsmMnemonics.FXCH;

            public static implicit operator AsmHexCode(Fxch src) => src.Encoded;

            public static implicit operator Fxch(AsmHexCode src) => new Fxch(src);
        }

        public Fxch fxch() => default;

        [MethodImpl(Inline), Op]
        public Fxch fxch(AsmHexCode encoded) => new Fxch(encoded);

        public struct Fxrstor : ITypedInstruction<Fxrstor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxrstor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXRSTOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxrstor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxrstor src) => AsmMnemonics.FXRSTOR;

            public static implicit operator AsmHexCode(Fxrstor src) => src.Encoded;

            public static implicit operator Fxrstor(AsmHexCode src) => new Fxrstor(src);
        }

        public Fxrstor fxrstor() => default;

        [MethodImpl(Inline), Op]
        public Fxrstor fxrstor(AsmHexCode encoded) => new Fxrstor(encoded);

        public struct Fxrstor64 : ITypedInstruction<Fxrstor64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxrstor64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXRSTOR64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxrstor64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxrstor64 src) => AsmMnemonics.FXRSTOR64;

            public static implicit operator AsmHexCode(Fxrstor64 src) => src.Encoded;

            public static implicit operator Fxrstor64(AsmHexCode src) => new Fxrstor64(src);
        }

        public Fxrstor64 fxrstor64() => default;

        [MethodImpl(Inline), Op]
        public Fxrstor64 fxrstor64(AsmHexCode encoded) => new Fxrstor64(encoded);

        public struct Fxsave : ITypedInstruction<Fxsave>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxsave(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXSAVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxsave src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxsave src) => AsmMnemonics.FXSAVE;

            public static implicit operator AsmHexCode(Fxsave src) => src.Encoded;

            public static implicit operator Fxsave(AsmHexCode src) => new Fxsave(src);
        }

        public Fxsave fxsave() => default;

        [MethodImpl(Inline), Op]
        public Fxsave fxsave(AsmHexCode encoded) => new Fxsave(encoded);

        public struct Fxsave64 : ITypedInstruction<Fxsave64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxsave64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXSAVE64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxsave64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxsave64 src) => AsmMnemonics.FXSAVE64;

            public static implicit operator AsmHexCode(Fxsave64 src) => src.Encoded;

            public static implicit operator Fxsave64(AsmHexCode src) => new Fxsave64(src);
        }

        public Fxsave64 fxsave64() => default;

        [MethodImpl(Inline), Op]
        public Fxsave64 fxsave64(AsmHexCode encoded) => new Fxsave64(encoded);

        public struct Fxtract : ITypedInstruction<Fxtract>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fxtract(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FXTRACT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fxtract src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fxtract src) => AsmMnemonics.FXTRACT;

            public static implicit operator AsmHexCode(Fxtract src) => src.Encoded;

            public static implicit operator Fxtract(AsmHexCode src) => new Fxtract(src);
        }

        public Fxtract fxtract() => default;

        [MethodImpl(Inline), Op]
        public Fxtract fxtract(AsmHexCode encoded) => new Fxtract(encoded);

        public struct Fyl2x : ITypedInstruction<Fyl2x>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fyl2x(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FYL2X;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fyl2x src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fyl2x src) => AsmMnemonics.FYL2X;

            public static implicit operator AsmHexCode(Fyl2x src) => src.Encoded;

            public static implicit operator Fyl2x(AsmHexCode src) => new Fyl2x(src);
        }

        public Fyl2x fyl2x() => default;

        [MethodImpl(Inline), Op]
        public Fyl2x fyl2x(AsmHexCode encoded) => new Fyl2x(encoded);

        public struct Fyl2xp1 : ITypedInstruction<Fyl2xp1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Fyl2xp1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.FYL2XP1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Fyl2xp1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Fyl2xp1 src) => AsmMnemonics.FYL2XP1;

            public static implicit operator AsmHexCode(Fyl2xp1 src) => src.Encoded;

            public static implicit operator Fyl2xp1(AsmHexCode src) => new Fyl2xp1(src);
        }

        public Fyl2xp1 fyl2xp1() => default;

        [MethodImpl(Inline), Op]
        public Fyl2xp1 fyl2xp1(AsmHexCode encoded) => new Fyl2xp1(encoded);

        public struct Getsec : ITypedInstruction<Getsec>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Getsec(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.GETSEC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Getsec src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Getsec src) => AsmMnemonics.GETSEC;

            public static implicit operator AsmHexCode(Getsec src) => src.Encoded;

            public static implicit operator Getsec(AsmHexCode src) => new Getsec(src);
        }

        public Getsec getsec() => default;

        [MethodImpl(Inline), Op]
        public Getsec getsec(AsmHexCode encoded) => new Getsec(encoded);

        public struct Gf2p8affineinvqb : ITypedInstruction<Gf2p8affineinvqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Gf2p8affineinvqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.GF2P8AFFINEINVQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Gf2p8affineinvqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Gf2p8affineinvqb src) => AsmMnemonics.GF2P8AFFINEINVQB;

            public static implicit operator AsmHexCode(Gf2p8affineinvqb src) => src.Encoded;

            public static implicit operator Gf2p8affineinvqb(AsmHexCode src) => new Gf2p8affineinvqb(src);
        }

        public Gf2p8affineinvqb gf2p8affineinvqb() => default;

        [MethodImpl(Inline), Op]
        public Gf2p8affineinvqb gf2p8affineinvqb(AsmHexCode encoded) => new Gf2p8affineinvqb(encoded);

        public struct Gf2p8affineqb : ITypedInstruction<Gf2p8affineqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Gf2p8affineqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.GF2P8AFFINEQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Gf2p8affineqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Gf2p8affineqb src) => AsmMnemonics.GF2P8AFFINEQB;

            public static implicit operator AsmHexCode(Gf2p8affineqb src) => src.Encoded;

            public static implicit operator Gf2p8affineqb(AsmHexCode src) => new Gf2p8affineqb(src);
        }

        public Gf2p8affineqb gf2p8affineqb() => default;

        [MethodImpl(Inline), Op]
        public Gf2p8affineqb gf2p8affineqb(AsmHexCode encoded) => new Gf2p8affineqb(encoded);

        public struct Gf2p8mulb : ITypedInstruction<Gf2p8mulb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Gf2p8mulb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.GF2P8MULB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Gf2p8mulb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Gf2p8mulb src) => AsmMnemonics.GF2P8MULB;

            public static implicit operator AsmHexCode(Gf2p8mulb src) => src.Encoded;

            public static implicit operator Gf2p8mulb(AsmHexCode src) => new Gf2p8mulb(src);
        }

        public Gf2p8mulb gf2p8mulb() => default;

        [MethodImpl(Inline), Op]
        public Gf2p8mulb gf2p8mulb(AsmHexCode encoded) => new Gf2p8mulb(encoded);

        public struct Haddpd : ITypedInstruction<Haddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Haddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Haddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Haddpd src) => AsmMnemonics.HADDPD;

            public static implicit operator AsmHexCode(Haddpd src) => src.Encoded;

            public static implicit operator Haddpd(AsmHexCode src) => new Haddpd(src);
        }

        public Haddpd haddpd() => default;

        [MethodImpl(Inline), Op]
        public Haddpd haddpd(AsmHexCode encoded) => new Haddpd(encoded);

        public struct Haddps : ITypedInstruction<Haddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Haddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Haddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Haddps src) => AsmMnemonics.HADDPS;

            public static implicit operator AsmHexCode(Haddps src) => src.Encoded;

            public static implicit operator Haddps(AsmHexCode src) => new Haddps(src);
        }

        public Haddps haddps() => default;

        [MethodImpl(Inline), Op]
        public Haddps haddps(AsmHexCode encoded) => new Haddps(encoded);

        public struct Hlt : ITypedInstruction<Hlt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Hlt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HLT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Hlt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Hlt src) => AsmMnemonics.HLT;

            public static implicit operator AsmHexCode(Hlt src) => src.Encoded;

            public static implicit operator Hlt(AsmHexCode src) => new Hlt(src);
        }

        public Hlt hlt() => default;

        [MethodImpl(Inline), Op]
        public Hlt hlt(AsmHexCode encoded) => new Hlt(encoded);

        public struct Hreset : ITypedInstruction<Hreset>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Hreset(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HRESET;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Hreset src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Hreset src) => AsmMnemonics.HRESET;

            public static implicit operator AsmHexCode(Hreset src) => src.Encoded;

            public static implicit operator Hreset(AsmHexCode src) => new Hreset(src);
        }

        public Hreset hreset() => default;

        [MethodImpl(Inline), Op]
        public Hreset hreset(AsmHexCode encoded) => new Hreset(encoded);

        public struct Hsubpd : ITypedInstruction<Hsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Hsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Hsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Hsubpd src) => AsmMnemonics.HSUBPD;

            public static implicit operator AsmHexCode(Hsubpd src) => src.Encoded;

            public static implicit operator Hsubpd(AsmHexCode src) => new Hsubpd(src);
        }

        public Hsubpd hsubpd() => default;

        [MethodImpl(Inline), Op]
        public Hsubpd hsubpd(AsmHexCode encoded) => new Hsubpd(encoded);

        public struct Hsubps : ITypedInstruction<Hsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Hsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.HSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Hsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Hsubps src) => AsmMnemonics.HSUBPS;

            public static implicit operator AsmHexCode(Hsubps src) => src.Encoded;

            public static implicit operator Hsubps(AsmHexCode src) => new Hsubps(src);
        }

        public Hsubps hsubps() => default;

        [MethodImpl(Inline), Op]
        public Hsubps hsubps(AsmHexCode encoded) => new Hsubps(encoded);

        public struct Idiv : ITypedInstruction<Idiv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Idiv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IDIV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Idiv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Idiv src) => AsmMnemonics.IDIV;

            public static implicit operator AsmHexCode(Idiv src) => src.Encoded;

            public static implicit operator Idiv(AsmHexCode src) => new Idiv(src);
        }

        public Idiv idiv() => default;

        [MethodImpl(Inline), Op]
        public Idiv idiv(AsmHexCode encoded) => new Idiv(encoded);

        public struct Imul : ITypedInstruction<Imul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Imul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IMUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Imul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Imul src) => AsmMnemonics.IMUL;

            public static implicit operator AsmHexCode(Imul src) => src.Encoded;

            public static implicit operator Imul(AsmHexCode src) => new Imul(src);
        }

        public Imul imul() => default;

        [MethodImpl(Inline), Op]
        public Imul imul(AsmHexCode encoded) => new Imul(encoded);

        public struct In : ITypedInstruction<In>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public In(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(In src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(In src) => AsmMnemonics.IN;

            public static implicit operator AsmHexCode(In src) => src.Encoded;

            public static implicit operator In(AsmHexCode src) => new In(src);
        }

        public In @in() => default;

        [MethodImpl(Inline), Op]
        public In @in(AsmHexCode encoded) => new In(encoded);

        public struct Inc : ITypedInstruction<Inc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Inc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Inc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Inc src) => AsmMnemonics.INC;

            public static implicit operator AsmHexCode(Inc src) => src.Encoded;

            public static implicit operator Inc(AsmHexCode src) => new Inc(src);
        }

        public Inc inc() => default;

        [MethodImpl(Inline), Op]
        public Inc inc(AsmHexCode encoded) => new Inc(encoded);

        public struct Inc_lock : ITypedInstruction<Inc_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Inc_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INC_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Inc_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Inc_lock src) => AsmMnemonics.INC_LOCK;

            public static implicit operator AsmHexCode(Inc_lock src) => src.Encoded;

            public static implicit operator Inc_lock(AsmHexCode src) => new Inc_lock(src);
        }

        public Inc_lock inc_lock() => default;

        [MethodImpl(Inline), Op]
        public Inc_lock inc_lock(AsmHexCode encoded) => new Inc_lock(encoded);

        public struct Incsspd : ITypedInstruction<Incsspd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Incsspd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INCSSPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Incsspd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Incsspd src) => AsmMnemonics.INCSSPD;

            public static implicit operator AsmHexCode(Incsspd src) => src.Encoded;

            public static implicit operator Incsspd(AsmHexCode src) => new Incsspd(src);
        }

        public Incsspd incsspd() => default;

        [MethodImpl(Inline), Op]
        public Incsspd incsspd(AsmHexCode encoded) => new Incsspd(encoded);

        public struct Incsspq : ITypedInstruction<Incsspq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Incsspq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INCSSPQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Incsspq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Incsspq src) => AsmMnemonics.INCSSPQ;

            public static implicit operator AsmHexCode(Incsspq src) => src.Encoded;

            public static implicit operator Incsspq(AsmHexCode src) => new Incsspq(src);
        }

        public Incsspq incsspq() => default;

        [MethodImpl(Inline), Op]
        public Incsspq incsspq(AsmHexCode encoded) => new Incsspq(encoded);

        public struct Insb : ITypedInstruction<Insb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Insb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Insb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Insb src) => AsmMnemonics.INSB;

            public static implicit operator AsmHexCode(Insb src) => src.Encoded;

            public static implicit operator Insb(AsmHexCode src) => new Insb(src);
        }

        public Insb insb() => default;

        [MethodImpl(Inline), Op]
        public Insb insb(AsmHexCode encoded) => new Insb(encoded);

        public struct Insd : ITypedInstruction<Insd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Insd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Insd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Insd src) => AsmMnemonics.INSD;

            public static implicit operator AsmHexCode(Insd src) => src.Encoded;

            public static implicit operator Insd(AsmHexCode src) => new Insd(src);
        }

        public Insd insd() => default;

        [MethodImpl(Inline), Op]
        public Insd insd(AsmHexCode encoded) => new Insd(encoded);

        public struct Insertps : ITypedInstruction<Insertps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Insertps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INSERTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Insertps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Insertps src) => AsmMnemonics.INSERTPS;

            public static implicit operator AsmHexCode(Insertps src) => src.Encoded;

            public static implicit operator Insertps(AsmHexCode src) => new Insertps(src);
        }

        public Insertps insertps() => default;

        [MethodImpl(Inline), Op]
        public Insertps insertps(AsmHexCode encoded) => new Insertps(encoded);

        public struct Insertq : ITypedInstruction<Insertq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Insertq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INSERTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Insertq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Insertq src) => AsmMnemonics.INSERTQ;

            public static implicit operator AsmHexCode(Insertq src) => src.Encoded;

            public static implicit operator Insertq(AsmHexCode src) => new Insertq(src);
        }

        public Insertq insertq() => default;

        [MethodImpl(Inline), Op]
        public Insertq insertq(AsmHexCode encoded) => new Insertq(encoded);

        public struct Insw : ITypedInstruction<Insw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Insw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Insw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Insw src) => AsmMnemonics.INSW;

            public static implicit operator AsmHexCode(Insw src) => src.Encoded;

            public static implicit operator Insw(AsmHexCode src) => new Insw(src);
        }

        public Insw insw() => default;

        [MethodImpl(Inline), Op]
        public Insw insw(AsmHexCode encoded) => new Insw(encoded);

        public struct Int : ITypedInstruction<Int>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Int(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Int src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Int src) => AsmMnemonics.INT;

            public static implicit operator AsmHexCode(Int src) => src.Encoded;

            public static implicit operator Int(AsmHexCode src) => new Int(src);
        }

        public Int @int() => default;

        [MethodImpl(Inline), Op]
        public Int @int(AsmHexCode encoded) => new Int(encoded);

        public struct Int1 : ITypedInstruction<Int1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Int1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Int1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Int1 src) => AsmMnemonics.INT1;

            public static implicit operator AsmHexCode(Int1 src) => src.Encoded;

            public static implicit operator Int1(AsmHexCode src) => new Int1(src);
        }

        public Int1 int1() => default;

        [MethodImpl(Inline), Op]
        public Int1 int1(AsmHexCode encoded) => new Int1(encoded);

        public struct Int3 : ITypedInstruction<Int3>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Int3(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INT3;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Int3 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Int3 src) => AsmMnemonics.INT3;

            public static implicit operator AsmHexCode(Int3 src) => src.Encoded;

            public static implicit operator Int3(AsmHexCode src) => new Int3(src);
        }

        public Int3 int3() => default;

        [MethodImpl(Inline), Op]
        public Int3 int3(AsmHexCode encoded) => new Int3(encoded);

        public struct Into : ITypedInstruction<Into>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Into(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INTO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Into src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Into src) => AsmMnemonics.INTO;

            public static implicit operator AsmHexCode(Into src) => src.Encoded;

            public static implicit operator Into(AsmHexCode src) => new Into(src);
        }

        public Into into() => default;

        [MethodImpl(Inline), Op]
        public Into into(AsmHexCode encoded) => new Into(encoded);

        public struct Invd : ITypedInstruction<Invd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invd src) => AsmMnemonics.INVD;

            public static implicit operator AsmHexCode(Invd src) => src.Encoded;

            public static implicit operator Invd(AsmHexCode src) => new Invd(src);
        }

        public Invd invd() => default;

        [MethodImpl(Inline), Op]
        public Invd invd(AsmHexCode encoded) => new Invd(encoded);

        public struct Invept : ITypedInstruction<Invept>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invept(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVEPT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invept src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invept src) => AsmMnemonics.INVEPT;

            public static implicit operator AsmHexCode(Invept src) => src.Encoded;

            public static implicit operator Invept(AsmHexCode src) => new Invept(src);
        }

        public Invept invept() => default;

        [MethodImpl(Inline), Op]
        public Invept invept(AsmHexCode encoded) => new Invept(encoded);

        public struct Invlpg : ITypedInstruction<Invlpg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invlpg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVLPG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invlpg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invlpg src) => AsmMnemonics.INVLPG;

            public static implicit operator AsmHexCode(Invlpg src) => src.Encoded;

            public static implicit operator Invlpg(AsmHexCode src) => new Invlpg(src);
        }

        public Invlpg invlpg() => default;

        [MethodImpl(Inline), Op]
        public Invlpg invlpg(AsmHexCode encoded) => new Invlpg(encoded);

        public struct Invlpga : ITypedInstruction<Invlpga>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invlpga(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVLPGA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invlpga src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invlpga src) => AsmMnemonics.INVLPGA;

            public static implicit operator AsmHexCode(Invlpga src) => src.Encoded;

            public static implicit operator Invlpga(AsmHexCode src) => new Invlpga(src);
        }

        public Invlpga invlpga() => default;

        [MethodImpl(Inline), Op]
        public Invlpga invlpga(AsmHexCode encoded) => new Invlpga(encoded);

        public struct Invlpgb : ITypedInstruction<Invlpgb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invlpgb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVLPGB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invlpgb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invlpgb src) => AsmMnemonics.INVLPGB;

            public static implicit operator AsmHexCode(Invlpgb src) => src.Encoded;

            public static implicit operator Invlpgb(AsmHexCode src) => new Invlpgb(src);
        }

        public Invlpgb invlpgb() => default;

        [MethodImpl(Inline), Op]
        public Invlpgb invlpgb(AsmHexCode encoded) => new Invlpgb(encoded);

        public struct Invpcid : ITypedInstruction<Invpcid>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invpcid(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVPCID;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invpcid src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invpcid src) => AsmMnemonics.INVPCID;

            public static implicit operator AsmHexCode(Invpcid src) => src.Encoded;

            public static implicit operator Invpcid(AsmHexCode src) => new Invpcid(src);
        }

        public Invpcid invpcid() => default;

        [MethodImpl(Inline), Op]
        public Invpcid invpcid(AsmHexCode encoded) => new Invpcid(encoded);

        public struct Invvpid : ITypedInstruction<Invvpid>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Invvpid(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.INVVPID;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Invvpid src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Invvpid src) => AsmMnemonics.INVVPID;

            public static implicit operator AsmHexCode(Invvpid src) => src.Encoded;

            public static implicit operator Invvpid(AsmHexCode src) => new Invvpid(src);
        }

        public Invvpid invvpid() => default;

        [MethodImpl(Inline), Op]
        public Invvpid invvpid(AsmHexCode encoded) => new Invvpid(encoded);

        public struct Iret : ITypedInstruction<Iret>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Iret(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IRET;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Iret src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Iret src) => AsmMnemonics.IRET;

            public static implicit operator AsmHexCode(Iret src) => src.Encoded;

            public static implicit operator Iret(AsmHexCode src) => new Iret(src);
        }

        public Iret iret() => default;

        [MethodImpl(Inline), Op]
        public Iret iret(AsmHexCode encoded) => new Iret(encoded);

        public struct Iretd : ITypedInstruction<Iretd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Iretd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IRETD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Iretd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Iretd src) => AsmMnemonics.IRETD;

            public static implicit operator AsmHexCode(Iretd src) => src.Encoded;

            public static implicit operator Iretd(AsmHexCode src) => new Iretd(src);
        }

        public Iretd iretd() => default;

        [MethodImpl(Inline), Op]
        public Iretd iretd(AsmHexCode encoded) => new Iretd(encoded);

        public struct Iretq : ITypedInstruction<Iretq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Iretq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.IRETQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Iretq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Iretq src) => AsmMnemonics.IRETQ;

            public static implicit operator AsmHexCode(Iretq src) => src.Encoded;

            public static implicit operator Iretq(AsmHexCode src) => new Iretq(src);
        }

        public Iretq iretq() => default;

        [MethodImpl(Inline), Op]
        public Iretq iretq(AsmHexCode encoded) => new Iretq(encoded);

        public struct Jb : ITypedInstruction<Jb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jb src) => AsmMnemonics.JB;

            public static implicit operator AsmHexCode(Jb src) => src.Encoded;

            public static implicit operator Jb(AsmHexCode src) => new Jb(src);
        }

        public Jb jb() => default;

        [MethodImpl(Inline), Op]
        public Jb jb(AsmHexCode encoded) => new Jb(encoded);

        public struct Jbe : ITypedInstruction<Jbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jbe src) => AsmMnemonics.JBE;

            public static implicit operator AsmHexCode(Jbe src) => src.Encoded;

            public static implicit operator Jbe(AsmHexCode src) => new Jbe(src);
        }

        public Jbe jbe() => default;

        [MethodImpl(Inline), Op]
        public Jbe jbe(AsmHexCode encoded) => new Jbe(encoded);

        public struct Jcxz : ITypedInstruction<Jcxz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jcxz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JCXZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jcxz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jcxz src) => AsmMnemonics.JCXZ;

            public static implicit operator AsmHexCode(Jcxz src) => src.Encoded;

            public static implicit operator Jcxz(AsmHexCode src) => new Jcxz(src);
        }

        public Jcxz jcxz() => default;

        [MethodImpl(Inline), Op]
        public Jcxz jcxz(AsmHexCode encoded) => new Jcxz(encoded);

        public struct Jecxz : ITypedInstruction<Jecxz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jecxz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JECXZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jecxz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jecxz src) => AsmMnemonics.JECXZ;

            public static implicit operator AsmHexCode(Jecxz src) => src.Encoded;

            public static implicit operator Jecxz(AsmHexCode src) => new Jecxz(src);
        }

        public Jecxz jecxz() => default;

        [MethodImpl(Inline), Op]
        public Jecxz jecxz(AsmHexCode encoded) => new Jecxz(encoded);

        public struct Jl : ITypedInstruction<Jl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jl src) => AsmMnemonics.JL;

            public static implicit operator AsmHexCode(Jl src) => src.Encoded;

            public static implicit operator Jl(AsmHexCode src) => new Jl(src);
        }

        public Jl jl() => default;

        [MethodImpl(Inline), Op]
        public Jl jl(AsmHexCode encoded) => new Jl(encoded);

        public struct Jle : ITypedInstruction<Jle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jle src) => AsmMnemonics.JLE;

            public static implicit operator AsmHexCode(Jle src) => src.Encoded;

            public static implicit operator Jle(AsmHexCode src) => new Jle(src);
        }

        public Jle jle() => default;

        [MethodImpl(Inline), Op]
        public Jle jle(AsmHexCode encoded) => new Jle(encoded);

        public struct Jmp : ITypedInstruction<Jmp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jmp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JMP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jmp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jmp src) => AsmMnemonics.JMP;

            public static implicit operator AsmHexCode(Jmp src) => src.Encoded;

            public static implicit operator Jmp(AsmHexCode src) => new Jmp(src);
        }

        public Jmp jmp() => default;

        [MethodImpl(Inline), Op]
        public Jmp jmp(AsmHexCode encoded) => new Jmp(encoded);

        public struct Jmp_far : ITypedInstruction<Jmp_far>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jmp_far(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JMP_FAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jmp_far src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jmp_far src) => AsmMnemonics.JMP_FAR;

            public static implicit operator AsmHexCode(Jmp_far src) => src.Encoded;

            public static implicit operator Jmp_far(AsmHexCode src) => new Jmp_far(src);
        }

        public Jmp_far jmp_far() => default;

        [MethodImpl(Inline), Op]
        public Jmp_far jmp_far(AsmHexCode encoded) => new Jmp_far(encoded);

        public struct Jnb : ITypedInstruction<Jnb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnb src) => AsmMnemonics.JNB;

            public static implicit operator AsmHexCode(Jnb src) => src.Encoded;

            public static implicit operator Jnb(AsmHexCode src) => new Jnb(src);
        }

        public Jnb jnb() => default;

        [MethodImpl(Inline), Op]
        public Jnb jnb(AsmHexCode encoded) => new Jnb(encoded);

        public struct Jnbe : ITypedInstruction<Jnbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnbe src) => AsmMnemonics.JNBE;

            public static implicit operator AsmHexCode(Jnbe src) => src.Encoded;

            public static implicit operator Jnbe(AsmHexCode src) => new Jnbe(src);
        }

        public Jnbe jnbe() => default;

        [MethodImpl(Inline), Op]
        public Jnbe jnbe(AsmHexCode encoded) => new Jnbe(encoded);

        public struct Jnl : ITypedInstruction<Jnl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnl src) => AsmMnemonics.JNL;

            public static implicit operator AsmHexCode(Jnl src) => src.Encoded;

            public static implicit operator Jnl(AsmHexCode src) => new Jnl(src);
        }

        public Jnl jnl() => default;

        [MethodImpl(Inline), Op]
        public Jnl jnl(AsmHexCode encoded) => new Jnl(encoded);

        public struct Jnle : ITypedInstruction<Jnle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnle src) => AsmMnemonics.JNLE;

            public static implicit operator AsmHexCode(Jnle src) => src.Encoded;

            public static implicit operator Jnle(AsmHexCode src) => new Jnle(src);
        }

        public Jnle jnle() => default;

        [MethodImpl(Inline), Op]
        public Jnle jnle(AsmHexCode encoded) => new Jnle(encoded);

        public struct Jno : ITypedInstruction<Jno>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jno(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jno src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jno src) => AsmMnemonics.JNO;

            public static implicit operator AsmHexCode(Jno src) => src.Encoded;

            public static implicit operator Jno(AsmHexCode src) => new Jno(src);
        }

        public Jno jno() => default;

        [MethodImpl(Inline), Op]
        public Jno jno(AsmHexCode encoded) => new Jno(encoded);

        public struct Jnp : ITypedInstruction<Jnp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnp src) => AsmMnemonics.JNP;

            public static implicit operator AsmHexCode(Jnp src) => src.Encoded;

            public static implicit operator Jnp(AsmHexCode src) => new Jnp(src);
        }

        public Jnp jnp() => default;

        [MethodImpl(Inline), Op]
        public Jnp jnp(AsmHexCode encoded) => new Jnp(encoded);

        public struct Jns : ITypedInstruction<Jns>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jns(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jns src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jns src) => AsmMnemonics.JNS;

            public static implicit operator AsmHexCode(Jns src) => src.Encoded;

            public static implicit operator Jns(AsmHexCode src) => new Jns(src);
        }

        public Jns jns() => default;

        [MethodImpl(Inline), Op]
        public Jns jns(AsmHexCode encoded) => new Jns(encoded);

        public struct Jnz : ITypedInstruction<Jnz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jnz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JNZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jnz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jnz src) => AsmMnemonics.JNZ;

            public static implicit operator AsmHexCode(Jnz src) => src.Encoded;

            public static implicit operator Jnz(AsmHexCode src) => new Jnz(src);
        }

        public Jnz jnz() => default;

        [MethodImpl(Inline), Op]
        public Jnz jnz(AsmHexCode encoded) => new Jnz(encoded);

        public struct Jo : ITypedInstruction<Jo>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jo(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jo src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jo src) => AsmMnemonics.JO;

            public static implicit operator AsmHexCode(Jo src) => src.Encoded;

            public static implicit operator Jo(AsmHexCode src) => new Jo(src);
        }

        public Jo jo() => default;

        [MethodImpl(Inline), Op]
        public Jo jo(AsmHexCode encoded) => new Jo(encoded);

        public struct Jp : ITypedInstruction<Jp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jp src) => AsmMnemonics.JP;

            public static implicit operator AsmHexCode(Jp src) => src.Encoded;

            public static implicit operator Jp(AsmHexCode src) => new Jp(src);
        }

        public Jp jp() => default;

        [MethodImpl(Inline), Op]
        public Jp jp(AsmHexCode encoded) => new Jp(encoded);

        public struct Jrcxz : ITypedInstruction<Jrcxz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jrcxz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JRCXZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jrcxz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jrcxz src) => AsmMnemonics.JRCXZ;

            public static implicit operator AsmHexCode(Jrcxz src) => src.Encoded;

            public static implicit operator Jrcxz(AsmHexCode src) => new Jrcxz(src);
        }

        public Jrcxz jrcxz() => default;

        [MethodImpl(Inline), Op]
        public Jrcxz jrcxz(AsmHexCode encoded) => new Jrcxz(encoded);

        public struct Js : ITypedInstruction<Js>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Js(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Js src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Js src) => AsmMnemonics.JS;

            public static implicit operator AsmHexCode(Js src) => src.Encoded;

            public static implicit operator Js(AsmHexCode src) => new Js(src);
        }

        public Js js() => default;

        [MethodImpl(Inline), Op]
        public Js js(AsmHexCode encoded) => new Js(encoded);

        public struct Jz : ITypedInstruction<Jz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Jz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.JZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Jz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Jz src) => AsmMnemonics.JZ;

            public static implicit operator AsmHexCode(Jz src) => src.Encoded;

            public static implicit operator Jz(AsmHexCode src) => new Jz(src);
        }

        public Jz jz() => default;

        [MethodImpl(Inline), Op]
        public Jz jz(AsmHexCode encoded) => new Jz(encoded);

        public struct Kaddb : ITypedInstruction<Kaddb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kaddb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KADDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kaddb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kaddb src) => AsmMnemonics.KADDB;

            public static implicit operator AsmHexCode(Kaddb src) => src.Encoded;

            public static implicit operator Kaddb(AsmHexCode src) => new Kaddb(src);
        }

        public Kaddb kaddb() => default;

        [MethodImpl(Inline), Op]
        public Kaddb kaddb(AsmHexCode encoded) => new Kaddb(encoded);

        public struct Kaddd : ITypedInstruction<Kaddd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kaddd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KADDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kaddd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kaddd src) => AsmMnemonics.KADDD;

            public static implicit operator AsmHexCode(Kaddd src) => src.Encoded;

            public static implicit operator Kaddd(AsmHexCode src) => new Kaddd(src);
        }

        public Kaddd kaddd() => default;

        [MethodImpl(Inline), Op]
        public Kaddd kaddd(AsmHexCode encoded) => new Kaddd(encoded);

        public struct Kaddq : ITypedInstruction<Kaddq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kaddq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KADDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kaddq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kaddq src) => AsmMnemonics.KADDQ;

            public static implicit operator AsmHexCode(Kaddq src) => src.Encoded;

            public static implicit operator Kaddq(AsmHexCode src) => new Kaddq(src);
        }

        public Kaddq kaddq() => default;

        [MethodImpl(Inline), Op]
        public Kaddq kaddq(AsmHexCode encoded) => new Kaddq(encoded);

        public struct Kaddw : ITypedInstruction<Kaddw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kaddw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KADDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kaddw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kaddw src) => AsmMnemonics.KADDW;

            public static implicit operator AsmHexCode(Kaddw src) => src.Encoded;

            public static implicit operator Kaddw(AsmHexCode src) => new Kaddw(src);
        }

        public Kaddw kaddw() => default;

        [MethodImpl(Inline), Op]
        public Kaddw kaddw(AsmHexCode encoded) => new Kaddw(encoded);

        public struct Kandb : ITypedInstruction<Kandb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandb src) => AsmMnemonics.KANDB;

            public static implicit operator AsmHexCode(Kandb src) => src.Encoded;

            public static implicit operator Kandb(AsmHexCode src) => new Kandb(src);
        }

        public Kandb kandb() => default;

        [MethodImpl(Inline), Op]
        public Kandb kandb(AsmHexCode encoded) => new Kandb(encoded);

        public struct Kandd : ITypedInstruction<Kandd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandd src) => AsmMnemonics.KANDD;

            public static implicit operator AsmHexCode(Kandd src) => src.Encoded;

            public static implicit operator Kandd(AsmHexCode src) => new Kandd(src);
        }

        public Kandd kandd() => default;

        [MethodImpl(Inline), Op]
        public Kandd kandd(AsmHexCode encoded) => new Kandd(encoded);

        public struct Kandnb : ITypedInstruction<Kandnb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandnb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandnb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandnb src) => AsmMnemonics.KANDNB;

            public static implicit operator AsmHexCode(Kandnb src) => src.Encoded;

            public static implicit operator Kandnb(AsmHexCode src) => new Kandnb(src);
        }

        public Kandnb kandnb() => default;

        [MethodImpl(Inline), Op]
        public Kandnb kandnb(AsmHexCode encoded) => new Kandnb(encoded);

        public struct Kandnd : ITypedInstruction<Kandnd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandnd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandnd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandnd src) => AsmMnemonics.KANDND;

            public static implicit operator AsmHexCode(Kandnd src) => src.Encoded;

            public static implicit operator Kandnd(AsmHexCode src) => new Kandnd(src);
        }

        public Kandnd kandnd() => default;

        [MethodImpl(Inline), Op]
        public Kandnd kandnd(AsmHexCode encoded) => new Kandnd(encoded);

        public struct Kandnq : ITypedInstruction<Kandnq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandnq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDNQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandnq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandnq src) => AsmMnemonics.KANDNQ;

            public static implicit operator AsmHexCode(Kandnq src) => src.Encoded;

            public static implicit operator Kandnq(AsmHexCode src) => new Kandnq(src);
        }

        public Kandnq kandnq() => default;

        [MethodImpl(Inline), Op]
        public Kandnq kandnq(AsmHexCode encoded) => new Kandnq(encoded);

        public struct Kandnw : ITypedInstruction<Kandnw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandnw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDNW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandnw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandnw src) => AsmMnemonics.KANDNW;

            public static implicit operator AsmHexCode(Kandnw src) => src.Encoded;

            public static implicit operator Kandnw(AsmHexCode src) => new Kandnw(src);
        }

        public Kandnw kandnw() => default;

        [MethodImpl(Inline), Op]
        public Kandnw kandnw(AsmHexCode encoded) => new Kandnw(encoded);

        public struct Kandq : ITypedInstruction<Kandq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandq src) => AsmMnemonics.KANDQ;

            public static implicit operator AsmHexCode(Kandq src) => src.Encoded;

            public static implicit operator Kandq(AsmHexCode src) => new Kandq(src);
        }

        public Kandq kandq() => default;

        [MethodImpl(Inline), Op]
        public Kandq kandq(AsmHexCode encoded) => new Kandq(encoded);

        public struct Kandw : ITypedInstruction<Kandw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kandw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KANDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kandw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kandw src) => AsmMnemonics.KANDW;

            public static implicit operator AsmHexCode(Kandw src) => src.Encoded;

            public static implicit operator Kandw(AsmHexCode src) => new Kandw(src);
        }

        public Kandw kandw() => default;

        [MethodImpl(Inline), Op]
        public Kandw kandw(AsmHexCode encoded) => new Kandw(encoded);

        public struct Kmovb : ITypedInstruction<Kmovb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kmovb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KMOVB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kmovb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kmovb src) => AsmMnemonics.KMOVB;

            public static implicit operator AsmHexCode(Kmovb src) => src.Encoded;

            public static implicit operator Kmovb(AsmHexCode src) => new Kmovb(src);
        }

        public Kmovb kmovb() => default;

        [MethodImpl(Inline), Op]
        public Kmovb kmovb(AsmHexCode encoded) => new Kmovb(encoded);

        public struct Kmovd : ITypedInstruction<Kmovd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kmovd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KMOVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kmovd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kmovd src) => AsmMnemonics.KMOVD;

            public static implicit operator AsmHexCode(Kmovd src) => src.Encoded;

            public static implicit operator Kmovd(AsmHexCode src) => new Kmovd(src);
        }

        public Kmovd kmovd() => default;

        [MethodImpl(Inline), Op]
        public Kmovd kmovd(AsmHexCode encoded) => new Kmovd(encoded);

        public struct Kmovq : ITypedInstruction<Kmovq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kmovq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KMOVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kmovq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kmovq src) => AsmMnemonics.KMOVQ;

            public static implicit operator AsmHexCode(Kmovq src) => src.Encoded;

            public static implicit operator Kmovq(AsmHexCode src) => new Kmovq(src);
        }

        public Kmovq kmovq() => default;

        [MethodImpl(Inline), Op]
        public Kmovq kmovq(AsmHexCode encoded) => new Kmovq(encoded);

        public struct Kmovw : ITypedInstruction<Kmovw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kmovw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KMOVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kmovw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kmovw src) => AsmMnemonics.KMOVW;

            public static implicit operator AsmHexCode(Kmovw src) => src.Encoded;

            public static implicit operator Kmovw(AsmHexCode src) => new Kmovw(src);
        }

        public Kmovw kmovw() => default;

        [MethodImpl(Inline), Op]
        public Kmovw kmovw(AsmHexCode encoded) => new Kmovw(encoded);

        public struct Knotb : ITypedInstruction<Knotb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Knotb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KNOTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Knotb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Knotb src) => AsmMnemonics.KNOTB;

            public static implicit operator AsmHexCode(Knotb src) => src.Encoded;

            public static implicit operator Knotb(AsmHexCode src) => new Knotb(src);
        }

        public Knotb knotb() => default;

        [MethodImpl(Inline), Op]
        public Knotb knotb(AsmHexCode encoded) => new Knotb(encoded);

        public struct Knotd : ITypedInstruction<Knotd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Knotd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KNOTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Knotd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Knotd src) => AsmMnemonics.KNOTD;

            public static implicit operator AsmHexCode(Knotd src) => src.Encoded;

            public static implicit operator Knotd(AsmHexCode src) => new Knotd(src);
        }

        public Knotd knotd() => default;

        [MethodImpl(Inline), Op]
        public Knotd knotd(AsmHexCode encoded) => new Knotd(encoded);

        public struct Knotq : ITypedInstruction<Knotq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Knotq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KNOTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Knotq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Knotq src) => AsmMnemonics.KNOTQ;

            public static implicit operator AsmHexCode(Knotq src) => src.Encoded;

            public static implicit operator Knotq(AsmHexCode src) => new Knotq(src);
        }

        public Knotq knotq() => default;

        [MethodImpl(Inline), Op]
        public Knotq knotq(AsmHexCode encoded) => new Knotq(encoded);

        public struct Knotw : ITypedInstruction<Knotw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Knotw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KNOTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Knotw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Knotw src) => AsmMnemonics.KNOTW;

            public static implicit operator AsmHexCode(Knotw src) => src.Encoded;

            public static implicit operator Knotw(AsmHexCode src) => new Knotw(src);
        }

        public Knotw knotw() => default;

        [MethodImpl(Inline), Op]
        public Knotw knotw(AsmHexCode encoded) => new Knotw(encoded);

        public struct Korb : ITypedInstruction<Korb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Korb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Korb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Korb src) => AsmMnemonics.KORB;

            public static implicit operator AsmHexCode(Korb src) => src.Encoded;

            public static implicit operator Korb(AsmHexCode src) => new Korb(src);
        }

        public Korb korb() => default;

        [MethodImpl(Inline), Op]
        public Korb korb(AsmHexCode encoded) => new Korb(encoded);

        public struct Kord : ITypedInstruction<Kord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kord src) => AsmMnemonics.KORD;

            public static implicit operator AsmHexCode(Kord src) => src.Encoded;

            public static implicit operator Kord(AsmHexCode src) => new Kord(src);
        }

        public Kord kord() => default;

        [MethodImpl(Inline), Op]
        public Kord kord(AsmHexCode encoded) => new Kord(encoded);

        public struct Korq : ITypedInstruction<Korq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Korq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Korq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Korq src) => AsmMnemonics.KORQ;

            public static implicit operator AsmHexCode(Korq src) => src.Encoded;

            public static implicit operator Korq(AsmHexCode src) => new Korq(src);
        }

        public Korq korq() => default;

        [MethodImpl(Inline), Op]
        public Korq korq(AsmHexCode encoded) => new Korq(encoded);

        public struct Kortestb : ITypedInstruction<Kortestb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kortestb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORTESTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kortestb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kortestb src) => AsmMnemonics.KORTESTB;

            public static implicit operator AsmHexCode(Kortestb src) => src.Encoded;

            public static implicit operator Kortestb(AsmHexCode src) => new Kortestb(src);
        }

        public Kortestb kortestb() => default;

        [MethodImpl(Inline), Op]
        public Kortestb kortestb(AsmHexCode encoded) => new Kortestb(encoded);

        public struct Kortestd : ITypedInstruction<Kortestd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kortestd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORTESTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kortestd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kortestd src) => AsmMnemonics.KORTESTD;

            public static implicit operator AsmHexCode(Kortestd src) => src.Encoded;

            public static implicit operator Kortestd(AsmHexCode src) => new Kortestd(src);
        }

        public Kortestd kortestd() => default;

        [MethodImpl(Inline), Op]
        public Kortestd kortestd(AsmHexCode encoded) => new Kortestd(encoded);

        public struct Kortestq : ITypedInstruction<Kortestq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kortestq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORTESTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kortestq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kortestq src) => AsmMnemonics.KORTESTQ;

            public static implicit operator AsmHexCode(Kortestq src) => src.Encoded;

            public static implicit operator Kortestq(AsmHexCode src) => new Kortestq(src);
        }

        public Kortestq kortestq() => default;

        [MethodImpl(Inline), Op]
        public Kortestq kortestq(AsmHexCode encoded) => new Kortestq(encoded);

        public struct Kortestw : ITypedInstruction<Kortestw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kortestw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORTESTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kortestw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kortestw src) => AsmMnemonics.KORTESTW;

            public static implicit operator AsmHexCode(Kortestw src) => src.Encoded;

            public static implicit operator Kortestw(AsmHexCode src) => new Kortestw(src);
        }

        public Kortestw kortestw() => default;

        [MethodImpl(Inline), Op]
        public Kortestw kortestw(AsmHexCode encoded) => new Kortestw(encoded);

        public struct Korw : ITypedInstruction<Korw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Korw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KORW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Korw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Korw src) => AsmMnemonics.KORW;

            public static implicit operator AsmHexCode(Korw src) => src.Encoded;

            public static implicit operator Korw(AsmHexCode src) => new Korw(src);
        }

        public Korw korw() => default;

        [MethodImpl(Inline), Op]
        public Korw korw(AsmHexCode encoded) => new Korw(encoded);

        public struct Kshiftlb : ITypedInstruction<Kshiftlb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftlb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTLB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftlb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftlb src) => AsmMnemonics.KSHIFTLB;

            public static implicit operator AsmHexCode(Kshiftlb src) => src.Encoded;

            public static implicit operator Kshiftlb(AsmHexCode src) => new Kshiftlb(src);
        }

        public Kshiftlb kshiftlb() => default;

        [MethodImpl(Inline), Op]
        public Kshiftlb kshiftlb(AsmHexCode encoded) => new Kshiftlb(encoded);

        public struct Kshiftld : ITypedInstruction<Kshiftld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftld src) => AsmMnemonics.KSHIFTLD;

            public static implicit operator AsmHexCode(Kshiftld src) => src.Encoded;

            public static implicit operator Kshiftld(AsmHexCode src) => new Kshiftld(src);
        }

        public Kshiftld kshiftld() => default;

        [MethodImpl(Inline), Op]
        public Kshiftld kshiftld(AsmHexCode encoded) => new Kshiftld(encoded);

        public struct Kshiftlq : ITypedInstruction<Kshiftlq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftlq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftlq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftlq src) => AsmMnemonics.KSHIFTLQ;

            public static implicit operator AsmHexCode(Kshiftlq src) => src.Encoded;

            public static implicit operator Kshiftlq(AsmHexCode src) => new Kshiftlq(src);
        }

        public Kshiftlq kshiftlq() => default;

        [MethodImpl(Inline), Op]
        public Kshiftlq kshiftlq(AsmHexCode encoded) => new Kshiftlq(encoded);

        public struct Kshiftlw : ITypedInstruction<Kshiftlw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftlw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftlw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftlw src) => AsmMnemonics.KSHIFTLW;

            public static implicit operator AsmHexCode(Kshiftlw src) => src.Encoded;

            public static implicit operator Kshiftlw(AsmHexCode src) => new Kshiftlw(src);
        }

        public Kshiftlw kshiftlw() => default;

        [MethodImpl(Inline), Op]
        public Kshiftlw kshiftlw(AsmHexCode encoded) => new Kshiftlw(encoded);

        public struct Kshiftrb : ITypedInstruction<Kshiftrb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftrb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTRB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftrb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftrb src) => AsmMnemonics.KSHIFTRB;

            public static implicit operator AsmHexCode(Kshiftrb src) => src.Encoded;

            public static implicit operator Kshiftrb(AsmHexCode src) => new Kshiftrb(src);
        }

        public Kshiftrb kshiftrb() => default;

        [MethodImpl(Inline), Op]
        public Kshiftrb kshiftrb(AsmHexCode encoded) => new Kshiftrb(encoded);

        public struct Kshiftrd : ITypedInstruction<Kshiftrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftrd src) => AsmMnemonics.KSHIFTRD;

            public static implicit operator AsmHexCode(Kshiftrd src) => src.Encoded;

            public static implicit operator Kshiftrd(AsmHexCode src) => new Kshiftrd(src);
        }

        public Kshiftrd kshiftrd() => default;

        [MethodImpl(Inline), Op]
        public Kshiftrd kshiftrd(AsmHexCode encoded) => new Kshiftrd(encoded);

        public struct Kshiftrq : ITypedInstruction<Kshiftrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftrq src) => AsmMnemonics.KSHIFTRQ;

            public static implicit operator AsmHexCode(Kshiftrq src) => src.Encoded;

            public static implicit operator Kshiftrq(AsmHexCode src) => new Kshiftrq(src);
        }

        public Kshiftrq kshiftrq() => default;

        [MethodImpl(Inline), Op]
        public Kshiftrq kshiftrq(AsmHexCode encoded) => new Kshiftrq(encoded);

        public struct Kshiftrw : ITypedInstruction<Kshiftrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kshiftrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KSHIFTRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kshiftrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kshiftrw src) => AsmMnemonics.KSHIFTRW;

            public static implicit operator AsmHexCode(Kshiftrw src) => src.Encoded;

            public static implicit operator Kshiftrw(AsmHexCode src) => new Kshiftrw(src);
        }

        public Kshiftrw kshiftrw() => default;

        [MethodImpl(Inline), Op]
        public Kshiftrw kshiftrw(AsmHexCode encoded) => new Kshiftrw(encoded);

        public struct Ktestb : ITypedInstruction<Ktestb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ktestb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KTESTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ktestb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ktestb src) => AsmMnemonics.KTESTB;

            public static implicit operator AsmHexCode(Ktestb src) => src.Encoded;

            public static implicit operator Ktestb(AsmHexCode src) => new Ktestb(src);
        }

        public Ktestb ktestb() => default;

        [MethodImpl(Inline), Op]
        public Ktestb ktestb(AsmHexCode encoded) => new Ktestb(encoded);

        public struct Ktestd : ITypedInstruction<Ktestd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ktestd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KTESTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ktestd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ktestd src) => AsmMnemonics.KTESTD;

            public static implicit operator AsmHexCode(Ktestd src) => src.Encoded;

            public static implicit operator Ktestd(AsmHexCode src) => new Ktestd(src);
        }

        public Ktestd ktestd() => default;

        [MethodImpl(Inline), Op]
        public Ktestd ktestd(AsmHexCode encoded) => new Ktestd(encoded);

        public struct Ktestq : ITypedInstruction<Ktestq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ktestq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KTESTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ktestq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ktestq src) => AsmMnemonics.KTESTQ;

            public static implicit operator AsmHexCode(Ktestq src) => src.Encoded;

            public static implicit operator Ktestq(AsmHexCode src) => new Ktestq(src);
        }

        public Ktestq ktestq() => default;

        [MethodImpl(Inline), Op]
        public Ktestq ktestq(AsmHexCode encoded) => new Ktestq(encoded);

        public struct Ktestw : ITypedInstruction<Ktestw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ktestw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KTESTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ktestw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ktestw src) => AsmMnemonics.KTESTW;

            public static implicit operator AsmHexCode(Ktestw src) => src.Encoded;

            public static implicit operator Ktestw(AsmHexCode src) => new Ktestw(src);
        }

        public Ktestw ktestw() => default;

        [MethodImpl(Inline), Op]
        public Ktestw ktestw(AsmHexCode encoded) => new Ktestw(encoded);

        public struct Kunpckbw : ITypedInstruction<Kunpckbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kunpckbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KUNPCKBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kunpckbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kunpckbw src) => AsmMnemonics.KUNPCKBW;

            public static implicit operator AsmHexCode(Kunpckbw src) => src.Encoded;

            public static implicit operator Kunpckbw(AsmHexCode src) => new Kunpckbw(src);
        }

        public Kunpckbw kunpckbw() => default;

        [MethodImpl(Inline), Op]
        public Kunpckbw kunpckbw(AsmHexCode encoded) => new Kunpckbw(encoded);

        public struct Kunpckdq : ITypedInstruction<Kunpckdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kunpckdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KUNPCKDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kunpckdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kunpckdq src) => AsmMnemonics.KUNPCKDQ;

            public static implicit operator AsmHexCode(Kunpckdq src) => src.Encoded;

            public static implicit operator Kunpckdq(AsmHexCode src) => new Kunpckdq(src);
        }

        public Kunpckdq kunpckdq() => default;

        [MethodImpl(Inline), Op]
        public Kunpckdq kunpckdq(AsmHexCode encoded) => new Kunpckdq(encoded);

        public struct Kunpckwd : ITypedInstruction<Kunpckwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kunpckwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KUNPCKWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kunpckwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kunpckwd src) => AsmMnemonics.KUNPCKWD;

            public static implicit operator AsmHexCode(Kunpckwd src) => src.Encoded;

            public static implicit operator Kunpckwd(AsmHexCode src) => new Kunpckwd(src);
        }

        public Kunpckwd kunpckwd() => default;

        [MethodImpl(Inline), Op]
        public Kunpckwd kunpckwd(AsmHexCode encoded) => new Kunpckwd(encoded);

        public struct Kxnorb : ITypedInstruction<Kxnorb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxnorb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXNORB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxnorb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxnorb src) => AsmMnemonics.KXNORB;

            public static implicit operator AsmHexCode(Kxnorb src) => src.Encoded;

            public static implicit operator Kxnorb(AsmHexCode src) => new Kxnorb(src);
        }

        public Kxnorb kxnorb() => default;

        [MethodImpl(Inline), Op]
        public Kxnorb kxnorb(AsmHexCode encoded) => new Kxnorb(encoded);

        public struct Kxnord : ITypedInstruction<Kxnord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxnord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXNORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxnord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxnord src) => AsmMnemonics.KXNORD;

            public static implicit operator AsmHexCode(Kxnord src) => src.Encoded;

            public static implicit operator Kxnord(AsmHexCode src) => new Kxnord(src);
        }

        public Kxnord kxnord() => default;

        [MethodImpl(Inline), Op]
        public Kxnord kxnord(AsmHexCode encoded) => new Kxnord(encoded);

        public struct Kxnorq : ITypedInstruction<Kxnorq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxnorq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXNORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxnorq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxnorq src) => AsmMnemonics.KXNORQ;

            public static implicit operator AsmHexCode(Kxnorq src) => src.Encoded;

            public static implicit operator Kxnorq(AsmHexCode src) => new Kxnorq(src);
        }

        public Kxnorq kxnorq() => default;

        [MethodImpl(Inline), Op]
        public Kxnorq kxnorq(AsmHexCode encoded) => new Kxnorq(encoded);

        public struct Kxnorw : ITypedInstruction<Kxnorw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxnorw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXNORW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxnorw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxnorw src) => AsmMnemonics.KXNORW;

            public static implicit operator AsmHexCode(Kxnorw src) => src.Encoded;

            public static implicit operator Kxnorw(AsmHexCode src) => new Kxnorw(src);
        }

        public Kxnorw kxnorw() => default;

        [MethodImpl(Inline), Op]
        public Kxnorw kxnorw(AsmHexCode encoded) => new Kxnorw(encoded);

        public struct Kxorb : ITypedInstruction<Kxorb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxorb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXORB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxorb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxorb src) => AsmMnemonics.KXORB;

            public static implicit operator AsmHexCode(Kxorb src) => src.Encoded;

            public static implicit operator Kxorb(AsmHexCode src) => new Kxorb(src);
        }

        public Kxorb kxorb() => default;

        [MethodImpl(Inline), Op]
        public Kxorb kxorb(AsmHexCode encoded) => new Kxorb(encoded);

        public struct Kxord : ITypedInstruction<Kxord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxord src) => AsmMnemonics.KXORD;

            public static implicit operator AsmHexCode(Kxord src) => src.Encoded;

            public static implicit operator Kxord(AsmHexCode src) => new Kxord(src);
        }

        public Kxord kxord() => default;

        [MethodImpl(Inline), Op]
        public Kxord kxord(AsmHexCode encoded) => new Kxord(encoded);

        public struct Kxorq : ITypedInstruction<Kxorq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxorq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxorq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxorq src) => AsmMnemonics.KXORQ;

            public static implicit operator AsmHexCode(Kxorq src) => src.Encoded;

            public static implicit operator Kxorq(AsmHexCode src) => new Kxorq(src);
        }

        public Kxorq kxorq() => default;

        [MethodImpl(Inline), Op]
        public Kxorq kxorq(AsmHexCode encoded) => new Kxorq(encoded);

        public struct Kxorw : ITypedInstruction<Kxorw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Kxorw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.KXORW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Kxorw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Kxorw src) => AsmMnemonics.KXORW;

            public static implicit operator AsmHexCode(Kxorw src) => src.Encoded;

            public static implicit operator Kxorw(AsmHexCode src) => new Kxorw(src);
        }

        public Kxorw kxorw() => default;

        [MethodImpl(Inline), Op]
        public Kxorw kxorw(AsmHexCode encoded) => new Kxorw(encoded);

        public struct Lahf : ITypedInstruction<Lahf>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lahf(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LAHF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lahf src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lahf src) => AsmMnemonics.LAHF;

            public static implicit operator AsmHexCode(Lahf src) => src.Encoded;

            public static implicit operator Lahf(AsmHexCode src) => new Lahf(src);
        }

        public Lahf lahf() => default;

        [MethodImpl(Inline), Op]
        public Lahf lahf(AsmHexCode encoded) => new Lahf(encoded);

        public struct Lar : ITypedInstruction<Lar>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lar(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lar src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lar src) => AsmMnemonics.LAR;

            public static implicit operator AsmHexCode(Lar src) => src.Encoded;

            public static implicit operator Lar(AsmHexCode src) => new Lar(src);
        }

        public Lar lar() => default;

        [MethodImpl(Inline), Op]
        public Lar lar(AsmHexCode encoded) => new Lar(encoded);

        public struct Lddqu : ITypedInstruction<Lddqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lddqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LDDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lddqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lddqu src) => AsmMnemonics.LDDQU;

            public static implicit operator AsmHexCode(Lddqu src) => src.Encoded;

            public static implicit operator Lddqu(AsmHexCode src) => new Lddqu(src);
        }

        public Lddqu lddqu() => default;

        [MethodImpl(Inline), Op]
        public Lddqu lddqu(AsmHexCode encoded) => new Lddqu(encoded);

        public struct Ldmxcsr : ITypedInstruction<Ldmxcsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ldmxcsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LDMXCSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ldmxcsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ldmxcsr src) => AsmMnemonics.LDMXCSR;

            public static implicit operator AsmHexCode(Ldmxcsr src) => src.Encoded;

            public static implicit operator Ldmxcsr(AsmHexCode src) => new Ldmxcsr(src);
        }

        public Ldmxcsr ldmxcsr() => default;

        [MethodImpl(Inline), Op]
        public Ldmxcsr ldmxcsr(AsmHexCode encoded) => new Ldmxcsr(encoded);

        public struct Lds : ITypedInstruction<Lds>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lds(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LDS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lds src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lds src) => AsmMnemonics.LDS;

            public static implicit operator AsmHexCode(Lds src) => src.Encoded;

            public static implicit operator Lds(AsmHexCode src) => new Lds(src);
        }

        public Lds lds() => default;

        [MethodImpl(Inline), Op]
        public Lds lds(AsmHexCode encoded) => new Lds(encoded);

        public struct Ldtilecfg : ITypedInstruction<Ldtilecfg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ldtilecfg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LDTILECFG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ldtilecfg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ldtilecfg src) => AsmMnemonics.LDTILECFG;

            public static implicit operator AsmHexCode(Ldtilecfg src) => src.Encoded;

            public static implicit operator Ldtilecfg(AsmHexCode src) => new Ldtilecfg(src);
        }

        public Ldtilecfg ldtilecfg() => default;

        [MethodImpl(Inline), Op]
        public Ldtilecfg ldtilecfg(AsmHexCode encoded) => new Ldtilecfg(encoded);

        public struct Lea : ITypedInstruction<Lea>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lea(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LEA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lea src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lea src) => AsmMnemonics.LEA;

            public static implicit operator AsmHexCode(Lea src) => src.Encoded;

            public static implicit operator Lea(AsmHexCode src) => new Lea(src);
        }

        public Lea lea() => default;

        [MethodImpl(Inline), Op]
        public Lea lea(AsmHexCode encoded) => new Lea(encoded);

        public struct Leave : ITypedInstruction<Leave>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Leave(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LEAVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Leave src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Leave src) => AsmMnemonics.LEAVE;

            public static implicit operator AsmHexCode(Leave src) => src.Encoded;

            public static implicit operator Leave(AsmHexCode src) => new Leave(src);
        }

        public Leave leave() => default;

        [MethodImpl(Inline), Op]
        public Leave leave(AsmHexCode encoded) => new Leave(encoded);

        public struct Les : ITypedInstruction<Les>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Les(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LES;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Les src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Les src) => AsmMnemonics.LES;

            public static implicit operator AsmHexCode(Les src) => src.Encoded;

            public static implicit operator Les(AsmHexCode src) => new Les(src);
        }

        public Les les() => default;

        [MethodImpl(Inline), Op]
        public Les les(AsmHexCode encoded) => new Les(encoded);

        public struct Lfence : ITypedInstruction<Lfence>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lfence(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LFENCE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lfence src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lfence src) => AsmMnemonics.LFENCE;

            public static implicit operator AsmHexCode(Lfence src) => src.Encoded;

            public static implicit operator Lfence(AsmHexCode src) => new Lfence(src);
        }

        public Lfence lfence() => default;

        [MethodImpl(Inline), Op]
        public Lfence lfence(AsmHexCode encoded) => new Lfence(encoded);

        public struct Lfs : ITypedInstruction<Lfs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lfs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LFS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lfs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lfs src) => AsmMnemonics.LFS;

            public static implicit operator AsmHexCode(Lfs src) => src.Encoded;

            public static implicit operator Lfs(AsmHexCode src) => new Lfs(src);
        }

        public Lfs lfs() => default;

        [MethodImpl(Inline), Op]
        public Lfs lfs(AsmHexCode encoded) => new Lfs(encoded);

        public struct Lgdt : ITypedInstruction<Lgdt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lgdt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LGDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lgdt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lgdt src) => AsmMnemonics.LGDT;

            public static implicit operator AsmHexCode(Lgdt src) => src.Encoded;

            public static implicit operator Lgdt(AsmHexCode src) => new Lgdt(src);
        }

        public Lgdt lgdt() => default;

        [MethodImpl(Inline), Op]
        public Lgdt lgdt(AsmHexCode encoded) => new Lgdt(encoded);

        public struct Lgs : ITypedInstruction<Lgs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lgs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LGS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lgs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lgs src) => AsmMnemonics.LGS;

            public static implicit operator AsmHexCode(Lgs src) => src.Encoded;

            public static implicit operator Lgs(AsmHexCode src) => new Lgs(src);
        }

        public Lgs lgs() => default;

        [MethodImpl(Inline), Op]
        public Lgs lgs(AsmHexCode encoded) => new Lgs(encoded);

        public struct Lidt : ITypedInstruction<Lidt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lidt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LIDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lidt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lidt src) => AsmMnemonics.LIDT;

            public static implicit operator AsmHexCode(Lidt src) => src.Encoded;

            public static implicit operator Lidt(AsmHexCode src) => new Lidt(src);
        }

        public Lidt lidt() => default;

        [MethodImpl(Inline), Op]
        public Lidt lidt(AsmHexCode encoded) => new Lidt(encoded);

        public struct Lldt : ITypedInstruction<Lldt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lldt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LLDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lldt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lldt src) => AsmMnemonics.LLDT;

            public static implicit operator AsmHexCode(Lldt src) => src.Encoded;

            public static implicit operator Lldt(AsmHexCode src) => new Lldt(src);
        }

        public Lldt lldt() => default;

        [MethodImpl(Inline), Op]
        public Lldt lldt(AsmHexCode encoded) => new Lldt(encoded);

        public struct Llwpcb : ITypedInstruction<Llwpcb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Llwpcb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LLWPCB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Llwpcb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Llwpcb src) => AsmMnemonics.LLWPCB;

            public static implicit operator AsmHexCode(Llwpcb src) => src.Encoded;

            public static implicit operator Llwpcb(AsmHexCode src) => new Llwpcb(src);
        }

        public Llwpcb llwpcb() => default;

        [MethodImpl(Inline), Op]
        public Llwpcb llwpcb(AsmHexCode encoded) => new Llwpcb(encoded);

        public struct Lmsw : ITypedInstruction<Lmsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lmsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LMSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lmsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lmsw src) => AsmMnemonics.LMSW;

            public static implicit operator AsmHexCode(Lmsw src) => src.Encoded;

            public static implicit operator Lmsw(AsmHexCode src) => new Lmsw(src);
        }

        public Lmsw lmsw() => default;

        [MethodImpl(Inline), Op]
        public Lmsw lmsw(AsmHexCode encoded) => new Lmsw(encoded);

        public struct Loadiwkey : ITypedInstruction<Loadiwkey>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Loadiwkey(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LOADIWKEY;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Loadiwkey src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Loadiwkey src) => AsmMnemonics.LOADIWKEY;

            public static implicit operator AsmHexCode(Loadiwkey src) => src.Encoded;

            public static implicit operator Loadiwkey(AsmHexCode src) => new Loadiwkey(src);
        }

        public Loadiwkey loadiwkey() => default;

        [MethodImpl(Inline), Op]
        public Loadiwkey loadiwkey(AsmHexCode encoded) => new Loadiwkey(encoded);

        public struct Lodsb : ITypedInstruction<Lodsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lodsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LODSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lodsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lodsb src) => AsmMnemonics.LODSB;

            public static implicit operator AsmHexCode(Lodsb src) => src.Encoded;

            public static implicit operator Lodsb(AsmHexCode src) => new Lodsb(src);
        }

        public Lodsb lodsb() => default;

        [MethodImpl(Inline), Op]
        public Lodsb lodsb(AsmHexCode encoded) => new Lodsb(encoded);

        public struct Lodsd : ITypedInstruction<Lodsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lodsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LODSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lodsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lodsd src) => AsmMnemonics.LODSD;

            public static implicit operator AsmHexCode(Lodsd src) => src.Encoded;

            public static implicit operator Lodsd(AsmHexCode src) => new Lodsd(src);
        }

        public Lodsd lodsd() => default;

        [MethodImpl(Inline), Op]
        public Lodsd lodsd(AsmHexCode encoded) => new Lodsd(encoded);

        public struct Lodsq : ITypedInstruction<Lodsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lodsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LODSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lodsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lodsq src) => AsmMnemonics.LODSQ;

            public static implicit operator AsmHexCode(Lodsq src) => src.Encoded;

            public static implicit operator Lodsq(AsmHexCode src) => new Lodsq(src);
        }

        public Lodsq lodsq() => default;

        [MethodImpl(Inline), Op]
        public Lodsq lodsq(AsmHexCode encoded) => new Lodsq(encoded);

        public struct Lodsw : ITypedInstruction<Lodsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lodsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LODSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lodsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lodsw src) => AsmMnemonics.LODSW;

            public static implicit operator AsmHexCode(Lodsw src) => src.Encoded;

            public static implicit operator Lodsw(AsmHexCode src) => new Lodsw(src);
        }

        public Lodsw lodsw() => default;

        [MethodImpl(Inline), Op]
        public Lodsw lodsw(AsmHexCode encoded) => new Lodsw(encoded);

        public struct Loop : ITypedInstruction<Loop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Loop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LOOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Loop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Loop src) => AsmMnemonics.LOOP;

            public static implicit operator AsmHexCode(Loop src) => src.Encoded;

            public static implicit operator Loop(AsmHexCode src) => new Loop(src);
        }

        public Loop loop() => default;

        [MethodImpl(Inline), Op]
        public Loop loop(AsmHexCode encoded) => new Loop(encoded);

        public struct Loope : ITypedInstruction<Loope>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Loope(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LOOPE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Loope src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Loope src) => AsmMnemonics.LOOPE;

            public static implicit operator AsmHexCode(Loope src) => src.Encoded;

            public static implicit operator Loope(AsmHexCode src) => new Loope(src);
        }

        public Loope loope() => default;

        [MethodImpl(Inline), Op]
        public Loope loope(AsmHexCode encoded) => new Loope(encoded);

        public struct Loopne : ITypedInstruction<Loopne>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Loopne(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LOOPNE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Loopne src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Loopne src) => AsmMnemonics.LOOPNE;

            public static implicit operator AsmHexCode(Loopne src) => src.Encoded;

            public static implicit operator Loopne(AsmHexCode src) => new Loopne(src);
        }

        public Loopne loopne() => default;

        [MethodImpl(Inline), Op]
        public Loopne loopne(AsmHexCode encoded) => new Loopne(encoded);

        public struct Lsl : ITypedInstruction<Lsl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lsl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LSL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lsl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lsl src) => AsmMnemonics.LSL;

            public static implicit operator AsmHexCode(Lsl src) => src.Encoded;

            public static implicit operator Lsl(AsmHexCode src) => new Lsl(src);
        }

        public Lsl lsl() => default;

        [MethodImpl(Inline), Op]
        public Lsl lsl(AsmHexCode encoded) => new Lsl(encoded);

        public struct Lss : ITypedInstruction<Lss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lss src) => AsmMnemonics.LSS;

            public static implicit operator AsmHexCode(Lss src) => src.Encoded;

            public static implicit operator Lss(AsmHexCode src) => new Lss(src);
        }

        public Lss lss() => default;

        [MethodImpl(Inline), Op]
        public Lss lss(AsmHexCode encoded) => new Lss(encoded);

        public struct Ltr : ITypedInstruction<Ltr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ltr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LTR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ltr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ltr src) => AsmMnemonics.LTR;

            public static implicit operator AsmHexCode(Ltr src) => src.Encoded;

            public static implicit operator Ltr(AsmHexCode src) => new Ltr(src);
        }

        public Ltr ltr() => default;

        [MethodImpl(Inline), Op]
        public Ltr ltr(AsmHexCode encoded) => new Ltr(encoded);

        public struct Lwpins : ITypedInstruction<Lwpins>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lwpins(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LWPINS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lwpins src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lwpins src) => AsmMnemonics.LWPINS;

            public static implicit operator AsmHexCode(Lwpins src) => src.Encoded;

            public static implicit operator Lwpins(AsmHexCode src) => new Lwpins(src);
        }

        public Lwpins lwpins() => default;

        [MethodImpl(Inline), Op]
        public Lwpins lwpins(AsmHexCode encoded) => new Lwpins(encoded);

        public struct Lwpval : ITypedInstruction<Lwpval>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lwpval(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LWPVAL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lwpval src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lwpval src) => AsmMnemonics.LWPVAL;

            public static implicit operator AsmHexCode(Lwpval src) => src.Encoded;

            public static implicit operator Lwpval(AsmHexCode src) => new Lwpval(src);
        }

        public Lwpval lwpval() => default;

        [MethodImpl(Inline), Op]
        public Lwpval lwpval(AsmHexCode encoded) => new Lwpval(encoded);

        public struct Lzcnt : ITypedInstruction<Lzcnt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Lzcnt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.LZCNT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Lzcnt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Lzcnt src) => AsmMnemonics.LZCNT;

            public static implicit operator AsmHexCode(Lzcnt src) => src.Encoded;

            public static implicit operator Lzcnt(AsmHexCode src) => new Lzcnt(src);
        }

        public Lzcnt lzcnt() => default;

        [MethodImpl(Inline), Op]
        public Lzcnt lzcnt(AsmHexCode encoded) => new Lzcnt(encoded);

        public struct Maskmovdqu : ITypedInstruction<Maskmovdqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maskmovdqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MASKMOVDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maskmovdqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maskmovdqu src) => AsmMnemonics.MASKMOVDQU;

            public static implicit operator AsmHexCode(Maskmovdqu src) => src.Encoded;

            public static implicit operator Maskmovdqu(AsmHexCode src) => new Maskmovdqu(src);
        }

        public Maskmovdqu maskmovdqu() => default;

        [MethodImpl(Inline), Op]
        public Maskmovdqu maskmovdqu(AsmHexCode encoded) => new Maskmovdqu(encoded);

        public struct Maskmovq : ITypedInstruction<Maskmovq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maskmovq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MASKMOVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maskmovq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maskmovq src) => AsmMnemonics.MASKMOVQ;

            public static implicit operator AsmHexCode(Maskmovq src) => src.Encoded;

            public static implicit operator Maskmovq(AsmHexCode src) => new Maskmovq(src);
        }

        public Maskmovq maskmovq() => default;

        [MethodImpl(Inline), Op]
        public Maskmovq maskmovq(AsmHexCode encoded) => new Maskmovq(encoded);

        public struct Maxpd : ITypedInstruction<Maxpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maxpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MAXPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maxpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maxpd src) => AsmMnemonics.MAXPD;

            public static implicit operator AsmHexCode(Maxpd src) => src.Encoded;

            public static implicit operator Maxpd(AsmHexCode src) => new Maxpd(src);
        }

        public Maxpd maxpd() => default;

        [MethodImpl(Inline), Op]
        public Maxpd maxpd(AsmHexCode encoded) => new Maxpd(encoded);

        public struct Maxps : ITypedInstruction<Maxps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maxps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MAXPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maxps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maxps src) => AsmMnemonics.MAXPS;

            public static implicit operator AsmHexCode(Maxps src) => src.Encoded;

            public static implicit operator Maxps(AsmHexCode src) => new Maxps(src);
        }

        public Maxps maxps() => default;

        [MethodImpl(Inline), Op]
        public Maxps maxps(AsmHexCode encoded) => new Maxps(encoded);

        public struct Maxsd : ITypedInstruction<Maxsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maxsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MAXSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maxsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maxsd src) => AsmMnemonics.MAXSD;

            public static implicit operator AsmHexCode(Maxsd src) => src.Encoded;

            public static implicit operator Maxsd(AsmHexCode src) => new Maxsd(src);
        }

        public Maxsd maxsd() => default;

        [MethodImpl(Inline), Op]
        public Maxsd maxsd(AsmHexCode encoded) => new Maxsd(encoded);

        public struct Maxss : ITypedInstruction<Maxss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Maxss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MAXSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Maxss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Maxss src) => AsmMnemonics.MAXSS;

            public static implicit operator AsmHexCode(Maxss src) => src.Encoded;

            public static implicit operator Maxss(AsmHexCode src) => new Maxss(src);
        }

        public Maxss maxss() => default;

        [MethodImpl(Inline), Op]
        public Maxss maxss(AsmHexCode encoded) => new Maxss(encoded);

        public struct Mcommit : ITypedInstruction<Mcommit>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mcommit(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MCOMMIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mcommit src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mcommit src) => AsmMnemonics.MCOMMIT;

            public static implicit operator AsmHexCode(Mcommit src) => src.Encoded;

            public static implicit operator Mcommit(AsmHexCode src) => new Mcommit(src);
        }

        public Mcommit mcommit() => default;

        [MethodImpl(Inline), Op]
        public Mcommit mcommit(AsmHexCode encoded) => new Mcommit(encoded);

        public struct Mfence : ITypedInstruction<Mfence>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mfence(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MFENCE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mfence src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mfence src) => AsmMnemonics.MFENCE;

            public static implicit operator AsmHexCode(Mfence src) => src.Encoded;

            public static implicit operator Mfence(AsmHexCode src) => new Mfence(src);
        }

        public Mfence mfence() => default;

        [MethodImpl(Inline), Op]
        public Mfence mfence(AsmHexCode encoded) => new Mfence(encoded);

        public struct Minpd : ITypedInstruction<Minpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Minpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MINPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Minpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Minpd src) => AsmMnemonics.MINPD;

            public static implicit operator AsmHexCode(Minpd src) => src.Encoded;

            public static implicit operator Minpd(AsmHexCode src) => new Minpd(src);
        }

        public Minpd minpd() => default;

        [MethodImpl(Inline), Op]
        public Minpd minpd(AsmHexCode encoded) => new Minpd(encoded);

        public struct Minps : ITypedInstruction<Minps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Minps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MINPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Minps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Minps src) => AsmMnemonics.MINPS;

            public static implicit operator AsmHexCode(Minps src) => src.Encoded;

            public static implicit operator Minps(AsmHexCode src) => new Minps(src);
        }

        public Minps minps() => default;

        [MethodImpl(Inline), Op]
        public Minps minps(AsmHexCode encoded) => new Minps(encoded);

        public struct Minsd : ITypedInstruction<Minsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Minsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MINSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Minsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Minsd src) => AsmMnemonics.MINSD;

            public static implicit operator AsmHexCode(Minsd src) => src.Encoded;

            public static implicit operator Minsd(AsmHexCode src) => new Minsd(src);
        }

        public Minsd minsd() => default;

        [MethodImpl(Inline), Op]
        public Minsd minsd(AsmHexCode encoded) => new Minsd(encoded);

        public struct Minss : ITypedInstruction<Minss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Minss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MINSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Minss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Minss src) => AsmMnemonics.MINSS;

            public static implicit operator AsmHexCode(Minss src) => src.Encoded;

            public static implicit operator Minss(AsmHexCode src) => new Minss(src);
        }

        public Minss minss() => default;

        [MethodImpl(Inline), Op]
        public Minss minss(AsmHexCode encoded) => new Minss(encoded);

        public struct Monitor : ITypedInstruction<Monitor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Monitor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MONITOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Monitor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Monitor src) => AsmMnemonics.MONITOR;

            public static implicit operator AsmHexCode(Monitor src) => src.Encoded;

            public static implicit operator Monitor(AsmHexCode src) => new Monitor(src);
        }

        public Monitor monitor() => default;

        [MethodImpl(Inline), Op]
        public Monitor monitor(AsmHexCode encoded) => new Monitor(encoded);

        public struct Monitorx : ITypedInstruction<Monitorx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Monitorx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MONITORX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Monitorx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Monitorx src) => AsmMnemonics.MONITORX;

            public static implicit operator AsmHexCode(Monitorx src) => src.Encoded;

            public static implicit operator Monitorx(AsmHexCode src) => new Monitorx(src);
        }

        public Monitorx monitorx() => default;

        [MethodImpl(Inline), Op]
        public Monitorx monitorx(AsmHexCode encoded) => new Monitorx(encoded);

        public struct Mov : ITypedInstruction<Mov>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mov(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mov src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mov src) => AsmMnemonics.MOV;

            public static implicit operator AsmHexCode(Mov src) => src.Encoded;

            public static implicit operator Mov(AsmHexCode src) => new Mov(src);
        }

        public Mov mov() => default;

        [MethodImpl(Inline), Op]
        public Mov mov(AsmHexCode encoded) => new Mov(encoded);

        public struct Mov_cr : ITypedInstruction<Mov_cr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mov_cr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOV_CR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mov_cr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mov_cr src) => AsmMnemonics.MOV_CR;

            public static implicit operator AsmHexCode(Mov_cr src) => src.Encoded;

            public static implicit operator Mov_cr(AsmHexCode src) => new Mov_cr(src);
        }

        public Mov_cr mov_cr() => default;

        [MethodImpl(Inline), Op]
        public Mov_cr mov_cr(AsmHexCode encoded) => new Mov_cr(encoded);

        public struct Mov_dr : ITypedInstruction<Mov_dr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mov_dr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOV_DR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mov_dr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mov_dr src) => AsmMnemonics.MOV_DR;

            public static implicit operator AsmHexCode(Mov_dr src) => src.Encoded;

            public static implicit operator Mov_dr(AsmHexCode src) => new Mov_dr(src);
        }

        public Mov_dr mov_dr() => default;

        [MethodImpl(Inline), Op]
        public Mov_dr mov_dr(AsmHexCode encoded) => new Mov_dr(encoded);

        public struct Movapd : ITypedInstruction<Movapd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movapd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVAPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movapd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movapd src) => AsmMnemonics.MOVAPD;

            public static implicit operator AsmHexCode(Movapd src) => src.Encoded;

            public static implicit operator Movapd(AsmHexCode src) => new Movapd(src);
        }

        public Movapd movapd() => default;

        [MethodImpl(Inline), Op]
        public Movapd movapd(AsmHexCode encoded) => new Movapd(encoded);

        public struct Movaps : ITypedInstruction<Movaps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movaps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVAPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movaps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movaps src) => AsmMnemonics.MOVAPS;

            public static implicit operator AsmHexCode(Movaps src) => src.Encoded;

            public static implicit operator Movaps(AsmHexCode src) => new Movaps(src);
        }

        public Movaps movaps() => default;

        [MethodImpl(Inline), Op]
        public Movaps movaps(AsmHexCode encoded) => new Movaps(encoded);

        public struct Movbe : ITypedInstruction<Movbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movbe src) => AsmMnemonics.MOVBE;

            public static implicit operator AsmHexCode(Movbe src) => src.Encoded;

            public static implicit operator Movbe(AsmHexCode src) => new Movbe(src);
        }

        public Movbe movbe() => default;

        [MethodImpl(Inline), Op]
        public Movbe movbe(AsmHexCode encoded) => new Movbe(encoded);

        public struct Movd : ITypedInstruction<Movd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movd src) => AsmMnemonics.MOVD;

            public static implicit operator AsmHexCode(Movd src) => src.Encoded;

            public static implicit operator Movd(AsmHexCode src) => new Movd(src);
        }

        public Movd movd() => default;

        [MethodImpl(Inline), Op]
        public Movd movd(AsmHexCode encoded) => new Movd(encoded);

        public struct Movddup : ITypedInstruction<Movddup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movddup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movddup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movddup src) => AsmMnemonics.MOVDDUP;

            public static implicit operator AsmHexCode(Movddup src) => src.Encoded;

            public static implicit operator Movddup(AsmHexCode src) => new Movddup(src);
        }

        public Movddup movddup() => default;

        [MethodImpl(Inline), Op]
        public Movddup movddup(AsmHexCode encoded) => new Movddup(encoded);

        public struct Movdir64b : ITypedInstruction<Movdir64b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movdir64b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDIR64B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movdir64b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movdir64b src) => AsmMnemonics.MOVDIR64B;

            public static implicit operator AsmHexCode(Movdir64b src) => src.Encoded;

            public static implicit operator Movdir64b(AsmHexCode src) => new Movdir64b(src);
        }

        public Movdir64b movdir64b() => default;

        [MethodImpl(Inline), Op]
        public Movdir64b movdir64b(AsmHexCode encoded) => new Movdir64b(encoded);

        public struct Movdiri : ITypedInstruction<Movdiri>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movdiri(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDIRI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movdiri src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movdiri src) => AsmMnemonics.MOVDIRI;

            public static implicit operator AsmHexCode(Movdiri src) => src.Encoded;

            public static implicit operator Movdiri(AsmHexCode src) => new Movdiri(src);
        }

        public Movdiri movdiri() => default;

        [MethodImpl(Inline), Op]
        public Movdiri movdiri(AsmHexCode encoded) => new Movdiri(encoded);

        public struct Movdq2q : ITypedInstruction<Movdq2q>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movdq2q(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDQ2Q;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movdq2q src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movdq2q src) => AsmMnemonics.MOVDQ2Q;

            public static implicit operator AsmHexCode(Movdq2q src) => src.Encoded;

            public static implicit operator Movdq2q(AsmHexCode src) => new Movdq2q(src);
        }

        public Movdq2q movdq2q() => default;

        [MethodImpl(Inline), Op]
        public Movdq2q movdq2q(AsmHexCode encoded) => new Movdq2q(encoded);

        public struct Movdqa : ITypedInstruction<Movdqa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movdqa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDQA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movdqa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movdqa src) => AsmMnemonics.MOVDQA;

            public static implicit operator AsmHexCode(Movdqa src) => src.Encoded;

            public static implicit operator Movdqa(AsmHexCode src) => new Movdqa(src);
        }

        public Movdqa movdqa() => default;

        [MethodImpl(Inline), Op]
        public Movdqa movdqa(AsmHexCode encoded) => new Movdqa(encoded);

        public struct Movdqu : ITypedInstruction<Movdqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movdqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movdqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movdqu src) => AsmMnemonics.MOVDQU;

            public static implicit operator AsmHexCode(Movdqu src) => src.Encoded;

            public static implicit operator Movdqu(AsmHexCode src) => new Movdqu(src);
        }

        public Movdqu movdqu() => default;

        [MethodImpl(Inline), Op]
        public Movdqu movdqu(AsmHexCode encoded) => new Movdqu(encoded);

        public struct Movhlps : ITypedInstruction<Movhlps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movhlps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVHLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movhlps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movhlps src) => AsmMnemonics.MOVHLPS;

            public static implicit operator AsmHexCode(Movhlps src) => src.Encoded;

            public static implicit operator Movhlps(AsmHexCode src) => new Movhlps(src);
        }

        public Movhlps movhlps() => default;

        [MethodImpl(Inline), Op]
        public Movhlps movhlps(AsmHexCode encoded) => new Movhlps(encoded);

        public struct Movhpd : ITypedInstruction<Movhpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movhpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVHPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movhpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movhpd src) => AsmMnemonics.MOVHPD;

            public static implicit operator AsmHexCode(Movhpd src) => src.Encoded;

            public static implicit operator Movhpd(AsmHexCode src) => new Movhpd(src);
        }

        public Movhpd movhpd() => default;

        [MethodImpl(Inline), Op]
        public Movhpd movhpd(AsmHexCode encoded) => new Movhpd(encoded);

        public struct Movhps : ITypedInstruction<Movhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movhps src) => AsmMnemonics.MOVHPS;

            public static implicit operator AsmHexCode(Movhps src) => src.Encoded;

            public static implicit operator Movhps(AsmHexCode src) => new Movhps(src);
        }

        public Movhps movhps() => default;

        [MethodImpl(Inline), Op]
        public Movhps movhps(AsmHexCode encoded) => new Movhps(encoded);

        public struct Movlhps : ITypedInstruction<Movlhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movlhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVLHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movlhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movlhps src) => AsmMnemonics.MOVLHPS;

            public static implicit operator AsmHexCode(Movlhps src) => src.Encoded;

            public static implicit operator Movlhps(AsmHexCode src) => new Movlhps(src);
        }

        public Movlhps movlhps() => default;

        [MethodImpl(Inline), Op]
        public Movlhps movlhps(AsmHexCode encoded) => new Movlhps(encoded);

        public struct Movlpd : ITypedInstruction<Movlpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movlpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVLPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movlpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movlpd src) => AsmMnemonics.MOVLPD;

            public static implicit operator AsmHexCode(Movlpd src) => src.Encoded;

            public static implicit operator Movlpd(AsmHexCode src) => new Movlpd(src);
        }

        public Movlpd movlpd() => default;

        [MethodImpl(Inline), Op]
        public Movlpd movlpd(AsmHexCode encoded) => new Movlpd(encoded);

        public struct Movlps : ITypedInstruction<Movlps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movlps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movlps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movlps src) => AsmMnemonics.MOVLPS;

            public static implicit operator AsmHexCode(Movlps src) => src.Encoded;

            public static implicit operator Movlps(AsmHexCode src) => new Movlps(src);
        }

        public Movlps movlps() => default;

        [MethodImpl(Inline), Op]
        public Movlps movlps(AsmHexCode encoded) => new Movlps(encoded);

        public struct Movmskpd : ITypedInstruction<Movmskpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movmskpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVMSKPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movmskpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movmskpd src) => AsmMnemonics.MOVMSKPD;

            public static implicit operator AsmHexCode(Movmskpd src) => src.Encoded;

            public static implicit operator Movmskpd(AsmHexCode src) => new Movmskpd(src);
        }

        public Movmskpd movmskpd() => default;

        [MethodImpl(Inline), Op]
        public Movmskpd movmskpd(AsmHexCode encoded) => new Movmskpd(encoded);

        public struct Movmskps : ITypedInstruction<Movmskps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movmskps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVMSKPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movmskps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movmskps src) => AsmMnemonics.MOVMSKPS;

            public static implicit operator AsmHexCode(Movmskps src) => src.Encoded;

            public static implicit operator Movmskps(AsmHexCode src) => new Movmskps(src);
        }

        public Movmskps movmskps() => default;

        [MethodImpl(Inline), Op]
        public Movmskps movmskps(AsmHexCode encoded) => new Movmskps(encoded);

        public struct Movntdq : ITypedInstruction<Movntdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntdq src) => AsmMnemonics.MOVNTDQ;

            public static implicit operator AsmHexCode(Movntdq src) => src.Encoded;

            public static implicit operator Movntdq(AsmHexCode src) => new Movntdq(src);
        }

        public Movntdq movntdq() => default;

        [MethodImpl(Inline), Op]
        public Movntdq movntdq(AsmHexCode encoded) => new Movntdq(encoded);

        public struct Movntdqa : ITypedInstruction<Movntdqa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntdqa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTDQA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntdqa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntdqa src) => AsmMnemonics.MOVNTDQA;

            public static implicit operator AsmHexCode(Movntdqa src) => src.Encoded;

            public static implicit operator Movntdqa(AsmHexCode src) => new Movntdqa(src);
        }

        public Movntdqa movntdqa() => default;

        [MethodImpl(Inline), Op]
        public Movntdqa movntdqa(AsmHexCode encoded) => new Movntdqa(encoded);

        public struct Movnti : ITypedInstruction<Movnti>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movnti(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movnti src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movnti src) => AsmMnemonics.MOVNTI;

            public static implicit operator AsmHexCode(Movnti src) => src.Encoded;

            public static implicit operator Movnti(AsmHexCode src) => new Movnti(src);
        }

        public Movnti movnti() => default;

        [MethodImpl(Inline), Op]
        public Movnti movnti(AsmHexCode encoded) => new Movnti(encoded);

        public struct Movntpd : ITypedInstruction<Movntpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntpd src) => AsmMnemonics.MOVNTPD;

            public static implicit operator AsmHexCode(Movntpd src) => src.Encoded;

            public static implicit operator Movntpd(AsmHexCode src) => new Movntpd(src);
        }

        public Movntpd movntpd() => default;

        [MethodImpl(Inline), Op]
        public Movntpd movntpd(AsmHexCode encoded) => new Movntpd(encoded);

        public struct Movntps : ITypedInstruction<Movntps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntps src) => AsmMnemonics.MOVNTPS;

            public static implicit operator AsmHexCode(Movntps src) => src.Encoded;

            public static implicit operator Movntps(AsmHexCode src) => new Movntps(src);
        }

        public Movntps movntps() => default;

        [MethodImpl(Inline), Op]
        public Movntps movntps(AsmHexCode encoded) => new Movntps(encoded);

        public struct Movntq : ITypedInstruction<Movntq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntq src) => AsmMnemonics.MOVNTQ;

            public static implicit operator AsmHexCode(Movntq src) => src.Encoded;

            public static implicit operator Movntq(AsmHexCode src) => new Movntq(src);
        }

        public Movntq movntq() => default;

        [MethodImpl(Inline), Op]
        public Movntq movntq(AsmHexCode encoded) => new Movntq(encoded);

        public struct Movntsd : ITypedInstruction<Movntsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntsd src) => AsmMnemonics.MOVNTSD;

            public static implicit operator AsmHexCode(Movntsd src) => src.Encoded;

            public static implicit operator Movntsd(AsmHexCode src) => new Movntsd(src);
        }

        public Movntsd movntsd() => default;

        [MethodImpl(Inline), Op]
        public Movntsd movntsd(AsmHexCode encoded) => new Movntsd(encoded);

        public struct Movntss : ITypedInstruction<Movntss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movntss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVNTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movntss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movntss src) => AsmMnemonics.MOVNTSS;

            public static implicit operator AsmHexCode(Movntss src) => src.Encoded;

            public static implicit operator Movntss(AsmHexCode src) => new Movntss(src);
        }

        public Movntss movntss() => default;

        [MethodImpl(Inline), Op]
        public Movntss movntss(AsmHexCode encoded) => new Movntss(encoded);

        public struct Movq : ITypedInstruction<Movq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movq src) => AsmMnemonics.MOVQ;

            public static implicit operator AsmHexCode(Movq src) => src.Encoded;

            public static implicit operator Movq(AsmHexCode src) => new Movq(src);
        }

        public Movq movq() => default;

        [MethodImpl(Inline), Op]
        public Movq movq(AsmHexCode encoded) => new Movq(encoded);

        public struct Movq2dq : ITypedInstruction<Movq2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movq2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVQ2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movq2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movq2dq src) => AsmMnemonics.MOVQ2DQ;

            public static implicit operator AsmHexCode(Movq2dq src) => src.Encoded;

            public static implicit operator Movq2dq(AsmHexCode src) => new Movq2dq(src);
        }

        public Movq2dq movq2dq() => default;

        [MethodImpl(Inline), Op]
        public Movq2dq movq2dq(AsmHexCode encoded) => new Movq2dq(encoded);

        public struct Movsb : ITypedInstruction<Movsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsb src) => AsmMnemonics.MOVSB;

            public static implicit operator AsmHexCode(Movsb src) => src.Encoded;

            public static implicit operator Movsb(AsmHexCode src) => new Movsb(src);
        }

        public Movsb movsb() => default;

        [MethodImpl(Inline), Op]
        public Movsb movsb(AsmHexCode encoded) => new Movsb(encoded);

        public struct Movsd : ITypedInstruction<Movsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsd src) => AsmMnemonics.MOVSD;

            public static implicit operator AsmHexCode(Movsd src) => src.Encoded;

            public static implicit operator Movsd(AsmHexCode src) => new Movsd(src);
        }

        public Movsd movsd() => default;

        [MethodImpl(Inline), Op]
        public Movsd movsd(AsmHexCode encoded) => new Movsd(encoded);

        public struct Movsd_xmm : ITypedInstruction<Movsd_xmm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsd_xmm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSD_XMM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsd_xmm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsd_xmm src) => AsmMnemonics.MOVSD_XMM;

            public static implicit operator AsmHexCode(Movsd_xmm src) => src.Encoded;

            public static implicit operator Movsd_xmm(AsmHexCode src) => new Movsd_xmm(src);
        }

        public Movsd_xmm movsd_xmm() => default;

        [MethodImpl(Inline), Op]
        public Movsd_xmm movsd_xmm(AsmHexCode encoded) => new Movsd_xmm(encoded);

        public struct Movshdup : ITypedInstruction<Movshdup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movshdup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSHDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movshdup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movshdup src) => AsmMnemonics.MOVSHDUP;

            public static implicit operator AsmHexCode(Movshdup src) => src.Encoded;

            public static implicit operator Movshdup(AsmHexCode src) => new Movshdup(src);
        }

        public Movshdup movshdup() => default;

        [MethodImpl(Inline), Op]
        public Movshdup movshdup(AsmHexCode encoded) => new Movshdup(encoded);

        public struct Movsldup : ITypedInstruction<Movsldup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsldup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSLDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsldup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsldup src) => AsmMnemonics.MOVSLDUP;

            public static implicit operator AsmHexCode(Movsldup src) => src.Encoded;

            public static implicit operator Movsldup(AsmHexCode src) => new Movsldup(src);
        }

        public Movsldup movsldup() => default;

        [MethodImpl(Inline), Op]
        public Movsldup movsldup(AsmHexCode encoded) => new Movsldup(encoded);

        public struct Movsq : ITypedInstruction<Movsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsq src) => AsmMnemonics.MOVSQ;

            public static implicit operator AsmHexCode(Movsq src) => src.Encoded;

            public static implicit operator Movsq(AsmHexCode src) => new Movsq(src);
        }

        public Movsq movsq() => default;

        [MethodImpl(Inline), Op]
        public Movsq movsq(AsmHexCode encoded) => new Movsq(encoded);

        public struct Movss : ITypedInstruction<Movss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movss src) => AsmMnemonics.MOVSS;

            public static implicit operator AsmHexCode(Movss src) => src.Encoded;

            public static implicit operator Movss(AsmHexCode src) => new Movss(src);
        }

        public Movss movss() => default;

        [MethodImpl(Inline), Op]
        public Movss movss(AsmHexCode encoded) => new Movss(encoded);

        public struct Movsw : ITypedInstruction<Movsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsw src) => AsmMnemonics.MOVSW;

            public static implicit operator AsmHexCode(Movsw src) => src.Encoded;

            public static implicit operator Movsw(AsmHexCode src) => new Movsw(src);
        }

        public Movsw movsw() => default;

        [MethodImpl(Inline), Op]
        public Movsw movsw(AsmHexCode encoded) => new Movsw(encoded);

        public struct Movsx : ITypedInstruction<Movsx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsx src) => AsmMnemonics.MOVSX;

            public static implicit operator AsmHexCode(Movsx src) => src.Encoded;

            public static implicit operator Movsx(AsmHexCode src) => new Movsx(src);
        }

        public Movsx movsx() => default;

        [MethodImpl(Inline), Op]
        public Movsx movsx(AsmHexCode encoded) => new Movsx(encoded);

        public struct Movsxd : ITypedInstruction<Movsxd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movsxd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVSXD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movsxd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movsxd src) => AsmMnemonics.MOVSXD;

            public static implicit operator AsmHexCode(Movsxd src) => src.Encoded;

            public static implicit operator Movsxd(AsmHexCode src) => new Movsxd(src);
        }

        public Movsxd movsxd() => default;

        [MethodImpl(Inline), Op]
        public Movsxd movsxd(AsmHexCode encoded) => new Movsxd(encoded);

        public struct Movupd : ITypedInstruction<Movupd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movupd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVUPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movupd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movupd src) => AsmMnemonics.MOVUPD;

            public static implicit operator AsmHexCode(Movupd src) => src.Encoded;

            public static implicit operator Movupd(AsmHexCode src) => new Movupd(src);
        }

        public Movupd movupd() => default;

        [MethodImpl(Inline), Op]
        public Movupd movupd(AsmHexCode encoded) => new Movupd(encoded);

        public struct Movups : ITypedInstruction<Movups>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movups(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVUPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movups src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movups src) => AsmMnemonics.MOVUPS;

            public static implicit operator AsmHexCode(Movups src) => src.Encoded;

            public static implicit operator Movups(AsmHexCode src) => new Movups(src);
        }

        public Movups movups() => default;

        [MethodImpl(Inline), Op]
        public Movups movups(AsmHexCode encoded) => new Movups(encoded);

        public struct Movzx : ITypedInstruction<Movzx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Movzx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MOVZX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Movzx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Movzx src) => AsmMnemonics.MOVZX;

            public static implicit operator AsmHexCode(Movzx src) => src.Encoded;

            public static implicit operator Movzx(AsmHexCode src) => new Movzx(src);
        }

        public Movzx movzx() => default;

        [MethodImpl(Inline), Op]
        public Movzx movzx(AsmHexCode encoded) => new Movzx(encoded);

        public struct Mpsadbw : ITypedInstruction<Mpsadbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mpsadbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MPSADBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mpsadbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mpsadbw src) => AsmMnemonics.MPSADBW;

            public static implicit operator AsmHexCode(Mpsadbw src) => src.Encoded;

            public static implicit operator Mpsadbw(AsmHexCode src) => new Mpsadbw(src);
        }

        public Mpsadbw mpsadbw() => default;

        [MethodImpl(Inline), Op]
        public Mpsadbw mpsadbw(AsmHexCode encoded) => new Mpsadbw(encoded);

        public struct Mul : ITypedInstruction<Mul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mul src) => AsmMnemonics.MUL;

            public static implicit operator AsmHexCode(Mul src) => src.Encoded;

            public static implicit operator Mul(AsmHexCode src) => new Mul(src);
        }

        public Mul mul() => default;

        [MethodImpl(Inline), Op]
        public Mul mul(AsmHexCode encoded) => new Mul(encoded);

        public struct Mulpd : ITypedInstruction<Mulpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mulpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MULPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mulpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mulpd src) => AsmMnemonics.MULPD;

            public static implicit operator AsmHexCode(Mulpd src) => src.Encoded;

            public static implicit operator Mulpd(AsmHexCode src) => new Mulpd(src);
        }

        public Mulpd mulpd() => default;

        [MethodImpl(Inline), Op]
        public Mulpd mulpd(AsmHexCode encoded) => new Mulpd(encoded);

        public struct Mulps : ITypedInstruction<Mulps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mulps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MULPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mulps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mulps src) => AsmMnemonics.MULPS;

            public static implicit operator AsmHexCode(Mulps src) => src.Encoded;

            public static implicit operator Mulps(AsmHexCode src) => new Mulps(src);
        }

        public Mulps mulps() => default;

        [MethodImpl(Inline), Op]
        public Mulps mulps(AsmHexCode encoded) => new Mulps(encoded);

        public struct Mulsd : ITypedInstruction<Mulsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mulsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MULSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mulsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mulsd src) => AsmMnemonics.MULSD;

            public static implicit operator AsmHexCode(Mulsd src) => src.Encoded;

            public static implicit operator Mulsd(AsmHexCode src) => new Mulsd(src);
        }

        public Mulsd mulsd() => default;

        [MethodImpl(Inline), Op]
        public Mulsd mulsd(AsmHexCode encoded) => new Mulsd(encoded);

        public struct Mulss : ITypedInstruction<Mulss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mulss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MULSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mulss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mulss src) => AsmMnemonics.MULSS;

            public static implicit operator AsmHexCode(Mulss src) => src.Encoded;

            public static implicit operator Mulss(AsmHexCode src) => new Mulss(src);
        }

        public Mulss mulss() => default;

        [MethodImpl(Inline), Op]
        public Mulss mulss(AsmHexCode encoded) => new Mulss(encoded);

        public struct Mulx : ITypedInstruction<Mulx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mulx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MULX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mulx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mulx src) => AsmMnemonics.MULX;

            public static implicit operator AsmHexCode(Mulx src) => src.Encoded;

            public static implicit operator Mulx(AsmHexCode src) => new Mulx(src);
        }

        public Mulx mulx() => default;

        [MethodImpl(Inline), Op]
        public Mulx mulx(AsmHexCode encoded) => new Mulx(encoded);

        public struct Mwait : ITypedInstruction<Mwait>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mwait(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MWAIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mwait src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mwait src) => AsmMnemonics.MWAIT;

            public static implicit operator AsmHexCode(Mwait src) => src.Encoded;

            public static implicit operator Mwait(AsmHexCode src) => new Mwait(src);
        }

        public Mwait mwait() => default;

        [MethodImpl(Inline), Op]
        public Mwait mwait(AsmHexCode encoded) => new Mwait(encoded);

        public struct Mwaitx : ITypedInstruction<Mwaitx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Mwaitx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.MWAITX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Mwaitx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Mwaitx src) => AsmMnemonics.MWAITX;

            public static implicit operator AsmHexCode(Mwaitx src) => src.Encoded;

            public static implicit operator Mwaitx(AsmHexCode src) => new Mwaitx(src);
        }

        public Mwaitx mwaitx() => default;

        [MethodImpl(Inline), Op]
        public Mwaitx mwaitx(AsmHexCode encoded) => new Mwaitx(encoded);

        public struct Neg : ITypedInstruction<Neg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Neg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NEG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Neg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Neg src) => AsmMnemonics.NEG;

            public static implicit operator AsmHexCode(Neg src) => src.Encoded;

            public static implicit operator Neg(AsmHexCode src) => new Neg(src);
        }

        public Neg neg() => default;

        [MethodImpl(Inline), Op]
        public Neg neg(AsmHexCode encoded) => new Neg(encoded);

        public struct Neg_lock : ITypedInstruction<Neg_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Neg_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NEG_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Neg_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Neg_lock src) => AsmMnemonics.NEG_LOCK;

            public static implicit operator AsmHexCode(Neg_lock src) => src.Encoded;

            public static implicit operator Neg_lock(AsmHexCode src) => new Neg_lock(src);
        }

        public Neg_lock neg_lock() => default;

        [MethodImpl(Inline), Op]
        public Neg_lock neg_lock(AsmHexCode encoded) => new Neg_lock(encoded);

        public struct None : ITypedInstruction<None>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public None(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.None;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(None src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(None src) => AsmMnemonics.None;

            public static implicit operator AsmHexCode(None src) => src.Encoded;

            public static implicit operator None(AsmHexCode src) => new None(src);
        }

        public None none() => default;

        [MethodImpl(Inline), Op]
        public None none(AsmHexCode encoded) => new None(encoded);

        public struct Nop : ITypedInstruction<Nop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop src) => AsmMnemonics.NOP;

            public static implicit operator AsmHexCode(Nop src) => src.Encoded;

            public static implicit operator Nop(AsmHexCode src) => new Nop(src);
        }

        public Nop nop() => default;

        [MethodImpl(Inline), Op]
        public Nop nop(AsmHexCode encoded) => new Nop(encoded);

        public struct Nop2 : ITypedInstruction<Nop2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop2 src) => AsmMnemonics.NOP2;

            public static implicit operator AsmHexCode(Nop2 src) => src.Encoded;

            public static implicit operator Nop2(AsmHexCode src) => new Nop2(src);
        }

        public Nop2 nop2() => default;

        [MethodImpl(Inline), Op]
        public Nop2 nop2(AsmHexCode encoded) => new Nop2(encoded);

        public struct Nop3 : ITypedInstruction<Nop3>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop3(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP3;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop3 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop3 src) => AsmMnemonics.NOP3;

            public static implicit operator AsmHexCode(Nop3 src) => src.Encoded;

            public static implicit operator Nop3(AsmHexCode src) => new Nop3(src);
        }

        public Nop3 nop3() => default;

        [MethodImpl(Inline), Op]
        public Nop3 nop3(AsmHexCode encoded) => new Nop3(encoded);

        public struct Nop4 : ITypedInstruction<Nop4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop4 src) => AsmMnemonics.NOP4;

            public static implicit operator AsmHexCode(Nop4 src) => src.Encoded;

            public static implicit operator Nop4(AsmHexCode src) => new Nop4(src);
        }

        public Nop4 nop4() => default;

        [MethodImpl(Inline), Op]
        public Nop4 nop4(AsmHexCode encoded) => new Nop4(encoded);

        public struct Nop5 : ITypedInstruction<Nop5>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop5(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP5;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop5 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop5 src) => AsmMnemonics.NOP5;

            public static implicit operator AsmHexCode(Nop5 src) => src.Encoded;

            public static implicit operator Nop5(AsmHexCode src) => new Nop5(src);
        }

        public Nop5 nop5() => default;

        [MethodImpl(Inline), Op]
        public Nop5 nop5(AsmHexCode encoded) => new Nop5(encoded);

        public struct Nop6 : ITypedInstruction<Nop6>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop6(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP6;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop6 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop6 src) => AsmMnemonics.NOP6;

            public static implicit operator AsmHexCode(Nop6 src) => src.Encoded;

            public static implicit operator Nop6(AsmHexCode src) => new Nop6(src);
        }

        public Nop6 nop6() => default;

        [MethodImpl(Inline), Op]
        public Nop6 nop6(AsmHexCode encoded) => new Nop6(encoded);

        public struct Nop7 : ITypedInstruction<Nop7>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop7(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP7;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop7 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop7 src) => AsmMnemonics.NOP7;

            public static implicit operator AsmHexCode(Nop7 src) => src.Encoded;

            public static implicit operator Nop7(AsmHexCode src) => new Nop7(src);
        }

        public Nop7 nop7() => default;

        [MethodImpl(Inline), Op]
        public Nop7 nop7(AsmHexCode encoded) => new Nop7(encoded);

        public struct Nop8 : ITypedInstruction<Nop8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop8 src) => AsmMnemonics.NOP8;

            public static implicit operator AsmHexCode(Nop8 src) => src.Encoded;

            public static implicit operator Nop8(AsmHexCode src) => new Nop8(src);
        }

        public Nop8 nop8() => default;

        [MethodImpl(Inline), Op]
        public Nop8 nop8(AsmHexCode encoded) => new Nop8(encoded);

        public struct Nop9 : ITypedInstruction<Nop9>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Nop9(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOP9;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Nop9 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Nop9 src) => AsmMnemonics.NOP9;

            public static implicit operator AsmHexCode(Nop9 src) => src.Encoded;

            public static implicit operator Nop9(AsmHexCode src) => new Nop9(src);
        }

        public Nop9 nop9() => default;

        [MethodImpl(Inline), Op]
        public Nop9 nop9(AsmHexCode encoded) => new Nop9(encoded);

        public struct Not : ITypedInstruction<Not>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Not(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Not src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Not src) => AsmMnemonics.NOT;

            public static implicit operator AsmHexCode(Not src) => src.Encoded;

            public static implicit operator Not(AsmHexCode src) => new Not(src);
        }

        public Not not() => default;

        [MethodImpl(Inline), Op]
        public Not not(AsmHexCode encoded) => new Not(encoded);

        public struct Not_lock : ITypedInstruction<Not_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Not_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.NOT_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Not_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Not_lock src) => AsmMnemonics.NOT_LOCK;

            public static implicit operator AsmHexCode(Not_lock src) => src.Encoded;

            public static implicit operator Not_lock(AsmHexCode src) => new Not_lock(src);
        }

        public Not_lock not_lock() => default;

        [MethodImpl(Inline), Op]
        public Not_lock not_lock(AsmHexCode encoded) => new Not_lock(encoded);

        public struct Or : ITypedInstruction<Or>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Or(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Or src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Or src) => AsmMnemonics.OR;

            public static implicit operator AsmHexCode(Or src) => src.Encoded;

            public static implicit operator Or(AsmHexCode src) => new Or(src);
        }

        public Or or() => default;

        [MethodImpl(Inline), Op]
        public Or or(AsmHexCode encoded) => new Or(encoded);

        public struct Or_lock : ITypedInstruction<Or_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Or_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OR_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Or_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Or_lock src) => AsmMnemonics.OR_LOCK;

            public static implicit operator AsmHexCode(Or_lock src) => src.Encoded;

            public static implicit operator Or_lock(AsmHexCode src) => new Or_lock(src);
        }

        public Or_lock or_lock() => default;

        [MethodImpl(Inline), Op]
        public Or_lock or_lock(AsmHexCode encoded) => new Or_lock(encoded);

        public struct Orpd : ITypedInstruction<Orpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Orpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ORPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Orpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Orpd src) => AsmMnemonics.ORPD;

            public static implicit operator AsmHexCode(Orpd src) => src.Encoded;

            public static implicit operator Orpd(AsmHexCode src) => new Orpd(src);
        }

        public Orpd orpd() => default;

        [MethodImpl(Inline), Op]
        public Orpd orpd(AsmHexCode encoded) => new Orpd(encoded);

        public struct Orps : ITypedInstruction<Orps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Orps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ORPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Orps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Orps src) => AsmMnemonics.ORPS;

            public static implicit operator AsmHexCode(Orps src) => src.Encoded;

            public static implicit operator Orps(AsmHexCode src) => new Orps(src);
        }

        public Orps orps() => default;

        [MethodImpl(Inline), Op]
        public Orps orps(AsmHexCode encoded) => new Orps(encoded);

        public struct Out : ITypedInstruction<Out>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Out(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OUT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Out src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Out src) => AsmMnemonics.OUT;

            public static implicit operator AsmHexCode(Out src) => src.Encoded;

            public static implicit operator Out(AsmHexCode src) => new Out(src);
        }

        public Out @out() => default;

        [MethodImpl(Inline), Op]
        public Out @out(AsmHexCode encoded) => new Out(encoded);

        public struct Outsb : ITypedInstruction<Outsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Outsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OUTSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Outsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Outsb src) => AsmMnemonics.OUTSB;

            public static implicit operator AsmHexCode(Outsb src) => src.Encoded;

            public static implicit operator Outsb(AsmHexCode src) => new Outsb(src);
        }

        public Outsb outsb() => default;

        [MethodImpl(Inline), Op]
        public Outsb outsb(AsmHexCode encoded) => new Outsb(encoded);

        public struct Outsd : ITypedInstruction<Outsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Outsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OUTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Outsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Outsd src) => AsmMnemonics.OUTSD;

            public static implicit operator AsmHexCode(Outsd src) => src.Encoded;

            public static implicit operator Outsd(AsmHexCode src) => new Outsd(src);
        }

        public Outsd outsd() => default;

        [MethodImpl(Inline), Op]
        public Outsd outsd(AsmHexCode encoded) => new Outsd(encoded);

        public struct Outsw : ITypedInstruction<Outsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Outsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.OUTSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Outsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Outsw src) => AsmMnemonics.OUTSW;

            public static implicit operator AsmHexCode(Outsw src) => src.Encoded;

            public static implicit operator Outsw(AsmHexCode src) => new Outsw(src);
        }

        public Outsw outsw() => default;

        [MethodImpl(Inline), Op]
        public Outsw outsw(AsmHexCode encoded) => new Outsw(encoded);

        public struct Pabsb : ITypedInstruction<Pabsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pabsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PABSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pabsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pabsb src) => AsmMnemonics.PABSB;

            public static implicit operator AsmHexCode(Pabsb src) => src.Encoded;

            public static implicit operator Pabsb(AsmHexCode src) => new Pabsb(src);
        }

        public Pabsb pabsb() => default;

        [MethodImpl(Inline), Op]
        public Pabsb pabsb(AsmHexCode encoded) => new Pabsb(encoded);

        public struct Pabsd : ITypedInstruction<Pabsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pabsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PABSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pabsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pabsd src) => AsmMnemonics.PABSD;

            public static implicit operator AsmHexCode(Pabsd src) => src.Encoded;

            public static implicit operator Pabsd(AsmHexCode src) => new Pabsd(src);
        }

        public Pabsd pabsd() => default;

        [MethodImpl(Inline), Op]
        public Pabsd pabsd(AsmHexCode encoded) => new Pabsd(encoded);

        public struct Pabsw : ITypedInstruction<Pabsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pabsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PABSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pabsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pabsw src) => AsmMnemonics.PABSW;

            public static implicit operator AsmHexCode(Pabsw src) => src.Encoded;

            public static implicit operator Pabsw(AsmHexCode src) => new Pabsw(src);
        }

        public Pabsw pabsw() => default;

        [MethodImpl(Inline), Op]
        public Pabsw pabsw(AsmHexCode encoded) => new Pabsw(encoded);

        public struct Packssdw : ITypedInstruction<Packssdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Packssdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PACKSSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Packssdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Packssdw src) => AsmMnemonics.PACKSSDW;

            public static implicit operator AsmHexCode(Packssdw src) => src.Encoded;

            public static implicit operator Packssdw(AsmHexCode src) => new Packssdw(src);
        }

        public Packssdw packssdw() => default;

        [MethodImpl(Inline), Op]
        public Packssdw packssdw(AsmHexCode encoded) => new Packssdw(encoded);

        public struct Packsswb : ITypedInstruction<Packsswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Packsswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PACKSSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Packsswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Packsswb src) => AsmMnemonics.PACKSSWB;

            public static implicit operator AsmHexCode(Packsswb src) => src.Encoded;

            public static implicit operator Packsswb(AsmHexCode src) => new Packsswb(src);
        }

        public Packsswb packsswb() => default;

        [MethodImpl(Inline), Op]
        public Packsswb packsswb(AsmHexCode encoded) => new Packsswb(encoded);

        public struct Packusdw : ITypedInstruction<Packusdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Packusdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PACKUSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Packusdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Packusdw src) => AsmMnemonics.PACKUSDW;

            public static implicit operator AsmHexCode(Packusdw src) => src.Encoded;

            public static implicit operator Packusdw(AsmHexCode src) => new Packusdw(src);
        }

        public Packusdw packusdw() => default;

        [MethodImpl(Inline), Op]
        public Packusdw packusdw(AsmHexCode encoded) => new Packusdw(encoded);

        public struct Packuswb : ITypedInstruction<Packuswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Packuswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PACKUSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Packuswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Packuswb src) => AsmMnemonics.PACKUSWB;

            public static implicit operator AsmHexCode(Packuswb src) => src.Encoded;

            public static implicit operator Packuswb(AsmHexCode src) => new Packuswb(src);
        }

        public Packuswb packuswb() => default;

        [MethodImpl(Inline), Op]
        public Packuswb packuswb(AsmHexCode encoded) => new Packuswb(encoded);

        public struct Paddb : ITypedInstruction<Paddb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddb src) => AsmMnemonics.PADDB;

            public static implicit operator AsmHexCode(Paddb src) => src.Encoded;

            public static implicit operator Paddb(AsmHexCode src) => new Paddb(src);
        }

        public Paddb paddb() => default;

        [MethodImpl(Inline), Op]
        public Paddb paddb(AsmHexCode encoded) => new Paddb(encoded);

        public struct Paddd : ITypedInstruction<Paddd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddd src) => AsmMnemonics.PADDD;

            public static implicit operator AsmHexCode(Paddd src) => src.Encoded;

            public static implicit operator Paddd(AsmHexCode src) => new Paddd(src);
        }

        public Paddd paddd() => default;

        [MethodImpl(Inline), Op]
        public Paddd paddd(AsmHexCode encoded) => new Paddd(encoded);

        public struct Paddq : ITypedInstruction<Paddq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddq src) => AsmMnemonics.PADDQ;

            public static implicit operator AsmHexCode(Paddq src) => src.Encoded;

            public static implicit operator Paddq(AsmHexCode src) => new Paddq(src);
        }

        public Paddq paddq() => default;

        [MethodImpl(Inline), Op]
        public Paddq paddq(AsmHexCode encoded) => new Paddq(encoded);

        public struct Paddsb : ITypedInstruction<Paddsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddsb src) => AsmMnemonics.PADDSB;

            public static implicit operator AsmHexCode(Paddsb src) => src.Encoded;

            public static implicit operator Paddsb(AsmHexCode src) => new Paddsb(src);
        }

        public Paddsb paddsb() => default;

        [MethodImpl(Inline), Op]
        public Paddsb paddsb(AsmHexCode encoded) => new Paddsb(encoded);

        public struct Paddsw : ITypedInstruction<Paddsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddsw src) => AsmMnemonics.PADDSW;

            public static implicit operator AsmHexCode(Paddsw src) => src.Encoded;

            public static implicit operator Paddsw(AsmHexCode src) => new Paddsw(src);
        }

        public Paddsw paddsw() => default;

        [MethodImpl(Inline), Op]
        public Paddsw paddsw(AsmHexCode encoded) => new Paddsw(encoded);

        public struct Paddusb : ITypedInstruction<Paddusb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddusb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDUSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddusb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddusb src) => AsmMnemonics.PADDUSB;

            public static implicit operator AsmHexCode(Paddusb src) => src.Encoded;

            public static implicit operator Paddusb(AsmHexCode src) => new Paddusb(src);
        }

        public Paddusb paddusb() => default;

        [MethodImpl(Inline), Op]
        public Paddusb paddusb(AsmHexCode encoded) => new Paddusb(encoded);

        public struct Paddusw : ITypedInstruction<Paddusw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddusw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDUSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddusw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddusw src) => AsmMnemonics.PADDUSW;

            public static implicit operator AsmHexCode(Paddusw src) => src.Encoded;

            public static implicit operator Paddusw(AsmHexCode src) => new Paddusw(src);
        }

        public Paddusw paddusw() => default;

        [MethodImpl(Inline), Op]
        public Paddusw paddusw(AsmHexCode encoded) => new Paddusw(encoded);

        public struct Paddw : ITypedInstruction<Paddw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Paddw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PADDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Paddw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Paddw src) => AsmMnemonics.PADDW;

            public static implicit operator AsmHexCode(Paddw src) => src.Encoded;

            public static implicit operator Paddw(AsmHexCode src) => new Paddw(src);
        }

        public Paddw paddw() => default;

        [MethodImpl(Inline), Op]
        public Paddw paddw(AsmHexCode encoded) => new Paddw(encoded);

        public struct Palignr : ITypedInstruction<Palignr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Palignr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PALIGNR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Palignr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Palignr src) => AsmMnemonics.PALIGNR;

            public static implicit operator AsmHexCode(Palignr src) => src.Encoded;

            public static implicit operator Palignr(AsmHexCode src) => new Palignr(src);
        }

        public Palignr palignr() => default;

        [MethodImpl(Inline), Op]
        public Palignr palignr(AsmHexCode encoded) => new Palignr(encoded);

        public struct Pand : ITypedInstruction<Pand>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pand(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PAND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pand src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pand src) => AsmMnemonics.PAND;

            public static implicit operator AsmHexCode(Pand src) => src.Encoded;

            public static implicit operator Pand(AsmHexCode src) => new Pand(src);
        }

        public Pand pand() => default;

        [MethodImpl(Inline), Op]
        public Pand pand(AsmHexCode encoded) => new Pand(encoded);

        public struct Pandn : ITypedInstruction<Pandn>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pandn(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PANDN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pandn src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pandn src) => AsmMnemonics.PANDN;

            public static implicit operator AsmHexCode(Pandn src) => src.Encoded;

            public static implicit operator Pandn(AsmHexCode src) => new Pandn(src);
        }

        public Pandn pandn() => default;

        [MethodImpl(Inline), Op]
        public Pandn pandn(AsmHexCode encoded) => new Pandn(encoded);

        public struct Pause : ITypedInstruction<Pause>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pause(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PAUSE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pause src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pause src) => AsmMnemonics.PAUSE;

            public static implicit operator AsmHexCode(Pause src) => src.Encoded;

            public static implicit operator Pause(AsmHexCode src) => new Pause(src);
        }

        public Pause pause() => default;

        [MethodImpl(Inline), Op]
        public Pause pause(AsmHexCode encoded) => new Pause(encoded);

        public struct Pavgb : ITypedInstruction<Pavgb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pavgb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PAVGB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pavgb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pavgb src) => AsmMnemonics.PAVGB;

            public static implicit operator AsmHexCode(Pavgb src) => src.Encoded;

            public static implicit operator Pavgb(AsmHexCode src) => new Pavgb(src);
        }

        public Pavgb pavgb() => default;

        [MethodImpl(Inline), Op]
        public Pavgb pavgb(AsmHexCode encoded) => new Pavgb(encoded);

        public struct Pavgusb : ITypedInstruction<Pavgusb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pavgusb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PAVGUSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pavgusb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pavgusb src) => AsmMnemonics.PAVGUSB;

            public static implicit operator AsmHexCode(Pavgusb src) => src.Encoded;

            public static implicit operator Pavgusb(AsmHexCode src) => new Pavgusb(src);
        }

        public Pavgusb pavgusb() => default;

        [MethodImpl(Inline), Op]
        public Pavgusb pavgusb(AsmHexCode encoded) => new Pavgusb(encoded);

        public struct Pavgw : ITypedInstruction<Pavgw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pavgw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PAVGW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pavgw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pavgw src) => AsmMnemonics.PAVGW;

            public static implicit operator AsmHexCode(Pavgw src) => src.Encoded;

            public static implicit operator Pavgw(AsmHexCode src) => new Pavgw(src);
        }

        public Pavgw pavgw() => default;

        [MethodImpl(Inline), Op]
        public Pavgw pavgw(AsmHexCode encoded) => new Pavgw(encoded);

        public struct Pblendvb : ITypedInstruction<Pblendvb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pblendvb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PBLENDVB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pblendvb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pblendvb src) => AsmMnemonics.PBLENDVB;

            public static implicit operator AsmHexCode(Pblendvb src) => src.Encoded;

            public static implicit operator Pblendvb(AsmHexCode src) => new Pblendvb(src);
        }

        public Pblendvb pblendvb() => default;

        [MethodImpl(Inline), Op]
        public Pblendvb pblendvb(AsmHexCode encoded) => new Pblendvb(encoded);

        public struct Pblendw : ITypedInstruction<Pblendw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pblendw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PBLENDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pblendw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pblendw src) => AsmMnemonics.PBLENDW;

            public static implicit operator AsmHexCode(Pblendw src) => src.Encoded;

            public static implicit operator Pblendw(AsmHexCode src) => new Pblendw(src);
        }

        public Pblendw pblendw() => default;

        [MethodImpl(Inline), Op]
        public Pblendw pblendw(AsmHexCode encoded) => new Pblendw(encoded);

        public struct Pclmulqdq : ITypedInstruction<Pclmulqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pclmulqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCLMULQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pclmulqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pclmulqdq src) => AsmMnemonics.PCLMULQDQ;

            public static implicit operator AsmHexCode(Pclmulqdq src) => src.Encoded;

            public static implicit operator Pclmulqdq(AsmHexCode src) => new Pclmulqdq(src);
        }

        public Pclmulqdq pclmulqdq() => default;

        [MethodImpl(Inline), Op]
        public Pclmulqdq pclmulqdq(AsmHexCode encoded) => new Pclmulqdq(encoded);

        public struct Pcmpeqb : ITypedInstruction<Pcmpeqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpeqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPEQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpeqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpeqb src) => AsmMnemonics.PCMPEQB;

            public static implicit operator AsmHexCode(Pcmpeqb src) => src.Encoded;

            public static implicit operator Pcmpeqb(AsmHexCode src) => new Pcmpeqb(src);
        }

        public Pcmpeqb pcmpeqb() => default;

        [MethodImpl(Inline), Op]
        public Pcmpeqb pcmpeqb(AsmHexCode encoded) => new Pcmpeqb(encoded);

        public struct Pcmpeqd : ITypedInstruction<Pcmpeqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpeqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPEQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpeqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpeqd src) => AsmMnemonics.PCMPEQD;

            public static implicit operator AsmHexCode(Pcmpeqd src) => src.Encoded;

            public static implicit operator Pcmpeqd(AsmHexCode src) => new Pcmpeqd(src);
        }

        public Pcmpeqd pcmpeqd() => default;

        [MethodImpl(Inline), Op]
        public Pcmpeqd pcmpeqd(AsmHexCode encoded) => new Pcmpeqd(encoded);

        public struct Pcmpeqq : ITypedInstruction<Pcmpeqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpeqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPEQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpeqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpeqq src) => AsmMnemonics.PCMPEQQ;

            public static implicit operator AsmHexCode(Pcmpeqq src) => src.Encoded;

            public static implicit operator Pcmpeqq(AsmHexCode src) => new Pcmpeqq(src);
        }

        public Pcmpeqq pcmpeqq() => default;

        [MethodImpl(Inline), Op]
        public Pcmpeqq pcmpeqq(AsmHexCode encoded) => new Pcmpeqq(encoded);

        public struct Pcmpeqw : ITypedInstruction<Pcmpeqw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpeqw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPEQW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpeqw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpeqw src) => AsmMnemonics.PCMPEQW;

            public static implicit operator AsmHexCode(Pcmpeqw src) => src.Encoded;

            public static implicit operator Pcmpeqw(AsmHexCode src) => new Pcmpeqw(src);
        }

        public Pcmpeqw pcmpeqw() => default;

        [MethodImpl(Inline), Op]
        public Pcmpeqw pcmpeqw(AsmHexCode encoded) => new Pcmpeqw(encoded);

        public struct Pcmpestri : ITypedInstruction<Pcmpestri>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpestri(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPESTRI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpestri src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpestri src) => AsmMnemonics.PCMPESTRI;

            public static implicit operator AsmHexCode(Pcmpestri src) => src.Encoded;

            public static implicit operator Pcmpestri(AsmHexCode src) => new Pcmpestri(src);
        }

        public Pcmpestri pcmpestri() => default;

        [MethodImpl(Inline), Op]
        public Pcmpestri pcmpestri(AsmHexCode encoded) => new Pcmpestri(encoded);

        public struct Pcmpestri64 : ITypedInstruction<Pcmpestri64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpestri64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPESTRI64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpestri64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpestri64 src) => AsmMnemonics.PCMPESTRI64;

            public static implicit operator AsmHexCode(Pcmpestri64 src) => src.Encoded;

            public static implicit operator Pcmpestri64(AsmHexCode src) => new Pcmpestri64(src);
        }

        public Pcmpestri64 pcmpestri64() => default;

        [MethodImpl(Inline), Op]
        public Pcmpestri64 pcmpestri64(AsmHexCode encoded) => new Pcmpestri64(encoded);

        public struct Pcmpestrm : ITypedInstruction<Pcmpestrm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpestrm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPESTRM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpestrm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpestrm src) => AsmMnemonics.PCMPESTRM;

            public static implicit operator AsmHexCode(Pcmpestrm src) => src.Encoded;

            public static implicit operator Pcmpestrm(AsmHexCode src) => new Pcmpestrm(src);
        }

        public Pcmpestrm pcmpestrm() => default;

        [MethodImpl(Inline), Op]
        public Pcmpestrm pcmpestrm(AsmHexCode encoded) => new Pcmpestrm(encoded);

        public struct Pcmpestrm64 : ITypedInstruction<Pcmpestrm64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpestrm64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPESTRM64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpestrm64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpestrm64 src) => AsmMnemonics.PCMPESTRM64;

            public static implicit operator AsmHexCode(Pcmpestrm64 src) => src.Encoded;

            public static implicit operator Pcmpestrm64(AsmHexCode src) => new Pcmpestrm64(src);
        }

        public Pcmpestrm64 pcmpestrm64() => default;

        [MethodImpl(Inline), Op]
        public Pcmpestrm64 pcmpestrm64(AsmHexCode encoded) => new Pcmpestrm64(encoded);

        public struct Pcmpgtb : ITypedInstruction<Pcmpgtb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpgtb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPGTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpgtb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpgtb src) => AsmMnemonics.PCMPGTB;

            public static implicit operator AsmHexCode(Pcmpgtb src) => src.Encoded;

            public static implicit operator Pcmpgtb(AsmHexCode src) => new Pcmpgtb(src);
        }

        public Pcmpgtb pcmpgtb() => default;

        [MethodImpl(Inline), Op]
        public Pcmpgtb pcmpgtb(AsmHexCode encoded) => new Pcmpgtb(encoded);

        public struct Pcmpgtd : ITypedInstruction<Pcmpgtd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpgtd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPGTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpgtd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpgtd src) => AsmMnemonics.PCMPGTD;

            public static implicit operator AsmHexCode(Pcmpgtd src) => src.Encoded;

            public static implicit operator Pcmpgtd(AsmHexCode src) => new Pcmpgtd(src);
        }

        public Pcmpgtd pcmpgtd() => default;

        [MethodImpl(Inline), Op]
        public Pcmpgtd pcmpgtd(AsmHexCode encoded) => new Pcmpgtd(encoded);

        public struct Pcmpgtq : ITypedInstruction<Pcmpgtq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpgtq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPGTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpgtq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpgtq src) => AsmMnemonics.PCMPGTQ;

            public static implicit operator AsmHexCode(Pcmpgtq src) => src.Encoded;

            public static implicit operator Pcmpgtq(AsmHexCode src) => new Pcmpgtq(src);
        }

        public Pcmpgtq pcmpgtq() => default;

        [MethodImpl(Inline), Op]
        public Pcmpgtq pcmpgtq(AsmHexCode encoded) => new Pcmpgtq(encoded);

        public struct Pcmpgtw : ITypedInstruction<Pcmpgtw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpgtw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPGTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpgtw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpgtw src) => AsmMnemonics.PCMPGTW;

            public static implicit operator AsmHexCode(Pcmpgtw src) => src.Encoded;

            public static implicit operator Pcmpgtw(AsmHexCode src) => new Pcmpgtw(src);
        }

        public Pcmpgtw pcmpgtw() => default;

        [MethodImpl(Inline), Op]
        public Pcmpgtw pcmpgtw(AsmHexCode encoded) => new Pcmpgtw(encoded);

        public struct Pcmpistri : ITypedInstruction<Pcmpistri>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpistri(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPISTRI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpistri src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpistri src) => AsmMnemonics.PCMPISTRI;

            public static implicit operator AsmHexCode(Pcmpistri src) => src.Encoded;

            public static implicit operator Pcmpistri(AsmHexCode src) => new Pcmpistri(src);
        }

        public Pcmpistri pcmpistri() => default;

        [MethodImpl(Inline), Op]
        public Pcmpistri pcmpistri(AsmHexCode encoded) => new Pcmpistri(encoded);

        public struct Pcmpistri64 : ITypedInstruction<Pcmpistri64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpistri64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPISTRI64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpistri64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpistri64 src) => AsmMnemonics.PCMPISTRI64;

            public static implicit operator AsmHexCode(Pcmpistri64 src) => src.Encoded;

            public static implicit operator Pcmpistri64(AsmHexCode src) => new Pcmpistri64(src);
        }

        public Pcmpistri64 pcmpistri64() => default;

        [MethodImpl(Inline), Op]
        public Pcmpistri64 pcmpistri64(AsmHexCode encoded) => new Pcmpistri64(encoded);

        public struct Pcmpistrm : ITypedInstruction<Pcmpistrm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pcmpistrm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCMPISTRM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pcmpistrm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pcmpistrm src) => AsmMnemonics.PCMPISTRM;

            public static implicit operator AsmHexCode(Pcmpistrm src) => src.Encoded;

            public static implicit operator Pcmpistrm(AsmHexCode src) => new Pcmpistrm(src);
        }

        public Pcmpistrm pcmpistrm() => default;

        [MethodImpl(Inline), Op]
        public Pcmpistrm pcmpistrm(AsmHexCode encoded) => new Pcmpistrm(encoded);

        public struct Pconfig : ITypedInstruction<Pconfig>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pconfig(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PCONFIG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pconfig src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pconfig src) => AsmMnemonics.PCONFIG;

            public static implicit operator AsmHexCode(Pconfig src) => src.Encoded;

            public static implicit operator Pconfig(AsmHexCode src) => new Pconfig(src);
        }

        public Pconfig pconfig() => default;

        [MethodImpl(Inline), Op]
        public Pconfig pconfig(AsmHexCode encoded) => new Pconfig(encoded);

        public struct Pdep : ITypedInstruction<Pdep>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pdep(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PDEP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pdep src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pdep src) => AsmMnemonics.PDEP;

            public static implicit operator AsmHexCode(Pdep src) => src.Encoded;

            public static implicit operator Pdep(AsmHexCode src) => new Pdep(src);
        }

        public Pdep pdep() => default;

        [MethodImpl(Inline), Op]
        public Pdep pdep(AsmHexCode encoded) => new Pdep(encoded);

        public struct Pext : ITypedInstruction<Pext>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pext(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pext src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pext src) => AsmMnemonics.PEXT;

            public static implicit operator AsmHexCode(Pext src) => src.Encoded;

            public static implicit operator Pext(AsmHexCode src) => new Pext(src);
        }

        public Pext pext() => default;

        [MethodImpl(Inline), Op]
        public Pext pext(AsmHexCode encoded) => new Pext(encoded);

        public struct Pextrb : ITypedInstruction<Pextrb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pextrb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXTRB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pextrb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pextrb src) => AsmMnemonics.PEXTRB;

            public static implicit operator AsmHexCode(Pextrb src) => src.Encoded;

            public static implicit operator Pextrb(AsmHexCode src) => new Pextrb(src);
        }

        public Pextrb pextrb() => default;

        [MethodImpl(Inline), Op]
        public Pextrb pextrb(AsmHexCode encoded) => new Pextrb(encoded);

        public struct Pextrd : ITypedInstruction<Pextrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pextrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXTRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pextrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pextrd src) => AsmMnemonics.PEXTRD;

            public static implicit operator AsmHexCode(Pextrd src) => src.Encoded;

            public static implicit operator Pextrd(AsmHexCode src) => new Pextrd(src);
        }

        public Pextrd pextrd() => default;

        [MethodImpl(Inline), Op]
        public Pextrd pextrd(AsmHexCode encoded) => new Pextrd(encoded);

        public struct Pextrq : ITypedInstruction<Pextrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pextrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXTRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pextrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pextrq src) => AsmMnemonics.PEXTRQ;

            public static implicit operator AsmHexCode(Pextrq src) => src.Encoded;

            public static implicit operator Pextrq(AsmHexCode src) => new Pextrq(src);
        }

        public Pextrq pextrq() => default;

        [MethodImpl(Inline), Op]
        public Pextrq pextrq(AsmHexCode encoded) => new Pextrq(encoded);

        public struct Pextrw : ITypedInstruction<Pextrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pextrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXTRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pextrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pextrw src) => AsmMnemonics.PEXTRW;

            public static implicit operator AsmHexCode(Pextrw src) => src.Encoded;

            public static implicit operator Pextrw(AsmHexCode src) => new Pextrw(src);
        }

        public Pextrw pextrw() => default;

        [MethodImpl(Inline), Op]
        public Pextrw pextrw(AsmHexCode encoded) => new Pextrw(encoded);

        public struct Pextrw_sse4 : ITypedInstruction<Pextrw_sse4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pextrw_sse4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PEXTRW_SSE4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pextrw_sse4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pextrw_sse4 src) => AsmMnemonics.PEXTRW_SSE4;

            public static implicit operator AsmHexCode(Pextrw_sse4 src) => src.Encoded;

            public static implicit operator Pextrw_sse4(AsmHexCode src) => new Pextrw_sse4(src);
        }

        public Pextrw_sse4 pextrw_sse4() => default;

        [MethodImpl(Inline), Op]
        public Pextrw_sse4 pextrw_sse4(AsmHexCode encoded) => new Pextrw_sse4(encoded);

        public struct Pf2id : ITypedInstruction<Pf2id>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pf2id(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PF2ID;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pf2id src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pf2id src) => AsmMnemonics.PF2ID;

            public static implicit operator AsmHexCode(Pf2id src) => src.Encoded;

            public static implicit operator Pf2id(AsmHexCode src) => new Pf2id(src);
        }

        public Pf2id pf2id() => default;

        [MethodImpl(Inline), Op]
        public Pf2id pf2id(AsmHexCode encoded) => new Pf2id(encoded);

        public struct Pf2iw : ITypedInstruction<Pf2iw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pf2iw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PF2IW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pf2iw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pf2iw src) => AsmMnemonics.PF2IW;

            public static implicit operator AsmHexCode(Pf2iw src) => src.Encoded;

            public static implicit operator Pf2iw(AsmHexCode src) => new Pf2iw(src);
        }

        public Pf2iw pf2iw() => default;

        [MethodImpl(Inline), Op]
        public Pf2iw pf2iw(AsmHexCode encoded) => new Pf2iw(encoded);

        public struct Pfacc : ITypedInstruction<Pfacc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfacc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFACC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfacc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfacc src) => AsmMnemonics.PFACC;

            public static implicit operator AsmHexCode(Pfacc src) => src.Encoded;

            public static implicit operator Pfacc(AsmHexCode src) => new Pfacc(src);
        }

        public Pfacc pfacc() => default;

        [MethodImpl(Inline), Op]
        public Pfacc pfacc(AsmHexCode encoded) => new Pfacc(encoded);

        public struct Pfadd : ITypedInstruction<Pfadd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfadd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfadd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfadd src) => AsmMnemonics.PFADD;

            public static implicit operator AsmHexCode(Pfadd src) => src.Encoded;

            public static implicit operator Pfadd(AsmHexCode src) => new Pfadd(src);
        }

        public Pfadd pfadd() => default;

        [MethodImpl(Inline), Op]
        public Pfadd pfadd(AsmHexCode encoded) => new Pfadd(encoded);

        public struct Pfcmpeq : ITypedInstruction<Pfcmpeq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfcmpeq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFCMPEQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfcmpeq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfcmpeq src) => AsmMnemonics.PFCMPEQ;

            public static implicit operator AsmHexCode(Pfcmpeq src) => src.Encoded;

            public static implicit operator Pfcmpeq(AsmHexCode src) => new Pfcmpeq(src);
        }

        public Pfcmpeq pfcmpeq() => default;

        [MethodImpl(Inline), Op]
        public Pfcmpeq pfcmpeq(AsmHexCode encoded) => new Pfcmpeq(encoded);

        public struct Pfcmpge : ITypedInstruction<Pfcmpge>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfcmpge(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFCMPGE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfcmpge src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfcmpge src) => AsmMnemonics.PFCMPGE;

            public static implicit operator AsmHexCode(Pfcmpge src) => src.Encoded;

            public static implicit operator Pfcmpge(AsmHexCode src) => new Pfcmpge(src);
        }

        public Pfcmpge pfcmpge() => default;

        [MethodImpl(Inline), Op]
        public Pfcmpge pfcmpge(AsmHexCode encoded) => new Pfcmpge(encoded);

        public struct Pfcmpgt : ITypedInstruction<Pfcmpgt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfcmpgt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFCMPGT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfcmpgt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfcmpgt src) => AsmMnemonics.PFCMPGT;

            public static implicit operator AsmHexCode(Pfcmpgt src) => src.Encoded;

            public static implicit operator Pfcmpgt(AsmHexCode src) => new Pfcmpgt(src);
        }

        public Pfcmpgt pfcmpgt() => default;

        [MethodImpl(Inline), Op]
        public Pfcmpgt pfcmpgt(AsmHexCode encoded) => new Pfcmpgt(encoded);

        public struct Pfmax : ITypedInstruction<Pfmax>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfmax(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFMAX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfmax src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfmax src) => AsmMnemonics.PFMAX;

            public static implicit operator AsmHexCode(Pfmax src) => src.Encoded;

            public static implicit operator Pfmax(AsmHexCode src) => new Pfmax(src);
        }

        public Pfmax pfmax() => default;

        [MethodImpl(Inline), Op]
        public Pfmax pfmax(AsmHexCode encoded) => new Pfmax(encoded);

        public struct Pfmin : ITypedInstruction<Pfmin>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfmin(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFMIN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfmin src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfmin src) => AsmMnemonics.PFMIN;

            public static implicit operator AsmHexCode(Pfmin src) => src.Encoded;

            public static implicit operator Pfmin(AsmHexCode src) => new Pfmin(src);
        }

        public Pfmin pfmin() => default;

        [MethodImpl(Inline), Op]
        public Pfmin pfmin(AsmHexCode encoded) => new Pfmin(encoded);

        public struct Pfmul : ITypedInstruction<Pfmul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfmul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFMUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfmul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfmul src) => AsmMnemonics.PFMUL;

            public static implicit operator AsmHexCode(Pfmul src) => src.Encoded;

            public static implicit operator Pfmul(AsmHexCode src) => new Pfmul(src);
        }

        public Pfmul pfmul() => default;

        [MethodImpl(Inline), Op]
        public Pfmul pfmul(AsmHexCode encoded) => new Pfmul(encoded);

        public struct Pfnacc : ITypedInstruction<Pfnacc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfnacc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFNACC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfnacc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfnacc src) => AsmMnemonics.PFNACC;

            public static implicit operator AsmHexCode(Pfnacc src) => src.Encoded;

            public static implicit operator Pfnacc(AsmHexCode src) => new Pfnacc(src);
        }

        public Pfnacc pfnacc() => default;

        [MethodImpl(Inline), Op]
        public Pfnacc pfnacc(AsmHexCode encoded) => new Pfnacc(encoded);

        public struct Pfpnacc : ITypedInstruction<Pfpnacc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfpnacc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFPNACC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfpnacc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfpnacc src) => AsmMnemonics.PFPNACC;

            public static implicit operator AsmHexCode(Pfpnacc src) => src.Encoded;

            public static implicit operator Pfpnacc(AsmHexCode src) => new Pfpnacc(src);
        }

        public Pfpnacc pfpnacc() => default;

        [MethodImpl(Inline), Op]
        public Pfpnacc pfpnacc(AsmHexCode encoded) => new Pfpnacc(encoded);

        public struct Pfrcp : ITypedInstruction<Pfrcp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfrcp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFRCP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfrcp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfrcp src) => AsmMnemonics.PFRCP;

            public static implicit operator AsmHexCode(Pfrcp src) => src.Encoded;

            public static implicit operator Pfrcp(AsmHexCode src) => new Pfrcp(src);
        }

        public Pfrcp pfrcp() => default;

        [MethodImpl(Inline), Op]
        public Pfrcp pfrcp(AsmHexCode encoded) => new Pfrcp(encoded);

        public struct Pfrcpit1 : ITypedInstruction<Pfrcpit1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfrcpit1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFRCPIT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfrcpit1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfrcpit1 src) => AsmMnemonics.PFRCPIT1;

            public static implicit operator AsmHexCode(Pfrcpit1 src) => src.Encoded;

            public static implicit operator Pfrcpit1(AsmHexCode src) => new Pfrcpit1(src);
        }

        public Pfrcpit1 pfrcpit1() => default;

        [MethodImpl(Inline), Op]
        public Pfrcpit1 pfrcpit1(AsmHexCode encoded) => new Pfrcpit1(encoded);

        public struct Pfrcpit2 : ITypedInstruction<Pfrcpit2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfrcpit2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFRCPIT2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfrcpit2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfrcpit2 src) => AsmMnemonics.PFRCPIT2;

            public static implicit operator AsmHexCode(Pfrcpit2 src) => src.Encoded;

            public static implicit operator Pfrcpit2(AsmHexCode src) => new Pfrcpit2(src);
        }

        public Pfrcpit2 pfrcpit2() => default;

        [MethodImpl(Inline), Op]
        public Pfrcpit2 pfrcpit2(AsmHexCode encoded) => new Pfrcpit2(encoded);

        public struct Pfrsqit1 : ITypedInstruction<Pfrsqit1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfrsqit1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFRSQIT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfrsqit1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfrsqit1 src) => AsmMnemonics.PFRSQIT1;

            public static implicit operator AsmHexCode(Pfrsqit1 src) => src.Encoded;

            public static implicit operator Pfrsqit1(AsmHexCode src) => new Pfrsqit1(src);
        }

        public Pfrsqit1 pfrsqit1() => default;

        [MethodImpl(Inline), Op]
        public Pfrsqit1 pfrsqit1(AsmHexCode encoded) => new Pfrsqit1(encoded);

        public struct Pfrsqrt : ITypedInstruction<Pfrsqrt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfrsqrt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFRSQRT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfrsqrt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfrsqrt src) => AsmMnemonics.PFRSQRT;

            public static implicit operator AsmHexCode(Pfrsqrt src) => src.Encoded;

            public static implicit operator Pfrsqrt(AsmHexCode src) => new Pfrsqrt(src);
        }

        public Pfrsqrt pfrsqrt() => default;

        [MethodImpl(Inline), Op]
        public Pfrsqrt pfrsqrt(AsmHexCode encoded) => new Pfrsqrt(encoded);

        public struct Pfsub : ITypedInstruction<Pfsub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfsub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFSUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfsub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfsub src) => AsmMnemonics.PFSUB;

            public static implicit operator AsmHexCode(Pfsub src) => src.Encoded;

            public static implicit operator Pfsub(AsmHexCode src) => new Pfsub(src);
        }

        public Pfsub pfsub() => default;

        [MethodImpl(Inline), Op]
        public Pfsub pfsub(AsmHexCode encoded) => new Pfsub(encoded);

        public struct Pfsubr : ITypedInstruction<Pfsubr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pfsubr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PFSUBR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pfsubr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pfsubr src) => AsmMnemonics.PFSUBR;

            public static implicit operator AsmHexCode(Pfsubr src) => src.Encoded;

            public static implicit operator Pfsubr(AsmHexCode src) => new Pfsubr(src);
        }

        public Pfsubr pfsubr() => default;

        [MethodImpl(Inline), Op]
        public Pfsubr pfsubr(AsmHexCode encoded) => new Pfsubr(encoded);

        public struct Phaddd : ITypedInstruction<Phaddd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phaddd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHADDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phaddd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phaddd src) => AsmMnemonics.PHADDD;

            public static implicit operator AsmHexCode(Phaddd src) => src.Encoded;

            public static implicit operator Phaddd(AsmHexCode src) => new Phaddd(src);
        }

        public Phaddd phaddd() => default;

        [MethodImpl(Inline), Op]
        public Phaddd phaddd(AsmHexCode encoded) => new Phaddd(encoded);

        public struct Phaddsw : ITypedInstruction<Phaddsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phaddsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHADDSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phaddsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phaddsw src) => AsmMnemonics.PHADDSW;

            public static implicit operator AsmHexCode(Phaddsw src) => src.Encoded;

            public static implicit operator Phaddsw(AsmHexCode src) => new Phaddsw(src);
        }

        public Phaddsw phaddsw() => default;

        [MethodImpl(Inline), Op]
        public Phaddsw phaddsw(AsmHexCode encoded) => new Phaddsw(encoded);

        public struct Phaddw : ITypedInstruction<Phaddw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phaddw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHADDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phaddw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phaddw src) => AsmMnemonics.PHADDW;

            public static implicit operator AsmHexCode(Phaddw src) => src.Encoded;

            public static implicit operator Phaddw(AsmHexCode src) => new Phaddw(src);
        }

        public Phaddw phaddw() => default;

        [MethodImpl(Inline), Op]
        public Phaddw phaddw(AsmHexCode encoded) => new Phaddw(encoded);

        public struct Phminposuw : ITypedInstruction<Phminposuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phminposuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHMINPOSUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phminposuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phminposuw src) => AsmMnemonics.PHMINPOSUW;

            public static implicit operator AsmHexCode(Phminposuw src) => src.Encoded;

            public static implicit operator Phminposuw(AsmHexCode src) => new Phminposuw(src);
        }

        public Phminposuw phminposuw() => default;

        [MethodImpl(Inline), Op]
        public Phminposuw phminposuw(AsmHexCode encoded) => new Phminposuw(encoded);

        public struct Phsubd : ITypedInstruction<Phsubd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phsubd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHSUBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phsubd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phsubd src) => AsmMnemonics.PHSUBD;

            public static implicit operator AsmHexCode(Phsubd src) => src.Encoded;

            public static implicit operator Phsubd(AsmHexCode src) => new Phsubd(src);
        }

        public Phsubd phsubd() => default;

        [MethodImpl(Inline), Op]
        public Phsubd phsubd(AsmHexCode encoded) => new Phsubd(encoded);

        public struct Phsubsw : ITypedInstruction<Phsubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phsubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHSUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phsubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phsubsw src) => AsmMnemonics.PHSUBSW;

            public static implicit operator AsmHexCode(Phsubsw src) => src.Encoded;

            public static implicit operator Phsubsw(AsmHexCode src) => new Phsubsw(src);
        }

        public Phsubsw phsubsw() => default;

        [MethodImpl(Inline), Op]
        public Phsubsw phsubsw(AsmHexCode encoded) => new Phsubsw(encoded);

        public struct Phsubw : ITypedInstruction<Phsubw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Phsubw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PHSUBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Phsubw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Phsubw src) => AsmMnemonics.PHSUBW;

            public static implicit operator AsmHexCode(Phsubw src) => src.Encoded;

            public static implicit operator Phsubw(AsmHexCode src) => new Phsubw(src);
        }

        public Phsubw phsubw() => default;

        [MethodImpl(Inline), Op]
        public Phsubw phsubw(AsmHexCode encoded) => new Phsubw(encoded);

        public struct Pi2fd : ITypedInstruction<Pi2fd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pi2fd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PI2FD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pi2fd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pi2fd src) => AsmMnemonics.PI2FD;

            public static implicit operator AsmHexCode(Pi2fd src) => src.Encoded;

            public static implicit operator Pi2fd(AsmHexCode src) => new Pi2fd(src);
        }

        public Pi2fd pi2fd() => default;

        [MethodImpl(Inline), Op]
        public Pi2fd pi2fd(AsmHexCode encoded) => new Pi2fd(encoded);

        public struct Pi2fw : ITypedInstruction<Pi2fw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pi2fw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PI2FW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pi2fw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pi2fw src) => AsmMnemonics.PI2FW;

            public static implicit operator AsmHexCode(Pi2fw src) => src.Encoded;

            public static implicit operator Pi2fw(AsmHexCode src) => new Pi2fw(src);
        }

        public Pi2fw pi2fw() => default;

        [MethodImpl(Inline), Op]
        public Pi2fw pi2fw(AsmHexCode encoded) => new Pi2fw(encoded);

        public struct Pinsrb : ITypedInstruction<Pinsrb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pinsrb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PINSRB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pinsrb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pinsrb src) => AsmMnemonics.PINSRB;

            public static implicit operator AsmHexCode(Pinsrb src) => src.Encoded;

            public static implicit operator Pinsrb(AsmHexCode src) => new Pinsrb(src);
        }

        public Pinsrb pinsrb() => default;

        [MethodImpl(Inline), Op]
        public Pinsrb pinsrb(AsmHexCode encoded) => new Pinsrb(encoded);

        public struct Pinsrd : ITypedInstruction<Pinsrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pinsrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PINSRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pinsrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pinsrd src) => AsmMnemonics.PINSRD;

            public static implicit operator AsmHexCode(Pinsrd src) => src.Encoded;

            public static implicit operator Pinsrd(AsmHexCode src) => new Pinsrd(src);
        }

        public Pinsrd pinsrd() => default;

        [MethodImpl(Inline), Op]
        public Pinsrd pinsrd(AsmHexCode encoded) => new Pinsrd(encoded);

        public struct Pinsrq : ITypedInstruction<Pinsrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pinsrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PINSRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pinsrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pinsrq src) => AsmMnemonics.PINSRQ;

            public static implicit operator AsmHexCode(Pinsrq src) => src.Encoded;

            public static implicit operator Pinsrq(AsmHexCode src) => new Pinsrq(src);
        }

        public Pinsrq pinsrq() => default;

        [MethodImpl(Inline), Op]
        public Pinsrq pinsrq(AsmHexCode encoded) => new Pinsrq(encoded);

        public struct Pinsrw : ITypedInstruction<Pinsrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pinsrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PINSRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pinsrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pinsrw src) => AsmMnemonics.PINSRW;

            public static implicit operator AsmHexCode(Pinsrw src) => src.Encoded;

            public static implicit operator Pinsrw(AsmHexCode src) => new Pinsrw(src);
        }

        public Pinsrw pinsrw() => default;

        [MethodImpl(Inline), Op]
        public Pinsrw pinsrw(AsmHexCode encoded) => new Pinsrw(encoded);

        public struct Pmaddubsw : ITypedInstruction<Pmaddubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaddubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMADDUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaddubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaddubsw src) => AsmMnemonics.PMADDUBSW;

            public static implicit operator AsmHexCode(Pmaddubsw src) => src.Encoded;

            public static implicit operator Pmaddubsw(AsmHexCode src) => new Pmaddubsw(src);
        }

        public Pmaddubsw pmaddubsw() => default;

        [MethodImpl(Inline), Op]
        public Pmaddubsw pmaddubsw(AsmHexCode encoded) => new Pmaddubsw(encoded);

        public struct Pmaddwd : ITypedInstruction<Pmaddwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaddwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMADDWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaddwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaddwd src) => AsmMnemonics.PMADDWD;

            public static implicit operator AsmHexCode(Pmaddwd src) => src.Encoded;

            public static implicit operator Pmaddwd(AsmHexCode src) => new Pmaddwd(src);
        }

        public Pmaddwd pmaddwd() => default;

        [MethodImpl(Inline), Op]
        public Pmaddwd pmaddwd(AsmHexCode encoded) => new Pmaddwd(encoded);

        public struct Pmaxsb : ITypedInstruction<Pmaxsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxsb src) => AsmMnemonics.PMAXSB;

            public static implicit operator AsmHexCode(Pmaxsb src) => src.Encoded;

            public static implicit operator Pmaxsb(AsmHexCode src) => new Pmaxsb(src);
        }

        public Pmaxsb pmaxsb() => default;

        [MethodImpl(Inline), Op]
        public Pmaxsb pmaxsb(AsmHexCode encoded) => new Pmaxsb(encoded);

        public struct Pmaxsd : ITypedInstruction<Pmaxsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxsd src) => AsmMnemonics.PMAXSD;

            public static implicit operator AsmHexCode(Pmaxsd src) => src.Encoded;

            public static implicit operator Pmaxsd(AsmHexCode src) => new Pmaxsd(src);
        }

        public Pmaxsd pmaxsd() => default;

        [MethodImpl(Inline), Op]
        public Pmaxsd pmaxsd(AsmHexCode encoded) => new Pmaxsd(encoded);

        public struct Pmaxsw : ITypedInstruction<Pmaxsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxsw src) => AsmMnemonics.PMAXSW;

            public static implicit operator AsmHexCode(Pmaxsw src) => src.Encoded;

            public static implicit operator Pmaxsw(AsmHexCode src) => new Pmaxsw(src);
        }

        public Pmaxsw pmaxsw() => default;

        [MethodImpl(Inline), Op]
        public Pmaxsw pmaxsw(AsmHexCode encoded) => new Pmaxsw(encoded);

        public struct Pmaxub : ITypedInstruction<Pmaxub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxub src) => AsmMnemonics.PMAXUB;

            public static implicit operator AsmHexCode(Pmaxub src) => src.Encoded;

            public static implicit operator Pmaxub(AsmHexCode src) => new Pmaxub(src);
        }

        public Pmaxub pmaxub() => default;

        [MethodImpl(Inline), Op]
        public Pmaxub pmaxub(AsmHexCode encoded) => new Pmaxub(encoded);

        public struct Pmaxud : ITypedInstruction<Pmaxud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxud src) => AsmMnemonics.PMAXUD;

            public static implicit operator AsmHexCode(Pmaxud src) => src.Encoded;

            public static implicit operator Pmaxud(AsmHexCode src) => new Pmaxud(src);
        }

        public Pmaxud pmaxud() => default;

        [MethodImpl(Inline), Op]
        public Pmaxud pmaxud(AsmHexCode encoded) => new Pmaxud(encoded);

        public struct Pmaxuw : ITypedInstruction<Pmaxuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmaxuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMAXUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmaxuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmaxuw src) => AsmMnemonics.PMAXUW;

            public static implicit operator AsmHexCode(Pmaxuw src) => src.Encoded;

            public static implicit operator Pmaxuw(AsmHexCode src) => new Pmaxuw(src);
        }

        public Pmaxuw pmaxuw() => default;

        [MethodImpl(Inline), Op]
        public Pmaxuw pmaxuw(AsmHexCode encoded) => new Pmaxuw(encoded);

        public struct Pminsb : ITypedInstruction<Pminsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminsb src) => AsmMnemonics.PMINSB;

            public static implicit operator AsmHexCode(Pminsb src) => src.Encoded;

            public static implicit operator Pminsb(AsmHexCode src) => new Pminsb(src);
        }

        public Pminsb pminsb() => default;

        [MethodImpl(Inline), Op]
        public Pminsb pminsb(AsmHexCode encoded) => new Pminsb(encoded);

        public struct Pminsd : ITypedInstruction<Pminsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminsd src) => AsmMnemonics.PMINSD;

            public static implicit operator AsmHexCode(Pminsd src) => src.Encoded;

            public static implicit operator Pminsd(AsmHexCode src) => new Pminsd(src);
        }

        public Pminsd pminsd() => default;

        [MethodImpl(Inline), Op]
        public Pminsd pminsd(AsmHexCode encoded) => new Pminsd(encoded);

        public struct Pminsw : ITypedInstruction<Pminsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminsw src) => AsmMnemonics.PMINSW;

            public static implicit operator AsmHexCode(Pminsw src) => src.Encoded;

            public static implicit operator Pminsw(AsmHexCode src) => new Pminsw(src);
        }

        public Pminsw pminsw() => default;

        [MethodImpl(Inline), Op]
        public Pminsw pminsw(AsmHexCode encoded) => new Pminsw(encoded);

        public struct Pminub : ITypedInstruction<Pminub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminub src) => AsmMnemonics.PMINUB;

            public static implicit operator AsmHexCode(Pminub src) => src.Encoded;

            public static implicit operator Pminub(AsmHexCode src) => new Pminub(src);
        }

        public Pminub pminub() => default;

        [MethodImpl(Inline), Op]
        public Pminub pminub(AsmHexCode encoded) => new Pminub(encoded);

        public struct Pminud : ITypedInstruction<Pminud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminud src) => AsmMnemonics.PMINUD;

            public static implicit operator AsmHexCode(Pminud src) => src.Encoded;

            public static implicit operator Pminud(AsmHexCode src) => new Pminud(src);
        }

        public Pminud pminud() => default;

        [MethodImpl(Inline), Op]
        public Pminud pminud(AsmHexCode encoded) => new Pminud(encoded);

        public struct Pminuw : ITypedInstruction<Pminuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pminuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMINUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pminuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pminuw src) => AsmMnemonics.PMINUW;

            public static implicit operator AsmHexCode(Pminuw src) => src.Encoded;

            public static implicit operator Pminuw(AsmHexCode src) => new Pminuw(src);
        }

        public Pminuw pminuw() => default;

        [MethodImpl(Inline), Op]
        public Pminuw pminuw(AsmHexCode encoded) => new Pminuw(encoded);

        public struct Pmovmskb : ITypedInstruction<Pmovmskb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovmskb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVMSKB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovmskb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovmskb src) => AsmMnemonics.PMOVMSKB;

            public static implicit operator AsmHexCode(Pmovmskb src) => src.Encoded;

            public static implicit operator Pmovmskb(AsmHexCode src) => new Pmovmskb(src);
        }

        public Pmovmskb pmovmskb() => default;

        [MethodImpl(Inline), Op]
        public Pmovmskb pmovmskb(AsmHexCode encoded) => new Pmovmskb(encoded);

        public struct Pmovsxbd : ITypedInstruction<Pmovsxbd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxbd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxbd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxbd src) => AsmMnemonics.PMOVSXBD;

            public static implicit operator AsmHexCode(Pmovsxbd src) => src.Encoded;

            public static implicit operator Pmovsxbd(AsmHexCode src) => new Pmovsxbd(src);
        }

        public Pmovsxbd pmovsxbd() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxbd pmovsxbd(AsmHexCode encoded) => new Pmovsxbd(encoded);

        public struct Pmovsxbq : ITypedInstruction<Pmovsxbq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxbq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxbq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxbq src) => AsmMnemonics.PMOVSXBQ;

            public static implicit operator AsmHexCode(Pmovsxbq src) => src.Encoded;

            public static implicit operator Pmovsxbq(AsmHexCode src) => new Pmovsxbq(src);
        }

        public Pmovsxbq pmovsxbq() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxbq pmovsxbq(AsmHexCode encoded) => new Pmovsxbq(encoded);

        public struct Pmovsxbw : ITypedInstruction<Pmovsxbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxbw src) => AsmMnemonics.PMOVSXBW;

            public static implicit operator AsmHexCode(Pmovsxbw src) => src.Encoded;

            public static implicit operator Pmovsxbw(AsmHexCode src) => new Pmovsxbw(src);
        }

        public Pmovsxbw pmovsxbw() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxbw pmovsxbw(AsmHexCode encoded) => new Pmovsxbw(encoded);

        public struct Pmovsxdq : ITypedInstruction<Pmovsxdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxdq src) => AsmMnemonics.PMOVSXDQ;

            public static implicit operator AsmHexCode(Pmovsxdq src) => src.Encoded;

            public static implicit operator Pmovsxdq(AsmHexCode src) => new Pmovsxdq(src);
        }

        public Pmovsxdq pmovsxdq() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxdq pmovsxdq(AsmHexCode encoded) => new Pmovsxdq(encoded);

        public struct Pmovsxwd : ITypedInstruction<Pmovsxwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxwd src) => AsmMnemonics.PMOVSXWD;

            public static implicit operator AsmHexCode(Pmovsxwd src) => src.Encoded;

            public static implicit operator Pmovsxwd(AsmHexCode src) => new Pmovsxwd(src);
        }

        public Pmovsxwd pmovsxwd() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxwd pmovsxwd(AsmHexCode encoded) => new Pmovsxwd(encoded);

        public struct Pmovsxwq : ITypedInstruction<Pmovsxwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovsxwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVSXWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovsxwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovsxwq src) => AsmMnemonics.PMOVSXWQ;

            public static implicit operator AsmHexCode(Pmovsxwq src) => src.Encoded;

            public static implicit operator Pmovsxwq(AsmHexCode src) => new Pmovsxwq(src);
        }

        public Pmovsxwq pmovsxwq() => default;

        [MethodImpl(Inline), Op]
        public Pmovsxwq pmovsxwq(AsmHexCode encoded) => new Pmovsxwq(encoded);

        public struct Pmovzxbd : ITypedInstruction<Pmovzxbd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxbd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxbd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxbd src) => AsmMnemonics.PMOVZXBD;

            public static implicit operator AsmHexCode(Pmovzxbd src) => src.Encoded;

            public static implicit operator Pmovzxbd(AsmHexCode src) => new Pmovzxbd(src);
        }

        public Pmovzxbd pmovzxbd() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxbd pmovzxbd(AsmHexCode encoded) => new Pmovzxbd(encoded);

        public struct Pmovzxbq : ITypedInstruction<Pmovzxbq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxbq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxbq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxbq src) => AsmMnemonics.PMOVZXBQ;

            public static implicit operator AsmHexCode(Pmovzxbq src) => src.Encoded;

            public static implicit operator Pmovzxbq(AsmHexCode src) => new Pmovzxbq(src);
        }

        public Pmovzxbq pmovzxbq() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxbq pmovzxbq(AsmHexCode encoded) => new Pmovzxbq(encoded);

        public struct Pmovzxbw : ITypedInstruction<Pmovzxbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxbw src) => AsmMnemonics.PMOVZXBW;

            public static implicit operator AsmHexCode(Pmovzxbw src) => src.Encoded;

            public static implicit operator Pmovzxbw(AsmHexCode src) => new Pmovzxbw(src);
        }

        public Pmovzxbw pmovzxbw() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxbw pmovzxbw(AsmHexCode encoded) => new Pmovzxbw(encoded);

        public struct Pmovzxdq : ITypedInstruction<Pmovzxdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxdq src) => AsmMnemonics.PMOVZXDQ;

            public static implicit operator AsmHexCode(Pmovzxdq src) => src.Encoded;

            public static implicit operator Pmovzxdq(AsmHexCode src) => new Pmovzxdq(src);
        }

        public Pmovzxdq pmovzxdq() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxdq pmovzxdq(AsmHexCode encoded) => new Pmovzxdq(encoded);

        public struct Pmovzxwd : ITypedInstruction<Pmovzxwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxwd src) => AsmMnemonics.PMOVZXWD;

            public static implicit operator AsmHexCode(Pmovzxwd src) => src.Encoded;

            public static implicit operator Pmovzxwd(AsmHexCode src) => new Pmovzxwd(src);
        }

        public Pmovzxwd pmovzxwd() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxwd pmovzxwd(AsmHexCode encoded) => new Pmovzxwd(encoded);

        public struct Pmovzxwq : ITypedInstruction<Pmovzxwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmovzxwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMOVZXWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmovzxwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmovzxwq src) => AsmMnemonics.PMOVZXWQ;

            public static implicit operator AsmHexCode(Pmovzxwq src) => src.Encoded;

            public static implicit operator Pmovzxwq(AsmHexCode src) => new Pmovzxwq(src);
        }

        public Pmovzxwq pmovzxwq() => default;

        [MethodImpl(Inline), Op]
        public Pmovzxwq pmovzxwq(AsmHexCode encoded) => new Pmovzxwq(encoded);

        public struct Pmuldq : ITypedInstruction<Pmuldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmuldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmuldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmuldq src) => AsmMnemonics.PMULDQ;

            public static implicit operator AsmHexCode(Pmuldq src) => src.Encoded;

            public static implicit operator Pmuldq(AsmHexCode src) => new Pmuldq(src);
        }

        public Pmuldq pmuldq() => default;

        [MethodImpl(Inline), Op]
        public Pmuldq pmuldq(AsmHexCode encoded) => new Pmuldq(encoded);

        public struct Pmulhrsw : ITypedInstruction<Pmulhrsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmulhrsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULHRSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmulhrsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmulhrsw src) => AsmMnemonics.PMULHRSW;

            public static implicit operator AsmHexCode(Pmulhrsw src) => src.Encoded;

            public static implicit operator Pmulhrsw(AsmHexCode src) => new Pmulhrsw(src);
        }

        public Pmulhrsw pmulhrsw() => default;

        [MethodImpl(Inline), Op]
        public Pmulhrsw pmulhrsw(AsmHexCode encoded) => new Pmulhrsw(encoded);

        public struct Pmulhrw : ITypedInstruction<Pmulhrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmulhrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULHRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmulhrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmulhrw src) => AsmMnemonics.PMULHRW;

            public static implicit operator AsmHexCode(Pmulhrw src) => src.Encoded;

            public static implicit operator Pmulhrw(AsmHexCode src) => new Pmulhrw(src);
        }

        public Pmulhrw pmulhrw() => default;

        [MethodImpl(Inline), Op]
        public Pmulhrw pmulhrw(AsmHexCode encoded) => new Pmulhrw(encoded);

        public struct Pmulhuw : ITypedInstruction<Pmulhuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmulhuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULHUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmulhuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmulhuw src) => AsmMnemonics.PMULHUW;

            public static implicit operator AsmHexCode(Pmulhuw src) => src.Encoded;

            public static implicit operator Pmulhuw(AsmHexCode src) => new Pmulhuw(src);
        }

        public Pmulhuw pmulhuw() => default;

        [MethodImpl(Inline), Op]
        public Pmulhuw pmulhuw(AsmHexCode encoded) => new Pmulhuw(encoded);

        public struct Pmulhw : ITypedInstruction<Pmulhw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmulhw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULHW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmulhw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmulhw src) => AsmMnemonics.PMULHW;

            public static implicit operator AsmHexCode(Pmulhw src) => src.Encoded;

            public static implicit operator Pmulhw(AsmHexCode src) => new Pmulhw(src);
        }

        public Pmulhw pmulhw() => default;

        [MethodImpl(Inline), Op]
        public Pmulhw pmulhw(AsmHexCode encoded) => new Pmulhw(encoded);

        public struct Pmulld : ITypedInstruction<Pmulld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmulld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmulld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmulld src) => AsmMnemonics.PMULLD;

            public static implicit operator AsmHexCode(Pmulld src) => src.Encoded;

            public static implicit operator Pmulld(AsmHexCode src) => new Pmulld(src);
        }

        public Pmulld pmulld() => default;

        [MethodImpl(Inline), Op]
        public Pmulld pmulld(AsmHexCode encoded) => new Pmulld(encoded);

        public struct Pmullw : ITypedInstruction<Pmullw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmullw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmullw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmullw src) => AsmMnemonics.PMULLW;

            public static implicit operator AsmHexCode(Pmullw src) => src.Encoded;

            public static implicit operator Pmullw(AsmHexCode src) => new Pmullw(src);
        }

        public Pmullw pmullw() => default;

        [MethodImpl(Inline), Op]
        public Pmullw pmullw(AsmHexCode encoded) => new Pmullw(encoded);

        public struct Pmuludq : ITypedInstruction<Pmuludq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pmuludq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PMULUDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pmuludq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pmuludq src) => AsmMnemonics.PMULUDQ;

            public static implicit operator AsmHexCode(Pmuludq src) => src.Encoded;

            public static implicit operator Pmuludq(AsmHexCode src) => new Pmuludq(src);
        }

        public Pmuludq pmuludq() => default;

        [MethodImpl(Inline), Op]
        public Pmuludq pmuludq(AsmHexCode encoded) => new Pmuludq(encoded);

        public struct Pop : ITypedInstruction<Pop>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pop(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pop src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pop src) => AsmMnemonics.POP;

            public static implicit operator AsmHexCode(Pop src) => src.Encoded;

            public static implicit operator Pop(AsmHexCode src) => new Pop(src);
        }

        public Pop pop() => default;

        [MethodImpl(Inline), Op]
        public Pop pop(AsmHexCode encoded) => new Pop(encoded);

        public struct Popa : ITypedInstruction<Popa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popa src) => AsmMnemonics.POPA;

            public static implicit operator AsmHexCode(Popa src) => src.Encoded;

            public static implicit operator Popa(AsmHexCode src) => new Popa(src);
        }

        public Popa popa() => default;

        [MethodImpl(Inline), Op]
        public Popa popa(AsmHexCode encoded) => new Popa(encoded);

        public struct Popad : ITypedInstruction<Popad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popad src) => AsmMnemonics.POPAD;

            public static implicit operator AsmHexCode(Popad src) => src.Encoded;

            public static implicit operator Popad(AsmHexCode src) => new Popad(src);
        }

        public Popad popad() => default;

        [MethodImpl(Inline), Op]
        public Popad popad(AsmHexCode encoded) => new Popad(encoded);

        public struct Popcnt : ITypedInstruction<Popcnt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popcnt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPCNT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popcnt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popcnt src) => AsmMnemonics.POPCNT;

            public static implicit operator AsmHexCode(Popcnt src) => src.Encoded;

            public static implicit operator Popcnt(AsmHexCode src) => new Popcnt(src);
        }

        public Popcnt popcnt() => default;

        [MethodImpl(Inline), Op]
        public Popcnt popcnt(AsmHexCode encoded) => new Popcnt(encoded);

        public struct Popf : ITypedInstruction<Popf>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popf(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popf src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popf src) => AsmMnemonics.POPF;

            public static implicit operator AsmHexCode(Popf src) => src.Encoded;

            public static implicit operator Popf(AsmHexCode src) => new Popf(src);
        }

        public Popf popf() => default;

        [MethodImpl(Inline), Op]
        public Popf popf(AsmHexCode encoded) => new Popf(encoded);

        public struct Popfd : ITypedInstruction<Popfd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popfd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPFD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popfd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popfd src) => AsmMnemonics.POPFD;

            public static implicit operator AsmHexCode(Popfd src) => src.Encoded;

            public static implicit operator Popfd(AsmHexCode src) => new Popfd(src);
        }

        public Popfd popfd() => default;

        [MethodImpl(Inline), Op]
        public Popfd popfd(AsmHexCode encoded) => new Popfd(encoded);

        public struct Popfq : ITypedInstruction<Popfq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Popfq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POPFQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Popfq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Popfq src) => AsmMnemonics.POPFQ;

            public static implicit operator AsmHexCode(Popfq src) => src.Encoded;

            public static implicit operator Popfq(AsmHexCode src) => new Popfq(src);
        }

        public Popfq popfq() => default;

        [MethodImpl(Inline), Op]
        public Popfq popfq(AsmHexCode encoded) => new Popfq(encoded);

        public struct Por : ITypedInstruction<Por>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Por(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.POR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Por src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Por src) => AsmMnemonics.POR;

            public static implicit operator AsmHexCode(Por src) => src.Encoded;

            public static implicit operator Por(AsmHexCode src) => new Por(src);
        }

        public Por por() => default;

        [MethodImpl(Inline), Op]
        public Por por(AsmHexCode encoded) => new Por(encoded);

        public struct Prefetch_exclusive : ITypedInstruction<Prefetch_exclusive>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetch_exclusive(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCH_EXCLUSIVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetch_exclusive src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetch_exclusive src) => AsmMnemonics.PREFETCH_EXCLUSIVE;

            public static implicit operator AsmHexCode(Prefetch_exclusive src) => src.Encoded;

            public static implicit operator Prefetch_exclusive(AsmHexCode src) => new Prefetch_exclusive(src);
        }

        public Prefetch_exclusive prefetch_exclusive() => default;

        [MethodImpl(Inline), Op]
        public Prefetch_exclusive prefetch_exclusive(AsmHexCode encoded) => new Prefetch_exclusive(encoded);

        public struct Prefetch_reserved : ITypedInstruction<Prefetch_reserved>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetch_reserved(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCH_RESERVED;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetch_reserved src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetch_reserved src) => AsmMnemonics.PREFETCH_RESERVED;

            public static implicit operator AsmHexCode(Prefetch_reserved src) => src.Encoded;

            public static implicit operator Prefetch_reserved(AsmHexCode src) => new Prefetch_reserved(src);
        }

        public Prefetch_reserved prefetch_reserved() => default;

        [MethodImpl(Inline), Op]
        public Prefetch_reserved prefetch_reserved(AsmHexCode encoded) => new Prefetch_reserved(encoded);

        public struct Prefetchnta : ITypedInstruction<Prefetchnta>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetchnta(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHNTA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetchnta src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetchnta src) => AsmMnemonics.PREFETCHNTA;

            public static implicit operator AsmHexCode(Prefetchnta src) => src.Encoded;

            public static implicit operator Prefetchnta(AsmHexCode src) => new Prefetchnta(src);
        }

        public Prefetchnta prefetchnta() => default;

        [MethodImpl(Inline), Op]
        public Prefetchnta prefetchnta(AsmHexCode encoded) => new Prefetchnta(encoded);

        public struct Prefetcht0 : ITypedInstruction<Prefetcht0>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetcht0(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHT0;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetcht0 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetcht0 src) => AsmMnemonics.PREFETCHT0;

            public static implicit operator AsmHexCode(Prefetcht0 src) => src.Encoded;

            public static implicit operator Prefetcht0(AsmHexCode src) => new Prefetcht0(src);
        }

        public Prefetcht0 prefetcht0() => default;

        [MethodImpl(Inline), Op]
        public Prefetcht0 prefetcht0(AsmHexCode encoded) => new Prefetcht0(encoded);

        public struct Prefetcht1 : ITypedInstruction<Prefetcht1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetcht1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetcht1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetcht1 src) => AsmMnemonics.PREFETCHT1;

            public static implicit operator AsmHexCode(Prefetcht1 src) => src.Encoded;

            public static implicit operator Prefetcht1(AsmHexCode src) => new Prefetcht1(src);
        }

        public Prefetcht1 prefetcht1() => default;

        [MethodImpl(Inline), Op]
        public Prefetcht1 prefetcht1(AsmHexCode encoded) => new Prefetcht1(encoded);

        public struct Prefetcht2 : ITypedInstruction<Prefetcht2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetcht2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHT2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetcht2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetcht2 src) => AsmMnemonics.PREFETCHT2;

            public static implicit operator AsmHexCode(Prefetcht2 src) => src.Encoded;

            public static implicit operator Prefetcht2(AsmHexCode src) => new Prefetcht2(src);
        }

        public Prefetcht2 prefetcht2() => default;

        [MethodImpl(Inline), Op]
        public Prefetcht2 prefetcht2(AsmHexCode encoded) => new Prefetcht2(encoded);

        public struct Prefetchw : ITypedInstruction<Prefetchw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetchw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetchw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetchw src) => AsmMnemonics.PREFETCHW;

            public static implicit operator AsmHexCode(Prefetchw src) => src.Encoded;

            public static implicit operator Prefetchw(AsmHexCode src) => new Prefetchw(src);
        }

        public Prefetchw prefetchw() => default;

        [MethodImpl(Inline), Op]
        public Prefetchw prefetchw(AsmHexCode encoded) => new Prefetchw(encoded);

        public struct Prefetchwt1 : ITypedInstruction<Prefetchwt1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Prefetchwt1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PREFETCHWT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Prefetchwt1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Prefetchwt1 src) => AsmMnemonics.PREFETCHWT1;

            public static implicit operator AsmHexCode(Prefetchwt1 src) => src.Encoded;

            public static implicit operator Prefetchwt1(AsmHexCode src) => new Prefetchwt1(src);
        }

        public Prefetchwt1 prefetchwt1() => default;

        [MethodImpl(Inline), Op]
        public Prefetchwt1 prefetchwt1(AsmHexCode encoded) => new Prefetchwt1(encoded);

        public struct Psadbw : ITypedInstruction<Psadbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psadbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSADBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psadbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psadbw src) => AsmMnemonics.PSADBW;

            public static implicit operator AsmHexCode(Psadbw src) => src.Encoded;

            public static implicit operator Psadbw(AsmHexCode src) => new Psadbw(src);
        }

        public Psadbw psadbw() => default;

        [MethodImpl(Inline), Op]
        public Psadbw psadbw(AsmHexCode encoded) => new Psadbw(encoded);

        public struct Pshufb : ITypedInstruction<Pshufb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pshufb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSHUFB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pshufb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pshufb src) => AsmMnemonics.PSHUFB;

            public static implicit operator AsmHexCode(Pshufb src) => src.Encoded;

            public static implicit operator Pshufb(AsmHexCode src) => new Pshufb(src);
        }

        public Pshufb pshufb() => default;

        [MethodImpl(Inline), Op]
        public Pshufb pshufb(AsmHexCode encoded) => new Pshufb(encoded);

        public struct Pshufd : ITypedInstruction<Pshufd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pshufd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSHUFD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pshufd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pshufd src) => AsmMnemonics.PSHUFD;

            public static implicit operator AsmHexCode(Pshufd src) => src.Encoded;

            public static implicit operator Pshufd(AsmHexCode src) => new Pshufd(src);
        }

        public Pshufd pshufd() => default;

        [MethodImpl(Inline), Op]
        public Pshufd pshufd(AsmHexCode encoded) => new Pshufd(encoded);

        public struct Pshufhw : ITypedInstruction<Pshufhw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pshufhw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSHUFHW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pshufhw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pshufhw src) => AsmMnemonics.PSHUFHW;

            public static implicit operator AsmHexCode(Pshufhw src) => src.Encoded;

            public static implicit operator Pshufhw(AsmHexCode src) => new Pshufhw(src);
        }

        public Pshufhw pshufhw() => default;

        [MethodImpl(Inline), Op]
        public Pshufhw pshufhw(AsmHexCode encoded) => new Pshufhw(encoded);

        public struct Pshuflw : ITypedInstruction<Pshuflw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pshuflw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSHUFLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pshuflw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pshuflw src) => AsmMnemonics.PSHUFLW;

            public static implicit operator AsmHexCode(Pshuflw src) => src.Encoded;

            public static implicit operator Pshuflw(AsmHexCode src) => new Pshuflw(src);
        }

        public Pshuflw pshuflw() => default;

        [MethodImpl(Inline), Op]
        public Pshuflw pshuflw(AsmHexCode encoded) => new Pshuflw(encoded);

        public struct Pshufw : ITypedInstruction<Pshufw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pshufw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSHUFW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pshufw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pshufw src) => AsmMnemonics.PSHUFW;

            public static implicit operator AsmHexCode(Pshufw src) => src.Encoded;

            public static implicit operator Pshufw(AsmHexCode src) => new Pshufw(src);
        }

        public Pshufw pshufw() => default;

        [MethodImpl(Inline), Op]
        public Pshufw pshufw(AsmHexCode encoded) => new Pshufw(encoded);

        public struct Psignb : ITypedInstruction<Psignb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psignb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSIGNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psignb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psignb src) => AsmMnemonics.PSIGNB;

            public static implicit operator AsmHexCode(Psignb src) => src.Encoded;

            public static implicit operator Psignb(AsmHexCode src) => new Psignb(src);
        }

        public Psignb psignb() => default;

        [MethodImpl(Inline), Op]
        public Psignb psignb(AsmHexCode encoded) => new Psignb(encoded);

        public struct Psignd : ITypedInstruction<Psignd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psignd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSIGND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psignd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psignd src) => AsmMnemonics.PSIGND;

            public static implicit operator AsmHexCode(Psignd src) => src.Encoded;

            public static implicit operator Psignd(AsmHexCode src) => new Psignd(src);
        }

        public Psignd psignd() => default;

        [MethodImpl(Inline), Op]
        public Psignd psignd(AsmHexCode encoded) => new Psignd(encoded);

        public struct Psignw : ITypedInstruction<Psignw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psignw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSIGNW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psignw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psignw src) => AsmMnemonics.PSIGNW;

            public static implicit operator AsmHexCode(Psignw src) => src.Encoded;

            public static implicit operator Psignw(AsmHexCode src) => new Psignw(src);
        }

        public Psignw psignw() => default;

        [MethodImpl(Inline), Op]
        public Psignw psignw(AsmHexCode encoded) => new Psignw(encoded);

        public struct Pslld : ITypedInstruction<Pslld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pslld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSLLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pslld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pslld src) => AsmMnemonics.PSLLD;

            public static implicit operator AsmHexCode(Pslld src) => src.Encoded;

            public static implicit operator Pslld(AsmHexCode src) => new Pslld(src);
        }

        public Pslld pslld() => default;

        [MethodImpl(Inline), Op]
        public Pslld pslld(AsmHexCode encoded) => new Pslld(encoded);

        public struct Pslldq : ITypedInstruction<Pslldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pslldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSLLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pslldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pslldq src) => AsmMnemonics.PSLLDQ;

            public static implicit operator AsmHexCode(Pslldq src) => src.Encoded;

            public static implicit operator Pslldq(AsmHexCode src) => new Pslldq(src);
        }

        public Pslldq pslldq() => default;

        [MethodImpl(Inline), Op]
        public Pslldq pslldq(AsmHexCode encoded) => new Pslldq(encoded);

        public struct Psllq : ITypedInstruction<Psllq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psllq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSLLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psllq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psllq src) => AsmMnemonics.PSLLQ;

            public static implicit operator AsmHexCode(Psllq src) => src.Encoded;

            public static implicit operator Psllq(AsmHexCode src) => new Psllq(src);
        }

        public Psllq psllq() => default;

        [MethodImpl(Inline), Op]
        public Psllq psllq(AsmHexCode encoded) => new Psllq(encoded);

        public struct Psllw : ITypedInstruction<Psllw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psllw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSLLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psllw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psllw src) => AsmMnemonics.PSLLW;

            public static implicit operator AsmHexCode(Psllw src) => src.Encoded;

            public static implicit operator Psllw(AsmHexCode src) => new Psllw(src);
        }

        public Psllw psllw() => default;

        [MethodImpl(Inline), Op]
        public Psllw psllw(AsmHexCode encoded) => new Psllw(encoded);

        public struct Psmash : ITypedInstruction<Psmash>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psmash(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSMASH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psmash src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psmash src) => AsmMnemonics.PSMASH;

            public static implicit operator AsmHexCode(Psmash src) => src.Encoded;

            public static implicit operator Psmash(AsmHexCode src) => new Psmash(src);
        }

        public Psmash psmash() => default;

        [MethodImpl(Inline), Op]
        public Psmash psmash(AsmHexCode encoded) => new Psmash(encoded);

        public struct Psrad : ITypedInstruction<Psrad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psrad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psrad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psrad src) => AsmMnemonics.PSRAD;

            public static implicit operator AsmHexCode(Psrad src) => src.Encoded;

            public static implicit operator Psrad(AsmHexCode src) => new Psrad(src);
        }

        public Psrad psrad() => default;

        [MethodImpl(Inline), Op]
        public Psrad psrad(AsmHexCode encoded) => new Psrad(encoded);

        public struct Psraw : ITypedInstruction<Psraw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psraw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRAW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psraw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psraw src) => AsmMnemonics.PSRAW;

            public static implicit operator AsmHexCode(Psraw src) => src.Encoded;

            public static implicit operator Psraw(AsmHexCode src) => new Psraw(src);
        }

        public Psraw psraw() => default;

        [MethodImpl(Inline), Op]
        public Psraw psraw(AsmHexCode encoded) => new Psraw(encoded);

        public struct Psrld : ITypedInstruction<Psrld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psrld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psrld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psrld src) => AsmMnemonics.PSRLD;

            public static implicit operator AsmHexCode(Psrld src) => src.Encoded;

            public static implicit operator Psrld(AsmHexCode src) => new Psrld(src);
        }

        public Psrld psrld() => default;

        [MethodImpl(Inline), Op]
        public Psrld psrld(AsmHexCode encoded) => new Psrld(encoded);

        public struct Psrldq : ITypedInstruction<Psrldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psrldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psrldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psrldq src) => AsmMnemonics.PSRLDQ;

            public static implicit operator AsmHexCode(Psrldq src) => src.Encoded;

            public static implicit operator Psrldq(AsmHexCode src) => new Psrldq(src);
        }

        public Psrldq psrldq() => default;

        [MethodImpl(Inline), Op]
        public Psrldq psrldq(AsmHexCode encoded) => new Psrldq(encoded);

        public struct Psrlq : ITypedInstruction<Psrlq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psrlq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psrlq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psrlq src) => AsmMnemonics.PSRLQ;

            public static implicit operator AsmHexCode(Psrlq src) => src.Encoded;

            public static implicit operator Psrlq(AsmHexCode src) => new Psrlq(src);
        }

        public Psrlq psrlq() => default;

        [MethodImpl(Inline), Op]
        public Psrlq psrlq(AsmHexCode encoded) => new Psrlq(encoded);

        public struct Psrlw : ITypedInstruction<Psrlw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psrlw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSRLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psrlw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psrlw src) => AsmMnemonics.PSRLW;

            public static implicit operator AsmHexCode(Psrlw src) => src.Encoded;

            public static implicit operator Psrlw(AsmHexCode src) => new Psrlw(src);
        }

        public Psrlw psrlw() => default;

        [MethodImpl(Inline), Op]
        public Psrlw psrlw(AsmHexCode encoded) => new Psrlw(encoded);

        public struct Psubb : ITypedInstruction<Psubb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubb src) => AsmMnemonics.PSUBB;

            public static implicit operator AsmHexCode(Psubb src) => src.Encoded;

            public static implicit operator Psubb(AsmHexCode src) => new Psubb(src);
        }

        public Psubb psubb() => default;

        [MethodImpl(Inline), Op]
        public Psubb psubb(AsmHexCode encoded) => new Psubb(encoded);

        public struct Psubd : ITypedInstruction<Psubd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubd src) => AsmMnemonics.PSUBD;

            public static implicit operator AsmHexCode(Psubd src) => src.Encoded;

            public static implicit operator Psubd(AsmHexCode src) => new Psubd(src);
        }

        public Psubd psubd() => default;

        [MethodImpl(Inline), Op]
        public Psubd psubd(AsmHexCode encoded) => new Psubd(encoded);

        public struct Psubq : ITypedInstruction<Psubq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubq src) => AsmMnemonics.PSUBQ;

            public static implicit operator AsmHexCode(Psubq src) => src.Encoded;

            public static implicit operator Psubq(AsmHexCode src) => new Psubq(src);
        }

        public Psubq psubq() => default;

        [MethodImpl(Inline), Op]
        public Psubq psubq(AsmHexCode encoded) => new Psubq(encoded);

        public struct Psubsb : ITypedInstruction<Psubsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubsb src) => AsmMnemonics.PSUBSB;

            public static implicit operator AsmHexCode(Psubsb src) => src.Encoded;

            public static implicit operator Psubsb(AsmHexCode src) => new Psubsb(src);
        }

        public Psubsb psubsb() => default;

        [MethodImpl(Inline), Op]
        public Psubsb psubsb(AsmHexCode encoded) => new Psubsb(encoded);

        public struct Psubsw : ITypedInstruction<Psubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubsw src) => AsmMnemonics.PSUBSW;

            public static implicit operator AsmHexCode(Psubsw src) => src.Encoded;

            public static implicit operator Psubsw(AsmHexCode src) => new Psubsw(src);
        }

        public Psubsw psubsw() => default;

        [MethodImpl(Inline), Op]
        public Psubsw psubsw(AsmHexCode encoded) => new Psubsw(encoded);

        public struct Psubusb : ITypedInstruction<Psubusb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubusb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBUSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubusb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubusb src) => AsmMnemonics.PSUBUSB;

            public static implicit operator AsmHexCode(Psubusb src) => src.Encoded;

            public static implicit operator Psubusb(AsmHexCode src) => new Psubusb(src);
        }

        public Psubusb psubusb() => default;

        [MethodImpl(Inline), Op]
        public Psubusb psubusb(AsmHexCode encoded) => new Psubusb(encoded);

        public struct Psubusw : ITypedInstruction<Psubusw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubusw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBUSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubusw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubusw src) => AsmMnemonics.PSUBUSW;

            public static implicit operator AsmHexCode(Psubusw src) => src.Encoded;

            public static implicit operator Psubusw(AsmHexCode src) => new Psubusw(src);
        }

        public Psubusw psubusw() => default;

        [MethodImpl(Inline), Op]
        public Psubusw psubusw(AsmHexCode encoded) => new Psubusw(encoded);

        public struct Psubw : ITypedInstruction<Psubw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Psubw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSUBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Psubw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Psubw src) => AsmMnemonics.PSUBW;

            public static implicit operator AsmHexCode(Psubw src) => src.Encoded;

            public static implicit operator Psubw(AsmHexCode src) => new Psubw(src);
        }

        public Psubw psubw() => default;

        [MethodImpl(Inline), Op]
        public Psubw psubw(AsmHexCode encoded) => new Psubw(encoded);

        public struct Pswapd : ITypedInstruction<Pswapd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pswapd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PSWAPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pswapd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pswapd src) => AsmMnemonics.PSWAPD;

            public static implicit operator AsmHexCode(Pswapd src) => src.Encoded;

            public static implicit operator Pswapd(AsmHexCode src) => new Pswapd(src);
        }

        public Pswapd pswapd() => default;

        [MethodImpl(Inline), Op]
        public Pswapd pswapd(AsmHexCode encoded) => new Pswapd(encoded);

        public struct Ptest : ITypedInstruction<Ptest>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ptest(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PTEST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ptest src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ptest src) => AsmMnemonics.PTEST;

            public static implicit operator AsmHexCode(Ptest src) => src.Encoded;

            public static implicit operator Ptest(AsmHexCode src) => new Ptest(src);
        }

        public Ptest ptest() => default;

        [MethodImpl(Inline), Op]
        public Ptest ptest(AsmHexCode encoded) => new Ptest(encoded);

        public struct Ptwrite : ITypedInstruction<Ptwrite>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ptwrite(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PTWRITE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ptwrite src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ptwrite src) => AsmMnemonics.PTWRITE;

            public static implicit operator AsmHexCode(Ptwrite src) => src.Encoded;

            public static implicit operator Ptwrite(AsmHexCode src) => new Ptwrite(src);
        }

        public Ptwrite ptwrite() => default;

        [MethodImpl(Inline), Op]
        public Ptwrite ptwrite(AsmHexCode encoded) => new Ptwrite(encoded);

        public struct Punpckhbw : ITypedInstruction<Punpckhbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpckhbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKHBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpckhbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpckhbw src) => AsmMnemonics.PUNPCKHBW;

            public static implicit operator AsmHexCode(Punpckhbw src) => src.Encoded;

            public static implicit operator Punpckhbw(AsmHexCode src) => new Punpckhbw(src);
        }

        public Punpckhbw punpckhbw() => default;

        [MethodImpl(Inline), Op]
        public Punpckhbw punpckhbw(AsmHexCode encoded) => new Punpckhbw(encoded);

        public struct Punpckhdq : ITypedInstruction<Punpckhdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpckhdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKHDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpckhdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpckhdq src) => AsmMnemonics.PUNPCKHDQ;

            public static implicit operator AsmHexCode(Punpckhdq src) => src.Encoded;

            public static implicit operator Punpckhdq(AsmHexCode src) => new Punpckhdq(src);
        }

        public Punpckhdq punpckhdq() => default;

        [MethodImpl(Inline), Op]
        public Punpckhdq punpckhdq(AsmHexCode encoded) => new Punpckhdq(encoded);

        public struct Punpckhqdq : ITypedInstruction<Punpckhqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpckhqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKHQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpckhqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpckhqdq src) => AsmMnemonics.PUNPCKHQDQ;

            public static implicit operator AsmHexCode(Punpckhqdq src) => src.Encoded;

            public static implicit operator Punpckhqdq(AsmHexCode src) => new Punpckhqdq(src);
        }

        public Punpckhqdq punpckhqdq() => default;

        [MethodImpl(Inline), Op]
        public Punpckhqdq punpckhqdq(AsmHexCode encoded) => new Punpckhqdq(encoded);

        public struct Punpckhwd : ITypedInstruction<Punpckhwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpckhwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKHWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpckhwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpckhwd src) => AsmMnemonics.PUNPCKHWD;

            public static implicit operator AsmHexCode(Punpckhwd src) => src.Encoded;

            public static implicit operator Punpckhwd(AsmHexCode src) => new Punpckhwd(src);
        }

        public Punpckhwd punpckhwd() => default;

        [MethodImpl(Inline), Op]
        public Punpckhwd punpckhwd(AsmHexCode encoded) => new Punpckhwd(encoded);

        public struct Punpcklbw : ITypedInstruction<Punpcklbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpcklbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKLBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpcklbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpcklbw src) => AsmMnemonics.PUNPCKLBW;

            public static implicit operator AsmHexCode(Punpcklbw src) => src.Encoded;

            public static implicit operator Punpcklbw(AsmHexCode src) => new Punpcklbw(src);
        }

        public Punpcklbw punpcklbw() => default;

        [MethodImpl(Inline), Op]
        public Punpcklbw punpcklbw(AsmHexCode encoded) => new Punpcklbw(encoded);

        public struct Punpckldq : ITypedInstruction<Punpckldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpckldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpckldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpckldq src) => AsmMnemonics.PUNPCKLDQ;

            public static implicit operator AsmHexCode(Punpckldq src) => src.Encoded;

            public static implicit operator Punpckldq(AsmHexCode src) => new Punpckldq(src);
        }

        public Punpckldq punpckldq() => default;

        [MethodImpl(Inline), Op]
        public Punpckldq punpckldq(AsmHexCode encoded) => new Punpckldq(encoded);

        public struct Punpcklqdq : ITypedInstruction<Punpcklqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpcklqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKLQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpcklqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpcklqdq src) => AsmMnemonics.PUNPCKLQDQ;

            public static implicit operator AsmHexCode(Punpcklqdq src) => src.Encoded;

            public static implicit operator Punpcklqdq(AsmHexCode src) => new Punpcklqdq(src);
        }

        public Punpcklqdq punpcklqdq() => default;

        [MethodImpl(Inline), Op]
        public Punpcklqdq punpcklqdq(AsmHexCode encoded) => new Punpcklqdq(encoded);

        public struct Punpcklwd : ITypedInstruction<Punpcklwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Punpcklwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUNPCKLWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Punpcklwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Punpcklwd src) => AsmMnemonics.PUNPCKLWD;

            public static implicit operator AsmHexCode(Punpcklwd src) => src.Encoded;

            public static implicit operator Punpcklwd(AsmHexCode src) => new Punpcklwd(src);
        }

        public Punpcklwd punpcklwd() => default;

        [MethodImpl(Inline), Op]
        public Punpcklwd punpcklwd(AsmHexCode encoded) => new Punpcklwd(encoded);

        public struct Push : ITypedInstruction<Push>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Push(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Push src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Push src) => AsmMnemonics.PUSH;

            public static implicit operator AsmHexCode(Push src) => src.Encoded;

            public static implicit operator Push(AsmHexCode src) => new Push(src);
        }

        public Push push() => default;

        [MethodImpl(Inline), Op]
        public Push push(AsmHexCode encoded) => new Push(encoded);

        public struct Pusha : ITypedInstruction<Pusha>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pusha(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSHA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pusha src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pusha src) => AsmMnemonics.PUSHA;

            public static implicit operator AsmHexCode(Pusha src) => src.Encoded;

            public static implicit operator Pusha(AsmHexCode src) => new Pusha(src);
        }

        public Pusha pusha() => default;

        [MethodImpl(Inline), Op]
        public Pusha pusha(AsmHexCode encoded) => new Pusha(encoded);

        public struct Pushad : ITypedInstruction<Pushad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pushad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSHAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pushad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pushad src) => AsmMnemonics.PUSHAD;

            public static implicit operator AsmHexCode(Pushad src) => src.Encoded;

            public static implicit operator Pushad(AsmHexCode src) => new Pushad(src);
        }

        public Pushad pushad() => default;

        [MethodImpl(Inline), Op]
        public Pushad pushad(AsmHexCode encoded) => new Pushad(encoded);

        public struct Pushf : ITypedInstruction<Pushf>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pushf(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSHF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pushf src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pushf src) => AsmMnemonics.PUSHF;

            public static implicit operator AsmHexCode(Pushf src) => src.Encoded;

            public static implicit operator Pushf(AsmHexCode src) => new Pushf(src);
        }

        public Pushf pushf() => default;

        [MethodImpl(Inline), Op]
        public Pushf pushf(AsmHexCode encoded) => new Pushf(encoded);

        public struct Pushfd : ITypedInstruction<Pushfd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pushfd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSHFD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pushfd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pushfd src) => AsmMnemonics.PUSHFD;

            public static implicit operator AsmHexCode(Pushfd src) => src.Encoded;

            public static implicit operator Pushfd(AsmHexCode src) => new Pushfd(src);
        }

        public Pushfd pushfd() => default;

        [MethodImpl(Inline), Op]
        public Pushfd pushfd(AsmHexCode encoded) => new Pushfd(encoded);

        public struct Pushfq : ITypedInstruction<Pushfq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pushfq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PUSHFQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pushfq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pushfq src) => AsmMnemonics.PUSHFQ;

            public static implicit operator AsmHexCode(Pushfq src) => src.Encoded;

            public static implicit operator Pushfq(AsmHexCode src) => new Pushfq(src);
        }

        public Pushfq pushfq() => default;

        [MethodImpl(Inline), Op]
        public Pushfq pushfq(AsmHexCode encoded) => new Pushfq(encoded);

        public struct Pvalidate : ITypedInstruction<Pvalidate>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pvalidate(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PVALIDATE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pvalidate src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pvalidate src) => AsmMnemonics.PVALIDATE;

            public static implicit operator AsmHexCode(Pvalidate src) => src.Encoded;

            public static implicit operator Pvalidate(AsmHexCode src) => new Pvalidate(src);
        }

        public Pvalidate pvalidate() => default;

        [MethodImpl(Inline), Op]
        public Pvalidate pvalidate(AsmHexCode encoded) => new Pvalidate(encoded);

        public struct Pxor : ITypedInstruction<Pxor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Pxor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.PXOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Pxor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Pxor src) => AsmMnemonics.PXOR;

            public static implicit operator AsmHexCode(Pxor src) => src.Encoded;

            public static implicit operator Pxor(AsmHexCode src) => new Pxor(src);
        }

        public Pxor pxor() => default;

        [MethodImpl(Inline), Op]
        public Pxor pxor(AsmHexCode encoded) => new Pxor(encoded);

        public struct Rcl : ITypedInstruction<Rcl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rcl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RCL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rcl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rcl src) => AsmMnemonics.RCL;

            public static implicit operator AsmHexCode(Rcl src) => src.Encoded;

            public static implicit operator Rcl(AsmHexCode src) => new Rcl(src);
        }

        public Rcl rcl() => default;

        [MethodImpl(Inline), Op]
        public Rcl rcl(AsmHexCode encoded) => new Rcl(encoded);

        public struct Rcpps : ITypedInstruction<Rcpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rcpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RCPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rcpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rcpps src) => AsmMnemonics.RCPPS;

            public static implicit operator AsmHexCode(Rcpps src) => src.Encoded;

            public static implicit operator Rcpps(AsmHexCode src) => new Rcpps(src);
        }

        public Rcpps rcpps() => default;

        [MethodImpl(Inline), Op]
        public Rcpps rcpps(AsmHexCode encoded) => new Rcpps(encoded);

        public struct Rcpss : ITypedInstruction<Rcpss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rcpss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RCPSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rcpss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rcpss src) => AsmMnemonics.RCPSS;

            public static implicit operator AsmHexCode(Rcpss src) => src.Encoded;

            public static implicit operator Rcpss(AsmHexCode src) => new Rcpss(src);
        }

        public Rcpss rcpss() => default;

        [MethodImpl(Inline), Op]
        public Rcpss rcpss(AsmHexCode encoded) => new Rcpss(encoded);

        public struct Rcr : ITypedInstruction<Rcr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rcr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RCR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rcr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rcr src) => AsmMnemonics.RCR;

            public static implicit operator AsmHexCode(Rcr src) => src.Encoded;

            public static implicit operator Rcr(AsmHexCode src) => new Rcr(src);
        }

        public Rcr rcr() => default;

        [MethodImpl(Inline), Op]
        public Rcr rcr(AsmHexCode encoded) => new Rcr(encoded);

        public struct Rdfsbase : ITypedInstruction<Rdfsbase>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdfsbase(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDFSBASE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdfsbase src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdfsbase src) => AsmMnemonics.RDFSBASE;

            public static implicit operator AsmHexCode(Rdfsbase src) => src.Encoded;

            public static implicit operator Rdfsbase(AsmHexCode src) => new Rdfsbase(src);
        }

        public Rdfsbase rdfsbase() => default;

        [MethodImpl(Inline), Op]
        public Rdfsbase rdfsbase(AsmHexCode encoded) => new Rdfsbase(encoded);

        public struct Rdgsbase : ITypedInstruction<Rdgsbase>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdgsbase(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDGSBASE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdgsbase src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdgsbase src) => AsmMnemonics.RDGSBASE;

            public static implicit operator AsmHexCode(Rdgsbase src) => src.Encoded;

            public static implicit operator Rdgsbase(AsmHexCode src) => new Rdgsbase(src);
        }

        public Rdgsbase rdgsbase() => default;

        [MethodImpl(Inline), Op]
        public Rdgsbase rdgsbase(AsmHexCode encoded) => new Rdgsbase(encoded);

        public struct Rdmsr : ITypedInstruction<Rdmsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdmsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDMSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdmsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdmsr src) => AsmMnemonics.RDMSR;

            public static implicit operator AsmHexCode(Rdmsr src) => src.Encoded;

            public static implicit operator Rdmsr(AsmHexCode src) => new Rdmsr(src);
        }

        public Rdmsr rdmsr() => default;

        [MethodImpl(Inline), Op]
        public Rdmsr rdmsr(AsmHexCode encoded) => new Rdmsr(encoded);

        public struct Rdpid : ITypedInstruction<Rdpid>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdpid(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDPID;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdpid src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdpid src) => AsmMnemonics.RDPID;

            public static implicit operator AsmHexCode(Rdpid src) => src.Encoded;

            public static implicit operator Rdpid(AsmHexCode src) => new Rdpid(src);
        }

        public Rdpid rdpid() => default;

        [MethodImpl(Inline), Op]
        public Rdpid rdpid(AsmHexCode encoded) => new Rdpid(encoded);

        public struct Rdpkru : ITypedInstruction<Rdpkru>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdpkru(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDPKRU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdpkru src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdpkru src) => AsmMnemonics.RDPKRU;

            public static implicit operator AsmHexCode(Rdpkru src) => src.Encoded;

            public static implicit operator Rdpkru(AsmHexCode src) => new Rdpkru(src);
        }

        public Rdpkru rdpkru() => default;

        [MethodImpl(Inline), Op]
        public Rdpkru rdpkru(AsmHexCode encoded) => new Rdpkru(encoded);

        public struct Rdpmc : ITypedInstruction<Rdpmc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdpmc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDPMC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdpmc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdpmc src) => AsmMnemonics.RDPMC;

            public static implicit operator AsmHexCode(Rdpmc src) => src.Encoded;

            public static implicit operator Rdpmc(AsmHexCode src) => new Rdpmc(src);
        }

        public Rdpmc rdpmc() => default;

        [MethodImpl(Inline), Op]
        public Rdpmc rdpmc(AsmHexCode encoded) => new Rdpmc(encoded);

        public struct Rdpru : ITypedInstruction<Rdpru>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdpru(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDPRU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdpru src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdpru src) => AsmMnemonics.RDPRU;

            public static implicit operator AsmHexCode(Rdpru src) => src.Encoded;

            public static implicit operator Rdpru(AsmHexCode src) => new Rdpru(src);
        }

        public Rdpru rdpru() => default;

        [MethodImpl(Inline), Op]
        public Rdpru rdpru(AsmHexCode encoded) => new Rdpru(encoded);

        public struct Rdrand : ITypedInstruction<Rdrand>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdrand(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDRAND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdrand src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdrand src) => AsmMnemonics.RDRAND;

            public static implicit operator AsmHexCode(Rdrand src) => src.Encoded;

            public static implicit operator Rdrand(AsmHexCode src) => new Rdrand(src);
        }

        public Rdrand rdrand() => default;

        [MethodImpl(Inline), Op]
        public Rdrand rdrand(AsmHexCode encoded) => new Rdrand(encoded);

        public struct Rdseed : ITypedInstruction<Rdseed>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdseed(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDSEED;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdseed src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdseed src) => AsmMnemonics.RDSEED;

            public static implicit operator AsmHexCode(Rdseed src) => src.Encoded;

            public static implicit operator Rdseed(AsmHexCode src) => new Rdseed(src);
        }

        public Rdseed rdseed() => default;

        [MethodImpl(Inline), Op]
        public Rdseed rdseed(AsmHexCode encoded) => new Rdseed(encoded);

        public struct Rdsspd : ITypedInstruction<Rdsspd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdsspd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDSSPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdsspd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdsspd src) => AsmMnemonics.RDSSPD;

            public static implicit operator AsmHexCode(Rdsspd src) => src.Encoded;

            public static implicit operator Rdsspd(AsmHexCode src) => new Rdsspd(src);
        }

        public Rdsspd rdsspd() => default;

        [MethodImpl(Inline), Op]
        public Rdsspd rdsspd(AsmHexCode encoded) => new Rdsspd(encoded);

        public struct Rdsspq : ITypedInstruction<Rdsspq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdsspq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDSSPQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdsspq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdsspq src) => AsmMnemonics.RDSSPQ;

            public static implicit operator AsmHexCode(Rdsspq src) => src.Encoded;

            public static implicit operator Rdsspq(AsmHexCode src) => new Rdsspq(src);
        }

        public Rdsspq rdsspq() => default;

        [MethodImpl(Inline), Op]
        public Rdsspq rdsspq(AsmHexCode encoded) => new Rdsspq(encoded);

        public struct Rdtsc : ITypedInstruction<Rdtsc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdtsc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDTSC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdtsc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdtsc src) => AsmMnemonics.RDTSC;

            public static implicit operator AsmHexCode(Rdtsc src) => src.Encoded;

            public static implicit operator Rdtsc(AsmHexCode src) => new Rdtsc(src);
        }

        public Rdtsc rdtsc() => default;

        [MethodImpl(Inline), Op]
        public Rdtsc rdtsc(AsmHexCode encoded) => new Rdtsc(encoded);

        public struct Rdtscp : ITypedInstruction<Rdtscp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rdtscp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RDTSCP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rdtscp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rdtscp src) => AsmMnemonics.RDTSCP;

            public static implicit operator AsmHexCode(Rdtscp src) => src.Encoded;

            public static implicit operator Rdtscp(AsmHexCode src) => new Rdtscp(src);
        }

        public Rdtscp rdtscp() => default;

        [MethodImpl(Inline), Op]
        public Rdtscp rdtscp(AsmHexCode encoded) => new Rdtscp(encoded);

        public struct Rep_insb : ITypedInstruction<Rep_insb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_insb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_INSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_insb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_insb src) => AsmMnemonics.REP_INSB;

            public static implicit operator AsmHexCode(Rep_insb src) => src.Encoded;

            public static implicit operator Rep_insb(AsmHexCode src) => new Rep_insb(src);
        }

        public Rep_insb rep_insb() => default;

        [MethodImpl(Inline), Op]
        public Rep_insb rep_insb(AsmHexCode encoded) => new Rep_insb(encoded);

        public struct Rep_insd : ITypedInstruction<Rep_insd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_insd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_INSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_insd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_insd src) => AsmMnemonics.REP_INSD;

            public static implicit operator AsmHexCode(Rep_insd src) => src.Encoded;

            public static implicit operator Rep_insd(AsmHexCode src) => new Rep_insd(src);
        }

        public Rep_insd rep_insd() => default;

        [MethodImpl(Inline), Op]
        public Rep_insd rep_insd(AsmHexCode encoded) => new Rep_insd(encoded);

        public struct Rep_insw : ITypedInstruction<Rep_insw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_insw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_INSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_insw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_insw src) => AsmMnemonics.REP_INSW;

            public static implicit operator AsmHexCode(Rep_insw src) => src.Encoded;

            public static implicit operator Rep_insw(AsmHexCode src) => new Rep_insw(src);
        }

        public Rep_insw rep_insw() => default;

        [MethodImpl(Inline), Op]
        public Rep_insw rep_insw(AsmHexCode encoded) => new Rep_insw(encoded);

        public struct Rep_lodsb : ITypedInstruction<Rep_lodsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_lodsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_LODSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_lodsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_lodsb src) => AsmMnemonics.REP_LODSB;

            public static implicit operator AsmHexCode(Rep_lodsb src) => src.Encoded;

            public static implicit operator Rep_lodsb(AsmHexCode src) => new Rep_lodsb(src);
        }

        public Rep_lodsb rep_lodsb() => default;

        [MethodImpl(Inline), Op]
        public Rep_lodsb rep_lodsb(AsmHexCode encoded) => new Rep_lodsb(encoded);

        public struct Rep_lodsd : ITypedInstruction<Rep_lodsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_lodsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_LODSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_lodsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_lodsd src) => AsmMnemonics.REP_LODSD;

            public static implicit operator AsmHexCode(Rep_lodsd src) => src.Encoded;

            public static implicit operator Rep_lodsd(AsmHexCode src) => new Rep_lodsd(src);
        }

        public Rep_lodsd rep_lodsd() => default;

        [MethodImpl(Inline), Op]
        public Rep_lodsd rep_lodsd(AsmHexCode encoded) => new Rep_lodsd(encoded);

        public struct Rep_lodsq : ITypedInstruction<Rep_lodsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_lodsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_LODSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_lodsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_lodsq src) => AsmMnemonics.REP_LODSQ;

            public static implicit operator AsmHexCode(Rep_lodsq src) => src.Encoded;

            public static implicit operator Rep_lodsq(AsmHexCode src) => new Rep_lodsq(src);
        }

        public Rep_lodsq rep_lodsq() => default;

        [MethodImpl(Inline), Op]
        public Rep_lodsq rep_lodsq(AsmHexCode encoded) => new Rep_lodsq(encoded);

        public struct Rep_lodsw : ITypedInstruction<Rep_lodsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_lodsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_LODSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_lodsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_lodsw src) => AsmMnemonics.REP_LODSW;

            public static implicit operator AsmHexCode(Rep_lodsw src) => src.Encoded;

            public static implicit operator Rep_lodsw(AsmHexCode src) => new Rep_lodsw(src);
        }

        public Rep_lodsw rep_lodsw() => default;

        [MethodImpl(Inline), Op]
        public Rep_lodsw rep_lodsw(AsmHexCode encoded) => new Rep_lodsw(encoded);

        public struct Rep_montmul : ITypedInstruction<Rep_montmul>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_montmul(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_MONTMUL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_montmul src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_montmul src) => AsmMnemonics.REP_MONTMUL;

            public static implicit operator AsmHexCode(Rep_montmul src) => src.Encoded;

            public static implicit operator Rep_montmul(AsmHexCode src) => new Rep_montmul(src);
        }

        public Rep_montmul rep_montmul() => default;

        [MethodImpl(Inline), Op]
        public Rep_montmul rep_montmul(AsmHexCode encoded) => new Rep_montmul(encoded);

        public struct Rep_movsb : ITypedInstruction<Rep_movsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_movsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_MOVSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_movsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_movsb src) => AsmMnemonics.REP_MOVSB;

            public static implicit operator AsmHexCode(Rep_movsb src) => src.Encoded;

            public static implicit operator Rep_movsb(AsmHexCode src) => new Rep_movsb(src);
        }

        public Rep_movsb rep_movsb() => default;

        [MethodImpl(Inline), Op]
        public Rep_movsb rep_movsb(AsmHexCode encoded) => new Rep_movsb(encoded);

        public struct Rep_movsd : ITypedInstruction<Rep_movsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_movsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_MOVSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_movsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_movsd src) => AsmMnemonics.REP_MOVSD;

            public static implicit operator AsmHexCode(Rep_movsd src) => src.Encoded;

            public static implicit operator Rep_movsd(AsmHexCode src) => new Rep_movsd(src);
        }

        public Rep_movsd rep_movsd() => default;

        [MethodImpl(Inline), Op]
        public Rep_movsd rep_movsd(AsmHexCode encoded) => new Rep_movsd(encoded);

        public struct Rep_movsq : ITypedInstruction<Rep_movsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_movsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_MOVSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_movsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_movsq src) => AsmMnemonics.REP_MOVSQ;

            public static implicit operator AsmHexCode(Rep_movsq src) => src.Encoded;

            public static implicit operator Rep_movsq(AsmHexCode src) => new Rep_movsq(src);
        }

        public Rep_movsq rep_movsq() => default;

        [MethodImpl(Inline), Op]
        public Rep_movsq rep_movsq(AsmHexCode encoded) => new Rep_movsq(encoded);

        public struct Rep_movsw : ITypedInstruction<Rep_movsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_movsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_MOVSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_movsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_movsw src) => AsmMnemonics.REP_MOVSW;

            public static implicit operator AsmHexCode(Rep_movsw src) => src.Encoded;

            public static implicit operator Rep_movsw(AsmHexCode src) => new Rep_movsw(src);
        }

        public Rep_movsw rep_movsw() => default;

        [MethodImpl(Inline), Op]
        public Rep_movsw rep_movsw(AsmHexCode encoded) => new Rep_movsw(encoded);

        public struct Rep_outsb : ITypedInstruction<Rep_outsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_outsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_OUTSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_outsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_outsb src) => AsmMnemonics.REP_OUTSB;

            public static implicit operator AsmHexCode(Rep_outsb src) => src.Encoded;

            public static implicit operator Rep_outsb(AsmHexCode src) => new Rep_outsb(src);
        }

        public Rep_outsb rep_outsb() => default;

        [MethodImpl(Inline), Op]
        public Rep_outsb rep_outsb(AsmHexCode encoded) => new Rep_outsb(encoded);

        public struct Rep_outsd : ITypedInstruction<Rep_outsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_outsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_OUTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_outsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_outsd src) => AsmMnemonics.REP_OUTSD;

            public static implicit operator AsmHexCode(Rep_outsd src) => src.Encoded;

            public static implicit operator Rep_outsd(AsmHexCode src) => new Rep_outsd(src);
        }

        public Rep_outsd rep_outsd() => default;

        [MethodImpl(Inline), Op]
        public Rep_outsd rep_outsd(AsmHexCode encoded) => new Rep_outsd(encoded);

        public struct Rep_outsw : ITypedInstruction<Rep_outsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_outsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_OUTSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_outsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_outsw src) => AsmMnemonics.REP_OUTSW;

            public static implicit operator AsmHexCode(Rep_outsw src) => src.Encoded;

            public static implicit operator Rep_outsw(AsmHexCode src) => new Rep_outsw(src);
        }

        public Rep_outsw rep_outsw() => default;

        [MethodImpl(Inline), Op]
        public Rep_outsw rep_outsw(AsmHexCode encoded) => new Rep_outsw(encoded);

        public struct Rep_stosb : ITypedInstruction<Rep_stosb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_stosb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_STOSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_stosb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_stosb src) => AsmMnemonics.REP_STOSB;

            public static implicit operator AsmHexCode(Rep_stosb src) => src.Encoded;

            public static implicit operator Rep_stosb(AsmHexCode src) => new Rep_stosb(src);
        }

        public Rep_stosb rep_stosb() => default;

        [MethodImpl(Inline), Op]
        public Rep_stosb rep_stosb(AsmHexCode encoded) => new Rep_stosb(encoded);

        public struct Rep_stosd : ITypedInstruction<Rep_stosd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_stosd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_STOSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_stosd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_stosd src) => AsmMnemonics.REP_STOSD;

            public static implicit operator AsmHexCode(Rep_stosd src) => src.Encoded;

            public static implicit operator Rep_stosd(AsmHexCode src) => new Rep_stosd(src);
        }

        public Rep_stosd rep_stosd() => default;

        [MethodImpl(Inline), Op]
        public Rep_stosd rep_stosd(AsmHexCode encoded) => new Rep_stosd(encoded);

        public struct Rep_stosq : ITypedInstruction<Rep_stosq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_stosq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_STOSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_stosq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_stosq src) => AsmMnemonics.REP_STOSQ;

            public static implicit operator AsmHexCode(Rep_stosq src) => src.Encoded;

            public static implicit operator Rep_stosq(AsmHexCode src) => new Rep_stosq(src);
        }

        public Rep_stosq rep_stosq() => default;

        [MethodImpl(Inline), Op]
        public Rep_stosq rep_stosq(AsmHexCode encoded) => new Rep_stosq(encoded);

        public struct Rep_stosw : ITypedInstruction<Rep_stosw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_stosw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_STOSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_stosw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_stosw src) => AsmMnemonics.REP_STOSW;

            public static implicit operator AsmHexCode(Rep_stosw src) => src.Encoded;

            public static implicit operator Rep_stosw(AsmHexCode src) => new Rep_stosw(src);
        }

        public Rep_stosw rep_stosw() => default;

        [MethodImpl(Inline), Op]
        public Rep_stosw rep_stosw(AsmHexCode encoded) => new Rep_stosw(encoded);

        public struct Rep_xcryptcbc : ITypedInstruction<Rep_xcryptcbc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xcryptcbc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XCRYPTCBC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xcryptcbc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xcryptcbc src) => AsmMnemonics.REP_XCRYPTCBC;

            public static implicit operator AsmHexCode(Rep_xcryptcbc src) => src.Encoded;

            public static implicit operator Rep_xcryptcbc(AsmHexCode src) => new Rep_xcryptcbc(src);
        }

        public Rep_xcryptcbc rep_xcryptcbc() => default;

        [MethodImpl(Inline), Op]
        public Rep_xcryptcbc rep_xcryptcbc(AsmHexCode encoded) => new Rep_xcryptcbc(encoded);

        public struct Rep_xcryptcfb : ITypedInstruction<Rep_xcryptcfb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xcryptcfb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XCRYPTCFB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xcryptcfb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xcryptcfb src) => AsmMnemonics.REP_XCRYPTCFB;

            public static implicit operator AsmHexCode(Rep_xcryptcfb src) => src.Encoded;

            public static implicit operator Rep_xcryptcfb(AsmHexCode src) => new Rep_xcryptcfb(src);
        }

        public Rep_xcryptcfb rep_xcryptcfb() => default;

        [MethodImpl(Inline), Op]
        public Rep_xcryptcfb rep_xcryptcfb(AsmHexCode encoded) => new Rep_xcryptcfb(encoded);

        public struct Rep_xcryptctr : ITypedInstruction<Rep_xcryptctr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xcryptctr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XCRYPTCTR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xcryptctr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xcryptctr src) => AsmMnemonics.REP_XCRYPTCTR;

            public static implicit operator AsmHexCode(Rep_xcryptctr src) => src.Encoded;

            public static implicit operator Rep_xcryptctr(AsmHexCode src) => new Rep_xcryptctr(src);
        }

        public Rep_xcryptctr rep_xcryptctr() => default;

        [MethodImpl(Inline), Op]
        public Rep_xcryptctr rep_xcryptctr(AsmHexCode encoded) => new Rep_xcryptctr(encoded);

        public struct Rep_xcryptecb : ITypedInstruction<Rep_xcryptecb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xcryptecb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XCRYPTECB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xcryptecb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xcryptecb src) => AsmMnemonics.REP_XCRYPTECB;

            public static implicit operator AsmHexCode(Rep_xcryptecb src) => src.Encoded;

            public static implicit operator Rep_xcryptecb(AsmHexCode src) => new Rep_xcryptecb(src);
        }

        public Rep_xcryptecb rep_xcryptecb() => default;

        [MethodImpl(Inline), Op]
        public Rep_xcryptecb rep_xcryptecb(AsmHexCode encoded) => new Rep_xcryptecb(encoded);

        public struct Rep_xcryptofb : ITypedInstruction<Rep_xcryptofb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xcryptofb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XCRYPTOFB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xcryptofb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xcryptofb src) => AsmMnemonics.REP_XCRYPTOFB;

            public static implicit operator AsmHexCode(Rep_xcryptofb src) => src.Encoded;

            public static implicit operator Rep_xcryptofb(AsmHexCode src) => new Rep_xcryptofb(src);
        }

        public Rep_xcryptofb rep_xcryptofb() => default;

        [MethodImpl(Inline), Op]
        public Rep_xcryptofb rep_xcryptofb(AsmHexCode encoded) => new Rep_xcryptofb(encoded);

        public struct Rep_xsha1 : ITypedInstruction<Rep_xsha1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xsha1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XSHA1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xsha1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xsha1 src) => AsmMnemonics.REP_XSHA1;

            public static implicit operator AsmHexCode(Rep_xsha1 src) => src.Encoded;

            public static implicit operator Rep_xsha1(AsmHexCode src) => new Rep_xsha1(src);
        }

        public Rep_xsha1 rep_xsha1() => default;

        [MethodImpl(Inline), Op]
        public Rep_xsha1 rep_xsha1(AsmHexCode encoded) => new Rep_xsha1(encoded);

        public struct Rep_xsha256 : ITypedInstruction<Rep_xsha256>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xsha256(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XSHA256;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xsha256 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xsha256 src) => AsmMnemonics.REP_XSHA256;

            public static implicit operator AsmHexCode(Rep_xsha256 src) => src.Encoded;

            public static implicit operator Rep_xsha256(AsmHexCode src) => new Rep_xsha256(src);
        }

        public Rep_xsha256 rep_xsha256() => default;

        [MethodImpl(Inline), Op]
        public Rep_xsha256 rep_xsha256(AsmHexCode encoded) => new Rep_xsha256(encoded);

        public struct Rep_xstore : ITypedInstruction<Rep_xstore>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rep_xstore(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REP_XSTORE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rep_xstore src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rep_xstore src) => AsmMnemonics.REP_XSTORE;

            public static implicit operator AsmHexCode(Rep_xstore src) => src.Encoded;

            public static implicit operator Rep_xstore(AsmHexCode src) => new Rep_xstore(src);
        }

        public Rep_xstore rep_xstore() => default;

        [MethodImpl(Inline), Op]
        public Rep_xstore rep_xstore(AsmHexCode encoded) => new Rep_xstore(encoded);

        public struct Repe_cmpsb : ITypedInstruction<Repe_cmpsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_cmpsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_CMPSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_cmpsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_cmpsb src) => AsmMnemonics.REPE_CMPSB;

            public static implicit operator AsmHexCode(Repe_cmpsb src) => src.Encoded;

            public static implicit operator Repe_cmpsb(AsmHexCode src) => new Repe_cmpsb(src);
        }

        public Repe_cmpsb repe_cmpsb() => default;

        [MethodImpl(Inline), Op]
        public Repe_cmpsb repe_cmpsb(AsmHexCode encoded) => new Repe_cmpsb(encoded);

        public struct Repe_cmpsd : ITypedInstruction<Repe_cmpsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_cmpsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_CMPSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_cmpsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_cmpsd src) => AsmMnemonics.REPE_CMPSD;

            public static implicit operator AsmHexCode(Repe_cmpsd src) => src.Encoded;

            public static implicit operator Repe_cmpsd(AsmHexCode src) => new Repe_cmpsd(src);
        }

        public Repe_cmpsd repe_cmpsd() => default;

        [MethodImpl(Inline), Op]
        public Repe_cmpsd repe_cmpsd(AsmHexCode encoded) => new Repe_cmpsd(encoded);

        public struct Repe_cmpsq : ITypedInstruction<Repe_cmpsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_cmpsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_CMPSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_cmpsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_cmpsq src) => AsmMnemonics.REPE_CMPSQ;

            public static implicit operator AsmHexCode(Repe_cmpsq src) => src.Encoded;

            public static implicit operator Repe_cmpsq(AsmHexCode src) => new Repe_cmpsq(src);
        }

        public Repe_cmpsq repe_cmpsq() => default;

        [MethodImpl(Inline), Op]
        public Repe_cmpsq repe_cmpsq(AsmHexCode encoded) => new Repe_cmpsq(encoded);

        public struct Repe_cmpsw : ITypedInstruction<Repe_cmpsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_cmpsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_CMPSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_cmpsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_cmpsw src) => AsmMnemonics.REPE_CMPSW;

            public static implicit operator AsmHexCode(Repe_cmpsw src) => src.Encoded;

            public static implicit operator Repe_cmpsw(AsmHexCode src) => new Repe_cmpsw(src);
        }

        public Repe_cmpsw repe_cmpsw() => default;

        [MethodImpl(Inline), Op]
        public Repe_cmpsw repe_cmpsw(AsmHexCode encoded) => new Repe_cmpsw(encoded);

        public struct Repe_scasb : ITypedInstruction<Repe_scasb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_scasb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_SCASB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_scasb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_scasb src) => AsmMnemonics.REPE_SCASB;

            public static implicit operator AsmHexCode(Repe_scasb src) => src.Encoded;

            public static implicit operator Repe_scasb(AsmHexCode src) => new Repe_scasb(src);
        }

        public Repe_scasb repe_scasb() => default;

        [MethodImpl(Inline), Op]
        public Repe_scasb repe_scasb(AsmHexCode encoded) => new Repe_scasb(encoded);

        public struct Repe_scasd : ITypedInstruction<Repe_scasd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_scasd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_SCASD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_scasd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_scasd src) => AsmMnemonics.REPE_SCASD;

            public static implicit operator AsmHexCode(Repe_scasd src) => src.Encoded;

            public static implicit operator Repe_scasd(AsmHexCode src) => new Repe_scasd(src);
        }

        public Repe_scasd repe_scasd() => default;

        [MethodImpl(Inline), Op]
        public Repe_scasd repe_scasd(AsmHexCode encoded) => new Repe_scasd(encoded);

        public struct Repe_scasq : ITypedInstruction<Repe_scasq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_scasq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_SCASQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_scasq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_scasq src) => AsmMnemonics.REPE_SCASQ;

            public static implicit operator AsmHexCode(Repe_scasq src) => src.Encoded;

            public static implicit operator Repe_scasq(AsmHexCode src) => new Repe_scasq(src);
        }

        public Repe_scasq repe_scasq() => default;

        [MethodImpl(Inline), Op]
        public Repe_scasq repe_scasq(AsmHexCode encoded) => new Repe_scasq(encoded);

        public struct Repe_scasw : ITypedInstruction<Repe_scasw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repe_scasw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPE_SCASW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repe_scasw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repe_scasw src) => AsmMnemonics.REPE_SCASW;

            public static implicit operator AsmHexCode(Repe_scasw src) => src.Encoded;

            public static implicit operator Repe_scasw(AsmHexCode src) => new Repe_scasw(src);
        }

        public Repe_scasw repe_scasw() => default;

        [MethodImpl(Inline), Op]
        public Repe_scasw repe_scasw(AsmHexCode encoded) => new Repe_scasw(encoded);

        public struct Repne_cmpsb : ITypedInstruction<Repne_cmpsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_cmpsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_CMPSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_cmpsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_cmpsb src) => AsmMnemonics.REPNE_CMPSB;

            public static implicit operator AsmHexCode(Repne_cmpsb src) => src.Encoded;

            public static implicit operator Repne_cmpsb(AsmHexCode src) => new Repne_cmpsb(src);
        }

        public Repne_cmpsb repne_cmpsb() => default;

        [MethodImpl(Inline), Op]
        public Repne_cmpsb repne_cmpsb(AsmHexCode encoded) => new Repne_cmpsb(encoded);

        public struct Repne_cmpsd : ITypedInstruction<Repne_cmpsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_cmpsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_CMPSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_cmpsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_cmpsd src) => AsmMnemonics.REPNE_CMPSD;

            public static implicit operator AsmHexCode(Repne_cmpsd src) => src.Encoded;

            public static implicit operator Repne_cmpsd(AsmHexCode src) => new Repne_cmpsd(src);
        }

        public Repne_cmpsd repne_cmpsd() => default;

        [MethodImpl(Inline), Op]
        public Repne_cmpsd repne_cmpsd(AsmHexCode encoded) => new Repne_cmpsd(encoded);

        public struct Repne_cmpsq : ITypedInstruction<Repne_cmpsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_cmpsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_CMPSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_cmpsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_cmpsq src) => AsmMnemonics.REPNE_CMPSQ;

            public static implicit operator AsmHexCode(Repne_cmpsq src) => src.Encoded;

            public static implicit operator Repne_cmpsq(AsmHexCode src) => new Repne_cmpsq(src);
        }

        public Repne_cmpsq repne_cmpsq() => default;

        [MethodImpl(Inline), Op]
        public Repne_cmpsq repne_cmpsq(AsmHexCode encoded) => new Repne_cmpsq(encoded);

        public struct Repne_cmpsw : ITypedInstruction<Repne_cmpsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_cmpsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_CMPSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_cmpsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_cmpsw src) => AsmMnemonics.REPNE_CMPSW;

            public static implicit operator AsmHexCode(Repne_cmpsw src) => src.Encoded;

            public static implicit operator Repne_cmpsw(AsmHexCode src) => new Repne_cmpsw(src);
        }

        public Repne_cmpsw repne_cmpsw() => default;

        [MethodImpl(Inline), Op]
        public Repne_cmpsw repne_cmpsw(AsmHexCode encoded) => new Repne_cmpsw(encoded);

        public struct Repne_scasb : ITypedInstruction<Repne_scasb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_scasb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_SCASB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_scasb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_scasb src) => AsmMnemonics.REPNE_SCASB;

            public static implicit operator AsmHexCode(Repne_scasb src) => src.Encoded;

            public static implicit operator Repne_scasb(AsmHexCode src) => new Repne_scasb(src);
        }

        public Repne_scasb repne_scasb() => default;

        [MethodImpl(Inline), Op]
        public Repne_scasb repne_scasb(AsmHexCode encoded) => new Repne_scasb(encoded);

        public struct Repne_scasd : ITypedInstruction<Repne_scasd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_scasd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_SCASD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_scasd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_scasd src) => AsmMnemonics.REPNE_SCASD;

            public static implicit operator AsmHexCode(Repne_scasd src) => src.Encoded;

            public static implicit operator Repne_scasd(AsmHexCode src) => new Repne_scasd(src);
        }

        public Repne_scasd repne_scasd() => default;

        [MethodImpl(Inline), Op]
        public Repne_scasd repne_scasd(AsmHexCode encoded) => new Repne_scasd(encoded);

        public struct Repne_scasq : ITypedInstruction<Repne_scasq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_scasq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_SCASQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_scasq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_scasq src) => AsmMnemonics.REPNE_SCASQ;

            public static implicit operator AsmHexCode(Repne_scasq src) => src.Encoded;

            public static implicit operator Repne_scasq(AsmHexCode src) => new Repne_scasq(src);
        }

        public Repne_scasq repne_scasq() => default;

        [MethodImpl(Inline), Op]
        public Repne_scasq repne_scasq(AsmHexCode encoded) => new Repne_scasq(encoded);

        public struct Repne_scasw : ITypedInstruction<Repne_scasw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Repne_scasw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.REPNE_SCASW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Repne_scasw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Repne_scasw src) => AsmMnemonics.REPNE_SCASW;

            public static implicit operator AsmHexCode(Repne_scasw src) => src.Encoded;

            public static implicit operator Repne_scasw(AsmHexCode src) => new Repne_scasw(src);
        }

        public Repne_scasw repne_scasw() => default;

        [MethodImpl(Inline), Op]
        public Repne_scasw repne_scasw(AsmHexCode encoded) => new Repne_scasw(encoded);

        public struct Ret_far : ITypedInstruction<Ret_far>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ret_far(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RET_FAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ret_far src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ret_far src) => AsmMnemonics.RET_FAR;

            public static implicit operator AsmHexCode(Ret_far src) => src.Encoded;

            public static implicit operator Ret_far(AsmHexCode src) => new Ret_far(src);
        }

        public Ret_far ret_far() => default;

        [MethodImpl(Inline), Op]
        public Ret_far ret_far(AsmHexCode encoded) => new Ret_far(encoded);

        public struct Ret_near : ITypedInstruction<Ret_near>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ret_near(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RET_NEAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ret_near src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ret_near src) => AsmMnemonics.RET_NEAR;

            public static implicit operator AsmHexCode(Ret_near src) => src.Encoded;

            public static implicit operator Ret_near(AsmHexCode src) => new Ret_near(src);
        }

        public Ret_near ret_near() => default;

        [MethodImpl(Inline), Op]
        public Ret_near ret_near(AsmHexCode encoded) => new Ret_near(encoded);

        public struct Rmpadjust : ITypedInstruction<Rmpadjust>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rmpadjust(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RMPADJUST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rmpadjust src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rmpadjust src) => AsmMnemonics.RMPADJUST;

            public static implicit operator AsmHexCode(Rmpadjust src) => src.Encoded;

            public static implicit operator Rmpadjust(AsmHexCode src) => new Rmpadjust(src);
        }

        public Rmpadjust rmpadjust() => default;

        [MethodImpl(Inline), Op]
        public Rmpadjust rmpadjust(AsmHexCode encoded) => new Rmpadjust(encoded);

        public struct Rmpupdate : ITypedInstruction<Rmpupdate>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rmpupdate(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RMPUPDATE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rmpupdate src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rmpupdate src) => AsmMnemonics.RMPUPDATE;

            public static implicit operator AsmHexCode(Rmpupdate src) => src.Encoded;

            public static implicit operator Rmpupdate(AsmHexCode src) => new Rmpupdate(src);
        }

        public Rmpupdate rmpupdate() => default;

        [MethodImpl(Inline), Op]
        public Rmpupdate rmpupdate(AsmHexCode encoded) => new Rmpupdate(encoded);

        public struct Rol : ITypedInstruction<Rol>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rol(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rol src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rol src) => AsmMnemonics.ROL;

            public static implicit operator AsmHexCode(Rol src) => src.Encoded;

            public static implicit operator Rol(AsmHexCode src) => new Rol(src);
        }

        public Rol rol() => default;

        [MethodImpl(Inline), Op]
        public Rol rol(AsmHexCode encoded) => new Rol(encoded);

        public struct Ror : ITypedInstruction<Ror>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ror(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ror src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ror src) => AsmMnemonics.ROR;

            public static implicit operator AsmHexCode(Ror src) => src.Encoded;

            public static implicit operator Ror(AsmHexCode src) => new Ror(src);
        }

        public Ror ror() => default;

        [MethodImpl(Inline), Op]
        public Ror ror(AsmHexCode encoded) => new Ror(encoded);

        public struct Rorx : ITypedInstruction<Rorx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rorx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RORX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rorx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rorx src) => AsmMnemonics.RORX;

            public static implicit operator AsmHexCode(Rorx src) => src.Encoded;

            public static implicit operator Rorx(AsmHexCode src) => new Rorx(src);
        }

        public Rorx rorx() => default;

        [MethodImpl(Inline), Op]
        public Rorx rorx(AsmHexCode encoded) => new Rorx(encoded);

        public struct Roundpd : ITypedInstruction<Roundpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Roundpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROUNDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Roundpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Roundpd src) => AsmMnemonics.ROUNDPD;

            public static implicit operator AsmHexCode(Roundpd src) => src.Encoded;

            public static implicit operator Roundpd(AsmHexCode src) => new Roundpd(src);
        }

        public Roundpd roundpd() => default;

        [MethodImpl(Inline), Op]
        public Roundpd roundpd(AsmHexCode encoded) => new Roundpd(encoded);

        public struct Roundps : ITypedInstruction<Roundps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Roundps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROUNDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Roundps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Roundps src) => AsmMnemonics.ROUNDPS;

            public static implicit operator AsmHexCode(Roundps src) => src.Encoded;

            public static implicit operator Roundps(AsmHexCode src) => new Roundps(src);
        }

        public Roundps roundps() => default;

        [MethodImpl(Inline), Op]
        public Roundps roundps(AsmHexCode encoded) => new Roundps(encoded);

        public struct Roundsd : ITypedInstruction<Roundsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Roundsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROUNDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Roundsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Roundsd src) => AsmMnemonics.ROUNDSD;

            public static implicit operator AsmHexCode(Roundsd src) => src.Encoded;

            public static implicit operator Roundsd(AsmHexCode src) => new Roundsd(src);
        }

        public Roundsd roundsd() => default;

        [MethodImpl(Inline), Op]
        public Roundsd roundsd(AsmHexCode encoded) => new Roundsd(encoded);

        public struct Roundss : ITypedInstruction<Roundss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Roundss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.ROUNDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Roundss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Roundss src) => AsmMnemonics.ROUNDSS;

            public static implicit operator AsmHexCode(Roundss src) => src.Encoded;

            public static implicit operator Roundss(AsmHexCode src) => new Roundss(src);
        }

        public Roundss roundss() => default;

        [MethodImpl(Inline), Op]
        public Roundss roundss(AsmHexCode encoded) => new Roundss(encoded);

        public struct Rsm : ITypedInstruction<Rsm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rsm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RSM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rsm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rsm src) => AsmMnemonics.RSM;

            public static implicit operator AsmHexCode(Rsm src) => src.Encoded;

            public static implicit operator Rsm(AsmHexCode src) => new Rsm(src);
        }

        public Rsm rsm() => default;

        [MethodImpl(Inline), Op]
        public Rsm rsm(AsmHexCode encoded) => new Rsm(encoded);

        public struct Rsqrtps : ITypedInstruction<Rsqrtps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rsqrtps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RSQRTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rsqrtps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rsqrtps src) => AsmMnemonics.RSQRTPS;

            public static implicit operator AsmHexCode(Rsqrtps src) => src.Encoded;

            public static implicit operator Rsqrtps(AsmHexCode src) => new Rsqrtps(src);
        }

        public Rsqrtps rsqrtps() => default;

        [MethodImpl(Inline), Op]
        public Rsqrtps rsqrtps(AsmHexCode encoded) => new Rsqrtps(encoded);

        public struct Rsqrtss : ITypedInstruction<Rsqrtss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rsqrtss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RSQRTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rsqrtss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rsqrtss src) => AsmMnemonics.RSQRTSS;

            public static implicit operator AsmHexCode(Rsqrtss src) => src.Encoded;

            public static implicit operator Rsqrtss(AsmHexCode src) => new Rsqrtss(src);
        }

        public Rsqrtss rsqrtss() => default;

        [MethodImpl(Inline), Op]
        public Rsqrtss rsqrtss(AsmHexCode encoded) => new Rsqrtss(encoded);

        public struct Rstorssp : ITypedInstruction<Rstorssp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Rstorssp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.RSTORSSP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Rstorssp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Rstorssp src) => AsmMnemonics.RSTORSSP;

            public static implicit operator AsmHexCode(Rstorssp src) => src.Encoded;

            public static implicit operator Rstorssp(AsmHexCode src) => new Rstorssp(src);
        }

        public Rstorssp rstorssp() => default;

        [MethodImpl(Inline), Op]
        public Rstorssp rstorssp(AsmHexCode encoded) => new Rstorssp(encoded);

        public struct Sahf : ITypedInstruction<Sahf>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sahf(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SAHF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sahf src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sahf src) => AsmMnemonics.SAHF;

            public static implicit operator AsmHexCode(Sahf src) => src.Encoded;

            public static implicit operator Sahf(AsmHexCode src) => new Sahf(src);
        }

        public Sahf sahf() => default;

        [MethodImpl(Inline), Op]
        public Sahf sahf(AsmHexCode encoded) => new Sahf(encoded);

        public struct Salc : ITypedInstruction<Salc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Salc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SALC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Salc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Salc src) => AsmMnemonics.SALC;

            public static implicit operator AsmHexCode(Salc src) => src.Encoded;

            public static implicit operator Salc(AsmHexCode src) => new Salc(src);
        }

        public Salc salc() => default;

        [MethodImpl(Inline), Op]
        public Salc salc(AsmHexCode encoded) => new Salc(encoded);

        public struct Sar : ITypedInstruction<Sar>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sar(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sar src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sar src) => AsmMnemonics.SAR;

            public static implicit operator AsmHexCode(Sar src) => src.Encoded;

            public static implicit operator Sar(AsmHexCode src) => new Sar(src);
        }

        public Sar sar() => default;

        [MethodImpl(Inline), Op]
        public Sar sar(AsmHexCode encoded) => new Sar(encoded);

        public struct Sarx : ITypedInstruction<Sarx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sarx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SARX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sarx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sarx src) => AsmMnemonics.SARX;

            public static implicit operator AsmHexCode(Sarx src) => src.Encoded;

            public static implicit operator Sarx(AsmHexCode src) => new Sarx(src);
        }

        public Sarx sarx() => default;

        [MethodImpl(Inline), Op]
        public Sarx sarx(AsmHexCode encoded) => new Sarx(encoded);

        public struct Saveprevssp : ITypedInstruction<Saveprevssp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Saveprevssp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SAVEPREVSSP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Saveprevssp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Saveprevssp src) => AsmMnemonics.SAVEPREVSSP;

            public static implicit operator AsmHexCode(Saveprevssp src) => src.Encoded;

            public static implicit operator Saveprevssp(AsmHexCode src) => new Saveprevssp(src);
        }

        public Saveprevssp saveprevssp() => default;

        [MethodImpl(Inline), Op]
        public Saveprevssp saveprevssp(AsmHexCode encoded) => new Saveprevssp(encoded);

        public struct Sbb : ITypedInstruction<Sbb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sbb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SBB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sbb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sbb src) => AsmMnemonics.SBB;

            public static implicit operator AsmHexCode(Sbb src) => src.Encoded;

            public static implicit operator Sbb(AsmHexCode src) => new Sbb(src);
        }

        public Sbb sbb() => default;

        [MethodImpl(Inline), Op]
        public Sbb sbb(AsmHexCode encoded) => new Sbb(encoded);

        public struct Sbb_lock : ITypedInstruction<Sbb_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sbb_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SBB_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sbb_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sbb_lock src) => AsmMnemonics.SBB_LOCK;

            public static implicit operator AsmHexCode(Sbb_lock src) => src.Encoded;

            public static implicit operator Sbb_lock(AsmHexCode src) => new Sbb_lock(src);
        }

        public Sbb_lock sbb_lock() => default;

        [MethodImpl(Inline), Op]
        public Sbb_lock sbb_lock(AsmHexCode encoded) => new Sbb_lock(encoded);

        public struct Scasb : ITypedInstruction<Scasb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Scasb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SCASB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Scasb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Scasb src) => AsmMnemonics.SCASB;

            public static implicit operator AsmHexCode(Scasb src) => src.Encoded;

            public static implicit operator Scasb(AsmHexCode src) => new Scasb(src);
        }

        public Scasb scasb() => default;

        [MethodImpl(Inline), Op]
        public Scasb scasb(AsmHexCode encoded) => new Scasb(encoded);

        public struct Scasd : ITypedInstruction<Scasd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Scasd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SCASD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Scasd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Scasd src) => AsmMnemonics.SCASD;

            public static implicit operator AsmHexCode(Scasd src) => src.Encoded;

            public static implicit operator Scasd(AsmHexCode src) => new Scasd(src);
        }

        public Scasd scasd() => default;

        [MethodImpl(Inline), Op]
        public Scasd scasd(AsmHexCode encoded) => new Scasd(encoded);

        public struct Scasq : ITypedInstruction<Scasq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Scasq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SCASQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Scasq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Scasq src) => AsmMnemonics.SCASQ;

            public static implicit operator AsmHexCode(Scasq src) => src.Encoded;

            public static implicit operator Scasq(AsmHexCode src) => new Scasq(src);
        }

        public Scasq scasq() => default;

        [MethodImpl(Inline), Op]
        public Scasq scasq(AsmHexCode encoded) => new Scasq(encoded);

        public struct Scasw : ITypedInstruction<Scasw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Scasw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SCASW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Scasw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Scasw src) => AsmMnemonics.SCASW;

            public static implicit operator AsmHexCode(Scasw src) => src.Encoded;

            public static implicit operator Scasw(AsmHexCode src) => new Scasw(src);
        }

        public Scasw scasw() => default;

        [MethodImpl(Inline), Op]
        public Scasw scasw(AsmHexCode encoded) => new Scasw(encoded);

        public struct Seamcall : ITypedInstruction<Seamcall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Seamcall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SEAMCALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Seamcall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Seamcall src) => AsmMnemonics.SEAMCALL;

            public static implicit operator AsmHexCode(Seamcall src) => src.Encoded;

            public static implicit operator Seamcall(AsmHexCode src) => new Seamcall(src);
        }

        public Seamcall seamcall() => default;

        [MethodImpl(Inline), Op]
        public Seamcall seamcall(AsmHexCode encoded) => new Seamcall(encoded);

        public struct Seamops : ITypedInstruction<Seamops>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Seamops(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SEAMOPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Seamops src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Seamops src) => AsmMnemonics.SEAMOPS;

            public static implicit operator AsmHexCode(Seamops src) => src.Encoded;

            public static implicit operator Seamops(AsmHexCode src) => new Seamops(src);
        }

        public Seamops seamops() => default;

        [MethodImpl(Inline), Op]
        public Seamops seamops(AsmHexCode encoded) => new Seamops(encoded);

        public struct Seamret : ITypedInstruction<Seamret>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Seamret(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SEAMRET;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Seamret src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Seamret src) => AsmMnemonics.SEAMRET;

            public static implicit operator AsmHexCode(Seamret src) => src.Encoded;

            public static implicit operator Seamret(AsmHexCode src) => new Seamret(src);
        }

        public Seamret seamret() => default;

        [MethodImpl(Inline), Op]
        public Seamret seamret(AsmHexCode encoded) => new Seamret(encoded);

        public struct Senduipi : ITypedInstruction<Senduipi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Senduipi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SENDUIPI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Senduipi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Senduipi src) => AsmMnemonics.SENDUIPI;

            public static implicit operator AsmHexCode(Senduipi src) => src.Encoded;

            public static implicit operator Senduipi(AsmHexCode src) => new Senduipi(src);
        }

        public Senduipi senduipi() => default;

        [MethodImpl(Inline), Op]
        public Senduipi senduipi(AsmHexCode encoded) => new Senduipi(encoded);

        public struct Serialize : ITypedInstruction<Serialize>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Serialize(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SERIALIZE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Serialize src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Serialize src) => AsmMnemonics.SERIALIZE;

            public static implicit operator AsmHexCode(Serialize src) => src.Encoded;

            public static implicit operator Serialize(AsmHexCode src) => new Serialize(src);
        }

        public Serialize serialize() => default;

        [MethodImpl(Inline), Op]
        public Serialize serialize(AsmHexCode encoded) => new Serialize(encoded);

        public struct Setb : ITypedInstruction<Setb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setb src) => AsmMnemonics.SETB;

            public static implicit operator AsmHexCode(Setb src) => src.Encoded;

            public static implicit operator Setb(AsmHexCode src) => new Setb(src);
        }

        public Setb setb() => default;

        [MethodImpl(Inline), Op]
        public Setb setb(AsmHexCode encoded) => new Setb(encoded);

        public struct Setbe : ITypedInstruction<Setbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setbe src) => AsmMnemonics.SETBE;

            public static implicit operator AsmHexCode(Setbe src) => src.Encoded;

            public static implicit operator Setbe(AsmHexCode src) => new Setbe(src);
        }

        public Setbe setbe() => default;

        [MethodImpl(Inline), Op]
        public Setbe setbe(AsmHexCode encoded) => new Setbe(encoded);

        public struct Setl : ITypedInstruction<Setl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setl src) => AsmMnemonics.SETL;

            public static implicit operator AsmHexCode(Setl src) => src.Encoded;

            public static implicit operator Setl(AsmHexCode src) => new Setl(src);
        }

        public Setl setl() => default;

        [MethodImpl(Inline), Op]
        public Setl setl(AsmHexCode encoded) => new Setl(encoded);

        public struct Setle : ITypedInstruction<Setle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setle src) => AsmMnemonics.SETLE;

            public static implicit operator AsmHexCode(Setle src) => src.Encoded;

            public static implicit operator Setle(AsmHexCode src) => new Setle(src);
        }

        public Setle setle() => default;

        [MethodImpl(Inline), Op]
        public Setle setle(AsmHexCode encoded) => new Setle(encoded);

        public struct Setnb : ITypedInstruction<Setnb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnb src) => AsmMnemonics.SETNB;

            public static implicit operator AsmHexCode(Setnb src) => src.Encoded;

            public static implicit operator Setnb(AsmHexCode src) => new Setnb(src);
        }

        public Setnb setnb() => default;

        [MethodImpl(Inline), Op]
        public Setnb setnb(AsmHexCode encoded) => new Setnb(encoded);

        public struct Setnbe : ITypedInstruction<Setnbe>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnbe(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNBE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnbe src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnbe src) => AsmMnemonics.SETNBE;

            public static implicit operator AsmHexCode(Setnbe src) => src.Encoded;

            public static implicit operator Setnbe(AsmHexCode src) => new Setnbe(src);
        }

        public Setnbe setnbe() => default;

        [MethodImpl(Inline), Op]
        public Setnbe setnbe(AsmHexCode encoded) => new Setnbe(encoded);

        public struct Setnl : ITypedInstruction<Setnl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnl src) => AsmMnemonics.SETNL;

            public static implicit operator AsmHexCode(Setnl src) => src.Encoded;

            public static implicit operator Setnl(AsmHexCode src) => new Setnl(src);
        }

        public Setnl setnl() => default;

        [MethodImpl(Inline), Op]
        public Setnl setnl(AsmHexCode encoded) => new Setnl(encoded);

        public struct Setnle : ITypedInstruction<Setnle>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnle(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNLE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnle src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnle src) => AsmMnemonics.SETNLE;

            public static implicit operator AsmHexCode(Setnle src) => src.Encoded;

            public static implicit operator Setnle(AsmHexCode src) => new Setnle(src);
        }

        public Setnle setnle() => default;

        [MethodImpl(Inline), Op]
        public Setnle setnle(AsmHexCode encoded) => new Setnle(encoded);

        public struct Setno : ITypedInstruction<Setno>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setno(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setno src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setno src) => AsmMnemonics.SETNO;

            public static implicit operator AsmHexCode(Setno src) => src.Encoded;

            public static implicit operator Setno(AsmHexCode src) => new Setno(src);
        }

        public Setno setno() => default;

        [MethodImpl(Inline), Op]
        public Setno setno(AsmHexCode encoded) => new Setno(encoded);

        public struct Setnp : ITypedInstruction<Setnp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnp src) => AsmMnemonics.SETNP;

            public static implicit operator AsmHexCode(Setnp src) => src.Encoded;

            public static implicit operator Setnp(AsmHexCode src) => new Setnp(src);
        }

        public Setnp setnp() => default;

        [MethodImpl(Inline), Op]
        public Setnp setnp(AsmHexCode encoded) => new Setnp(encoded);

        public struct Setns : ITypedInstruction<Setns>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setns(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setns src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setns src) => AsmMnemonics.SETNS;

            public static implicit operator AsmHexCode(Setns src) => src.Encoded;

            public static implicit operator Setns(AsmHexCode src) => new Setns(src);
        }

        public Setns setns() => default;

        [MethodImpl(Inline), Op]
        public Setns setns(AsmHexCode encoded) => new Setns(encoded);

        public struct Setnz : ITypedInstruction<Setnz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setnz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETNZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setnz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setnz src) => AsmMnemonics.SETNZ;

            public static implicit operator AsmHexCode(Setnz src) => src.Encoded;

            public static implicit operator Setnz(AsmHexCode src) => new Setnz(src);
        }

        public Setnz setnz() => default;

        [MethodImpl(Inline), Op]
        public Setnz setnz(AsmHexCode encoded) => new Setnz(encoded);

        public struct Seto : ITypedInstruction<Seto>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Seto(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Seto src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Seto src) => AsmMnemonics.SETO;

            public static implicit operator AsmHexCode(Seto src) => src.Encoded;

            public static implicit operator Seto(AsmHexCode src) => new Seto(src);
        }

        public Seto seto() => default;

        [MethodImpl(Inline), Op]
        public Seto seto(AsmHexCode encoded) => new Seto(encoded);

        public struct Setp : ITypedInstruction<Setp>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setp(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setp src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setp src) => AsmMnemonics.SETP;

            public static implicit operator AsmHexCode(Setp src) => src.Encoded;

            public static implicit operator Setp(AsmHexCode src) => new Setp(src);
        }

        public Setp setp() => default;

        [MethodImpl(Inline), Op]
        public Setp setp(AsmHexCode encoded) => new Setp(encoded);

        public struct Sets : ITypedInstruction<Sets>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sets(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sets src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sets src) => AsmMnemonics.SETS;

            public static implicit operator AsmHexCode(Sets src) => src.Encoded;

            public static implicit operator Sets(AsmHexCode src) => new Sets(src);
        }

        public Sets sets() => default;

        [MethodImpl(Inline), Op]
        public Sets sets(AsmHexCode encoded) => new Sets(encoded);

        public struct Setssbsy : ITypedInstruction<Setssbsy>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setssbsy(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETSSBSY;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setssbsy src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setssbsy src) => AsmMnemonics.SETSSBSY;

            public static implicit operator AsmHexCode(Setssbsy src) => src.Encoded;

            public static implicit operator Setssbsy(AsmHexCode src) => new Setssbsy(src);
        }

        public Setssbsy setssbsy() => default;

        [MethodImpl(Inline), Op]
        public Setssbsy setssbsy(AsmHexCode encoded) => new Setssbsy(encoded);

        public struct Setz : ITypedInstruction<Setz>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Setz(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SETZ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Setz src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Setz src) => AsmMnemonics.SETZ;

            public static implicit operator AsmHexCode(Setz src) => src.Encoded;

            public static implicit operator Setz(AsmHexCode src) => new Setz(src);
        }

        public Setz setz() => default;

        [MethodImpl(Inline), Op]
        public Setz setz(AsmHexCode encoded) => new Setz(encoded);

        public struct Sfence : ITypedInstruction<Sfence>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sfence(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SFENCE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sfence src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sfence src) => AsmMnemonics.SFENCE;

            public static implicit operator AsmHexCode(Sfence src) => src.Encoded;

            public static implicit operator Sfence(AsmHexCode src) => new Sfence(src);
        }

        public Sfence sfence() => default;

        [MethodImpl(Inline), Op]
        public Sfence sfence(AsmHexCode encoded) => new Sfence(encoded);

        public struct Sgdt : ITypedInstruction<Sgdt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sgdt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SGDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sgdt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sgdt src) => AsmMnemonics.SGDT;

            public static implicit operator AsmHexCode(Sgdt src) => src.Encoded;

            public static implicit operator Sgdt(AsmHexCode src) => new Sgdt(src);
        }

        public Sgdt sgdt() => default;

        [MethodImpl(Inline), Op]
        public Sgdt sgdt(AsmHexCode encoded) => new Sgdt(encoded);

        public struct Sha1msg1 : ITypedInstruction<Sha1msg1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha1msg1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA1MSG1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha1msg1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha1msg1 src) => AsmMnemonics.SHA1MSG1;

            public static implicit operator AsmHexCode(Sha1msg1 src) => src.Encoded;

            public static implicit operator Sha1msg1(AsmHexCode src) => new Sha1msg1(src);
        }

        public Sha1msg1 sha1msg1() => default;

        [MethodImpl(Inline), Op]
        public Sha1msg1 sha1msg1(AsmHexCode encoded) => new Sha1msg1(encoded);

        public struct Sha1msg2 : ITypedInstruction<Sha1msg2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha1msg2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA1MSG2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha1msg2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha1msg2 src) => AsmMnemonics.SHA1MSG2;

            public static implicit operator AsmHexCode(Sha1msg2 src) => src.Encoded;

            public static implicit operator Sha1msg2(AsmHexCode src) => new Sha1msg2(src);
        }

        public Sha1msg2 sha1msg2() => default;

        [MethodImpl(Inline), Op]
        public Sha1msg2 sha1msg2(AsmHexCode encoded) => new Sha1msg2(encoded);

        public struct Sha1nexte : ITypedInstruction<Sha1nexte>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha1nexte(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA1NEXTE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha1nexte src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha1nexte src) => AsmMnemonics.SHA1NEXTE;

            public static implicit operator AsmHexCode(Sha1nexte src) => src.Encoded;

            public static implicit operator Sha1nexte(AsmHexCode src) => new Sha1nexte(src);
        }

        public Sha1nexte sha1nexte() => default;

        [MethodImpl(Inline), Op]
        public Sha1nexte sha1nexte(AsmHexCode encoded) => new Sha1nexte(encoded);

        public struct Sha1rnds4 : ITypedInstruction<Sha1rnds4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha1rnds4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA1RNDS4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha1rnds4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha1rnds4 src) => AsmMnemonics.SHA1RNDS4;

            public static implicit operator AsmHexCode(Sha1rnds4 src) => src.Encoded;

            public static implicit operator Sha1rnds4(AsmHexCode src) => new Sha1rnds4(src);
        }

        public Sha1rnds4 sha1rnds4() => default;

        [MethodImpl(Inline), Op]
        public Sha1rnds4 sha1rnds4(AsmHexCode encoded) => new Sha1rnds4(encoded);

        public struct Sha256msg1 : ITypedInstruction<Sha256msg1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha256msg1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA256MSG1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha256msg1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha256msg1 src) => AsmMnemonics.SHA256MSG1;

            public static implicit operator AsmHexCode(Sha256msg1 src) => src.Encoded;

            public static implicit operator Sha256msg1(AsmHexCode src) => new Sha256msg1(src);
        }

        public Sha256msg1 sha256msg1() => default;

        [MethodImpl(Inline), Op]
        public Sha256msg1 sha256msg1(AsmHexCode encoded) => new Sha256msg1(encoded);

        public struct Sha256msg2 : ITypedInstruction<Sha256msg2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha256msg2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA256MSG2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha256msg2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha256msg2 src) => AsmMnemonics.SHA256MSG2;

            public static implicit operator AsmHexCode(Sha256msg2 src) => src.Encoded;

            public static implicit operator Sha256msg2(AsmHexCode src) => new Sha256msg2(src);
        }

        public Sha256msg2 sha256msg2() => default;

        [MethodImpl(Inline), Op]
        public Sha256msg2 sha256msg2(AsmHexCode encoded) => new Sha256msg2(encoded);

        public struct Sha256rnds2 : ITypedInstruction<Sha256rnds2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sha256rnds2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHA256RNDS2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sha256rnds2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sha256rnds2 src) => AsmMnemonics.SHA256RNDS2;

            public static implicit operator AsmHexCode(Sha256rnds2 src) => src.Encoded;

            public static implicit operator Sha256rnds2(AsmHexCode src) => new Sha256rnds2(src);
        }

        public Sha256rnds2 sha256rnds2() => default;

        [MethodImpl(Inline), Op]
        public Sha256rnds2 sha256rnds2(AsmHexCode encoded) => new Sha256rnds2(encoded);

        public struct Shl : ITypedInstruction<Shl>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shl(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shl src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shl src) => AsmMnemonics.SHL;

            public static implicit operator AsmHexCode(Shl src) => src.Encoded;

            public static implicit operator Shl(AsmHexCode src) => new Shl(src);
        }

        public Shl shl() => default;

        [MethodImpl(Inline), Op]
        public Shl shl(AsmHexCode encoded) => new Shl(encoded);

        public struct Shld : ITypedInstruction<Shld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shld src) => AsmMnemonics.SHLD;

            public static implicit operator AsmHexCode(Shld src) => src.Encoded;

            public static implicit operator Shld(AsmHexCode src) => new Shld(src);
        }

        public Shld shld() => default;

        [MethodImpl(Inline), Op]
        public Shld shld(AsmHexCode encoded) => new Shld(encoded);

        public struct Shlx : ITypedInstruction<Shlx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shlx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHLX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shlx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shlx src) => AsmMnemonics.SHLX;

            public static implicit operator AsmHexCode(Shlx src) => src.Encoded;

            public static implicit operator Shlx(AsmHexCode src) => new Shlx(src);
        }

        public Shlx shlx() => default;

        [MethodImpl(Inline), Op]
        public Shlx shlx(AsmHexCode encoded) => new Shlx(encoded);

        public struct Shr : ITypedInstruction<Shr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shr src) => AsmMnemonics.SHR;

            public static implicit operator AsmHexCode(Shr src) => src.Encoded;

            public static implicit operator Shr(AsmHexCode src) => new Shr(src);
        }

        public Shr shr() => default;

        [MethodImpl(Inline), Op]
        public Shr shr(AsmHexCode encoded) => new Shr(encoded);

        public struct Shrd : ITypedInstruction<Shrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shrd src) => AsmMnemonics.SHRD;

            public static implicit operator AsmHexCode(Shrd src) => src.Encoded;

            public static implicit operator Shrd(AsmHexCode src) => new Shrd(src);
        }

        public Shrd shrd() => default;

        [MethodImpl(Inline), Op]
        public Shrd shrd(AsmHexCode encoded) => new Shrd(encoded);

        public struct Shrx : ITypedInstruction<Shrx>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shrx(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHRX;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shrx src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shrx src) => AsmMnemonics.SHRX;

            public static implicit operator AsmHexCode(Shrx src) => src.Encoded;

            public static implicit operator Shrx(AsmHexCode src) => new Shrx(src);
        }

        public Shrx shrx() => default;

        [MethodImpl(Inline), Op]
        public Shrx shrx(AsmHexCode encoded) => new Shrx(encoded);

        public struct Shufpd : ITypedInstruction<Shufpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shufpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHUFPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shufpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shufpd src) => AsmMnemonics.SHUFPD;

            public static implicit operator AsmHexCode(Shufpd src) => src.Encoded;

            public static implicit operator Shufpd(AsmHexCode src) => new Shufpd(src);
        }

        public Shufpd shufpd() => default;

        [MethodImpl(Inline), Op]
        public Shufpd shufpd(AsmHexCode encoded) => new Shufpd(encoded);

        public struct Shufps : ITypedInstruction<Shufps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Shufps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SHUFPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Shufps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Shufps src) => AsmMnemonics.SHUFPS;

            public static implicit operator AsmHexCode(Shufps src) => src.Encoded;

            public static implicit operator Shufps(AsmHexCode src) => new Shufps(src);
        }

        public Shufps shufps() => default;

        [MethodImpl(Inline), Op]
        public Shufps shufps(AsmHexCode encoded) => new Shufps(encoded);

        public struct Sidt : ITypedInstruction<Sidt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sidt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SIDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sidt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sidt src) => AsmMnemonics.SIDT;

            public static implicit operator AsmHexCode(Sidt src) => src.Encoded;

            public static implicit operator Sidt(AsmHexCode src) => new Sidt(src);
        }

        public Sidt sidt() => default;

        [MethodImpl(Inline), Op]
        public Sidt sidt(AsmHexCode encoded) => new Sidt(encoded);

        public struct Skinit : ITypedInstruction<Skinit>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Skinit(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SKINIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Skinit src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Skinit src) => AsmMnemonics.SKINIT;

            public static implicit operator AsmHexCode(Skinit src) => src.Encoded;

            public static implicit operator Skinit(AsmHexCode src) => new Skinit(src);
        }

        public Skinit skinit() => default;

        [MethodImpl(Inline), Op]
        public Skinit skinit(AsmHexCode encoded) => new Skinit(encoded);

        public struct Sldt : ITypedInstruction<Sldt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sldt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SLDT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sldt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sldt src) => AsmMnemonics.SLDT;

            public static implicit operator AsmHexCode(Sldt src) => src.Encoded;

            public static implicit operator Sldt(AsmHexCode src) => new Sldt(src);
        }

        public Sldt sldt() => default;

        [MethodImpl(Inline), Op]
        public Sldt sldt(AsmHexCode encoded) => new Sldt(encoded);

        public struct Slwpcb : ITypedInstruction<Slwpcb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Slwpcb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SLWPCB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Slwpcb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Slwpcb src) => AsmMnemonics.SLWPCB;

            public static implicit operator AsmHexCode(Slwpcb src) => src.Encoded;

            public static implicit operator Slwpcb(AsmHexCode src) => new Slwpcb(src);
        }

        public Slwpcb slwpcb() => default;

        [MethodImpl(Inline), Op]
        public Slwpcb slwpcb(AsmHexCode encoded) => new Slwpcb(encoded);

        public struct Smsw : ITypedInstruction<Smsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Smsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SMSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Smsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Smsw src) => AsmMnemonics.SMSW;

            public static implicit operator AsmHexCode(Smsw src) => src.Encoded;

            public static implicit operator Smsw(AsmHexCode src) => new Smsw(src);
        }

        public Smsw smsw() => default;

        [MethodImpl(Inline), Op]
        public Smsw smsw(AsmHexCode encoded) => new Smsw(encoded);

        public struct Sqrtpd : ITypedInstruction<Sqrtpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sqrtpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SQRTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sqrtpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sqrtpd src) => AsmMnemonics.SQRTPD;

            public static implicit operator AsmHexCode(Sqrtpd src) => src.Encoded;

            public static implicit operator Sqrtpd(AsmHexCode src) => new Sqrtpd(src);
        }

        public Sqrtpd sqrtpd() => default;

        [MethodImpl(Inline), Op]
        public Sqrtpd sqrtpd(AsmHexCode encoded) => new Sqrtpd(encoded);

        public struct Sqrtps : ITypedInstruction<Sqrtps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sqrtps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SQRTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sqrtps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sqrtps src) => AsmMnemonics.SQRTPS;

            public static implicit operator AsmHexCode(Sqrtps src) => src.Encoded;

            public static implicit operator Sqrtps(AsmHexCode src) => new Sqrtps(src);
        }

        public Sqrtps sqrtps() => default;

        [MethodImpl(Inline), Op]
        public Sqrtps sqrtps(AsmHexCode encoded) => new Sqrtps(encoded);

        public struct Sqrtsd : ITypedInstruction<Sqrtsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sqrtsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SQRTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sqrtsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sqrtsd src) => AsmMnemonics.SQRTSD;

            public static implicit operator AsmHexCode(Sqrtsd src) => src.Encoded;

            public static implicit operator Sqrtsd(AsmHexCode src) => new Sqrtsd(src);
        }

        public Sqrtsd sqrtsd() => default;

        [MethodImpl(Inline), Op]
        public Sqrtsd sqrtsd(AsmHexCode encoded) => new Sqrtsd(encoded);

        public struct Sqrtss : ITypedInstruction<Sqrtss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sqrtss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SQRTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sqrtss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sqrtss src) => AsmMnemonics.SQRTSS;

            public static implicit operator AsmHexCode(Sqrtss src) => src.Encoded;

            public static implicit operator Sqrtss(AsmHexCode src) => new Sqrtss(src);
        }

        public Sqrtss sqrtss() => default;

        [MethodImpl(Inline), Op]
        public Sqrtss sqrtss(AsmHexCode encoded) => new Sqrtss(encoded);

        public struct Stac : ITypedInstruction<Stac>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stac(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STAC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stac src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stac src) => AsmMnemonics.STAC;

            public static implicit operator AsmHexCode(Stac src) => src.Encoded;

            public static implicit operator Stac(AsmHexCode src) => new Stac(src);
        }

        public Stac stac() => default;

        [MethodImpl(Inline), Op]
        public Stac stac(AsmHexCode encoded) => new Stac(encoded);

        public struct Stc : ITypedInstruction<Stc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stc src) => AsmMnemonics.STC;

            public static implicit operator AsmHexCode(Stc src) => src.Encoded;

            public static implicit operator Stc(AsmHexCode src) => new Stc(src);
        }

        public Stc stc() => default;

        [MethodImpl(Inline), Op]
        public Stc stc(AsmHexCode encoded) => new Stc(encoded);

        public struct Std : ITypedInstruction<Std>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Std(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Std src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Std src) => AsmMnemonics.STD;

            public static implicit operator AsmHexCode(Std src) => src.Encoded;

            public static implicit operator Std(AsmHexCode src) => new Std(src);
        }

        public Std std() => default;

        [MethodImpl(Inline), Op]
        public Std std(AsmHexCode encoded) => new Std(encoded);

        public struct Stgi : ITypedInstruction<Stgi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stgi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STGI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stgi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stgi src) => AsmMnemonics.STGI;

            public static implicit operator AsmHexCode(Stgi src) => src.Encoded;

            public static implicit operator Stgi(AsmHexCode src) => new Stgi(src);
        }

        public Stgi stgi() => default;

        [MethodImpl(Inline), Op]
        public Stgi stgi(AsmHexCode encoded) => new Stgi(encoded);

        public struct Sti : ITypedInstruction<Sti>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sti(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sti src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sti src) => AsmMnemonics.STI;

            public static implicit operator AsmHexCode(Sti src) => src.Encoded;

            public static implicit operator Sti(AsmHexCode src) => new Sti(src);
        }

        public Sti sti() => default;

        [MethodImpl(Inline), Op]
        public Sti sti(AsmHexCode encoded) => new Sti(encoded);

        public struct Stmxcsr : ITypedInstruction<Stmxcsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stmxcsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STMXCSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stmxcsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stmxcsr src) => AsmMnemonics.STMXCSR;

            public static implicit operator AsmHexCode(Stmxcsr src) => src.Encoded;

            public static implicit operator Stmxcsr(AsmHexCode src) => new Stmxcsr(src);
        }

        public Stmxcsr stmxcsr() => default;

        [MethodImpl(Inline), Op]
        public Stmxcsr stmxcsr(AsmHexCode encoded) => new Stmxcsr(encoded);

        public struct Stosb : ITypedInstruction<Stosb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stosb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STOSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stosb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stosb src) => AsmMnemonics.STOSB;

            public static implicit operator AsmHexCode(Stosb src) => src.Encoded;

            public static implicit operator Stosb(AsmHexCode src) => new Stosb(src);
        }

        public Stosb stosb() => default;

        [MethodImpl(Inline), Op]
        public Stosb stosb(AsmHexCode encoded) => new Stosb(encoded);

        public struct Stosd : ITypedInstruction<Stosd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stosd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STOSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stosd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stosd src) => AsmMnemonics.STOSD;

            public static implicit operator AsmHexCode(Stosd src) => src.Encoded;

            public static implicit operator Stosd(AsmHexCode src) => new Stosd(src);
        }

        public Stosd stosd() => default;

        [MethodImpl(Inline), Op]
        public Stosd stosd(AsmHexCode encoded) => new Stosd(encoded);

        public struct Stosq : ITypedInstruction<Stosq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stosq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STOSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stosq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stosq src) => AsmMnemonics.STOSQ;

            public static implicit operator AsmHexCode(Stosq src) => src.Encoded;

            public static implicit operator Stosq(AsmHexCode src) => new Stosq(src);
        }

        public Stosq stosq() => default;

        [MethodImpl(Inline), Op]
        public Stosq stosq(AsmHexCode encoded) => new Stosq(encoded);

        public struct Stosw : ITypedInstruction<Stosw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stosw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STOSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stosw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stosw src) => AsmMnemonics.STOSW;

            public static implicit operator AsmHexCode(Stosw src) => src.Encoded;

            public static implicit operator Stosw(AsmHexCode src) => new Stosw(src);
        }

        public Stosw stosw() => default;

        [MethodImpl(Inline), Op]
        public Stosw stosw(AsmHexCode encoded) => new Stosw(encoded);

        public struct Str : ITypedInstruction<Str>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Str(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Str src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Str src) => AsmMnemonics.STR;

            public static implicit operator AsmHexCode(Str src) => src.Encoded;

            public static implicit operator Str(AsmHexCode src) => new Str(src);
        }

        public Str str() => default;

        [MethodImpl(Inline), Op]
        public Str str(AsmHexCode encoded) => new Str(encoded);

        public struct Sttilecfg : ITypedInstruction<Sttilecfg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sttilecfg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STTILECFG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sttilecfg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sttilecfg src) => AsmMnemonics.STTILECFG;

            public static implicit operator AsmHexCode(Sttilecfg src) => src.Encoded;

            public static implicit operator Sttilecfg(AsmHexCode src) => new Sttilecfg(src);
        }

        public Sttilecfg sttilecfg() => default;

        [MethodImpl(Inline), Op]
        public Sttilecfg sttilecfg(AsmHexCode encoded) => new Sttilecfg(encoded);

        public struct Stui : ITypedInstruction<Stui>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Stui(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.STUI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Stui src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Stui src) => AsmMnemonics.STUI;

            public static implicit operator AsmHexCode(Stui src) => src.Encoded;

            public static implicit operator Stui(AsmHexCode src) => new Stui(src);
        }

        public Stui stui() => default;

        [MethodImpl(Inline), Op]
        public Stui stui(AsmHexCode encoded) => new Stui(encoded);

        public struct Sub : ITypedInstruction<Sub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sub src) => AsmMnemonics.SUB;

            public static implicit operator AsmHexCode(Sub src) => src.Encoded;

            public static implicit operator Sub(AsmHexCode src) => new Sub(src);
        }

        public Sub sub() => default;

        [MethodImpl(Inline), Op]
        public Sub sub(AsmHexCode encoded) => new Sub(encoded);

        public struct Sub_lock : ITypedInstruction<Sub_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sub_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUB_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sub_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sub_lock src) => AsmMnemonics.SUB_LOCK;

            public static implicit operator AsmHexCode(Sub_lock src) => src.Encoded;

            public static implicit operator Sub_lock(AsmHexCode src) => new Sub_lock(src);
        }

        public Sub_lock sub_lock() => default;

        [MethodImpl(Inline), Op]
        public Sub_lock sub_lock(AsmHexCode encoded) => new Sub_lock(encoded);

        public struct Subpd : ITypedInstruction<Subpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Subpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Subpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Subpd src) => AsmMnemonics.SUBPD;

            public static implicit operator AsmHexCode(Subpd src) => src.Encoded;

            public static implicit operator Subpd(AsmHexCode src) => new Subpd(src);
        }

        public Subpd subpd() => default;

        [MethodImpl(Inline), Op]
        public Subpd subpd(AsmHexCode encoded) => new Subpd(encoded);

        public struct Subps : ITypedInstruction<Subps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Subps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Subps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Subps src) => AsmMnemonics.SUBPS;

            public static implicit operator AsmHexCode(Subps src) => src.Encoded;

            public static implicit operator Subps(AsmHexCode src) => new Subps(src);
        }

        public Subps subps() => default;

        [MethodImpl(Inline), Op]
        public Subps subps(AsmHexCode encoded) => new Subps(encoded);

        public struct Subsd : ITypedInstruction<Subsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Subsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUBSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Subsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Subsd src) => AsmMnemonics.SUBSD;

            public static implicit operator AsmHexCode(Subsd src) => src.Encoded;

            public static implicit operator Subsd(AsmHexCode src) => new Subsd(src);
        }

        public Subsd subsd() => default;

        [MethodImpl(Inline), Op]
        public Subsd subsd(AsmHexCode encoded) => new Subsd(encoded);

        public struct Subss : ITypedInstruction<Subss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Subss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SUBSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Subss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Subss src) => AsmMnemonics.SUBSS;

            public static implicit operator AsmHexCode(Subss src) => src.Encoded;

            public static implicit operator Subss(AsmHexCode src) => new Subss(src);
        }

        public Subss subss() => default;

        [MethodImpl(Inline), Op]
        public Subss subss(AsmHexCode encoded) => new Subss(encoded);

        public struct Swapgs : ITypedInstruction<Swapgs>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Swapgs(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SWAPGS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Swapgs src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Swapgs src) => AsmMnemonics.SWAPGS;

            public static implicit operator AsmHexCode(Swapgs src) => src.Encoded;

            public static implicit operator Swapgs(AsmHexCode src) => new Swapgs(src);
        }

        public Swapgs swapgs() => default;

        [MethodImpl(Inline), Op]
        public Swapgs swapgs(AsmHexCode encoded) => new Swapgs(encoded);

        public struct Syscall : ITypedInstruction<Syscall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Syscall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSCALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Syscall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Syscall src) => AsmMnemonics.SYSCALL;

            public static implicit operator AsmHexCode(Syscall src) => src.Encoded;

            public static implicit operator Syscall(AsmHexCode src) => new Syscall(src);
        }

        public Syscall syscall() => default;

        [MethodImpl(Inline), Op]
        public Syscall syscall(AsmHexCode encoded) => new Syscall(encoded);

        public struct Syscall_amd : ITypedInstruction<Syscall_amd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Syscall_amd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSCALL_AMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Syscall_amd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Syscall_amd src) => AsmMnemonics.SYSCALL_AMD;

            public static implicit operator AsmHexCode(Syscall_amd src) => src.Encoded;

            public static implicit operator Syscall_amd(AsmHexCode src) => new Syscall_amd(src);
        }

        public Syscall_amd syscall_amd() => default;

        [MethodImpl(Inline), Op]
        public Syscall_amd syscall_amd(AsmHexCode encoded) => new Syscall_amd(encoded);

        public struct Sysenter : ITypedInstruction<Sysenter>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sysenter(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSENTER;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sysenter src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sysenter src) => AsmMnemonics.SYSENTER;

            public static implicit operator AsmHexCode(Sysenter src) => src.Encoded;

            public static implicit operator Sysenter(AsmHexCode src) => new Sysenter(src);
        }

        public Sysenter sysenter() => default;

        [MethodImpl(Inline), Op]
        public Sysenter sysenter(AsmHexCode encoded) => new Sysenter(encoded);

        public struct Sysexit : ITypedInstruction<Sysexit>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sysexit(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSEXIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sysexit src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sysexit src) => AsmMnemonics.SYSEXIT;

            public static implicit operator AsmHexCode(Sysexit src) => src.Encoded;

            public static implicit operator Sysexit(AsmHexCode src) => new Sysexit(src);
        }

        public Sysexit sysexit() => default;

        [MethodImpl(Inline), Op]
        public Sysexit sysexit(AsmHexCode encoded) => new Sysexit(encoded);

        public struct Sysret : ITypedInstruction<Sysret>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sysret(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSRET;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sysret src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sysret src) => AsmMnemonics.SYSRET;

            public static implicit operator AsmHexCode(Sysret src) => src.Encoded;

            public static implicit operator Sysret(AsmHexCode src) => new Sysret(src);
        }

        public Sysret sysret() => default;

        [MethodImpl(Inline), Op]
        public Sysret sysret(AsmHexCode encoded) => new Sysret(encoded);

        public struct Sysret_amd : ITypedInstruction<Sysret_amd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sysret_amd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSRET_AMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sysret_amd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sysret_amd src) => AsmMnemonics.SYSRET_AMD;

            public static implicit operator AsmHexCode(Sysret_amd src) => src.Encoded;

            public static implicit operator Sysret_amd(AsmHexCode src) => new Sysret_amd(src);
        }

        public Sysret_amd sysret_amd() => default;

        [MethodImpl(Inline), Op]
        public Sysret_amd sysret_amd(AsmHexCode encoded) => new Sysret_amd(encoded);

        public struct Sysret64 : ITypedInstruction<Sysret64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Sysret64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.SYSRET64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Sysret64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Sysret64 src) => AsmMnemonics.SYSRET64;

            public static implicit operator AsmHexCode(Sysret64 src) => src.Encoded;

            public static implicit operator Sysret64(AsmHexCode src) => new Sysret64(src);
        }

        public Sysret64 sysret64() => default;

        [MethodImpl(Inline), Op]
        public Sysret64 sysret64(AsmHexCode encoded) => new Sysret64(encoded);

        public struct T1mskc : ITypedInstruction<T1mskc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public T1mskc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.T1MSKC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(T1mskc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(T1mskc src) => AsmMnemonics.T1MSKC;

            public static implicit operator AsmHexCode(T1mskc src) => src.Encoded;

            public static implicit operator T1mskc(AsmHexCode src) => new T1mskc(src);
        }

        public T1mskc t1mskc() => default;

        [MethodImpl(Inline), Op]
        public T1mskc t1mskc(AsmHexCode encoded) => new T1mskc(encoded);

        public struct Tdcall : ITypedInstruction<Tdcall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdcall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDCALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdcall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdcall src) => AsmMnemonics.TDCALL;

            public static implicit operator AsmHexCode(Tdcall src) => src.Encoded;

            public static implicit operator Tdcall(AsmHexCode src) => new Tdcall(src);
        }

        public Tdcall tdcall() => default;

        [MethodImpl(Inline), Op]
        public Tdcall tdcall(AsmHexCode encoded) => new Tdcall(encoded);

        public struct Tdpbf16ps : ITypedInstruction<Tdpbf16ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdpbf16ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDPBF16PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdpbf16ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdpbf16ps src) => AsmMnemonics.TDPBF16PS;

            public static implicit operator AsmHexCode(Tdpbf16ps src) => src.Encoded;

            public static implicit operator Tdpbf16ps(AsmHexCode src) => new Tdpbf16ps(src);
        }

        public Tdpbf16ps tdpbf16ps() => default;

        [MethodImpl(Inline), Op]
        public Tdpbf16ps tdpbf16ps(AsmHexCode encoded) => new Tdpbf16ps(encoded);

        public struct Tdpbssd : ITypedInstruction<Tdpbssd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdpbssd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDPBSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdpbssd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdpbssd src) => AsmMnemonics.TDPBSSD;

            public static implicit operator AsmHexCode(Tdpbssd src) => src.Encoded;

            public static implicit operator Tdpbssd(AsmHexCode src) => new Tdpbssd(src);
        }

        public Tdpbssd tdpbssd() => default;

        [MethodImpl(Inline), Op]
        public Tdpbssd tdpbssd(AsmHexCode encoded) => new Tdpbssd(encoded);

        public struct Tdpbsud : ITypedInstruction<Tdpbsud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdpbsud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDPBSUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdpbsud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdpbsud src) => AsmMnemonics.TDPBSUD;

            public static implicit operator AsmHexCode(Tdpbsud src) => src.Encoded;

            public static implicit operator Tdpbsud(AsmHexCode src) => new Tdpbsud(src);
        }

        public Tdpbsud tdpbsud() => default;

        [MethodImpl(Inline), Op]
        public Tdpbsud tdpbsud(AsmHexCode encoded) => new Tdpbsud(encoded);

        public struct Tdpbusd : ITypedInstruction<Tdpbusd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdpbusd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDPBUSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdpbusd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdpbusd src) => AsmMnemonics.TDPBUSD;

            public static implicit operator AsmHexCode(Tdpbusd src) => src.Encoded;

            public static implicit operator Tdpbusd(AsmHexCode src) => new Tdpbusd(src);
        }

        public Tdpbusd tdpbusd() => default;

        [MethodImpl(Inline), Op]
        public Tdpbusd tdpbusd(AsmHexCode encoded) => new Tdpbusd(encoded);

        public struct Tdpbuud : ITypedInstruction<Tdpbuud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tdpbuud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TDPBUUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tdpbuud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tdpbuud src) => AsmMnemonics.TDPBUUD;

            public static implicit operator AsmHexCode(Tdpbuud src) => src.Encoded;

            public static implicit operator Tdpbuud(AsmHexCode src) => new Tdpbuud(src);
        }

        public Tdpbuud tdpbuud() => default;

        [MethodImpl(Inline), Op]
        public Tdpbuud tdpbuud(AsmHexCode encoded) => new Tdpbuud(encoded);

        public struct Test : ITypedInstruction<Test>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Test(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TEST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Test src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Test src) => AsmMnemonics.TEST;

            public static implicit operator AsmHexCode(Test src) => src.Encoded;

            public static implicit operator Test(AsmHexCode src) => new Test(src);
        }

        public Test test() => default;

        [MethodImpl(Inline), Op]
        public Test test(AsmHexCode encoded) => new Test(encoded);

        public struct Testui : ITypedInstruction<Testui>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Testui(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TESTUI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Testui src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Testui src) => AsmMnemonics.TESTUI;

            public static implicit operator AsmHexCode(Testui src) => src.Encoded;

            public static implicit operator Testui(AsmHexCode src) => new Testui(src);
        }

        public Testui testui() => default;

        [MethodImpl(Inline), Op]
        public Testui testui(AsmHexCode encoded) => new Testui(encoded);

        public struct Tileloadd : ITypedInstruction<Tileloadd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tileloadd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TILELOADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tileloadd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tileloadd src) => AsmMnemonics.TILELOADD;

            public static implicit operator AsmHexCode(Tileloadd src) => src.Encoded;

            public static implicit operator Tileloadd(AsmHexCode src) => new Tileloadd(src);
        }

        public Tileloadd tileloadd() => default;

        [MethodImpl(Inline), Op]
        public Tileloadd tileloadd(AsmHexCode encoded) => new Tileloadd(encoded);

        public struct Tileloaddt1 : ITypedInstruction<Tileloaddt1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tileloaddt1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TILELOADDT1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tileloaddt1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tileloaddt1 src) => AsmMnemonics.TILELOADDT1;

            public static implicit operator AsmHexCode(Tileloaddt1 src) => src.Encoded;

            public static implicit operator Tileloaddt1(AsmHexCode src) => new Tileloaddt1(src);
        }

        public Tileloaddt1 tileloaddt1() => default;

        [MethodImpl(Inline), Op]
        public Tileloaddt1 tileloaddt1(AsmHexCode encoded) => new Tileloaddt1(encoded);

        public struct Tilerelease : ITypedInstruction<Tilerelease>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tilerelease(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TILERELEASE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tilerelease src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tilerelease src) => AsmMnemonics.TILERELEASE;

            public static implicit operator AsmHexCode(Tilerelease src) => src.Encoded;

            public static implicit operator Tilerelease(AsmHexCode src) => new Tilerelease(src);
        }

        public Tilerelease tilerelease() => default;

        [MethodImpl(Inline), Op]
        public Tilerelease tilerelease(AsmHexCode encoded) => new Tilerelease(encoded);

        public struct Tilestored : ITypedInstruction<Tilestored>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tilestored(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TILESTORED;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tilestored src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tilestored src) => AsmMnemonics.TILESTORED;

            public static implicit operator AsmHexCode(Tilestored src) => src.Encoded;

            public static implicit operator Tilestored(AsmHexCode src) => new Tilestored(src);
        }

        public Tilestored tilestored() => default;

        [MethodImpl(Inline), Op]
        public Tilestored tilestored(AsmHexCode encoded) => new Tilestored(encoded);

        public struct Tilezero : ITypedInstruction<Tilezero>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tilezero(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TILEZERO;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tilezero src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tilezero src) => AsmMnemonics.TILEZERO;

            public static implicit operator AsmHexCode(Tilezero src) => src.Encoded;

            public static implicit operator Tilezero(AsmHexCode src) => new Tilezero(src);
        }

        public Tilezero tilezero() => default;

        [MethodImpl(Inline), Op]
        public Tilezero tilezero(AsmHexCode encoded) => new Tilezero(encoded);

        public struct Tlbsync : ITypedInstruction<Tlbsync>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tlbsync(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TLBSYNC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tlbsync src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tlbsync src) => AsmMnemonics.TLBSYNC;

            public static implicit operator AsmHexCode(Tlbsync src) => src.Encoded;

            public static implicit operator Tlbsync(AsmHexCode src) => new Tlbsync(src);
        }

        public Tlbsync tlbsync() => default;

        [MethodImpl(Inline), Op]
        public Tlbsync tlbsync(AsmHexCode encoded) => new Tlbsync(encoded);

        public struct Tpause : ITypedInstruction<Tpause>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tpause(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TPAUSE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tpause src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tpause src) => AsmMnemonics.TPAUSE;

            public static implicit operator AsmHexCode(Tpause src) => src.Encoded;

            public static implicit operator Tpause(AsmHexCode src) => new Tpause(src);
        }

        public Tpause tpause() => default;

        [MethodImpl(Inline), Op]
        public Tpause tpause(AsmHexCode encoded) => new Tpause(encoded);

        public struct Tzcnt : ITypedInstruction<Tzcnt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tzcnt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TZCNT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tzcnt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tzcnt src) => AsmMnemonics.TZCNT;

            public static implicit operator AsmHexCode(Tzcnt src) => src.Encoded;

            public static implicit operator Tzcnt(AsmHexCode src) => new Tzcnt(src);
        }

        public Tzcnt tzcnt() => default;

        [MethodImpl(Inline), Op]
        public Tzcnt tzcnt(AsmHexCode encoded) => new Tzcnt(encoded);

        public struct Tzmsk : ITypedInstruction<Tzmsk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Tzmsk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.TZMSK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Tzmsk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Tzmsk src) => AsmMnemonics.TZMSK;

            public static implicit operator AsmHexCode(Tzmsk src) => src.Encoded;

            public static implicit operator Tzmsk(AsmHexCode src) => new Tzmsk(src);
        }

        public Tzmsk tzmsk() => default;

        [MethodImpl(Inline), Op]
        public Tzmsk tzmsk(AsmHexCode encoded) => new Tzmsk(encoded);

        public struct Ucomisd : ITypedInstruction<Ucomisd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ucomisd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UCOMISD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ucomisd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ucomisd src) => AsmMnemonics.UCOMISD;

            public static implicit operator AsmHexCode(Ucomisd src) => src.Encoded;

            public static implicit operator Ucomisd(AsmHexCode src) => new Ucomisd(src);
        }

        public Ucomisd ucomisd() => default;

        [MethodImpl(Inline), Op]
        public Ucomisd ucomisd(AsmHexCode encoded) => new Ucomisd(encoded);

        public struct Ucomiss : ITypedInstruction<Ucomiss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ucomiss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UCOMISS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ucomiss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ucomiss src) => AsmMnemonics.UCOMISS;

            public static implicit operator AsmHexCode(Ucomiss src) => src.Encoded;

            public static implicit operator Ucomiss(AsmHexCode src) => new Ucomiss(src);
        }

        public Ucomiss ucomiss() => default;

        [MethodImpl(Inline), Op]
        public Ucomiss ucomiss(AsmHexCode encoded) => new Ucomiss(encoded);

        public struct Ud0 : ITypedInstruction<Ud0>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ud0(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UD0;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ud0 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ud0 src) => AsmMnemonics.UD0;

            public static implicit operator AsmHexCode(Ud0 src) => src.Encoded;

            public static implicit operator Ud0(AsmHexCode src) => new Ud0(src);
        }

        public Ud0 ud0() => default;

        [MethodImpl(Inline), Op]
        public Ud0 ud0(AsmHexCode encoded) => new Ud0(encoded);

        public struct Ud1 : ITypedInstruction<Ud1>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ud1(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UD1;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ud1 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ud1 src) => AsmMnemonics.UD1;

            public static implicit operator AsmHexCode(Ud1 src) => src.Encoded;

            public static implicit operator Ud1(AsmHexCode src) => new Ud1(src);
        }

        public Ud1 ud1() => default;

        [MethodImpl(Inline), Op]
        public Ud1 ud1(AsmHexCode encoded) => new Ud1(encoded);

        public struct Ud2 : ITypedInstruction<Ud2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Ud2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UD2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Ud2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Ud2 src) => AsmMnemonics.UD2;

            public static implicit operator AsmHexCode(Ud2 src) => src.Encoded;

            public static implicit operator Ud2(AsmHexCode src) => new Ud2(src);
        }

        public Ud2 ud2() => default;

        [MethodImpl(Inline), Op]
        public Ud2 ud2(AsmHexCode encoded) => new Ud2(encoded);

        public struct Uiret : ITypedInstruction<Uiret>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Uiret(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UIRET;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Uiret src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Uiret src) => AsmMnemonics.UIRET;

            public static implicit operator AsmHexCode(Uiret src) => src.Encoded;

            public static implicit operator Uiret(AsmHexCode src) => new Uiret(src);
        }

        public Uiret uiret() => default;

        [MethodImpl(Inline), Op]
        public Uiret uiret(AsmHexCode encoded) => new Uiret(encoded);

        public struct Umonitor : ITypedInstruction<Umonitor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Umonitor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UMONITOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Umonitor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Umonitor src) => AsmMnemonics.UMONITOR;

            public static implicit operator AsmHexCode(Umonitor src) => src.Encoded;

            public static implicit operator Umonitor(AsmHexCode src) => new Umonitor(src);
        }

        public Umonitor umonitor() => default;

        [MethodImpl(Inline), Op]
        public Umonitor umonitor(AsmHexCode encoded) => new Umonitor(encoded);

        public struct Umwait : ITypedInstruction<Umwait>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Umwait(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UMWAIT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Umwait src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Umwait src) => AsmMnemonics.UMWAIT;

            public static implicit operator AsmHexCode(Umwait src) => src.Encoded;

            public static implicit operator Umwait(AsmHexCode src) => new Umwait(src);
        }

        public Umwait umwait() => default;

        [MethodImpl(Inline), Op]
        public Umwait umwait(AsmHexCode encoded) => new Umwait(encoded);

        public struct Unpckhpd : ITypedInstruction<Unpckhpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Unpckhpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UNPCKHPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Unpckhpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Unpckhpd src) => AsmMnemonics.UNPCKHPD;

            public static implicit operator AsmHexCode(Unpckhpd src) => src.Encoded;

            public static implicit operator Unpckhpd(AsmHexCode src) => new Unpckhpd(src);
        }

        public Unpckhpd unpckhpd() => default;

        [MethodImpl(Inline), Op]
        public Unpckhpd unpckhpd(AsmHexCode encoded) => new Unpckhpd(encoded);

        public struct Unpckhps : ITypedInstruction<Unpckhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Unpckhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UNPCKHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Unpckhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Unpckhps src) => AsmMnemonics.UNPCKHPS;

            public static implicit operator AsmHexCode(Unpckhps src) => src.Encoded;

            public static implicit operator Unpckhps(AsmHexCode src) => new Unpckhps(src);
        }

        public Unpckhps unpckhps() => default;

        [MethodImpl(Inline), Op]
        public Unpckhps unpckhps(AsmHexCode encoded) => new Unpckhps(encoded);

        public struct Unpcklpd : ITypedInstruction<Unpcklpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Unpcklpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UNPCKLPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Unpcklpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Unpcklpd src) => AsmMnemonics.UNPCKLPD;

            public static implicit operator AsmHexCode(Unpcklpd src) => src.Encoded;

            public static implicit operator Unpcklpd(AsmHexCode src) => new Unpcklpd(src);
        }

        public Unpcklpd unpcklpd() => default;

        [MethodImpl(Inline), Op]
        public Unpcklpd unpcklpd(AsmHexCode encoded) => new Unpcklpd(encoded);

        public struct Unpcklps : ITypedInstruction<Unpcklps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Unpcklps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.UNPCKLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Unpcklps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Unpcklps src) => AsmMnemonics.UNPCKLPS;

            public static implicit operator AsmHexCode(Unpcklps src) => src.Encoded;

            public static implicit operator Unpcklps(AsmHexCode src) => new Unpcklps(src);
        }

        public Unpcklps unpcklps() => default;

        [MethodImpl(Inline), Op]
        public Unpcklps unpcklps(AsmHexCode encoded) => new Unpcklps(encoded);

        public struct V4fmaddps : ITypedInstruction<V4fmaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public V4fmaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.V4FMADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(V4fmaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(V4fmaddps src) => AsmMnemonics.V4FMADDPS;

            public static implicit operator AsmHexCode(V4fmaddps src) => src.Encoded;

            public static implicit operator V4fmaddps(AsmHexCode src) => new V4fmaddps(src);
        }

        public V4fmaddps v4fmaddps() => default;

        [MethodImpl(Inline), Op]
        public V4fmaddps v4fmaddps(AsmHexCode encoded) => new V4fmaddps(encoded);

        public struct V4fmaddss : ITypedInstruction<V4fmaddss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public V4fmaddss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.V4FMADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(V4fmaddss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(V4fmaddss src) => AsmMnemonics.V4FMADDSS;

            public static implicit operator AsmHexCode(V4fmaddss src) => src.Encoded;

            public static implicit operator V4fmaddss(AsmHexCode src) => new V4fmaddss(src);
        }

        public V4fmaddss v4fmaddss() => default;

        [MethodImpl(Inline), Op]
        public V4fmaddss v4fmaddss(AsmHexCode encoded) => new V4fmaddss(encoded);

        public struct V4fnmaddps : ITypedInstruction<V4fnmaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public V4fnmaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.V4FNMADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(V4fnmaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(V4fnmaddps src) => AsmMnemonics.V4FNMADDPS;

            public static implicit operator AsmHexCode(V4fnmaddps src) => src.Encoded;

            public static implicit operator V4fnmaddps(AsmHexCode src) => new V4fnmaddps(src);
        }

        public V4fnmaddps v4fnmaddps() => default;

        [MethodImpl(Inline), Op]
        public V4fnmaddps v4fnmaddps(AsmHexCode encoded) => new V4fnmaddps(encoded);

        public struct V4fnmaddss : ITypedInstruction<V4fnmaddss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public V4fnmaddss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.V4FNMADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(V4fnmaddss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(V4fnmaddss src) => AsmMnemonics.V4FNMADDSS;

            public static implicit operator AsmHexCode(V4fnmaddss src) => src.Encoded;

            public static implicit operator V4fnmaddss(AsmHexCode src) => new V4fnmaddss(src);
        }

        public V4fnmaddss v4fnmaddss() => default;

        [MethodImpl(Inline), Op]
        public V4fnmaddss v4fnmaddss(AsmHexCode encoded) => new V4fnmaddss(encoded);

        public struct Vaddpd : ITypedInstruction<Vaddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddpd src) => AsmMnemonics.VADDPD;

            public static implicit operator AsmHexCode(Vaddpd src) => src.Encoded;

            public static implicit operator Vaddpd(AsmHexCode src) => new Vaddpd(src);
        }

        public Vaddpd vaddpd() => default;

        [MethodImpl(Inline), Op]
        public Vaddpd vaddpd(AsmHexCode encoded) => new Vaddpd(encoded);

        public struct Vaddps : ITypedInstruction<Vaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddps src) => AsmMnemonics.VADDPS;

            public static implicit operator AsmHexCode(Vaddps src) => src.Encoded;

            public static implicit operator Vaddps(AsmHexCode src) => new Vaddps(src);
        }

        public Vaddps vaddps() => default;

        [MethodImpl(Inline), Op]
        public Vaddps vaddps(AsmHexCode encoded) => new Vaddps(encoded);

        public struct Vaddsd : ITypedInstruction<Vaddsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddsd src) => AsmMnemonics.VADDSD;

            public static implicit operator AsmHexCode(Vaddsd src) => src.Encoded;

            public static implicit operator Vaddsd(AsmHexCode src) => new Vaddsd(src);
        }

        public Vaddsd vaddsd() => default;

        [MethodImpl(Inline), Op]
        public Vaddsd vaddsd(AsmHexCode encoded) => new Vaddsd(encoded);

        public struct Vaddss : ITypedInstruction<Vaddss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddss src) => AsmMnemonics.VADDSS;

            public static implicit operator AsmHexCode(Vaddss src) => src.Encoded;

            public static implicit operator Vaddss(AsmHexCode src) => new Vaddss(src);
        }

        public Vaddss vaddss() => default;

        [MethodImpl(Inline), Op]
        public Vaddss vaddss(AsmHexCode encoded) => new Vaddss(encoded);

        public struct Vaddsubpd : ITypedInstruction<Vaddsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddsubpd src) => AsmMnemonics.VADDSUBPD;

            public static implicit operator AsmHexCode(Vaddsubpd src) => src.Encoded;

            public static implicit operator Vaddsubpd(AsmHexCode src) => new Vaddsubpd(src);
        }

        public Vaddsubpd vaddsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vaddsubpd vaddsubpd(AsmHexCode encoded) => new Vaddsubpd(encoded);

        public struct Vaddsubps : ITypedInstruction<Vaddsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaddsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VADDSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaddsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaddsubps src) => AsmMnemonics.VADDSUBPS;

            public static implicit operator AsmHexCode(Vaddsubps src) => src.Encoded;

            public static implicit operator Vaddsubps(AsmHexCode src) => new Vaddsubps(src);
        }

        public Vaddsubps vaddsubps() => default;

        [MethodImpl(Inline), Op]
        public Vaddsubps vaddsubps(AsmHexCode encoded) => new Vaddsubps(encoded);

        public struct Vaesdec : ITypedInstruction<Vaesdec>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaesdec(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESDEC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaesdec src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaesdec src) => AsmMnemonics.VAESDEC;

            public static implicit operator AsmHexCode(Vaesdec src) => src.Encoded;

            public static implicit operator Vaesdec(AsmHexCode src) => new Vaesdec(src);
        }

        public Vaesdec vaesdec() => default;

        [MethodImpl(Inline), Op]
        public Vaesdec vaesdec(AsmHexCode encoded) => new Vaesdec(encoded);

        public struct Vaesdeclast : ITypedInstruction<Vaesdeclast>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaesdeclast(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESDECLAST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaesdeclast src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaesdeclast src) => AsmMnemonics.VAESDECLAST;

            public static implicit operator AsmHexCode(Vaesdeclast src) => src.Encoded;

            public static implicit operator Vaesdeclast(AsmHexCode src) => new Vaesdeclast(src);
        }

        public Vaesdeclast vaesdeclast() => default;

        [MethodImpl(Inline), Op]
        public Vaesdeclast vaesdeclast(AsmHexCode encoded) => new Vaesdeclast(encoded);

        public struct Vaesenc : ITypedInstruction<Vaesenc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaesenc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESENC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaesenc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaesenc src) => AsmMnemonics.VAESENC;

            public static implicit operator AsmHexCode(Vaesenc src) => src.Encoded;

            public static implicit operator Vaesenc(AsmHexCode src) => new Vaesenc(src);
        }

        public Vaesenc vaesenc() => default;

        [MethodImpl(Inline), Op]
        public Vaesenc vaesenc(AsmHexCode encoded) => new Vaesenc(encoded);

        public struct Vaesenclast : ITypedInstruction<Vaesenclast>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaesenclast(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESENCLAST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaesenclast src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaesenclast src) => AsmMnemonics.VAESENCLAST;

            public static implicit operator AsmHexCode(Vaesenclast src) => src.Encoded;

            public static implicit operator Vaesenclast(AsmHexCode src) => new Vaesenclast(src);
        }

        public Vaesenclast vaesenclast() => default;

        [MethodImpl(Inline), Op]
        public Vaesenclast vaesenclast(AsmHexCode encoded) => new Vaesenclast(encoded);

        public struct Vaesimc : ITypedInstruction<Vaesimc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaesimc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESIMC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaesimc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaesimc src) => AsmMnemonics.VAESIMC;

            public static implicit operator AsmHexCode(Vaesimc src) => src.Encoded;

            public static implicit operator Vaesimc(AsmHexCode src) => new Vaesimc(src);
        }

        public Vaesimc vaesimc() => default;

        [MethodImpl(Inline), Op]
        public Vaesimc vaesimc(AsmHexCode encoded) => new Vaesimc(encoded);

        public struct Vaeskeygenassist : ITypedInstruction<Vaeskeygenassist>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vaeskeygenassist(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VAESKEYGENASSIST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vaeskeygenassist src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vaeskeygenassist src) => AsmMnemonics.VAESKEYGENASSIST;

            public static implicit operator AsmHexCode(Vaeskeygenassist src) => src.Encoded;

            public static implicit operator Vaeskeygenassist(AsmHexCode src) => new Vaeskeygenassist(src);
        }

        public Vaeskeygenassist vaeskeygenassist() => default;

        [MethodImpl(Inline), Op]
        public Vaeskeygenassist vaeskeygenassist(AsmHexCode encoded) => new Vaeskeygenassist(encoded);

        public struct Valignd : ITypedInstruction<Valignd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Valignd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VALIGND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Valignd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Valignd src) => AsmMnemonics.VALIGND;

            public static implicit operator AsmHexCode(Valignd src) => src.Encoded;

            public static implicit operator Valignd(AsmHexCode src) => new Valignd(src);
        }

        public Valignd valignd() => default;

        [MethodImpl(Inline), Op]
        public Valignd valignd(AsmHexCode encoded) => new Valignd(encoded);

        public struct Valignq : ITypedInstruction<Valignq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Valignq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VALIGNQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Valignq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Valignq src) => AsmMnemonics.VALIGNQ;

            public static implicit operator AsmHexCode(Valignq src) => src.Encoded;

            public static implicit operator Valignq(AsmHexCode src) => new Valignq(src);
        }

        public Valignq valignq() => default;

        [MethodImpl(Inline), Op]
        public Valignq valignq(AsmHexCode encoded) => new Valignq(encoded);

        public struct Vandnpd : ITypedInstruction<Vandnpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vandnpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VANDNPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vandnpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vandnpd src) => AsmMnemonics.VANDNPD;

            public static implicit operator AsmHexCode(Vandnpd src) => src.Encoded;

            public static implicit operator Vandnpd(AsmHexCode src) => new Vandnpd(src);
        }

        public Vandnpd vandnpd() => default;

        [MethodImpl(Inline), Op]
        public Vandnpd vandnpd(AsmHexCode encoded) => new Vandnpd(encoded);

        public struct Vandnps : ITypedInstruction<Vandnps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vandnps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VANDNPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vandnps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vandnps src) => AsmMnemonics.VANDNPS;

            public static implicit operator AsmHexCode(Vandnps src) => src.Encoded;

            public static implicit operator Vandnps(AsmHexCode src) => new Vandnps(src);
        }

        public Vandnps vandnps() => default;

        [MethodImpl(Inline), Op]
        public Vandnps vandnps(AsmHexCode encoded) => new Vandnps(encoded);

        public struct Vandpd : ITypedInstruction<Vandpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vandpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VANDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vandpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vandpd src) => AsmMnemonics.VANDPD;

            public static implicit operator AsmHexCode(Vandpd src) => src.Encoded;

            public static implicit operator Vandpd(AsmHexCode src) => new Vandpd(src);
        }

        public Vandpd vandpd() => default;

        [MethodImpl(Inline), Op]
        public Vandpd vandpd(AsmHexCode encoded) => new Vandpd(encoded);

        public struct Vandps : ITypedInstruction<Vandps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vandps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VANDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vandps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vandps src) => AsmMnemonics.VANDPS;

            public static implicit operator AsmHexCode(Vandps src) => src.Encoded;

            public static implicit operator Vandps(AsmHexCode src) => new Vandps(src);
        }

        public Vandps vandps() => default;

        [MethodImpl(Inline), Op]
        public Vandps vandps(AsmHexCode encoded) => new Vandps(encoded);

        public struct Vblendmpd : ITypedInstruction<Vblendmpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendmpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDMPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendmpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendmpd src) => AsmMnemonics.VBLENDMPD;

            public static implicit operator AsmHexCode(Vblendmpd src) => src.Encoded;

            public static implicit operator Vblendmpd(AsmHexCode src) => new Vblendmpd(src);
        }

        public Vblendmpd vblendmpd() => default;

        [MethodImpl(Inline), Op]
        public Vblendmpd vblendmpd(AsmHexCode encoded) => new Vblendmpd(encoded);

        public struct Vblendmps : ITypedInstruction<Vblendmps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendmps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDMPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendmps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendmps src) => AsmMnemonics.VBLENDMPS;

            public static implicit operator AsmHexCode(Vblendmps src) => src.Encoded;

            public static implicit operator Vblendmps(AsmHexCode src) => new Vblendmps(src);
        }

        public Vblendmps vblendmps() => default;

        [MethodImpl(Inline), Op]
        public Vblendmps vblendmps(AsmHexCode encoded) => new Vblendmps(encoded);

        public struct Vblendpd : ITypedInstruction<Vblendpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendpd src) => AsmMnemonics.VBLENDPD;

            public static implicit operator AsmHexCode(Vblendpd src) => src.Encoded;

            public static implicit operator Vblendpd(AsmHexCode src) => new Vblendpd(src);
        }

        public Vblendpd vblendpd() => default;

        [MethodImpl(Inline), Op]
        public Vblendpd vblendpd(AsmHexCode encoded) => new Vblendpd(encoded);

        public struct Vblendps : ITypedInstruction<Vblendps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendps src) => AsmMnemonics.VBLENDPS;

            public static implicit operator AsmHexCode(Vblendps src) => src.Encoded;

            public static implicit operator Vblendps(AsmHexCode src) => new Vblendps(src);
        }

        public Vblendps vblendps() => default;

        [MethodImpl(Inline), Op]
        public Vblendps vblendps(AsmHexCode encoded) => new Vblendps(encoded);

        public struct Vblendvpd : ITypedInstruction<Vblendvpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendvpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDVPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendvpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendvpd src) => AsmMnemonics.VBLENDVPD;

            public static implicit operator AsmHexCode(Vblendvpd src) => src.Encoded;

            public static implicit operator Vblendvpd(AsmHexCode src) => new Vblendvpd(src);
        }

        public Vblendvpd vblendvpd() => default;

        [MethodImpl(Inline), Op]
        public Vblendvpd vblendvpd(AsmHexCode encoded) => new Vblendvpd(encoded);

        public struct Vblendvps : ITypedInstruction<Vblendvps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vblendvps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBLENDVPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vblendvps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vblendvps src) => AsmMnemonics.VBLENDVPS;

            public static implicit operator AsmHexCode(Vblendvps src) => src.Encoded;

            public static implicit operator Vblendvps(AsmHexCode src) => new Vblendvps(src);
        }

        public Vblendvps vblendvps() => default;

        [MethodImpl(Inline), Op]
        public Vblendvps vblendvps(AsmHexCode encoded) => new Vblendvps(encoded);

        public struct Vbroadcastf128 : ITypedInstruction<Vbroadcastf128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf128 src) => AsmMnemonics.VBROADCASTF128;

            public static implicit operator AsmHexCode(Vbroadcastf128 src) => src.Encoded;

            public static implicit operator Vbroadcastf128(AsmHexCode src) => new Vbroadcastf128(src);
        }

        public Vbroadcastf128 vbroadcastf128() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf128 vbroadcastf128(AsmHexCode encoded) => new Vbroadcastf128(encoded);

        public struct Vbroadcastf32x2 : ITypedInstruction<Vbroadcastf32x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf32x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF32X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf32x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf32x2 src) => AsmMnemonics.VBROADCASTF32X2;

            public static implicit operator AsmHexCode(Vbroadcastf32x2 src) => src.Encoded;

            public static implicit operator Vbroadcastf32x2(AsmHexCode src) => new Vbroadcastf32x2(src);
        }

        public Vbroadcastf32x2 vbroadcastf32x2() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf32x2 vbroadcastf32x2(AsmHexCode encoded) => new Vbroadcastf32x2(encoded);

        public struct Vbroadcastf32x4 : ITypedInstruction<Vbroadcastf32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf32x4 src) => AsmMnemonics.VBROADCASTF32X4;

            public static implicit operator AsmHexCode(Vbroadcastf32x4 src) => src.Encoded;

            public static implicit operator Vbroadcastf32x4(AsmHexCode src) => new Vbroadcastf32x4(src);
        }

        public Vbroadcastf32x4 vbroadcastf32x4() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf32x4 vbroadcastf32x4(AsmHexCode encoded) => new Vbroadcastf32x4(encoded);

        public struct Vbroadcastf32x8 : ITypedInstruction<Vbroadcastf32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf32x8 src) => AsmMnemonics.VBROADCASTF32X8;

            public static implicit operator AsmHexCode(Vbroadcastf32x8 src) => src.Encoded;

            public static implicit operator Vbroadcastf32x8(AsmHexCode src) => new Vbroadcastf32x8(src);
        }

        public Vbroadcastf32x8 vbroadcastf32x8() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf32x8 vbroadcastf32x8(AsmHexCode encoded) => new Vbroadcastf32x8(encoded);

        public struct Vbroadcastf64x2 : ITypedInstruction<Vbroadcastf64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf64x2 src) => AsmMnemonics.VBROADCASTF64X2;

            public static implicit operator AsmHexCode(Vbroadcastf64x2 src) => src.Encoded;

            public static implicit operator Vbroadcastf64x2(AsmHexCode src) => new Vbroadcastf64x2(src);
        }

        public Vbroadcastf64x2 vbroadcastf64x2() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf64x2 vbroadcastf64x2(AsmHexCode encoded) => new Vbroadcastf64x2(encoded);

        public struct Vbroadcastf64x4 : ITypedInstruction<Vbroadcastf64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastf64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTF64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastf64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastf64x4 src) => AsmMnemonics.VBROADCASTF64X4;

            public static implicit operator AsmHexCode(Vbroadcastf64x4 src) => src.Encoded;

            public static implicit operator Vbroadcastf64x4(AsmHexCode src) => new Vbroadcastf64x4(src);
        }

        public Vbroadcastf64x4 vbroadcastf64x4() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastf64x4 vbroadcastf64x4(AsmHexCode encoded) => new Vbroadcastf64x4(encoded);

        public struct Vbroadcasti128 : ITypedInstruction<Vbroadcasti128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti128 src) => AsmMnemonics.VBROADCASTI128;

            public static implicit operator AsmHexCode(Vbroadcasti128 src) => src.Encoded;

            public static implicit operator Vbroadcasti128(AsmHexCode src) => new Vbroadcasti128(src);
        }

        public Vbroadcasti128 vbroadcasti128() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti128 vbroadcasti128(AsmHexCode encoded) => new Vbroadcasti128(encoded);

        public struct Vbroadcasti32x2 : ITypedInstruction<Vbroadcasti32x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti32x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI32X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti32x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti32x2 src) => AsmMnemonics.VBROADCASTI32X2;

            public static implicit operator AsmHexCode(Vbroadcasti32x2 src) => src.Encoded;

            public static implicit operator Vbroadcasti32x2(AsmHexCode src) => new Vbroadcasti32x2(src);
        }

        public Vbroadcasti32x2 vbroadcasti32x2() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti32x2 vbroadcasti32x2(AsmHexCode encoded) => new Vbroadcasti32x2(encoded);

        public struct Vbroadcasti32x4 : ITypedInstruction<Vbroadcasti32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti32x4 src) => AsmMnemonics.VBROADCASTI32X4;

            public static implicit operator AsmHexCode(Vbroadcasti32x4 src) => src.Encoded;

            public static implicit operator Vbroadcasti32x4(AsmHexCode src) => new Vbroadcasti32x4(src);
        }

        public Vbroadcasti32x4 vbroadcasti32x4() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti32x4 vbroadcasti32x4(AsmHexCode encoded) => new Vbroadcasti32x4(encoded);

        public struct Vbroadcasti32x8 : ITypedInstruction<Vbroadcasti32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti32x8 src) => AsmMnemonics.VBROADCASTI32X8;

            public static implicit operator AsmHexCode(Vbroadcasti32x8 src) => src.Encoded;

            public static implicit operator Vbroadcasti32x8(AsmHexCode src) => new Vbroadcasti32x8(src);
        }

        public Vbroadcasti32x8 vbroadcasti32x8() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti32x8 vbroadcasti32x8(AsmHexCode encoded) => new Vbroadcasti32x8(encoded);

        public struct Vbroadcasti64x2 : ITypedInstruction<Vbroadcasti64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti64x2 src) => AsmMnemonics.VBROADCASTI64X2;

            public static implicit operator AsmHexCode(Vbroadcasti64x2 src) => src.Encoded;

            public static implicit operator Vbroadcasti64x2(AsmHexCode src) => new Vbroadcasti64x2(src);
        }

        public Vbroadcasti64x2 vbroadcasti64x2() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti64x2 vbroadcasti64x2(AsmHexCode encoded) => new Vbroadcasti64x2(encoded);

        public struct Vbroadcasti64x4 : ITypedInstruction<Vbroadcasti64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcasti64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTI64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcasti64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcasti64x4 src) => AsmMnemonics.VBROADCASTI64X4;

            public static implicit operator AsmHexCode(Vbroadcasti64x4 src) => src.Encoded;

            public static implicit operator Vbroadcasti64x4(AsmHexCode src) => new Vbroadcasti64x4(src);
        }

        public Vbroadcasti64x4 vbroadcasti64x4() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcasti64x4 vbroadcasti64x4(AsmHexCode encoded) => new Vbroadcasti64x4(encoded);

        public struct Vbroadcastsd : ITypedInstruction<Vbroadcastsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastsd src) => AsmMnemonics.VBROADCASTSD;

            public static implicit operator AsmHexCode(Vbroadcastsd src) => src.Encoded;

            public static implicit operator Vbroadcastsd(AsmHexCode src) => new Vbroadcastsd(src);
        }

        public Vbroadcastsd vbroadcastsd() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastsd vbroadcastsd(AsmHexCode encoded) => new Vbroadcastsd(encoded);

        public struct Vbroadcastss : ITypedInstruction<Vbroadcastss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vbroadcastss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VBROADCASTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vbroadcastss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vbroadcastss src) => AsmMnemonics.VBROADCASTSS;

            public static implicit operator AsmHexCode(Vbroadcastss src) => src.Encoded;

            public static implicit operator Vbroadcastss(AsmHexCode src) => new Vbroadcastss(src);
        }

        public Vbroadcastss vbroadcastss() => default;

        [MethodImpl(Inline), Op]
        public Vbroadcastss vbroadcastss(AsmHexCode encoded) => new Vbroadcastss(encoded);

        public struct Vcmppd : ITypedInstruction<Vcmppd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcmppd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCMPPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcmppd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcmppd src) => AsmMnemonics.VCMPPD;

            public static implicit operator AsmHexCode(Vcmppd src) => src.Encoded;

            public static implicit operator Vcmppd(AsmHexCode src) => new Vcmppd(src);
        }

        public Vcmppd vcmppd() => default;

        [MethodImpl(Inline), Op]
        public Vcmppd vcmppd(AsmHexCode encoded) => new Vcmppd(encoded);

        public struct Vcmpps : ITypedInstruction<Vcmpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcmpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCMPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcmpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcmpps src) => AsmMnemonics.VCMPPS;

            public static implicit operator AsmHexCode(Vcmpps src) => src.Encoded;

            public static implicit operator Vcmpps(AsmHexCode src) => new Vcmpps(src);
        }

        public Vcmpps vcmpps() => default;

        [MethodImpl(Inline), Op]
        public Vcmpps vcmpps(AsmHexCode encoded) => new Vcmpps(encoded);

        public struct Vcmpsd : ITypedInstruction<Vcmpsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcmpsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCMPSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcmpsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcmpsd src) => AsmMnemonics.VCMPSD;

            public static implicit operator AsmHexCode(Vcmpsd src) => src.Encoded;

            public static implicit operator Vcmpsd(AsmHexCode src) => new Vcmpsd(src);
        }

        public Vcmpsd vcmpsd() => default;

        [MethodImpl(Inline), Op]
        public Vcmpsd vcmpsd(AsmHexCode encoded) => new Vcmpsd(encoded);

        public struct Vcmpss : ITypedInstruction<Vcmpss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcmpss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCMPSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcmpss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcmpss src) => AsmMnemonics.VCMPSS;

            public static implicit operator AsmHexCode(Vcmpss src) => src.Encoded;

            public static implicit operator Vcmpss(AsmHexCode src) => new Vcmpss(src);
        }

        public Vcmpss vcmpss() => default;

        [MethodImpl(Inline), Op]
        public Vcmpss vcmpss(AsmHexCode encoded) => new Vcmpss(encoded);

        public struct Vcomisd : ITypedInstruction<Vcomisd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcomisd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCOMISD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcomisd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcomisd src) => AsmMnemonics.VCOMISD;

            public static implicit operator AsmHexCode(Vcomisd src) => src.Encoded;

            public static implicit operator Vcomisd(AsmHexCode src) => new Vcomisd(src);
        }

        public Vcomisd vcomisd() => default;

        [MethodImpl(Inline), Op]
        public Vcomisd vcomisd(AsmHexCode encoded) => new Vcomisd(encoded);

        public struct Vcomiss : ITypedInstruction<Vcomiss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcomiss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCOMISS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcomiss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcomiss src) => AsmMnemonics.VCOMISS;

            public static implicit operator AsmHexCode(Vcomiss src) => src.Encoded;

            public static implicit operator Vcomiss(AsmHexCode src) => new Vcomiss(src);
        }

        public Vcomiss vcomiss() => default;

        [MethodImpl(Inline), Op]
        public Vcomiss vcomiss(AsmHexCode encoded) => new Vcomiss(encoded);

        public struct Vcompresspd : ITypedInstruction<Vcompresspd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcompresspd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCOMPRESSPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcompresspd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcompresspd src) => AsmMnemonics.VCOMPRESSPD;

            public static implicit operator AsmHexCode(Vcompresspd src) => src.Encoded;

            public static implicit operator Vcompresspd(AsmHexCode src) => new Vcompresspd(src);
        }

        public Vcompresspd vcompresspd() => default;

        [MethodImpl(Inline), Op]
        public Vcompresspd vcompresspd(AsmHexCode encoded) => new Vcompresspd(encoded);

        public struct Vcompressps : ITypedInstruction<Vcompressps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcompressps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCOMPRESSPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcompressps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcompressps src) => AsmMnemonics.VCOMPRESSPS;

            public static implicit operator AsmHexCode(Vcompressps src) => src.Encoded;

            public static implicit operator Vcompressps(AsmHexCode src) => new Vcompressps(src);
        }

        public Vcompressps vcompressps() => default;

        [MethodImpl(Inline), Op]
        public Vcompressps vcompressps(AsmHexCode encoded) => new Vcompressps(encoded);

        public struct Vcvtdq2pd : ITypedInstruction<Vcvtdq2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtdq2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTDQ2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtdq2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtdq2pd src) => AsmMnemonics.VCVTDQ2PD;

            public static implicit operator AsmHexCode(Vcvtdq2pd src) => src.Encoded;

            public static implicit operator Vcvtdq2pd(AsmHexCode src) => new Vcvtdq2pd(src);
        }

        public Vcvtdq2pd vcvtdq2pd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtdq2pd vcvtdq2pd(AsmHexCode encoded) => new Vcvtdq2pd(encoded);

        public struct Vcvtdq2ps : ITypedInstruction<Vcvtdq2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtdq2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTDQ2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtdq2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtdq2ps src) => AsmMnemonics.VCVTDQ2PS;

            public static implicit operator AsmHexCode(Vcvtdq2ps src) => src.Encoded;

            public static implicit operator Vcvtdq2ps(AsmHexCode src) => new Vcvtdq2ps(src);
        }

        public Vcvtdq2ps vcvtdq2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtdq2ps vcvtdq2ps(AsmHexCode encoded) => new Vcvtdq2ps(encoded);

        public struct Vcvtne2ps2bf16 : ITypedInstruction<Vcvtne2ps2bf16>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtne2ps2bf16(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTNE2PS2BF16;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtne2ps2bf16 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtne2ps2bf16 src) => AsmMnemonics.VCVTNE2PS2BF16;

            public static implicit operator AsmHexCode(Vcvtne2ps2bf16 src) => src.Encoded;

            public static implicit operator Vcvtne2ps2bf16(AsmHexCode src) => new Vcvtne2ps2bf16(src);
        }

        public Vcvtne2ps2bf16 vcvtne2ps2bf16() => default;

        [MethodImpl(Inline), Op]
        public Vcvtne2ps2bf16 vcvtne2ps2bf16(AsmHexCode encoded) => new Vcvtne2ps2bf16(encoded);

        public struct Vcvtneps2bf16 : ITypedInstruction<Vcvtneps2bf16>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtneps2bf16(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTNEPS2BF16;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtneps2bf16 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtneps2bf16 src) => AsmMnemonics.VCVTNEPS2BF16;

            public static implicit operator AsmHexCode(Vcvtneps2bf16 src) => src.Encoded;

            public static implicit operator Vcvtneps2bf16(AsmHexCode src) => new Vcvtneps2bf16(src);
        }

        public Vcvtneps2bf16 vcvtneps2bf16() => default;

        [MethodImpl(Inline), Op]
        public Vcvtneps2bf16 vcvtneps2bf16(AsmHexCode encoded) => new Vcvtneps2bf16(encoded);

        public struct Vcvtpd2dq : ITypedInstruction<Vcvtpd2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtpd2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPD2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtpd2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtpd2dq src) => AsmMnemonics.VCVTPD2DQ;

            public static implicit operator AsmHexCode(Vcvtpd2dq src) => src.Encoded;

            public static implicit operator Vcvtpd2dq(AsmHexCode src) => new Vcvtpd2dq(src);
        }

        public Vcvtpd2dq vcvtpd2dq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtpd2dq vcvtpd2dq(AsmHexCode encoded) => new Vcvtpd2dq(encoded);

        public struct Vcvtpd2ps : ITypedInstruction<Vcvtpd2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtpd2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPD2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtpd2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtpd2ps src) => AsmMnemonics.VCVTPD2PS;

            public static implicit operator AsmHexCode(Vcvtpd2ps src) => src.Encoded;

            public static implicit operator Vcvtpd2ps(AsmHexCode src) => new Vcvtpd2ps(src);
        }

        public Vcvtpd2ps vcvtpd2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtpd2ps vcvtpd2ps(AsmHexCode encoded) => new Vcvtpd2ps(encoded);

        public struct Vcvtpd2qq : ITypedInstruction<Vcvtpd2qq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtpd2qq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPD2QQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtpd2qq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtpd2qq src) => AsmMnemonics.VCVTPD2QQ;

            public static implicit operator AsmHexCode(Vcvtpd2qq src) => src.Encoded;

            public static implicit operator Vcvtpd2qq(AsmHexCode src) => new Vcvtpd2qq(src);
        }

        public Vcvtpd2qq vcvtpd2qq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtpd2qq vcvtpd2qq(AsmHexCode encoded) => new Vcvtpd2qq(encoded);

        public struct Vcvtpd2udq : ITypedInstruction<Vcvtpd2udq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtpd2udq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPD2UDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtpd2udq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtpd2udq src) => AsmMnemonics.VCVTPD2UDQ;

            public static implicit operator AsmHexCode(Vcvtpd2udq src) => src.Encoded;

            public static implicit operator Vcvtpd2udq(AsmHexCode src) => new Vcvtpd2udq(src);
        }

        public Vcvtpd2udq vcvtpd2udq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtpd2udq vcvtpd2udq(AsmHexCode encoded) => new Vcvtpd2udq(encoded);

        public struct Vcvtpd2uqq : ITypedInstruction<Vcvtpd2uqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtpd2uqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPD2UQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtpd2uqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtpd2uqq src) => AsmMnemonics.VCVTPD2UQQ;

            public static implicit operator AsmHexCode(Vcvtpd2uqq src) => src.Encoded;

            public static implicit operator Vcvtpd2uqq(AsmHexCode src) => new Vcvtpd2uqq(src);
        }

        public Vcvtpd2uqq vcvtpd2uqq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtpd2uqq vcvtpd2uqq(AsmHexCode encoded) => new Vcvtpd2uqq(encoded);

        public struct Vcvtph2ps : ITypedInstruction<Vcvtph2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtph2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPH2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtph2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtph2ps src) => AsmMnemonics.VCVTPH2PS;

            public static implicit operator AsmHexCode(Vcvtph2ps src) => src.Encoded;

            public static implicit operator Vcvtph2ps(AsmHexCode src) => new Vcvtph2ps(src);
        }

        public Vcvtph2ps vcvtph2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtph2ps vcvtph2ps(AsmHexCode encoded) => new Vcvtph2ps(encoded);

        public struct Vcvtps2dq : ITypedInstruction<Vcvtps2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2dq src) => AsmMnemonics.VCVTPS2DQ;

            public static implicit operator AsmHexCode(Vcvtps2dq src) => src.Encoded;

            public static implicit operator Vcvtps2dq(AsmHexCode src) => new Vcvtps2dq(src);
        }

        public Vcvtps2dq vcvtps2dq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2dq vcvtps2dq(AsmHexCode encoded) => new Vcvtps2dq(encoded);

        public struct Vcvtps2pd : ITypedInstruction<Vcvtps2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2pd src) => AsmMnemonics.VCVTPS2PD;

            public static implicit operator AsmHexCode(Vcvtps2pd src) => src.Encoded;

            public static implicit operator Vcvtps2pd(AsmHexCode src) => new Vcvtps2pd(src);
        }

        public Vcvtps2pd vcvtps2pd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2pd vcvtps2pd(AsmHexCode encoded) => new Vcvtps2pd(encoded);

        public struct Vcvtps2ph : ITypedInstruction<Vcvtps2ph>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2ph(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2PH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2ph src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2ph src) => AsmMnemonics.VCVTPS2PH;

            public static implicit operator AsmHexCode(Vcvtps2ph src) => src.Encoded;

            public static implicit operator Vcvtps2ph(AsmHexCode src) => new Vcvtps2ph(src);
        }

        public Vcvtps2ph vcvtps2ph() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2ph vcvtps2ph(AsmHexCode encoded) => new Vcvtps2ph(encoded);

        public struct Vcvtps2qq : ITypedInstruction<Vcvtps2qq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2qq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2QQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2qq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2qq src) => AsmMnemonics.VCVTPS2QQ;

            public static implicit operator AsmHexCode(Vcvtps2qq src) => src.Encoded;

            public static implicit operator Vcvtps2qq(AsmHexCode src) => new Vcvtps2qq(src);
        }

        public Vcvtps2qq vcvtps2qq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2qq vcvtps2qq(AsmHexCode encoded) => new Vcvtps2qq(encoded);

        public struct Vcvtps2udq : ITypedInstruction<Vcvtps2udq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2udq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2UDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2udq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2udq src) => AsmMnemonics.VCVTPS2UDQ;

            public static implicit operator AsmHexCode(Vcvtps2udq src) => src.Encoded;

            public static implicit operator Vcvtps2udq(AsmHexCode src) => new Vcvtps2udq(src);
        }

        public Vcvtps2udq vcvtps2udq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2udq vcvtps2udq(AsmHexCode encoded) => new Vcvtps2udq(encoded);

        public struct Vcvtps2uqq : ITypedInstruction<Vcvtps2uqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtps2uqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTPS2UQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtps2uqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtps2uqq src) => AsmMnemonics.VCVTPS2UQQ;

            public static implicit operator AsmHexCode(Vcvtps2uqq src) => src.Encoded;

            public static implicit operator Vcvtps2uqq(AsmHexCode src) => new Vcvtps2uqq(src);
        }

        public Vcvtps2uqq vcvtps2uqq() => default;

        [MethodImpl(Inline), Op]
        public Vcvtps2uqq vcvtps2uqq(AsmHexCode encoded) => new Vcvtps2uqq(encoded);

        public struct Vcvtqq2pd : ITypedInstruction<Vcvtqq2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtqq2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTQQ2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtqq2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtqq2pd src) => AsmMnemonics.VCVTQQ2PD;

            public static implicit operator AsmHexCode(Vcvtqq2pd src) => src.Encoded;

            public static implicit operator Vcvtqq2pd(AsmHexCode src) => new Vcvtqq2pd(src);
        }

        public Vcvtqq2pd vcvtqq2pd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtqq2pd vcvtqq2pd(AsmHexCode encoded) => new Vcvtqq2pd(encoded);

        public struct Vcvtqq2ps : ITypedInstruction<Vcvtqq2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtqq2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTQQ2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtqq2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtqq2ps src) => AsmMnemonics.VCVTQQ2PS;

            public static implicit operator AsmHexCode(Vcvtqq2ps src) => src.Encoded;

            public static implicit operator Vcvtqq2ps(AsmHexCode src) => new Vcvtqq2ps(src);
        }

        public Vcvtqq2ps vcvtqq2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtqq2ps vcvtqq2ps(AsmHexCode encoded) => new Vcvtqq2ps(encoded);

        public struct Vcvtsd2si : ITypedInstruction<Vcvtsd2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtsd2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSD2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtsd2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtsd2si src) => AsmMnemonics.VCVTSD2SI;

            public static implicit operator AsmHexCode(Vcvtsd2si src) => src.Encoded;

            public static implicit operator Vcvtsd2si(AsmHexCode src) => new Vcvtsd2si(src);
        }

        public Vcvtsd2si vcvtsd2si() => default;

        [MethodImpl(Inline), Op]
        public Vcvtsd2si vcvtsd2si(AsmHexCode encoded) => new Vcvtsd2si(encoded);

        public struct Vcvtsd2ss : ITypedInstruction<Vcvtsd2ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtsd2ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSD2SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtsd2ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtsd2ss src) => AsmMnemonics.VCVTSD2SS;

            public static implicit operator AsmHexCode(Vcvtsd2ss src) => src.Encoded;

            public static implicit operator Vcvtsd2ss(AsmHexCode src) => new Vcvtsd2ss(src);
        }

        public Vcvtsd2ss vcvtsd2ss() => default;

        [MethodImpl(Inline), Op]
        public Vcvtsd2ss vcvtsd2ss(AsmHexCode encoded) => new Vcvtsd2ss(encoded);

        public struct Vcvtsd2usi : ITypedInstruction<Vcvtsd2usi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtsd2usi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSD2USI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtsd2usi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtsd2usi src) => AsmMnemonics.VCVTSD2USI;

            public static implicit operator AsmHexCode(Vcvtsd2usi src) => src.Encoded;

            public static implicit operator Vcvtsd2usi(AsmHexCode src) => new Vcvtsd2usi(src);
        }

        public Vcvtsd2usi vcvtsd2usi() => default;

        [MethodImpl(Inline), Op]
        public Vcvtsd2usi vcvtsd2usi(AsmHexCode encoded) => new Vcvtsd2usi(encoded);

        public struct Vcvtsi2sd : ITypedInstruction<Vcvtsi2sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtsi2sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSI2SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtsi2sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtsi2sd src) => AsmMnemonics.VCVTSI2SD;

            public static implicit operator AsmHexCode(Vcvtsi2sd src) => src.Encoded;

            public static implicit operator Vcvtsi2sd(AsmHexCode src) => new Vcvtsi2sd(src);
        }

        public Vcvtsi2sd vcvtsi2sd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtsi2sd vcvtsi2sd(AsmHexCode encoded) => new Vcvtsi2sd(encoded);

        public struct Vcvtsi2ss : ITypedInstruction<Vcvtsi2ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtsi2ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSI2SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtsi2ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtsi2ss src) => AsmMnemonics.VCVTSI2SS;

            public static implicit operator AsmHexCode(Vcvtsi2ss src) => src.Encoded;

            public static implicit operator Vcvtsi2ss(AsmHexCode src) => new Vcvtsi2ss(src);
        }

        public Vcvtsi2ss vcvtsi2ss() => default;

        [MethodImpl(Inline), Op]
        public Vcvtsi2ss vcvtsi2ss(AsmHexCode encoded) => new Vcvtsi2ss(encoded);

        public struct Vcvtss2sd : ITypedInstruction<Vcvtss2sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtss2sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSS2SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtss2sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtss2sd src) => AsmMnemonics.VCVTSS2SD;

            public static implicit operator AsmHexCode(Vcvtss2sd src) => src.Encoded;

            public static implicit operator Vcvtss2sd(AsmHexCode src) => new Vcvtss2sd(src);
        }

        public Vcvtss2sd vcvtss2sd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtss2sd vcvtss2sd(AsmHexCode encoded) => new Vcvtss2sd(encoded);

        public struct Vcvtss2si : ITypedInstruction<Vcvtss2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtss2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSS2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtss2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtss2si src) => AsmMnemonics.VCVTSS2SI;

            public static implicit operator AsmHexCode(Vcvtss2si src) => src.Encoded;

            public static implicit operator Vcvtss2si(AsmHexCode src) => new Vcvtss2si(src);
        }

        public Vcvtss2si vcvtss2si() => default;

        [MethodImpl(Inline), Op]
        public Vcvtss2si vcvtss2si(AsmHexCode encoded) => new Vcvtss2si(encoded);

        public struct Vcvtss2usi : ITypedInstruction<Vcvtss2usi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtss2usi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTSS2USI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtss2usi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtss2usi src) => AsmMnemonics.VCVTSS2USI;

            public static implicit operator AsmHexCode(Vcvtss2usi src) => src.Encoded;

            public static implicit operator Vcvtss2usi(AsmHexCode src) => new Vcvtss2usi(src);
        }

        public Vcvtss2usi vcvtss2usi() => default;

        [MethodImpl(Inline), Op]
        public Vcvtss2usi vcvtss2usi(AsmHexCode encoded) => new Vcvtss2usi(encoded);

        public struct Vcvttpd2dq : ITypedInstruction<Vcvttpd2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttpd2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPD2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttpd2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttpd2dq src) => AsmMnemonics.VCVTTPD2DQ;

            public static implicit operator AsmHexCode(Vcvttpd2dq src) => src.Encoded;

            public static implicit operator Vcvttpd2dq(AsmHexCode src) => new Vcvttpd2dq(src);
        }

        public Vcvttpd2dq vcvttpd2dq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttpd2dq vcvttpd2dq(AsmHexCode encoded) => new Vcvttpd2dq(encoded);

        public struct Vcvttpd2qq : ITypedInstruction<Vcvttpd2qq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttpd2qq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPD2QQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttpd2qq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttpd2qq src) => AsmMnemonics.VCVTTPD2QQ;

            public static implicit operator AsmHexCode(Vcvttpd2qq src) => src.Encoded;

            public static implicit operator Vcvttpd2qq(AsmHexCode src) => new Vcvttpd2qq(src);
        }

        public Vcvttpd2qq vcvttpd2qq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttpd2qq vcvttpd2qq(AsmHexCode encoded) => new Vcvttpd2qq(encoded);

        public struct Vcvttpd2udq : ITypedInstruction<Vcvttpd2udq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttpd2udq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPD2UDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttpd2udq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttpd2udq src) => AsmMnemonics.VCVTTPD2UDQ;

            public static implicit operator AsmHexCode(Vcvttpd2udq src) => src.Encoded;

            public static implicit operator Vcvttpd2udq(AsmHexCode src) => new Vcvttpd2udq(src);
        }

        public Vcvttpd2udq vcvttpd2udq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttpd2udq vcvttpd2udq(AsmHexCode encoded) => new Vcvttpd2udq(encoded);

        public struct Vcvttpd2uqq : ITypedInstruction<Vcvttpd2uqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttpd2uqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPD2UQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttpd2uqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttpd2uqq src) => AsmMnemonics.VCVTTPD2UQQ;

            public static implicit operator AsmHexCode(Vcvttpd2uqq src) => src.Encoded;

            public static implicit operator Vcvttpd2uqq(AsmHexCode src) => new Vcvttpd2uqq(src);
        }

        public Vcvttpd2uqq vcvttpd2uqq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttpd2uqq vcvttpd2uqq(AsmHexCode encoded) => new Vcvttpd2uqq(encoded);

        public struct Vcvttps2dq : ITypedInstruction<Vcvttps2dq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttps2dq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPS2DQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttps2dq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttps2dq src) => AsmMnemonics.VCVTTPS2DQ;

            public static implicit operator AsmHexCode(Vcvttps2dq src) => src.Encoded;

            public static implicit operator Vcvttps2dq(AsmHexCode src) => new Vcvttps2dq(src);
        }

        public Vcvttps2dq vcvttps2dq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttps2dq vcvttps2dq(AsmHexCode encoded) => new Vcvttps2dq(encoded);

        public struct Vcvttps2qq : ITypedInstruction<Vcvttps2qq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttps2qq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPS2QQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttps2qq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttps2qq src) => AsmMnemonics.VCVTTPS2QQ;

            public static implicit operator AsmHexCode(Vcvttps2qq src) => src.Encoded;

            public static implicit operator Vcvttps2qq(AsmHexCode src) => new Vcvttps2qq(src);
        }

        public Vcvttps2qq vcvttps2qq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttps2qq vcvttps2qq(AsmHexCode encoded) => new Vcvttps2qq(encoded);

        public struct Vcvttps2udq : ITypedInstruction<Vcvttps2udq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttps2udq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPS2UDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttps2udq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttps2udq src) => AsmMnemonics.VCVTTPS2UDQ;

            public static implicit operator AsmHexCode(Vcvttps2udq src) => src.Encoded;

            public static implicit operator Vcvttps2udq(AsmHexCode src) => new Vcvttps2udq(src);
        }

        public Vcvttps2udq vcvttps2udq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttps2udq vcvttps2udq(AsmHexCode encoded) => new Vcvttps2udq(encoded);

        public struct Vcvttps2uqq : ITypedInstruction<Vcvttps2uqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttps2uqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTPS2UQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttps2uqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttps2uqq src) => AsmMnemonics.VCVTTPS2UQQ;

            public static implicit operator AsmHexCode(Vcvttps2uqq src) => src.Encoded;

            public static implicit operator Vcvttps2uqq(AsmHexCode src) => new Vcvttps2uqq(src);
        }

        public Vcvttps2uqq vcvttps2uqq() => default;

        [MethodImpl(Inline), Op]
        public Vcvttps2uqq vcvttps2uqq(AsmHexCode encoded) => new Vcvttps2uqq(encoded);

        public struct Vcvttsd2si : ITypedInstruction<Vcvttsd2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttsd2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTSD2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttsd2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttsd2si src) => AsmMnemonics.VCVTTSD2SI;

            public static implicit operator AsmHexCode(Vcvttsd2si src) => src.Encoded;

            public static implicit operator Vcvttsd2si(AsmHexCode src) => new Vcvttsd2si(src);
        }

        public Vcvttsd2si vcvttsd2si() => default;

        [MethodImpl(Inline), Op]
        public Vcvttsd2si vcvttsd2si(AsmHexCode encoded) => new Vcvttsd2si(encoded);

        public struct Vcvttsd2usi : ITypedInstruction<Vcvttsd2usi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttsd2usi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTSD2USI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttsd2usi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttsd2usi src) => AsmMnemonics.VCVTTSD2USI;

            public static implicit operator AsmHexCode(Vcvttsd2usi src) => src.Encoded;

            public static implicit operator Vcvttsd2usi(AsmHexCode src) => new Vcvttsd2usi(src);
        }

        public Vcvttsd2usi vcvttsd2usi() => default;

        [MethodImpl(Inline), Op]
        public Vcvttsd2usi vcvttsd2usi(AsmHexCode encoded) => new Vcvttsd2usi(encoded);

        public struct Vcvttss2si : ITypedInstruction<Vcvttss2si>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttss2si(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTSS2SI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttss2si src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttss2si src) => AsmMnemonics.VCVTTSS2SI;

            public static implicit operator AsmHexCode(Vcvttss2si src) => src.Encoded;

            public static implicit operator Vcvttss2si(AsmHexCode src) => new Vcvttss2si(src);
        }

        public Vcvttss2si vcvttss2si() => default;

        [MethodImpl(Inline), Op]
        public Vcvttss2si vcvttss2si(AsmHexCode encoded) => new Vcvttss2si(encoded);

        public struct Vcvttss2usi : ITypedInstruction<Vcvttss2usi>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvttss2usi(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTTSS2USI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvttss2usi src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvttss2usi src) => AsmMnemonics.VCVTTSS2USI;

            public static implicit operator AsmHexCode(Vcvttss2usi src) => src.Encoded;

            public static implicit operator Vcvttss2usi(AsmHexCode src) => new Vcvttss2usi(src);
        }

        public Vcvttss2usi vcvttss2usi() => default;

        [MethodImpl(Inline), Op]
        public Vcvttss2usi vcvttss2usi(AsmHexCode encoded) => new Vcvttss2usi(encoded);

        public struct Vcvtudq2pd : ITypedInstruction<Vcvtudq2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtudq2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUDQ2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtudq2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtudq2pd src) => AsmMnemonics.VCVTUDQ2PD;

            public static implicit operator AsmHexCode(Vcvtudq2pd src) => src.Encoded;

            public static implicit operator Vcvtudq2pd(AsmHexCode src) => new Vcvtudq2pd(src);
        }

        public Vcvtudq2pd vcvtudq2pd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtudq2pd vcvtudq2pd(AsmHexCode encoded) => new Vcvtudq2pd(encoded);

        public struct Vcvtudq2ps : ITypedInstruction<Vcvtudq2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtudq2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUDQ2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtudq2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtudq2ps src) => AsmMnemonics.VCVTUDQ2PS;

            public static implicit operator AsmHexCode(Vcvtudq2ps src) => src.Encoded;

            public static implicit operator Vcvtudq2ps(AsmHexCode src) => new Vcvtudq2ps(src);
        }

        public Vcvtudq2ps vcvtudq2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtudq2ps vcvtudq2ps(AsmHexCode encoded) => new Vcvtudq2ps(encoded);

        public struct Vcvtuqq2pd : ITypedInstruction<Vcvtuqq2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtuqq2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUQQ2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtuqq2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtuqq2pd src) => AsmMnemonics.VCVTUQQ2PD;

            public static implicit operator AsmHexCode(Vcvtuqq2pd src) => src.Encoded;

            public static implicit operator Vcvtuqq2pd(AsmHexCode src) => new Vcvtuqq2pd(src);
        }

        public Vcvtuqq2pd vcvtuqq2pd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtuqq2pd vcvtuqq2pd(AsmHexCode encoded) => new Vcvtuqq2pd(encoded);

        public struct Vcvtuqq2ps : ITypedInstruction<Vcvtuqq2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtuqq2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUQQ2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtuqq2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtuqq2ps src) => AsmMnemonics.VCVTUQQ2PS;

            public static implicit operator AsmHexCode(Vcvtuqq2ps src) => src.Encoded;

            public static implicit operator Vcvtuqq2ps(AsmHexCode src) => new Vcvtuqq2ps(src);
        }

        public Vcvtuqq2ps vcvtuqq2ps() => default;

        [MethodImpl(Inline), Op]
        public Vcvtuqq2ps vcvtuqq2ps(AsmHexCode encoded) => new Vcvtuqq2ps(encoded);

        public struct Vcvtusi2sd : ITypedInstruction<Vcvtusi2sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtusi2sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUSI2SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtusi2sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtusi2sd src) => AsmMnemonics.VCVTUSI2SD;

            public static implicit operator AsmHexCode(Vcvtusi2sd src) => src.Encoded;

            public static implicit operator Vcvtusi2sd(AsmHexCode src) => new Vcvtusi2sd(src);
        }

        public Vcvtusi2sd vcvtusi2sd() => default;

        [MethodImpl(Inline), Op]
        public Vcvtusi2sd vcvtusi2sd(AsmHexCode encoded) => new Vcvtusi2sd(encoded);

        public struct Vcvtusi2ss : ITypedInstruction<Vcvtusi2ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vcvtusi2ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VCVTUSI2SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vcvtusi2ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vcvtusi2ss src) => AsmMnemonics.VCVTUSI2SS;

            public static implicit operator AsmHexCode(Vcvtusi2ss src) => src.Encoded;

            public static implicit operator Vcvtusi2ss(AsmHexCode src) => new Vcvtusi2ss(src);
        }

        public Vcvtusi2ss vcvtusi2ss() => default;

        [MethodImpl(Inline), Op]
        public Vcvtusi2ss vcvtusi2ss(AsmHexCode encoded) => new Vcvtusi2ss(encoded);

        public struct Vdbpsadbw : ITypedInstruction<Vdbpsadbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdbpsadbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDBPSADBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdbpsadbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdbpsadbw src) => AsmMnemonics.VDBPSADBW;

            public static implicit operator AsmHexCode(Vdbpsadbw src) => src.Encoded;

            public static implicit operator Vdbpsadbw(AsmHexCode src) => new Vdbpsadbw(src);
        }

        public Vdbpsadbw vdbpsadbw() => default;

        [MethodImpl(Inline), Op]
        public Vdbpsadbw vdbpsadbw(AsmHexCode encoded) => new Vdbpsadbw(encoded);

        public struct Vdivpd : ITypedInstruction<Vdivpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdivpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDIVPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdivpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdivpd src) => AsmMnemonics.VDIVPD;

            public static implicit operator AsmHexCode(Vdivpd src) => src.Encoded;

            public static implicit operator Vdivpd(AsmHexCode src) => new Vdivpd(src);
        }

        public Vdivpd vdivpd() => default;

        [MethodImpl(Inline), Op]
        public Vdivpd vdivpd(AsmHexCode encoded) => new Vdivpd(encoded);

        public struct Vdivps : ITypedInstruction<Vdivps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdivps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDIVPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdivps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdivps src) => AsmMnemonics.VDIVPS;

            public static implicit operator AsmHexCode(Vdivps src) => src.Encoded;

            public static implicit operator Vdivps(AsmHexCode src) => new Vdivps(src);
        }

        public Vdivps vdivps() => default;

        [MethodImpl(Inline), Op]
        public Vdivps vdivps(AsmHexCode encoded) => new Vdivps(encoded);

        public struct Vdivsd : ITypedInstruction<Vdivsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdivsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDIVSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdivsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdivsd src) => AsmMnemonics.VDIVSD;

            public static implicit operator AsmHexCode(Vdivsd src) => src.Encoded;

            public static implicit operator Vdivsd(AsmHexCode src) => new Vdivsd(src);
        }

        public Vdivsd vdivsd() => default;

        [MethodImpl(Inline), Op]
        public Vdivsd vdivsd(AsmHexCode encoded) => new Vdivsd(encoded);

        public struct Vdivss : ITypedInstruction<Vdivss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdivss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDIVSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdivss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdivss src) => AsmMnemonics.VDIVSS;

            public static implicit operator AsmHexCode(Vdivss src) => src.Encoded;

            public static implicit operator Vdivss(AsmHexCode src) => new Vdivss(src);
        }

        public Vdivss vdivss() => default;

        [MethodImpl(Inline), Op]
        public Vdivss vdivss(AsmHexCode encoded) => new Vdivss(encoded);

        public struct Vdpbf16ps : ITypedInstruction<Vdpbf16ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdpbf16ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDPBF16PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdpbf16ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdpbf16ps src) => AsmMnemonics.VDPBF16PS;

            public static implicit operator AsmHexCode(Vdpbf16ps src) => src.Encoded;

            public static implicit operator Vdpbf16ps(AsmHexCode src) => new Vdpbf16ps(src);
        }

        public Vdpbf16ps vdpbf16ps() => default;

        [MethodImpl(Inline), Op]
        public Vdpbf16ps vdpbf16ps(AsmHexCode encoded) => new Vdpbf16ps(encoded);

        public struct Vdppd : ITypedInstruction<Vdppd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdppd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDPPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdppd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdppd src) => AsmMnemonics.VDPPD;

            public static implicit operator AsmHexCode(Vdppd src) => src.Encoded;

            public static implicit operator Vdppd(AsmHexCode src) => new Vdppd(src);
        }

        public Vdppd vdppd() => default;

        [MethodImpl(Inline), Op]
        public Vdppd vdppd(AsmHexCode encoded) => new Vdppd(encoded);

        public struct Vdpps : ITypedInstruction<Vdpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vdpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VDPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vdpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vdpps src) => AsmMnemonics.VDPPS;

            public static implicit operator AsmHexCode(Vdpps src) => src.Encoded;

            public static implicit operator Vdpps(AsmHexCode src) => new Vdpps(src);
        }

        public Vdpps vdpps() => default;

        [MethodImpl(Inline), Op]
        public Vdpps vdpps(AsmHexCode encoded) => new Vdpps(encoded);

        public struct Verr : ITypedInstruction<Verr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Verr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VERR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Verr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Verr src) => AsmMnemonics.VERR;

            public static implicit operator AsmHexCode(Verr src) => src.Encoded;

            public static implicit operator Verr(AsmHexCode src) => new Verr(src);
        }

        public Verr verr() => default;

        [MethodImpl(Inline), Op]
        public Verr verr(AsmHexCode encoded) => new Verr(encoded);

        public struct Verw : ITypedInstruction<Verw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Verw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VERW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Verw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Verw src) => AsmMnemonics.VERW;

            public static implicit operator AsmHexCode(Verw src) => src.Encoded;

            public static implicit operator Verw(AsmHexCode src) => new Verw(src);
        }

        public Verw verw() => default;

        [MethodImpl(Inline), Op]
        public Verw verw(AsmHexCode encoded) => new Verw(encoded);

        public struct Vexp2pd : ITypedInstruction<Vexp2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vexp2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXP2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vexp2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vexp2pd src) => AsmMnemonics.VEXP2PD;

            public static implicit operator AsmHexCode(Vexp2pd src) => src.Encoded;

            public static implicit operator Vexp2pd(AsmHexCode src) => new Vexp2pd(src);
        }

        public Vexp2pd vexp2pd() => default;

        [MethodImpl(Inline), Op]
        public Vexp2pd vexp2pd(AsmHexCode encoded) => new Vexp2pd(encoded);

        public struct Vexp2ps : ITypedInstruction<Vexp2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vexp2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXP2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vexp2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vexp2ps src) => AsmMnemonics.VEXP2PS;

            public static implicit operator AsmHexCode(Vexp2ps src) => src.Encoded;

            public static implicit operator Vexp2ps(AsmHexCode src) => new Vexp2ps(src);
        }

        public Vexp2ps vexp2ps() => default;

        [MethodImpl(Inline), Op]
        public Vexp2ps vexp2ps(AsmHexCode encoded) => new Vexp2ps(encoded);

        public struct Vexpandpd : ITypedInstruction<Vexpandpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vexpandpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXPANDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vexpandpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vexpandpd src) => AsmMnemonics.VEXPANDPD;

            public static implicit operator AsmHexCode(Vexpandpd src) => src.Encoded;

            public static implicit operator Vexpandpd(AsmHexCode src) => new Vexpandpd(src);
        }

        public Vexpandpd vexpandpd() => default;

        [MethodImpl(Inline), Op]
        public Vexpandpd vexpandpd(AsmHexCode encoded) => new Vexpandpd(encoded);

        public struct Vexpandps : ITypedInstruction<Vexpandps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vexpandps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXPANDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vexpandps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vexpandps src) => AsmMnemonics.VEXPANDPS;

            public static implicit operator AsmHexCode(Vexpandps src) => src.Encoded;

            public static implicit operator Vexpandps(AsmHexCode src) => new Vexpandps(src);
        }

        public Vexpandps vexpandps() => default;

        [MethodImpl(Inline), Op]
        public Vexpandps vexpandps(AsmHexCode encoded) => new Vexpandps(encoded);

        public struct Vextractf128 : ITypedInstruction<Vextractf128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractf128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTF128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractf128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractf128 src) => AsmMnemonics.VEXTRACTF128;

            public static implicit operator AsmHexCode(Vextractf128 src) => src.Encoded;

            public static implicit operator Vextractf128(AsmHexCode src) => new Vextractf128(src);
        }

        public Vextractf128 vextractf128() => default;

        [MethodImpl(Inline), Op]
        public Vextractf128 vextractf128(AsmHexCode encoded) => new Vextractf128(encoded);

        public struct Vextractf32x4 : ITypedInstruction<Vextractf32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractf32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTF32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractf32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractf32x4 src) => AsmMnemonics.VEXTRACTF32X4;

            public static implicit operator AsmHexCode(Vextractf32x4 src) => src.Encoded;

            public static implicit operator Vextractf32x4(AsmHexCode src) => new Vextractf32x4(src);
        }

        public Vextractf32x4 vextractf32x4() => default;

        [MethodImpl(Inline), Op]
        public Vextractf32x4 vextractf32x4(AsmHexCode encoded) => new Vextractf32x4(encoded);

        public struct Vextractf32x8 : ITypedInstruction<Vextractf32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractf32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTF32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractf32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractf32x8 src) => AsmMnemonics.VEXTRACTF32X8;

            public static implicit operator AsmHexCode(Vextractf32x8 src) => src.Encoded;

            public static implicit operator Vextractf32x8(AsmHexCode src) => new Vextractf32x8(src);
        }

        public Vextractf32x8 vextractf32x8() => default;

        [MethodImpl(Inline), Op]
        public Vextractf32x8 vextractf32x8(AsmHexCode encoded) => new Vextractf32x8(encoded);

        public struct Vextractf64x2 : ITypedInstruction<Vextractf64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractf64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTF64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractf64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractf64x2 src) => AsmMnemonics.VEXTRACTF64X2;

            public static implicit operator AsmHexCode(Vextractf64x2 src) => src.Encoded;

            public static implicit operator Vextractf64x2(AsmHexCode src) => new Vextractf64x2(src);
        }

        public Vextractf64x2 vextractf64x2() => default;

        [MethodImpl(Inline), Op]
        public Vextractf64x2 vextractf64x2(AsmHexCode encoded) => new Vextractf64x2(encoded);

        public struct Vextractf64x4 : ITypedInstruction<Vextractf64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractf64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTF64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractf64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractf64x4 src) => AsmMnemonics.VEXTRACTF64X4;

            public static implicit operator AsmHexCode(Vextractf64x4 src) => src.Encoded;

            public static implicit operator Vextractf64x4(AsmHexCode src) => new Vextractf64x4(src);
        }

        public Vextractf64x4 vextractf64x4() => default;

        [MethodImpl(Inline), Op]
        public Vextractf64x4 vextractf64x4(AsmHexCode encoded) => new Vextractf64x4(encoded);

        public struct Vextracti128 : ITypedInstruction<Vextracti128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextracti128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTI128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextracti128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextracti128 src) => AsmMnemonics.VEXTRACTI128;

            public static implicit operator AsmHexCode(Vextracti128 src) => src.Encoded;

            public static implicit operator Vextracti128(AsmHexCode src) => new Vextracti128(src);
        }

        public Vextracti128 vextracti128() => default;

        [MethodImpl(Inline), Op]
        public Vextracti128 vextracti128(AsmHexCode encoded) => new Vextracti128(encoded);

        public struct Vextracti32x4 : ITypedInstruction<Vextracti32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextracti32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTI32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextracti32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextracti32x4 src) => AsmMnemonics.VEXTRACTI32X4;

            public static implicit operator AsmHexCode(Vextracti32x4 src) => src.Encoded;

            public static implicit operator Vextracti32x4(AsmHexCode src) => new Vextracti32x4(src);
        }

        public Vextracti32x4 vextracti32x4() => default;

        [MethodImpl(Inline), Op]
        public Vextracti32x4 vextracti32x4(AsmHexCode encoded) => new Vextracti32x4(encoded);

        public struct Vextracti32x8 : ITypedInstruction<Vextracti32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextracti32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTI32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextracti32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextracti32x8 src) => AsmMnemonics.VEXTRACTI32X8;

            public static implicit operator AsmHexCode(Vextracti32x8 src) => src.Encoded;

            public static implicit operator Vextracti32x8(AsmHexCode src) => new Vextracti32x8(src);
        }

        public Vextracti32x8 vextracti32x8() => default;

        [MethodImpl(Inline), Op]
        public Vextracti32x8 vextracti32x8(AsmHexCode encoded) => new Vextracti32x8(encoded);

        public struct Vextracti64x2 : ITypedInstruction<Vextracti64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextracti64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTI64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextracti64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextracti64x2 src) => AsmMnemonics.VEXTRACTI64X2;

            public static implicit operator AsmHexCode(Vextracti64x2 src) => src.Encoded;

            public static implicit operator Vextracti64x2(AsmHexCode src) => new Vextracti64x2(src);
        }

        public Vextracti64x2 vextracti64x2() => default;

        [MethodImpl(Inline), Op]
        public Vextracti64x2 vextracti64x2(AsmHexCode encoded) => new Vextracti64x2(encoded);

        public struct Vextracti64x4 : ITypedInstruction<Vextracti64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextracti64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTI64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextracti64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextracti64x4 src) => AsmMnemonics.VEXTRACTI64X4;

            public static implicit operator AsmHexCode(Vextracti64x4 src) => src.Encoded;

            public static implicit operator Vextracti64x4(AsmHexCode src) => new Vextracti64x4(src);
        }

        public Vextracti64x4 vextracti64x4() => default;

        [MethodImpl(Inline), Op]
        public Vextracti64x4 vextracti64x4(AsmHexCode encoded) => new Vextracti64x4(encoded);

        public struct Vextractps : ITypedInstruction<Vextractps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vextractps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VEXTRACTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vextractps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vextractps src) => AsmMnemonics.VEXTRACTPS;

            public static implicit operator AsmHexCode(Vextractps src) => src.Encoded;

            public static implicit operator Vextractps(AsmHexCode src) => new Vextractps(src);
        }

        public Vextractps vextractps() => default;

        [MethodImpl(Inline), Op]
        public Vextractps vextractps(AsmHexCode encoded) => new Vextractps(encoded);

        public struct Vfixupimmpd : ITypedInstruction<Vfixupimmpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfixupimmpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFIXUPIMMPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfixupimmpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfixupimmpd src) => AsmMnemonics.VFIXUPIMMPD;

            public static implicit operator AsmHexCode(Vfixupimmpd src) => src.Encoded;

            public static implicit operator Vfixupimmpd(AsmHexCode src) => new Vfixupimmpd(src);
        }

        public Vfixupimmpd vfixupimmpd() => default;

        [MethodImpl(Inline), Op]
        public Vfixupimmpd vfixupimmpd(AsmHexCode encoded) => new Vfixupimmpd(encoded);

        public struct Vfixupimmps : ITypedInstruction<Vfixupimmps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfixupimmps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFIXUPIMMPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfixupimmps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfixupimmps src) => AsmMnemonics.VFIXUPIMMPS;

            public static implicit operator AsmHexCode(Vfixupimmps src) => src.Encoded;

            public static implicit operator Vfixupimmps(AsmHexCode src) => new Vfixupimmps(src);
        }

        public Vfixupimmps vfixupimmps() => default;

        [MethodImpl(Inline), Op]
        public Vfixupimmps vfixupimmps(AsmHexCode encoded) => new Vfixupimmps(encoded);

        public struct Vfixupimmsd : ITypedInstruction<Vfixupimmsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfixupimmsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFIXUPIMMSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfixupimmsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfixupimmsd src) => AsmMnemonics.VFIXUPIMMSD;

            public static implicit operator AsmHexCode(Vfixupimmsd src) => src.Encoded;

            public static implicit operator Vfixupimmsd(AsmHexCode src) => new Vfixupimmsd(src);
        }

        public Vfixupimmsd vfixupimmsd() => default;

        [MethodImpl(Inline), Op]
        public Vfixupimmsd vfixupimmsd(AsmHexCode encoded) => new Vfixupimmsd(encoded);

        public struct Vfixupimmss : ITypedInstruction<Vfixupimmss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfixupimmss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFIXUPIMMSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfixupimmss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfixupimmss src) => AsmMnemonics.VFIXUPIMMSS;

            public static implicit operator AsmHexCode(Vfixupimmss src) => src.Encoded;

            public static implicit operator Vfixupimmss(AsmHexCode src) => new Vfixupimmss(src);
        }

        public Vfixupimmss vfixupimmss() => default;

        [MethodImpl(Inline), Op]
        public Vfixupimmss vfixupimmss(AsmHexCode encoded) => new Vfixupimmss(encoded);

        public struct Vfmadd132pd : ITypedInstruction<Vfmadd132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd132pd src) => AsmMnemonics.VFMADD132PD;

            public static implicit operator AsmHexCode(Vfmadd132pd src) => src.Encoded;

            public static implicit operator Vfmadd132pd(AsmHexCode src) => new Vfmadd132pd(src);
        }

        public Vfmadd132pd vfmadd132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd132pd vfmadd132pd(AsmHexCode encoded) => new Vfmadd132pd(encoded);

        public struct Vfmadd132ps : ITypedInstruction<Vfmadd132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd132ps src) => AsmMnemonics.VFMADD132PS;

            public static implicit operator AsmHexCode(Vfmadd132ps src) => src.Encoded;

            public static implicit operator Vfmadd132ps(AsmHexCode src) => new Vfmadd132ps(src);
        }

        public Vfmadd132ps vfmadd132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd132ps vfmadd132ps(AsmHexCode encoded) => new Vfmadd132ps(encoded);

        public struct Vfmadd132sd : ITypedInstruction<Vfmadd132sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd132sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD132SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd132sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd132sd src) => AsmMnemonics.VFMADD132SD;

            public static implicit operator AsmHexCode(Vfmadd132sd src) => src.Encoded;

            public static implicit operator Vfmadd132sd(AsmHexCode src) => new Vfmadd132sd(src);
        }

        public Vfmadd132sd vfmadd132sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd132sd vfmadd132sd(AsmHexCode encoded) => new Vfmadd132sd(encoded);

        public struct Vfmadd132ss : ITypedInstruction<Vfmadd132ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd132ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD132SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd132ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd132ss src) => AsmMnemonics.VFMADD132SS;

            public static implicit operator AsmHexCode(Vfmadd132ss src) => src.Encoded;

            public static implicit operator Vfmadd132ss(AsmHexCode src) => new Vfmadd132ss(src);
        }

        public Vfmadd132ss vfmadd132ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd132ss vfmadd132ss(AsmHexCode encoded) => new Vfmadd132ss(encoded);

        public struct Vfmadd213pd : ITypedInstruction<Vfmadd213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd213pd src) => AsmMnemonics.VFMADD213PD;

            public static implicit operator AsmHexCode(Vfmadd213pd src) => src.Encoded;

            public static implicit operator Vfmadd213pd(AsmHexCode src) => new Vfmadd213pd(src);
        }

        public Vfmadd213pd vfmadd213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd213pd vfmadd213pd(AsmHexCode encoded) => new Vfmadd213pd(encoded);

        public struct Vfmadd213ps : ITypedInstruction<Vfmadd213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd213ps src) => AsmMnemonics.VFMADD213PS;

            public static implicit operator AsmHexCode(Vfmadd213ps src) => src.Encoded;

            public static implicit operator Vfmadd213ps(AsmHexCode src) => new Vfmadd213ps(src);
        }

        public Vfmadd213ps vfmadd213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd213ps vfmadd213ps(AsmHexCode encoded) => new Vfmadd213ps(encoded);

        public struct Vfmadd213sd : ITypedInstruction<Vfmadd213sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd213sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD213SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd213sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd213sd src) => AsmMnemonics.VFMADD213SD;

            public static implicit operator AsmHexCode(Vfmadd213sd src) => src.Encoded;

            public static implicit operator Vfmadd213sd(AsmHexCode src) => new Vfmadd213sd(src);
        }

        public Vfmadd213sd vfmadd213sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd213sd vfmadd213sd(AsmHexCode encoded) => new Vfmadd213sd(encoded);

        public struct Vfmadd213ss : ITypedInstruction<Vfmadd213ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd213ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD213SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd213ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd213ss src) => AsmMnemonics.VFMADD213SS;

            public static implicit operator AsmHexCode(Vfmadd213ss src) => src.Encoded;

            public static implicit operator Vfmadd213ss(AsmHexCode src) => new Vfmadd213ss(src);
        }

        public Vfmadd213ss vfmadd213ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd213ss vfmadd213ss(AsmHexCode encoded) => new Vfmadd213ss(encoded);

        public struct Vfmadd231pd : ITypedInstruction<Vfmadd231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd231pd src) => AsmMnemonics.VFMADD231PD;

            public static implicit operator AsmHexCode(Vfmadd231pd src) => src.Encoded;

            public static implicit operator Vfmadd231pd(AsmHexCode src) => new Vfmadd231pd(src);
        }

        public Vfmadd231pd vfmadd231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd231pd vfmadd231pd(AsmHexCode encoded) => new Vfmadd231pd(encoded);

        public struct Vfmadd231ps : ITypedInstruction<Vfmadd231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd231ps src) => AsmMnemonics.VFMADD231PS;

            public static implicit operator AsmHexCode(Vfmadd231ps src) => src.Encoded;

            public static implicit operator Vfmadd231ps(AsmHexCode src) => new Vfmadd231ps(src);
        }

        public Vfmadd231ps vfmadd231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd231ps vfmadd231ps(AsmHexCode encoded) => new Vfmadd231ps(encoded);

        public struct Vfmadd231sd : ITypedInstruction<Vfmadd231sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd231sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD231SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd231sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd231sd src) => AsmMnemonics.VFMADD231SD;

            public static implicit operator AsmHexCode(Vfmadd231sd src) => src.Encoded;

            public static implicit operator Vfmadd231sd(AsmHexCode src) => new Vfmadd231sd(src);
        }

        public Vfmadd231sd vfmadd231sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd231sd vfmadd231sd(AsmHexCode encoded) => new Vfmadd231sd(encoded);

        public struct Vfmadd231ss : ITypedInstruction<Vfmadd231ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmadd231ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADD231SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmadd231ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmadd231ss src) => AsmMnemonics.VFMADD231SS;

            public static implicit operator AsmHexCode(Vfmadd231ss src) => src.Encoded;

            public static implicit operator Vfmadd231ss(AsmHexCode src) => new Vfmadd231ss(src);
        }

        public Vfmadd231ss vfmadd231ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmadd231ss vfmadd231ss(AsmHexCode encoded) => new Vfmadd231ss(encoded);

        public struct Vfmaddpd : ITypedInstruction<Vfmaddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddpd src) => AsmMnemonics.VFMADDPD;

            public static implicit operator AsmHexCode(Vfmaddpd src) => src.Encoded;

            public static implicit operator Vfmaddpd(AsmHexCode src) => new Vfmaddpd(src);
        }

        public Vfmaddpd vfmaddpd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddpd vfmaddpd(AsmHexCode encoded) => new Vfmaddpd(encoded);

        public struct Vfmaddps : ITypedInstruction<Vfmaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddps src) => AsmMnemonics.VFMADDPS;

            public static implicit operator AsmHexCode(Vfmaddps src) => src.Encoded;

            public static implicit operator Vfmaddps(AsmHexCode src) => new Vfmaddps(src);
        }

        public Vfmaddps vfmaddps() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddps vfmaddps(AsmHexCode encoded) => new Vfmaddps(encoded);

        public struct Vfmaddsd : ITypedInstruction<Vfmaddsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsd src) => AsmMnemonics.VFMADDSD;

            public static implicit operator AsmHexCode(Vfmaddsd src) => src.Encoded;

            public static implicit operator Vfmaddsd(AsmHexCode src) => new Vfmaddsd(src);
        }

        public Vfmaddsd vfmaddsd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsd vfmaddsd(AsmHexCode encoded) => new Vfmaddsd(encoded);

        public struct Vfmaddss : ITypedInstruction<Vfmaddss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddss src) => AsmMnemonics.VFMADDSS;

            public static implicit operator AsmHexCode(Vfmaddss src) => src.Encoded;

            public static implicit operator Vfmaddss(AsmHexCode src) => new Vfmaddss(src);
        }

        public Vfmaddss vfmaddss() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddss vfmaddss(AsmHexCode encoded) => new Vfmaddss(encoded);

        public struct Vfmaddsub132pd : ITypedInstruction<Vfmaddsub132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub132pd src) => AsmMnemonics.VFMADDSUB132PD;

            public static implicit operator AsmHexCode(Vfmaddsub132pd src) => src.Encoded;

            public static implicit operator Vfmaddsub132pd(AsmHexCode src) => new Vfmaddsub132pd(src);
        }

        public Vfmaddsub132pd vfmaddsub132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub132pd vfmaddsub132pd(AsmHexCode encoded) => new Vfmaddsub132pd(encoded);

        public struct Vfmaddsub132ps : ITypedInstruction<Vfmaddsub132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub132ps src) => AsmMnemonics.VFMADDSUB132PS;

            public static implicit operator AsmHexCode(Vfmaddsub132ps src) => src.Encoded;

            public static implicit operator Vfmaddsub132ps(AsmHexCode src) => new Vfmaddsub132ps(src);
        }

        public Vfmaddsub132ps vfmaddsub132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub132ps vfmaddsub132ps(AsmHexCode encoded) => new Vfmaddsub132ps(encoded);

        public struct Vfmaddsub213pd : ITypedInstruction<Vfmaddsub213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub213pd src) => AsmMnemonics.VFMADDSUB213PD;

            public static implicit operator AsmHexCode(Vfmaddsub213pd src) => src.Encoded;

            public static implicit operator Vfmaddsub213pd(AsmHexCode src) => new Vfmaddsub213pd(src);
        }

        public Vfmaddsub213pd vfmaddsub213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub213pd vfmaddsub213pd(AsmHexCode encoded) => new Vfmaddsub213pd(encoded);

        public struct Vfmaddsub213ps : ITypedInstruction<Vfmaddsub213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub213ps src) => AsmMnemonics.VFMADDSUB213PS;

            public static implicit operator AsmHexCode(Vfmaddsub213ps src) => src.Encoded;

            public static implicit operator Vfmaddsub213ps(AsmHexCode src) => new Vfmaddsub213ps(src);
        }

        public Vfmaddsub213ps vfmaddsub213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub213ps vfmaddsub213ps(AsmHexCode encoded) => new Vfmaddsub213ps(encoded);

        public struct Vfmaddsub231pd : ITypedInstruction<Vfmaddsub231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub231pd src) => AsmMnemonics.VFMADDSUB231PD;

            public static implicit operator AsmHexCode(Vfmaddsub231pd src) => src.Encoded;

            public static implicit operator Vfmaddsub231pd(AsmHexCode src) => new Vfmaddsub231pd(src);
        }

        public Vfmaddsub231pd vfmaddsub231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub231pd vfmaddsub231pd(AsmHexCode encoded) => new Vfmaddsub231pd(encoded);

        public struct Vfmaddsub231ps : ITypedInstruction<Vfmaddsub231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsub231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUB231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsub231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsub231ps src) => AsmMnemonics.VFMADDSUB231PS;

            public static implicit operator AsmHexCode(Vfmaddsub231ps src) => src.Encoded;

            public static implicit operator Vfmaddsub231ps(AsmHexCode src) => new Vfmaddsub231ps(src);
        }

        public Vfmaddsub231ps vfmaddsub231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsub231ps vfmaddsub231ps(AsmHexCode encoded) => new Vfmaddsub231ps(encoded);

        public struct Vfmaddsubpd : ITypedInstruction<Vfmaddsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsubpd src) => AsmMnemonics.VFMADDSUBPD;

            public static implicit operator AsmHexCode(Vfmaddsubpd src) => src.Encoded;

            public static implicit operator Vfmaddsubpd(AsmHexCode src) => new Vfmaddsubpd(src);
        }

        public Vfmaddsubpd vfmaddsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsubpd vfmaddsubpd(AsmHexCode encoded) => new Vfmaddsubpd(encoded);

        public struct Vfmaddsubps : ITypedInstruction<Vfmaddsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmaddsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMADDSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmaddsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmaddsubps src) => AsmMnemonics.VFMADDSUBPS;

            public static implicit operator AsmHexCode(Vfmaddsubps src) => src.Encoded;

            public static implicit operator Vfmaddsubps(AsmHexCode src) => new Vfmaddsubps(src);
        }

        public Vfmaddsubps vfmaddsubps() => default;

        [MethodImpl(Inline), Op]
        public Vfmaddsubps vfmaddsubps(AsmHexCode encoded) => new Vfmaddsubps(encoded);

        public struct Vfmsub132pd : ITypedInstruction<Vfmsub132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub132pd src) => AsmMnemonics.VFMSUB132PD;

            public static implicit operator AsmHexCode(Vfmsub132pd src) => src.Encoded;

            public static implicit operator Vfmsub132pd(AsmHexCode src) => new Vfmsub132pd(src);
        }

        public Vfmsub132pd vfmsub132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub132pd vfmsub132pd(AsmHexCode encoded) => new Vfmsub132pd(encoded);

        public struct Vfmsub132ps : ITypedInstruction<Vfmsub132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub132ps src) => AsmMnemonics.VFMSUB132PS;

            public static implicit operator AsmHexCode(Vfmsub132ps src) => src.Encoded;

            public static implicit operator Vfmsub132ps(AsmHexCode src) => new Vfmsub132ps(src);
        }

        public Vfmsub132ps vfmsub132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub132ps vfmsub132ps(AsmHexCode encoded) => new Vfmsub132ps(encoded);

        public struct Vfmsub132sd : ITypedInstruction<Vfmsub132sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub132sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB132SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub132sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub132sd src) => AsmMnemonics.VFMSUB132SD;

            public static implicit operator AsmHexCode(Vfmsub132sd src) => src.Encoded;

            public static implicit operator Vfmsub132sd(AsmHexCode src) => new Vfmsub132sd(src);
        }

        public Vfmsub132sd vfmsub132sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub132sd vfmsub132sd(AsmHexCode encoded) => new Vfmsub132sd(encoded);

        public struct Vfmsub132ss : ITypedInstruction<Vfmsub132ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub132ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB132SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub132ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub132ss src) => AsmMnemonics.VFMSUB132SS;

            public static implicit operator AsmHexCode(Vfmsub132ss src) => src.Encoded;

            public static implicit operator Vfmsub132ss(AsmHexCode src) => new Vfmsub132ss(src);
        }

        public Vfmsub132ss vfmsub132ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub132ss vfmsub132ss(AsmHexCode encoded) => new Vfmsub132ss(encoded);

        public struct Vfmsub213pd : ITypedInstruction<Vfmsub213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub213pd src) => AsmMnemonics.VFMSUB213PD;

            public static implicit operator AsmHexCode(Vfmsub213pd src) => src.Encoded;

            public static implicit operator Vfmsub213pd(AsmHexCode src) => new Vfmsub213pd(src);
        }

        public Vfmsub213pd vfmsub213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub213pd vfmsub213pd(AsmHexCode encoded) => new Vfmsub213pd(encoded);

        public struct Vfmsub213ps : ITypedInstruction<Vfmsub213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub213ps src) => AsmMnemonics.VFMSUB213PS;

            public static implicit operator AsmHexCode(Vfmsub213ps src) => src.Encoded;

            public static implicit operator Vfmsub213ps(AsmHexCode src) => new Vfmsub213ps(src);
        }

        public Vfmsub213ps vfmsub213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub213ps vfmsub213ps(AsmHexCode encoded) => new Vfmsub213ps(encoded);

        public struct Vfmsub213sd : ITypedInstruction<Vfmsub213sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub213sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB213SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub213sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub213sd src) => AsmMnemonics.VFMSUB213SD;

            public static implicit operator AsmHexCode(Vfmsub213sd src) => src.Encoded;

            public static implicit operator Vfmsub213sd(AsmHexCode src) => new Vfmsub213sd(src);
        }

        public Vfmsub213sd vfmsub213sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub213sd vfmsub213sd(AsmHexCode encoded) => new Vfmsub213sd(encoded);

        public struct Vfmsub213ss : ITypedInstruction<Vfmsub213ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub213ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB213SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub213ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub213ss src) => AsmMnemonics.VFMSUB213SS;

            public static implicit operator AsmHexCode(Vfmsub213ss src) => src.Encoded;

            public static implicit operator Vfmsub213ss(AsmHexCode src) => new Vfmsub213ss(src);
        }

        public Vfmsub213ss vfmsub213ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub213ss vfmsub213ss(AsmHexCode encoded) => new Vfmsub213ss(encoded);

        public struct Vfmsub231pd : ITypedInstruction<Vfmsub231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub231pd src) => AsmMnemonics.VFMSUB231PD;

            public static implicit operator AsmHexCode(Vfmsub231pd src) => src.Encoded;

            public static implicit operator Vfmsub231pd(AsmHexCode src) => new Vfmsub231pd(src);
        }

        public Vfmsub231pd vfmsub231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub231pd vfmsub231pd(AsmHexCode encoded) => new Vfmsub231pd(encoded);

        public struct Vfmsub231ps : ITypedInstruction<Vfmsub231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub231ps src) => AsmMnemonics.VFMSUB231PS;

            public static implicit operator AsmHexCode(Vfmsub231ps src) => src.Encoded;

            public static implicit operator Vfmsub231ps(AsmHexCode src) => new Vfmsub231ps(src);
        }

        public Vfmsub231ps vfmsub231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub231ps vfmsub231ps(AsmHexCode encoded) => new Vfmsub231ps(encoded);

        public struct Vfmsub231sd : ITypedInstruction<Vfmsub231sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub231sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB231SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub231sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub231sd src) => AsmMnemonics.VFMSUB231SD;

            public static implicit operator AsmHexCode(Vfmsub231sd src) => src.Encoded;

            public static implicit operator Vfmsub231sd(AsmHexCode src) => new Vfmsub231sd(src);
        }

        public Vfmsub231sd vfmsub231sd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub231sd vfmsub231sd(AsmHexCode encoded) => new Vfmsub231sd(encoded);

        public struct Vfmsub231ss : ITypedInstruction<Vfmsub231ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsub231ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUB231SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsub231ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsub231ss src) => AsmMnemonics.VFMSUB231SS;

            public static implicit operator AsmHexCode(Vfmsub231ss src) => src.Encoded;

            public static implicit operator Vfmsub231ss(AsmHexCode src) => new Vfmsub231ss(src);
        }

        public Vfmsub231ss vfmsub231ss() => default;

        [MethodImpl(Inline), Op]
        public Vfmsub231ss vfmsub231ss(AsmHexCode encoded) => new Vfmsub231ss(encoded);

        public struct Vfmsubadd132pd : ITypedInstruction<Vfmsubadd132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd132pd src) => AsmMnemonics.VFMSUBADD132PD;

            public static implicit operator AsmHexCode(Vfmsubadd132pd src) => src.Encoded;

            public static implicit operator Vfmsubadd132pd(AsmHexCode src) => new Vfmsubadd132pd(src);
        }

        public Vfmsubadd132pd vfmsubadd132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd132pd vfmsubadd132pd(AsmHexCode encoded) => new Vfmsubadd132pd(encoded);

        public struct Vfmsubadd132ps : ITypedInstruction<Vfmsubadd132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd132ps src) => AsmMnemonics.VFMSUBADD132PS;

            public static implicit operator AsmHexCode(Vfmsubadd132ps src) => src.Encoded;

            public static implicit operator Vfmsubadd132ps(AsmHexCode src) => new Vfmsubadd132ps(src);
        }

        public Vfmsubadd132ps vfmsubadd132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd132ps vfmsubadd132ps(AsmHexCode encoded) => new Vfmsubadd132ps(encoded);

        public struct Vfmsubadd213pd : ITypedInstruction<Vfmsubadd213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd213pd src) => AsmMnemonics.VFMSUBADD213PD;

            public static implicit operator AsmHexCode(Vfmsubadd213pd src) => src.Encoded;

            public static implicit operator Vfmsubadd213pd(AsmHexCode src) => new Vfmsubadd213pd(src);
        }

        public Vfmsubadd213pd vfmsubadd213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd213pd vfmsubadd213pd(AsmHexCode encoded) => new Vfmsubadd213pd(encoded);

        public struct Vfmsubadd213ps : ITypedInstruction<Vfmsubadd213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd213ps src) => AsmMnemonics.VFMSUBADD213PS;

            public static implicit operator AsmHexCode(Vfmsubadd213ps src) => src.Encoded;

            public static implicit operator Vfmsubadd213ps(AsmHexCode src) => new Vfmsubadd213ps(src);
        }

        public Vfmsubadd213ps vfmsubadd213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd213ps vfmsubadd213ps(AsmHexCode encoded) => new Vfmsubadd213ps(encoded);

        public struct Vfmsubadd231pd : ITypedInstruction<Vfmsubadd231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd231pd src) => AsmMnemonics.VFMSUBADD231PD;

            public static implicit operator AsmHexCode(Vfmsubadd231pd src) => src.Encoded;

            public static implicit operator Vfmsubadd231pd(AsmHexCode src) => new Vfmsubadd231pd(src);
        }

        public Vfmsubadd231pd vfmsubadd231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd231pd vfmsubadd231pd(AsmHexCode encoded) => new Vfmsubadd231pd(encoded);

        public struct Vfmsubadd231ps : ITypedInstruction<Vfmsubadd231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubadd231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADD231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubadd231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubadd231ps src) => AsmMnemonics.VFMSUBADD231PS;

            public static implicit operator AsmHexCode(Vfmsubadd231ps src) => src.Encoded;

            public static implicit operator Vfmsubadd231ps(AsmHexCode src) => new Vfmsubadd231ps(src);
        }

        public Vfmsubadd231ps vfmsubadd231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubadd231ps vfmsubadd231ps(AsmHexCode encoded) => new Vfmsubadd231ps(encoded);

        public struct Vfmsubaddpd : ITypedInstruction<Vfmsubaddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubaddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubaddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubaddpd src) => AsmMnemonics.VFMSUBADDPD;

            public static implicit operator AsmHexCode(Vfmsubaddpd src) => src.Encoded;

            public static implicit operator Vfmsubaddpd(AsmHexCode src) => new Vfmsubaddpd(src);
        }

        public Vfmsubaddpd vfmsubaddpd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubaddpd vfmsubaddpd(AsmHexCode encoded) => new Vfmsubaddpd(encoded);

        public struct Vfmsubaddps : ITypedInstruction<Vfmsubaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubaddps src) => AsmMnemonics.VFMSUBADDPS;

            public static implicit operator AsmHexCode(Vfmsubaddps src) => src.Encoded;

            public static implicit operator Vfmsubaddps(AsmHexCode src) => new Vfmsubaddps(src);
        }

        public Vfmsubaddps vfmsubaddps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubaddps vfmsubaddps(AsmHexCode encoded) => new Vfmsubaddps(encoded);

        public struct Vfmsubpd : ITypedInstruction<Vfmsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubpd src) => AsmMnemonics.VFMSUBPD;

            public static implicit operator AsmHexCode(Vfmsubpd src) => src.Encoded;

            public static implicit operator Vfmsubpd(AsmHexCode src) => new Vfmsubpd(src);
        }

        public Vfmsubpd vfmsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubpd vfmsubpd(AsmHexCode encoded) => new Vfmsubpd(encoded);

        public struct Vfmsubps : ITypedInstruction<Vfmsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubps src) => AsmMnemonics.VFMSUBPS;

            public static implicit operator AsmHexCode(Vfmsubps src) => src.Encoded;

            public static implicit operator Vfmsubps(AsmHexCode src) => new Vfmsubps(src);
        }

        public Vfmsubps vfmsubps() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubps vfmsubps(AsmHexCode encoded) => new Vfmsubps(encoded);

        public struct Vfmsubsd : ITypedInstruction<Vfmsubsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubsd src) => AsmMnemonics.VFMSUBSD;

            public static implicit operator AsmHexCode(Vfmsubsd src) => src.Encoded;

            public static implicit operator Vfmsubsd(AsmHexCode src) => new Vfmsubsd(src);
        }

        public Vfmsubsd vfmsubsd() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubsd vfmsubsd(AsmHexCode encoded) => new Vfmsubsd(encoded);

        public struct Vfmsubss : ITypedInstruction<Vfmsubss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfmsubss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFMSUBSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfmsubss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfmsubss src) => AsmMnemonics.VFMSUBSS;

            public static implicit operator AsmHexCode(Vfmsubss src) => src.Encoded;

            public static implicit operator Vfmsubss(AsmHexCode src) => new Vfmsubss(src);
        }

        public Vfmsubss vfmsubss() => default;

        [MethodImpl(Inline), Op]
        public Vfmsubss vfmsubss(AsmHexCode encoded) => new Vfmsubss(encoded);

        public struct Vfnmadd132pd : ITypedInstruction<Vfnmadd132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd132pd src) => AsmMnemonics.VFNMADD132PD;

            public static implicit operator AsmHexCode(Vfnmadd132pd src) => src.Encoded;

            public static implicit operator Vfnmadd132pd(AsmHexCode src) => new Vfnmadd132pd(src);
        }

        public Vfnmadd132pd vfnmadd132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd132pd vfnmadd132pd(AsmHexCode encoded) => new Vfnmadd132pd(encoded);

        public struct Vfnmadd132ps : ITypedInstruction<Vfnmadd132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd132ps src) => AsmMnemonics.VFNMADD132PS;

            public static implicit operator AsmHexCode(Vfnmadd132ps src) => src.Encoded;

            public static implicit operator Vfnmadd132ps(AsmHexCode src) => new Vfnmadd132ps(src);
        }

        public Vfnmadd132ps vfnmadd132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd132ps vfnmadd132ps(AsmHexCode encoded) => new Vfnmadd132ps(encoded);

        public struct Vfnmadd132sd : ITypedInstruction<Vfnmadd132sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd132sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD132SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd132sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd132sd src) => AsmMnemonics.VFNMADD132SD;

            public static implicit operator AsmHexCode(Vfnmadd132sd src) => src.Encoded;

            public static implicit operator Vfnmadd132sd(AsmHexCode src) => new Vfnmadd132sd(src);
        }

        public Vfnmadd132sd vfnmadd132sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd132sd vfnmadd132sd(AsmHexCode encoded) => new Vfnmadd132sd(encoded);

        public struct Vfnmadd132ss : ITypedInstruction<Vfnmadd132ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd132ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD132SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd132ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd132ss src) => AsmMnemonics.VFNMADD132SS;

            public static implicit operator AsmHexCode(Vfnmadd132ss src) => src.Encoded;

            public static implicit operator Vfnmadd132ss(AsmHexCode src) => new Vfnmadd132ss(src);
        }

        public Vfnmadd132ss vfnmadd132ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd132ss vfnmadd132ss(AsmHexCode encoded) => new Vfnmadd132ss(encoded);

        public struct Vfnmadd213pd : ITypedInstruction<Vfnmadd213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd213pd src) => AsmMnemonics.VFNMADD213PD;

            public static implicit operator AsmHexCode(Vfnmadd213pd src) => src.Encoded;

            public static implicit operator Vfnmadd213pd(AsmHexCode src) => new Vfnmadd213pd(src);
        }

        public Vfnmadd213pd vfnmadd213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd213pd vfnmadd213pd(AsmHexCode encoded) => new Vfnmadd213pd(encoded);

        public struct Vfnmadd213ps : ITypedInstruction<Vfnmadd213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd213ps src) => AsmMnemonics.VFNMADD213PS;

            public static implicit operator AsmHexCode(Vfnmadd213ps src) => src.Encoded;

            public static implicit operator Vfnmadd213ps(AsmHexCode src) => new Vfnmadd213ps(src);
        }

        public Vfnmadd213ps vfnmadd213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd213ps vfnmadd213ps(AsmHexCode encoded) => new Vfnmadd213ps(encoded);

        public struct Vfnmadd213sd : ITypedInstruction<Vfnmadd213sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd213sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD213SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd213sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd213sd src) => AsmMnemonics.VFNMADD213SD;

            public static implicit operator AsmHexCode(Vfnmadd213sd src) => src.Encoded;

            public static implicit operator Vfnmadd213sd(AsmHexCode src) => new Vfnmadd213sd(src);
        }

        public Vfnmadd213sd vfnmadd213sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd213sd vfnmadd213sd(AsmHexCode encoded) => new Vfnmadd213sd(encoded);

        public struct Vfnmadd213ss : ITypedInstruction<Vfnmadd213ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd213ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD213SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd213ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd213ss src) => AsmMnemonics.VFNMADD213SS;

            public static implicit operator AsmHexCode(Vfnmadd213ss src) => src.Encoded;

            public static implicit operator Vfnmadd213ss(AsmHexCode src) => new Vfnmadd213ss(src);
        }

        public Vfnmadd213ss vfnmadd213ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd213ss vfnmadd213ss(AsmHexCode encoded) => new Vfnmadd213ss(encoded);

        public struct Vfnmadd231pd : ITypedInstruction<Vfnmadd231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd231pd src) => AsmMnemonics.VFNMADD231PD;

            public static implicit operator AsmHexCode(Vfnmadd231pd src) => src.Encoded;

            public static implicit operator Vfnmadd231pd(AsmHexCode src) => new Vfnmadd231pd(src);
        }

        public Vfnmadd231pd vfnmadd231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd231pd vfnmadd231pd(AsmHexCode encoded) => new Vfnmadd231pd(encoded);

        public struct Vfnmadd231ps : ITypedInstruction<Vfnmadd231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd231ps src) => AsmMnemonics.VFNMADD231PS;

            public static implicit operator AsmHexCode(Vfnmadd231ps src) => src.Encoded;

            public static implicit operator Vfnmadd231ps(AsmHexCode src) => new Vfnmadd231ps(src);
        }

        public Vfnmadd231ps vfnmadd231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd231ps vfnmadd231ps(AsmHexCode encoded) => new Vfnmadd231ps(encoded);

        public struct Vfnmadd231sd : ITypedInstruction<Vfnmadd231sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd231sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD231SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd231sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd231sd src) => AsmMnemonics.VFNMADD231SD;

            public static implicit operator AsmHexCode(Vfnmadd231sd src) => src.Encoded;

            public static implicit operator Vfnmadd231sd(AsmHexCode src) => new Vfnmadd231sd(src);
        }

        public Vfnmadd231sd vfnmadd231sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd231sd vfnmadd231sd(AsmHexCode encoded) => new Vfnmadd231sd(encoded);

        public struct Vfnmadd231ss : ITypedInstruction<Vfnmadd231ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmadd231ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADD231SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmadd231ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmadd231ss src) => AsmMnemonics.VFNMADD231SS;

            public static implicit operator AsmHexCode(Vfnmadd231ss src) => src.Encoded;

            public static implicit operator Vfnmadd231ss(AsmHexCode src) => new Vfnmadd231ss(src);
        }

        public Vfnmadd231ss vfnmadd231ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmadd231ss vfnmadd231ss(AsmHexCode encoded) => new Vfnmadd231ss(encoded);

        public struct Vfnmaddpd : ITypedInstruction<Vfnmaddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmaddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmaddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmaddpd src) => AsmMnemonics.VFNMADDPD;

            public static implicit operator AsmHexCode(Vfnmaddpd src) => src.Encoded;

            public static implicit operator Vfnmaddpd(AsmHexCode src) => new Vfnmaddpd(src);
        }

        public Vfnmaddpd vfnmaddpd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmaddpd vfnmaddpd(AsmHexCode encoded) => new Vfnmaddpd(encoded);

        public struct Vfnmaddps : ITypedInstruction<Vfnmaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmaddps src) => AsmMnemonics.VFNMADDPS;

            public static implicit operator AsmHexCode(Vfnmaddps src) => src.Encoded;

            public static implicit operator Vfnmaddps(AsmHexCode src) => new Vfnmaddps(src);
        }

        public Vfnmaddps vfnmaddps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmaddps vfnmaddps(AsmHexCode encoded) => new Vfnmaddps(encoded);

        public struct Vfnmaddsd : ITypedInstruction<Vfnmaddsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmaddsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmaddsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmaddsd src) => AsmMnemonics.VFNMADDSD;

            public static implicit operator AsmHexCode(Vfnmaddsd src) => src.Encoded;

            public static implicit operator Vfnmaddsd(AsmHexCode src) => new Vfnmaddsd(src);
        }

        public Vfnmaddsd vfnmaddsd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmaddsd vfnmaddsd(AsmHexCode encoded) => new Vfnmaddsd(encoded);

        public struct Vfnmaddss : ITypedInstruction<Vfnmaddss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmaddss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMADDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmaddss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmaddss src) => AsmMnemonics.VFNMADDSS;

            public static implicit operator AsmHexCode(Vfnmaddss src) => src.Encoded;

            public static implicit operator Vfnmaddss(AsmHexCode src) => new Vfnmaddss(src);
        }

        public Vfnmaddss vfnmaddss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmaddss vfnmaddss(AsmHexCode encoded) => new Vfnmaddss(encoded);

        public struct Vfnmsub132pd : ITypedInstruction<Vfnmsub132pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub132pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB132PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub132pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub132pd src) => AsmMnemonics.VFNMSUB132PD;

            public static implicit operator AsmHexCode(Vfnmsub132pd src) => src.Encoded;

            public static implicit operator Vfnmsub132pd(AsmHexCode src) => new Vfnmsub132pd(src);
        }

        public Vfnmsub132pd vfnmsub132pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub132pd vfnmsub132pd(AsmHexCode encoded) => new Vfnmsub132pd(encoded);

        public struct Vfnmsub132ps : ITypedInstruction<Vfnmsub132ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub132ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB132PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub132ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub132ps src) => AsmMnemonics.VFNMSUB132PS;

            public static implicit operator AsmHexCode(Vfnmsub132ps src) => src.Encoded;

            public static implicit operator Vfnmsub132ps(AsmHexCode src) => new Vfnmsub132ps(src);
        }

        public Vfnmsub132ps vfnmsub132ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub132ps vfnmsub132ps(AsmHexCode encoded) => new Vfnmsub132ps(encoded);

        public struct Vfnmsub132sd : ITypedInstruction<Vfnmsub132sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub132sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB132SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub132sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub132sd src) => AsmMnemonics.VFNMSUB132SD;

            public static implicit operator AsmHexCode(Vfnmsub132sd src) => src.Encoded;

            public static implicit operator Vfnmsub132sd(AsmHexCode src) => new Vfnmsub132sd(src);
        }

        public Vfnmsub132sd vfnmsub132sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub132sd vfnmsub132sd(AsmHexCode encoded) => new Vfnmsub132sd(encoded);

        public struct Vfnmsub132ss : ITypedInstruction<Vfnmsub132ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub132ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB132SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub132ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub132ss src) => AsmMnemonics.VFNMSUB132SS;

            public static implicit operator AsmHexCode(Vfnmsub132ss src) => src.Encoded;

            public static implicit operator Vfnmsub132ss(AsmHexCode src) => new Vfnmsub132ss(src);
        }

        public Vfnmsub132ss vfnmsub132ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub132ss vfnmsub132ss(AsmHexCode encoded) => new Vfnmsub132ss(encoded);

        public struct Vfnmsub213pd : ITypedInstruction<Vfnmsub213pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub213pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB213PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub213pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub213pd src) => AsmMnemonics.VFNMSUB213PD;

            public static implicit operator AsmHexCode(Vfnmsub213pd src) => src.Encoded;

            public static implicit operator Vfnmsub213pd(AsmHexCode src) => new Vfnmsub213pd(src);
        }

        public Vfnmsub213pd vfnmsub213pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub213pd vfnmsub213pd(AsmHexCode encoded) => new Vfnmsub213pd(encoded);

        public struct Vfnmsub213ps : ITypedInstruction<Vfnmsub213ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub213ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB213PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub213ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub213ps src) => AsmMnemonics.VFNMSUB213PS;

            public static implicit operator AsmHexCode(Vfnmsub213ps src) => src.Encoded;

            public static implicit operator Vfnmsub213ps(AsmHexCode src) => new Vfnmsub213ps(src);
        }

        public Vfnmsub213ps vfnmsub213ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub213ps vfnmsub213ps(AsmHexCode encoded) => new Vfnmsub213ps(encoded);

        public struct Vfnmsub213sd : ITypedInstruction<Vfnmsub213sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub213sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB213SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub213sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub213sd src) => AsmMnemonics.VFNMSUB213SD;

            public static implicit operator AsmHexCode(Vfnmsub213sd src) => src.Encoded;

            public static implicit operator Vfnmsub213sd(AsmHexCode src) => new Vfnmsub213sd(src);
        }

        public Vfnmsub213sd vfnmsub213sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub213sd vfnmsub213sd(AsmHexCode encoded) => new Vfnmsub213sd(encoded);

        public struct Vfnmsub213ss : ITypedInstruction<Vfnmsub213ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub213ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB213SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub213ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub213ss src) => AsmMnemonics.VFNMSUB213SS;

            public static implicit operator AsmHexCode(Vfnmsub213ss src) => src.Encoded;

            public static implicit operator Vfnmsub213ss(AsmHexCode src) => new Vfnmsub213ss(src);
        }

        public Vfnmsub213ss vfnmsub213ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub213ss vfnmsub213ss(AsmHexCode encoded) => new Vfnmsub213ss(encoded);

        public struct Vfnmsub231pd : ITypedInstruction<Vfnmsub231pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub231pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB231PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub231pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub231pd src) => AsmMnemonics.VFNMSUB231PD;

            public static implicit operator AsmHexCode(Vfnmsub231pd src) => src.Encoded;

            public static implicit operator Vfnmsub231pd(AsmHexCode src) => new Vfnmsub231pd(src);
        }

        public Vfnmsub231pd vfnmsub231pd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub231pd vfnmsub231pd(AsmHexCode encoded) => new Vfnmsub231pd(encoded);

        public struct Vfnmsub231ps : ITypedInstruction<Vfnmsub231ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub231ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB231PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub231ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub231ps src) => AsmMnemonics.VFNMSUB231PS;

            public static implicit operator AsmHexCode(Vfnmsub231ps src) => src.Encoded;

            public static implicit operator Vfnmsub231ps(AsmHexCode src) => new Vfnmsub231ps(src);
        }

        public Vfnmsub231ps vfnmsub231ps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub231ps vfnmsub231ps(AsmHexCode encoded) => new Vfnmsub231ps(encoded);

        public struct Vfnmsub231sd : ITypedInstruction<Vfnmsub231sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub231sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB231SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub231sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub231sd src) => AsmMnemonics.VFNMSUB231SD;

            public static implicit operator AsmHexCode(Vfnmsub231sd src) => src.Encoded;

            public static implicit operator Vfnmsub231sd(AsmHexCode src) => new Vfnmsub231sd(src);
        }

        public Vfnmsub231sd vfnmsub231sd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub231sd vfnmsub231sd(AsmHexCode encoded) => new Vfnmsub231sd(encoded);

        public struct Vfnmsub231ss : ITypedInstruction<Vfnmsub231ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsub231ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUB231SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsub231ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsub231ss src) => AsmMnemonics.VFNMSUB231SS;

            public static implicit operator AsmHexCode(Vfnmsub231ss src) => src.Encoded;

            public static implicit operator Vfnmsub231ss(AsmHexCode src) => new Vfnmsub231ss(src);
        }

        public Vfnmsub231ss vfnmsub231ss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsub231ss vfnmsub231ss(AsmHexCode encoded) => new Vfnmsub231ss(encoded);

        public struct Vfnmsubpd : ITypedInstruction<Vfnmsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsubpd src) => AsmMnemonics.VFNMSUBPD;

            public static implicit operator AsmHexCode(Vfnmsubpd src) => src.Encoded;

            public static implicit operator Vfnmsubpd(AsmHexCode src) => new Vfnmsubpd(src);
        }

        public Vfnmsubpd vfnmsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsubpd vfnmsubpd(AsmHexCode encoded) => new Vfnmsubpd(encoded);

        public struct Vfnmsubps : ITypedInstruction<Vfnmsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsubps src) => AsmMnemonics.VFNMSUBPS;

            public static implicit operator AsmHexCode(Vfnmsubps src) => src.Encoded;

            public static implicit operator Vfnmsubps(AsmHexCode src) => new Vfnmsubps(src);
        }

        public Vfnmsubps vfnmsubps() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsubps vfnmsubps(AsmHexCode encoded) => new Vfnmsubps(encoded);

        public struct Vfnmsubsd : ITypedInstruction<Vfnmsubsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsubsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUBSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsubsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsubsd src) => AsmMnemonics.VFNMSUBSD;

            public static implicit operator AsmHexCode(Vfnmsubsd src) => src.Encoded;

            public static implicit operator Vfnmsubsd(AsmHexCode src) => new Vfnmsubsd(src);
        }

        public Vfnmsubsd vfnmsubsd() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsubsd vfnmsubsd(AsmHexCode encoded) => new Vfnmsubsd(encoded);

        public struct Vfnmsubss : ITypedInstruction<Vfnmsubss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfnmsubss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFNMSUBSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfnmsubss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfnmsubss src) => AsmMnemonics.VFNMSUBSS;

            public static implicit operator AsmHexCode(Vfnmsubss src) => src.Encoded;

            public static implicit operator Vfnmsubss(AsmHexCode src) => new Vfnmsubss(src);
        }

        public Vfnmsubss vfnmsubss() => default;

        [MethodImpl(Inline), Op]
        public Vfnmsubss vfnmsubss(AsmHexCode encoded) => new Vfnmsubss(encoded);

        public struct Vfpclasspd : ITypedInstruction<Vfpclasspd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfpclasspd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFPCLASSPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfpclasspd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfpclasspd src) => AsmMnemonics.VFPCLASSPD;

            public static implicit operator AsmHexCode(Vfpclasspd src) => src.Encoded;

            public static implicit operator Vfpclasspd(AsmHexCode src) => new Vfpclasspd(src);
        }

        public Vfpclasspd vfpclasspd() => default;

        [MethodImpl(Inline), Op]
        public Vfpclasspd vfpclasspd(AsmHexCode encoded) => new Vfpclasspd(encoded);

        public struct Vfpclassps : ITypedInstruction<Vfpclassps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfpclassps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFPCLASSPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfpclassps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfpclassps src) => AsmMnemonics.VFPCLASSPS;

            public static implicit operator AsmHexCode(Vfpclassps src) => src.Encoded;

            public static implicit operator Vfpclassps(AsmHexCode src) => new Vfpclassps(src);
        }

        public Vfpclassps vfpclassps() => default;

        [MethodImpl(Inline), Op]
        public Vfpclassps vfpclassps(AsmHexCode encoded) => new Vfpclassps(encoded);

        public struct Vfpclasssd : ITypedInstruction<Vfpclasssd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfpclasssd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFPCLASSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfpclasssd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfpclasssd src) => AsmMnemonics.VFPCLASSSD;

            public static implicit operator AsmHexCode(Vfpclasssd src) => src.Encoded;

            public static implicit operator Vfpclasssd(AsmHexCode src) => new Vfpclasssd(src);
        }

        public Vfpclasssd vfpclasssd() => default;

        [MethodImpl(Inline), Op]
        public Vfpclasssd vfpclasssd(AsmHexCode encoded) => new Vfpclasssd(encoded);

        public struct Vfpclassss : ITypedInstruction<Vfpclassss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfpclassss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFPCLASSSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfpclassss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfpclassss src) => AsmMnemonics.VFPCLASSSS;

            public static implicit operator AsmHexCode(Vfpclassss src) => src.Encoded;

            public static implicit operator Vfpclassss(AsmHexCode src) => new Vfpclassss(src);
        }

        public Vfpclassss vfpclassss() => default;

        [MethodImpl(Inline), Op]
        public Vfpclassss vfpclassss(AsmHexCode encoded) => new Vfpclassss(encoded);

        public struct Vfrczpd : ITypedInstruction<Vfrczpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfrczpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFRCZPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfrczpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfrczpd src) => AsmMnemonics.VFRCZPD;

            public static implicit operator AsmHexCode(Vfrczpd src) => src.Encoded;

            public static implicit operator Vfrczpd(AsmHexCode src) => new Vfrczpd(src);
        }

        public Vfrczpd vfrczpd() => default;

        [MethodImpl(Inline), Op]
        public Vfrczpd vfrczpd(AsmHexCode encoded) => new Vfrczpd(encoded);

        public struct Vfrczps : ITypedInstruction<Vfrczps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfrczps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFRCZPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfrczps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfrczps src) => AsmMnemonics.VFRCZPS;

            public static implicit operator AsmHexCode(Vfrczps src) => src.Encoded;

            public static implicit operator Vfrczps(AsmHexCode src) => new Vfrczps(src);
        }

        public Vfrczps vfrczps() => default;

        [MethodImpl(Inline), Op]
        public Vfrczps vfrczps(AsmHexCode encoded) => new Vfrczps(encoded);

        public struct Vfrczsd : ITypedInstruction<Vfrczsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfrczsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFRCZSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfrczsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfrczsd src) => AsmMnemonics.VFRCZSD;

            public static implicit operator AsmHexCode(Vfrczsd src) => src.Encoded;

            public static implicit operator Vfrczsd(AsmHexCode src) => new Vfrczsd(src);
        }

        public Vfrczsd vfrczsd() => default;

        [MethodImpl(Inline), Op]
        public Vfrczsd vfrczsd(AsmHexCode encoded) => new Vfrczsd(encoded);

        public struct Vfrczss : ITypedInstruction<Vfrczss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vfrczss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VFRCZSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vfrczss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vfrczss src) => AsmMnemonics.VFRCZSS;

            public static implicit operator AsmHexCode(Vfrczss src) => src.Encoded;

            public static implicit operator Vfrczss(AsmHexCode src) => new Vfrczss(src);
        }

        public Vfrczss vfrczss() => default;

        [MethodImpl(Inline), Op]
        public Vfrczss vfrczss(AsmHexCode encoded) => new Vfrczss(encoded);

        public struct Vgatherdpd : ITypedInstruction<Vgatherdpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherdpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherdpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherdpd src) => AsmMnemonics.VGATHERDPD;

            public static implicit operator AsmHexCode(Vgatherdpd src) => src.Encoded;

            public static implicit operator Vgatherdpd(AsmHexCode src) => new Vgatherdpd(src);
        }

        public Vgatherdpd vgatherdpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherdpd vgatherdpd(AsmHexCode encoded) => new Vgatherdpd(encoded);

        public struct Vgatherdps : ITypedInstruction<Vgatherdps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherdps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherdps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherdps src) => AsmMnemonics.VGATHERDPS;

            public static implicit operator AsmHexCode(Vgatherdps src) => src.Encoded;

            public static implicit operator Vgatherdps(AsmHexCode src) => new Vgatherdps(src);
        }

        public Vgatherdps vgatherdps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherdps vgatherdps(AsmHexCode encoded) => new Vgatherdps(encoded);

        public struct Vgatherpf0dpd : ITypedInstruction<Vgatherpf0dpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf0dpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF0DPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf0dpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf0dpd src) => AsmMnemonics.VGATHERPF0DPD;

            public static implicit operator AsmHexCode(Vgatherpf0dpd src) => src.Encoded;

            public static implicit operator Vgatherpf0dpd(AsmHexCode src) => new Vgatherpf0dpd(src);
        }

        public Vgatherpf0dpd vgatherpf0dpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf0dpd vgatherpf0dpd(AsmHexCode encoded) => new Vgatherpf0dpd(encoded);

        public struct Vgatherpf0dps : ITypedInstruction<Vgatherpf0dps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf0dps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF0DPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf0dps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf0dps src) => AsmMnemonics.VGATHERPF0DPS;

            public static implicit operator AsmHexCode(Vgatherpf0dps src) => src.Encoded;

            public static implicit operator Vgatherpf0dps(AsmHexCode src) => new Vgatherpf0dps(src);
        }

        public Vgatherpf0dps vgatherpf0dps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf0dps vgatherpf0dps(AsmHexCode encoded) => new Vgatherpf0dps(encoded);

        public struct Vgatherpf0qpd : ITypedInstruction<Vgatherpf0qpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf0qpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF0QPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf0qpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf0qpd src) => AsmMnemonics.VGATHERPF0QPD;

            public static implicit operator AsmHexCode(Vgatherpf0qpd src) => src.Encoded;

            public static implicit operator Vgatherpf0qpd(AsmHexCode src) => new Vgatherpf0qpd(src);
        }

        public Vgatherpf0qpd vgatherpf0qpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf0qpd vgatherpf0qpd(AsmHexCode encoded) => new Vgatherpf0qpd(encoded);

        public struct Vgatherpf0qps : ITypedInstruction<Vgatherpf0qps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf0qps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF0QPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf0qps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf0qps src) => AsmMnemonics.VGATHERPF0QPS;

            public static implicit operator AsmHexCode(Vgatherpf0qps src) => src.Encoded;

            public static implicit operator Vgatherpf0qps(AsmHexCode src) => new Vgatherpf0qps(src);
        }

        public Vgatherpf0qps vgatherpf0qps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf0qps vgatherpf0qps(AsmHexCode encoded) => new Vgatherpf0qps(encoded);

        public struct Vgatherpf1dpd : ITypedInstruction<Vgatherpf1dpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf1dpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF1DPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf1dpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf1dpd src) => AsmMnemonics.VGATHERPF1DPD;

            public static implicit operator AsmHexCode(Vgatherpf1dpd src) => src.Encoded;

            public static implicit operator Vgatherpf1dpd(AsmHexCode src) => new Vgatherpf1dpd(src);
        }

        public Vgatherpf1dpd vgatherpf1dpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf1dpd vgatherpf1dpd(AsmHexCode encoded) => new Vgatherpf1dpd(encoded);

        public struct Vgatherpf1dps : ITypedInstruction<Vgatherpf1dps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf1dps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF1DPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf1dps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf1dps src) => AsmMnemonics.VGATHERPF1DPS;

            public static implicit operator AsmHexCode(Vgatherpf1dps src) => src.Encoded;

            public static implicit operator Vgatherpf1dps(AsmHexCode src) => new Vgatherpf1dps(src);
        }

        public Vgatherpf1dps vgatherpf1dps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf1dps vgatherpf1dps(AsmHexCode encoded) => new Vgatherpf1dps(encoded);

        public struct Vgatherpf1qpd : ITypedInstruction<Vgatherpf1qpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf1qpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF1QPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf1qpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf1qpd src) => AsmMnemonics.VGATHERPF1QPD;

            public static implicit operator AsmHexCode(Vgatherpf1qpd src) => src.Encoded;

            public static implicit operator Vgatherpf1qpd(AsmHexCode src) => new Vgatherpf1qpd(src);
        }

        public Vgatherpf1qpd vgatherpf1qpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf1qpd vgatherpf1qpd(AsmHexCode encoded) => new Vgatherpf1qpd(encoded);

        public struct Vgatherpf1qps : ITypedInstruction<Vgatherpf1qps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherpf1qps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERPF1QPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherpf1qps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherpf1qps src) => AsmMnemonics.VGATHERPF1QPS;

            public static implicit operator AsmHexCode(Vgatherpf1qps src) => src.Encoded;

            public static implicit operator Vgatherpf1qps(AsmHexCode src) => new Vgatherpf1qps(src);
        }

        public Vgatherpf1qps vgatherpf1qps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherpf1qps vgatherpf1qps(AsmHexCode encoded) => new Vgatherpf1qps(encoded);

        public struct Vgatherqpd : ITypedInstruction<Vgatherqpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherqpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERQPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherqpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherqpd src) => AsmMnemonics.VGATHERQPD;

            public static implicit operator AsmHexCode(Vgatherqpd src) => src.Encoded;

            public static implicit operator Vgatherqpd(AsmHexCode src) => new Vgatherqpd(src);
        }

        public Vgatherqpd vgatherqpd() => default;

        [MethodImpl(Inline), Op]
        public Vgatherqpd vgatherqpd(AsmHexCode encoded) => new Vgatherqpd(encoded);

        public struct Vgatherqps : ITypedInstruction<Vgatherqps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgatherqps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGATHERQPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgatherqps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgatherqps src) => AsmMnemonics.VGATHERQPS;

            public static implicit operator AsmHexCode(Vgatherqps src) => src.Encoded;

            public static implicit operator Vgatherqps(AsmHexCode src) => new Vgatherqps(src);
        }

        public Vgatherqps vgatherqps() => default;

        [MethodImpl(Inline), Op]
        public Vgatherqps vgatherqps(AsmHexCode encoded) => new Vgatherqps(encoded);

        public struct Vgetexppd : ITypedInstruction<Vgetexppd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetexppd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETEXPPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetexppd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetexppd src) => AsmMnemonics.VGETEXPPD;

            public static implicit operator AsmHexCode(Vgetexppd src) => src.Encoded;

            public static implicit operator Vgetexppd(AsmHexCode src) => new Vgetexppd(src);
        }

        public Vgetexppd vgetexppd() => default;

        [MethodImpl(Inline), Op]
        public Vgetexppd vgetexppd(AsmHexCode encoded) => new Vgetexppd(encoded);

        public struct Vgetexpps : ITypedInstruction<Vgetexpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetexpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETEXPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetexpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetexpps src) => AsmMnemonics.VGETEXPPS;

            public static implicit operator AsmHexCode(Vgetexpps src) => src.Encoded;

            public static implicit operator Vgetexpps(AsmHexCode src) => new Vgetexpps(src);
        }

        public Vgetexpps vgetexpps() => default;

        [MethodImpl(Inline), Op]
        public Vgetexpps vgetexpps(AsmHexCode encoded) => new Vgetexpps(encoded);

        public struct Vgetexpsd : ITypedInstruction<Vgetexpsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetexpsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETEXPSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetexpsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetexpsd src) => AsmMnemonics.VGETEXPSD;

            public static implicit operator AsmHexCode(Vgetexpsd src) => src.Encoded;

            public static implicit operator Vgetexpsd(AsmHexCode src) => new Vgetexpsd(src);
        }

        public Vgetexpsd vgetexpsd() => default;

        [MethodImpl(Inline), Op]
        public Vgetexpsd vgetexpsd(AsmHexCode encoded) => new Vgetexpsd(encoded);

        public struct Vgetexpss : ITypedInstruction<Vgetexpss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetexpss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETEXPSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetexpss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetexpss src) => AsmMnemonics.VGETEXPSS;

            public static implicit operator AsmHexCode(Vgetexpss src) => src.Encoded;

            public static implicit operator Vgetexpss(AsmHexCode src) => new Vgetexpss(src);
        }

        public Vgetexpss vgetexpss() => default;

        [MethodImpl(Inline), Op]
        public Vgetexpss vgetexpss(AsmHexCode encoded) => new Vgetexpss(encoded);

        public struct Vgetmantpd : ITypedInstruction<Vgetmantpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetmantpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETMANTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetmantpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetmantpd src) => AsmMnemonics.VGETMANTPD;

            public static implicit operator AsmHexCode(Vgetmantpd src) => src.Encoded;

            public static implicit operator Vgetmantpd(AsmHexCode src) => new Vgetmantpd(src);
        }

        public Vgetmantpd vgetmantpd() => default;

        [MethodImpl(Inline), Op]
        public Vgetmantpd vgetmantpd(AsmHexCode encoded) => new Vgetmantpd(encoded);

        public struct Vgetmantps : ITypedInstruction<Vgetmantps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetmantps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETMANTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetmantps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetmantps src) => AsmMnemonics.VGETMANTPS;

            public static implicit operator AsmHexCode(Vgetmantps src) => src.Encoded;

            public static implicit operator Vgetmantps(AsmHexCode src) => new Vgetmantps(src);
        }

        public Vgetmantps vgetmantps() => default;

        [MethodImpl(Inline), Op]
        public Vgetmantps vgetmantps(AsmHexCode encoded) => new Vgetmantps(encoded);

        public struct Vgetmantsd : ITypedInstruction<Vgetmantsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetmantsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETMANTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetmantsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetmantsd src) => AsmMnemonics.VGETMANTSD;

            public static implicit operator AsmHexCode(Vgetmantsd src) => src.Encoded;

            public static implicit operator Vgetmantsd(AsmHexCode src) => new Vgetmantsd(src);
        }

        public Vgetmantsd vgetmantsd() => default;

        [MethodImpl(Inline), Op]
        public Vgetmantsd vgetmantsd(AsmHexCode encoded) => new Vgetmantsd(encoded);

        public struct Vgetmantss : ITypedInstruction<Vgetmantss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgetmantss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGETMANTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgetmantss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgetmantss src) => AsmMnemonics.VGETMANTSS;

            public static implicit operator AsmHexCode(Vgetmantss src) => src.Encoded;

            public static implicit operator Vgetmantss(AsmHexCode src) => new Vgetmantss(src);
        }

        public Vgetmantss vgetmantss() => default;

        [MethodImpl(Inline), Op]
        public Vgetmantss vgetmantss(AsmHexCode encoded) => new Vgetmantss(encoded);

        public struct Vgf2p8affineinvqb : ITypedInstruction<Vgf2p8affineinvqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgf2p8affineinvqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGF2P8AFFINEINVQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgf2p8affineinvqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgf2p8affineinvqb src) => AsmMnemonics.VGF2P8AFFINEINVQB;

            public static implicit operator AsmHexCode(Vgf2p8affineinvqb src) => src.Encoded;

            public static implicit operator Vgf2p8affineinvqb(AsmHexCode src) => new Vgf2p8affineinvqb(src);
        }

        public Vgf2p8affineinvqb vgf2p8affineinvqb() => default;

        [MethodImpl(Inline), Op]
        public Vgf2p8affineinvqb vgf2p8affineinvqb(AsmHexCode encoded) => new Vgf2p8affineinvqb(encoded);

        public struct Vgf2p8affineqb : ITypedInstruction<Vgf2p8affineqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgf2p8affineqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGF2P8AFFINEQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgf2p8affineqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgf2p8affineqb src) => AsmMnemonics.VGF2P8AFFINEQB;

            public static implicit operator AsmHexCode(Vgf2p8affineqb src) => src.Encoded;

            public static implicit operator Vgf2p8affineqb(AsmHexCode src) => new Vgf2p8affineqb(src);
        }

        public Vgf2p8affineqb vgf2p8affineqb() => default;

        [MethodImpl(Inline), Op]
        public Vgf2p8affineqb vgf2p8affineqb(AsmHexCode encoded) => new Vgf2p8affineqb(encoded);

        public struct Vgf2p8mulb : ITypedInstruction<Vgf2p8mulb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vgf2p8mulb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VGF2P8MULB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vgf2p8mulb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vgf2p8mulb src) => AsmMnemonics.VGF2P8MULB;

            public static implicit operator AsmHexCode(Vgf2p8mulb src) => src.Encoded;

            public static implicit operator Vgf2p8mulb(AsmHexCode src) => new Vgf2p8mulb(src);
        }

        public Vgf2p8mulb vgf2p8mulb() => default;

        [MethodImpl(Inline), Op]
        public Vgf2p8mulb vgf2p8mulb(AsmHexCode encoded) => new Vgf2p8mulb(encoded);

        public struct Vhaddpd : ITypedInstruction<Vhaddpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vhaddpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VHADDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vhaddpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vhaddpd src) => AsmMnemonics.VHADDPD;

            public static implicit operator AsmHexCode(Vhaddpd src) => src.Encoded;

            public static implicit operator Vhaddpd(AsmHexCode src) => new Vhaddpd(src);
        }

        public Vhaddpd vhaddpd() => default;

        [MethodImpl(Inline), Op]
        public Vhaddpd vhaddpd(AsmHexCode encoded) => new Vhaddpd(encoded);

        public struct Vhaddps : ITypedInstruction<Vhaddps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vhaddps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VHADDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vhaddps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vhaddps src) => AsmMnemonics.VHADDPS;

            public static implicit operator AsmHexCode(Vhaddps src) => src.Encoded;

            public static implicit operator Vhaddps(AsmHexCode src) => new Vhaddps(src);
        }

        public Vhaddps vhaddps() => default;

        [MethodImpl(Inline), Op]
        public Vhaddps vhaddps(AsmHexCode encoded) => new Vhaddps(encoded);

        public struct Vhsubpd : ITypedInstruction<Vhsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vhsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VHSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vhsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vhsubpd src) => AsmMnemonics.VHSUBPD;

            public static implicit operator AsmHexCode(Vhsubpd src) => src.Encoded;

            public static implicit operator Vhsubpd(AsmHexCode src) => new Vhsubpd(src);
        }

        public Vhsubpd vhsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vhsubpd vhsubpd(AsmHexCode encoded) => new Vhsubpd(encoded);

        public struct Vhsubps : ITypedInstruction<Vhsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vhsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VHSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vhsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vhsubps src) => AsmMnemonics.VHSUBPS;

            public static implicit operator AsmHexCode(Vhsubps src) => src.Encoded;

            public static implicit operator Vhsubps(AsmHexCode src) => new Vhsubps(src);
        }

        public Vhsubps vhsubps() => default;

        [MethodImpl(Inline), Op]
        public Vhsubps vhsubps(AsmHexCode encoded) => new Vhsubps(encoded);

        public struct Vinsertf128 : ITypedInstruction<Vinsertf128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertf128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTF128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertf128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertf128 src) => AsmMnemonics.VINSERTF128;

            public static implicit operator AsmHexCode(Vinsertf128 src) => src.Encoded;

            public static implicit operator Vinsertf128(AsmHexCode src) => new Vinsertf128(src);
        }

        public Vinsertf128 vinsertf128() => default;

        [MethodImpl(Inline), Op]
        public Vinsertf128 vinsertf128(AsmHexCode encoded) => new Vinsertf128(encoded);

        public struct Vinsertf32x4 : ITypedInstruction<Vinsertf32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertf32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTF32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertf32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertf32x4 src) => AsmMnemonics.VINSERTF32X4;

            public static implicit operator AsmHexCode(Vinsertf32x4 src) => src.Encoded;

            public static implicit operator Vinsertf32x4(AsmHexCode src) => new Vinsertf32x4(src);
        }

        public Vinsertf32x4 vinsertf32x4() => default;

        [MethodImpl(Inline), Op]
        public Vinsertf32x4 vinsertf32x4(AsmHexCode encoded) => new Vinsertf32x4(encoded);

        public struct Vinsertf32x8 : ITypedInstruction<Vinsertf32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertf32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTF32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertf32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertf32x8 src) => AsmMnemonics.VINSERTF32X8;

            public static implicit operator AsmHexCode(Vinsertf32x8 src) => src.Encoded;

            public static implicit operator Vinsertf32x8(AsmHexCode src) => new Vinsertf32x8(src);
        }

        public Vinsertf32x8 vinsertf32x8() => default;

        [MethodImpl(Inline), Op]
        public Vinsertf32x8 vinsertf32x8(AsmHexCode encoded) => new Vinsertf32x8(encoded);

        public struct Vinsertf64x2 : ITypedInstruction<Vinsertf64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertf64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTF64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertf64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertf64x2 src) => AsmMnemonics.VINSERTF64X2;

            public static implicit operator AsmHexCode(Vinsertf64x2 src) => src.Encoded;

            public static implicit operator Vinsertf64x2(AsmHexCode src) => new Vinsertf64x2(src);
        }

        public Vinsertf64x2 vinsertf64x2() => default;

        [MethodImpl(Inline), Op]
        public Vinsertf64x2 vinsertf64x2(AsmHexCode encoded) => new Vinsertf64x2(encoded);

        public struct Vinsertf64x4 : ITypedInstruction<Vinsertf64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertf64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTF64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertf64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertf64x4 src) => AsmMnemonics.VINSERTF64X4;

            public static implicit operator AsmHexCode(Vinsertf64x4 src) => src.Encoded;

            public static implicit operator Vinsertf64x4(AsmHexCode src) => new Vinsertf64x4(src);
        }

        public Vinsertf64x4 vinsertf64x4() => default;

        [MethodImpl(Inline), Op]
        public Vinsertf64x4 vinsertf64x4(AsmHexCode encoded) => new Vinsertf64x4(encoded);

        public struct Vinserti128 : ITypedInstruction<Vinserti128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinserti128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTI128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinserti128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinserti128 src) => AsmMnemonics.VINSERTI128;

            public static implicit operator AsmHexCode(Vinserti128 src) => src.Encoded;

            public static implicit operator Vinserti128(AsmHexCode src) => new Vinserti128(src);
        }

        public Vinserti128 vinserti128() => default;

        [MethodImpl(Inline), Op]
        public Vinserti128 vinserti128(AsmHexCode encoded) => new Vinserti128(encoded);

        public struct Vinserti32x4 : ITypedInstruction<Vinserti32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinserti32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTI32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinserti32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinserti32x4 src) => AsmMnemonics.VINSERTI32X4;

            public static implicit operator AsmHexCode(Vinserti32x4 src) => src.Encoded;

            public static implicit operator Vinserti32x4(AsmHexCode src) => new Vinserti32x4(src);
        }

        public Vinserti32x4 vinserti32x4() => default;

        [MethodImpl(Inline), Op]
        public Vinserti32x4 vinserti32x4(AsmHexCode encoded) => new Vinserti32x4(encoded);

        public struct Vinserti32x8 : ITypedInstruction<Vinserti32x8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinserti32x8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTI32X8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinserti32x8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinserti32x8 src) => AsmMnemonics.VINSERTI32X8;

            public static implicit operator AsmHexCode(Vinserti32x8 src) => src.Encoded;

            public static implicit operator Vinserti32x8(AsmHexCode src) => new Vinserti32x8(src);
        }

        public Vinserti32x8 vinserti32x8() => default;

        [MethodImpl(Inline), Op]
        public Vinserti32x8 vinserti32x8(AsmHexCode encoded) => new Vinserti32x8(encoded);

        public struct Vinserti64x2 : ITypedInstruction<Vinserti64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinserti64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTI64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinserti64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinserti64x2 src) => AsmMnemonics.VINSERTI64X2;

            public static implicit operator AsmHexCode(Vinserti64x2 src) => src.Encoded;

            public static implicit operator Vinserti64x2(AsmHexCode src) => new Vinserti64x2(src);
        }

        public Vinserti64x2 vinserti64x2() => default;

        [MethodImpl(Inline), Op]
        public Vinserti64x2 vinserti64x2(AsmHexCode encoded) => new Vinserti64x2(encoded);

        public struct Vinserti64x4 : ITypedInstruction<Vinserti64x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinserti64x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTI64X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinserti64x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinserti64x4 src) => AsmMnemonics.VINSERTI64X4;

            public static implicit operator AsmHexCode(Vinserti64x4 src) => src.Encoded;

            public static implicit operator Vinserti64x4(AsmHexCode src) => new Vinserti64x4(src);
        }

        public Vinserti64x4 vinserti64x4() => default;

        [MethodImpl(Inline), Op]
        public Vinserti64x4 vinserti64x4(AsmHexCode encoded) => new Vinserti64x4(encoded);

        public struct Vinsertps : ITypedInstruction<Vinsertps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vinsertps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VINSERTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vinsertps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vinsertps src) => AsmMnemonics.VINSERTPS;

            public static implicit operator AsmHexCode(Vinsertps src) => src.Encoded;

            public static implicit operator Vinsertps(AsmHexCode src) => new Vinsertps(src);
        }

        public Vinsertps vinsertps() => default;

        [MethodImpl(Inline), Op]
        public Vinsertps vinsertps(AsmHexCode encoded) => new Vinsertps(encoded);

        public struct Vlddqu : ITypedInstruction<Vlddqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vlddqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VLDDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vlddqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vlddqu src) => AsmMnemonics.VLDDQU;

            public static implicit operator AsmHexCode(Vlddqu src) => src.Encoded;

            public static implicit operator Vlddqu(AsmHexCode src) => new Vlddqu(src);
        }

        public Vlddqu vlddqu() => default;

        [MethodImpl(Inline), Op]
        public Vlddqu vlddqu(AsmHexCode encoded) => new Vlddqu(encoded);

        public struct Vldmxcsr : ITypedInstruction<Vldmxcsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vldmxcsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VLDMXCSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vldmxcsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vldmxcsr src) => AsmMnemonics.VLDMXCSR;

            public static implicit operator AsmHexCode(Vldmxcsr src) => src.Encoded;

            public static implicit operator Vldmxcsr(AsmHexCode src) => new Vldmxcsr(src);
        }

        public Vldmxcsr vldmxcsr() => default;

        [MethodImpl(Inline), Op]
        public Vldmxcsr vldmxcsr(AsmHexCode encoded) => new Vldmxcsr(encoded);

        public struct Vmaskmovdqu : ITypedInstruction<Vmaskmovdqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaskmovdqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMASKMOVDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaskmovdqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaskmovdqu src) => AsmMnemonics.VMASKMOVDQU;

            public static implicit operator AsmHexCode(Vmaskmovdqu src) => src.Encoded;

            public static implicit operator Vmaskmovdqu(AsmHexCode src) => new Vmaskmovdqu(src);
        }

        public Vmaskmovdqu vmaskmovdqu() => default;

        [MethodImpl(Inline), Op]
        public Vmaskmovdqu vmaskmovdqu(AsmHexCode encoded) => new Vmaskmovdqu(encoded);

        public struct Vmaskmovpd : ITypedInstruction<Vmaskmovpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaskmovpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMASKMOVPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaskmovpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaskmovpd src) => AsmMnemonics.VMASKMOVPD;

            public static implicit operator AsmHexCode(Vmaskmovpd src) => src.Encoded;

            public static implicit operator Vmaskmovpd(AsmHexCode src) => new Vmaskmovpd(src);
        }

        public Vmaskmovpd vmaskmovpd() => default;

        [MethodImpl(Inline), Op]
        public Vmaskmovpd vmaskmovpd(AsmHexCode encoded) => new Vmaskmovpd(encoded);

        public struct Vmaskmovps : ITypedInstruction<Vmaskmovps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaskmovps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMASKMOVPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaskmovps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaskmovps src) => AsmMnemonics.VMASKMOVPS;

            public static implicit operator AsmHexCode(Vmaskmovps src) => src.Encoded;

            public static implicit operator Vmaskmovps(AsmHexCode src) => new Vmaskmovps(src);
        }

        public Vmaskmovps vmaskmovps() => default;

        [MethodImpl(Inline), Op]
        public Vmaskmovps vmaskmovps(AsmHexCode encoded) => new Vmaskmovps(encoded);

        public struct Vmaxpd : ITypedInstruction<Vmaxpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaxpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMAXPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaxpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaxpd src) => AsmMnemonics.VMAXPD;

            public static implicit operator AsmHexCode(Vmaxpd src) => src.Encoded;

            public static implicit operator Vmaxpd(AsmHexCode src) => new Vmaxpd(src);
        }

        public Vmaxpd vmaxpd() => default;

        [MethodImpl(Inline), Op]
        public Vmaxpd vmaxpd(AsmHexCode encoded) => new Vmaxpd(encoded);

        public struct Vmaxps : ITypedInstruction<Vmaxps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaxps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMAXPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaxps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaxps src) => AsmMnemonics.VMAXPS;

            public static implicit operator AsmHexCode(Vmaxps src) => src.Encoded;

            public static implicit operator Vmaxps(AsmHexCode src) => new Vmaxps(src);
        }

        public Vmaxps vmaxps() => default;

        [MethodImpl(Inline), Op]
        public Vmaxps vmaxps(AsmHexCode encoded) => new Vmaxps(encoded);

        public struct Vmaxsd : ITypedInstruction<Vmaxsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaxsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMAXSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaxsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaxsd src) => AsmMnemonics.VMAXSD;

            public static implicit operator AsmHexCode(Vmaxsd src) => src.Encoded;

            public static implicit operator Vmaxsd(AsmHexCode src) => new Vmaxsd(src);
        }

        public Vmaxsd vmaxsd() => default;

        [MethodImpl(Inline), Op]
        public Vmaxsd vmaxsd(AsmHexCode encoded) => new Vmaxsd(encoded);

        public struct Vmaxss : ITypedInstruction<Vmaxss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmaxss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMAXSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmaxss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmaxss src) => AsmMnemonics.VMAXSS;

            public static implicit operator AsmHexCode(Vmaxss src) => src.Encoded;

            public static implicit operator Vmaxss(AsmHexCode src) => new Vmaxss(src);
        }

        public Vmaxss vmaxss() => default;

        [MethodImpl(Inline), Op]
        public Vmaxss vmaxss(AsmHexCode encoded) => new Vmaxss(encoded);

        public struct Vmcall : ITypedInstruction<Vmcall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmcall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMCALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmcall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmcall src) => AsmMnemonics.VMCALL;

            public static implicit operator AsmHexCode(Vmcall src) => src.Encoded;

            public static implicit operator Vmcall(AsmHexCode src) => new Vmcall(src);
        }

        public Vmcall vmcall() => default;

        [MethodImpl(Inline), Op]
        public Vmcall vmcall(AsmHexCode encoded) => new Vmcall(encoded);

        public struct Vmclear : ITypedInstruction<Vmclear>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmclear(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMCLEAR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmclear src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmclear src) => AsmMnemonics.VMCLEAR;

            public static implicit operator AsmHexCode(Vmclear src) => src.Encoded;

            public static implicit operator Vmclear(AsmHexCode src) => new Vmclear(src);
        }

        public Vmclear vmclear() => default;

        [MethodImpl(Inline), Op]
        public Vmclear vmclear(AsmHexCode encoded) => new Vmclear(encoded);

        public struct Vmfunc : ITypedInstruction<Vmfunc>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmfunc(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMFUNC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmfunc src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmfunc src) => AsmMnemonics.VMFUNC;

            public static implicit operator AsmHexCode(Vmfunc src) => src.Encoded;

            public static implicit operator Vmfunc(AsmHexCode src) => new Vmfunc(src);
        }

        public Vmfunc vmfunc() => default;

        [MethodImpl(Inline), Op]
        public Vmfunc vmfunc(AsmHexCode encoded) => new Vmfunc(encoded);

        public struct Vminpd : ITypedInstruction<Vminpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vminpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMINPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vminpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vminpd src) => AsmMnemonics.VMINPD;

            public static implicit operator AsmHexCode(Vminpd src) => src.Encoded;

            public static implicit operator Vminpd(AsmHexCode src) => new Vminpd(src);
        }

        public Vminpd vminpd() => default;

        [MethodImpl(Inline), Op]
        public Vminpd vminpd(AsmHexCode encoded) => new Vminpd(encoded);

        public struct Vminps : ITypedInstruction<Vminps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vminps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMINPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vminps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vminps src) => AsmMnemonics.VMINPS;

            public static implicit operator AsmHexCode(Vminps src) => src.Encoded;

            public static implicit operator Vminps(AsmHexCode src) => new Vminps(src);
        }

        public Vminps vminps() => default;

        [MethodImpl(Inline), Op]
        public Vminps vminps(AsmHexCode encoded) => new Vminps(encoded);

        public struct Vminsd : ITypedInstruction<Vminsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vminsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMINSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vminsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vminsd src) => AsmMnemonics.VMINSD;

            public static implicit operator AsmHexCode(Vminsd src) => src.Encoded;

            public static implicit operator Vminsd(AsmHexCode src) => new Vminsd(src);
        }

        public Vminsd vminsd() => default;

        [MethodImpl(Inline), Op]
        public Vminsd vminsd(AsmHexCode encoded) => new Vminsd(encoded);

        public struct Vminss : ITypedInstruction<Vminss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vminss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMINSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vminss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vminss src) => AsmMnemonics.VMINSS;

            public static implicit operator AsmHexCode(Vminss src) => src.Encoded;

            public static implicit operator Vminss(AsmHexCode src) => new Vminss(src);
        }

        public Vminss vminss() => default;

        [MethodImpl(Inline), Op]
        public Vminss vminss(AsmHexCode encoded) => new Vminss(encoded);

        public struct Vmlaunch : ITypedInstruction<Vmlaunch>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmlaunch(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMLAUNCH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmlaunch src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmlaunch src) => AsmMnemonics.VMLAUNCH;

            public static implicit operator AsmHexCode(Vmlaunch src) => src.Encoded;

            public static implicit operator Vmlaunch(AsmHexCode src) => new Vmlaunch(src);
        }

        public Vmlaunch vmlaunch() => default;

        [MethodImpl(Inline), Op]
        public Vmlaunch vmlaunch(AsmHexCode encoded) => new Vmlaunch(encoded);

        public struct Vmload : ITypedInstruction<Vmload>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmload(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMLOAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmload src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmload src) => AsmMnemonics.VMLOAD;

            public static implicit operator AsmHexCode(Vmload src) => src.Encoded;

            public static implicit operator Vmload(AsmHexCode src) => new Vmload(src);
        }

        public Vmload vmload() => default;

        [MethodImpl(Inline), Op]
        public Vmload vmload(AsmHexCode encoded) => new Vmload(encoded);

        public struct Vmmcall : ITypedInstruction<Vmmcall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmmcall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMMCALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmmcall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmmcall src) => AsmMnemonics.VMMCALL;

            public static implicit operator AsmHexCode(Vmmcall src) => src.Encoded;

            public static implicit operator Vmmcall(AsmHexCode src) => new Vmmcall(src);
        }

        public Vmmcall vmmcall() => default;

        [MethodImpl(Inline), Op]
        public Vmmcall vmmcall(AsmHexCode encoded) => new Vmmcall(encoded);

        public struct Vmovapd : ITypedInstruction<Vmovapd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovapd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVAPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovapd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovapd src) => AsmMnemonics.VMOVAPD;

            public static implicit operator AsmHexCode(Vmovapd src) => src.Encoded;

            public static implicit operator Vmovapd(AsmHexCode src) => new Vmovapd(src);
        }

        public Vmovapd vmovapd() => default;

        [MethodImpl(Inline), Op]
        public Vmovapd vmovapd(AsmHexCode encoded) => new Vmovapd(encoded);

        public struct Vmovaps : ITypedInstruction<Vmovaps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovaps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVAPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovaps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovaps src) => AsmMnemonics.VMOVAPS;

            public static implicit operator AsmHexCode(Vmovaps src) => src.Encoded;

            public static implicit operator Vmovaps(AsmHexCode src) => new Vmovaps(src);
        }

        public Vmovaps vmovaps() => default;

        [MethodImpl(Inline), Op]
        public Vmovaps vmovaps(AsmHexCode encoded) => new Vmovaps(encoded);

        public struct Vmovd : ITypedInstruction<Vmovd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovd src) => AsmMnemonics.VMOVD;

            public static implicit operator AsmHexCode(Vmovd src) => src.Encoded;

            public static implicit operator Vmovd(AsmHexCode src) => new Vmovd(src);
        }

        public Vmovd vmovd() => default;

        [MethodImpl(Inline), Op]
        public Vmovd vmovd(AsmHexCode encoded) => new Vmovd(encoded);

        public struct Vmovddup : ITypedInstruction<Vmovddup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovddup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovddup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovddup src) => AsmMnemonics.VMOVDDUP;

            public static implicit operator AsmHexCode(Vmovddup src) => src.Encoded;

            public static implicit operator Vmovddup(AsmHexCode src) => new Vmovddup(src);
        }

        public Vmovddup vmovddup() => default;

        [MethodImpl(Inline), Op]
        public Vmovddup vmovddup(AsmHexCode encoded) => new Vmovddup(encoded);

        public struct Vmovdqa : ITypedInstruction<Vmovdqa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqa src) => AsmMnemonics.VMOVDQA;

            public static implicit operator AsmHexCode(Vmovdqa src) => src.Encoded;

            public static implicit operator Vmovdqa(AsmHexCode src) => new Vmovdqa(src);
        }

        public Vmovdqa vmovdqa() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqa vmovdqa(AsmHexCode encoded) => new Vmovdqa(encoded);

        public struct Vmovdqa32 : ITypedInstruction<Vmovdqa32>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqa32(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQA32;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqa32 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqa32 src) => AsmMnemonics.VMOVDQA32;

            public static implicit operator AsmHexCode(Vmovdqa32 src) => src.Encoded;

            public static implicit operator Vmovdqa32(AsmHexCode src) => new Vmovdqa32(src);
        }

        public Vmovdqa32 vmovdqa32() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqa32 vmovdqa32(AsmHexCode encoded) => new Vmovdqa32(encoded);

        public struct Vmovdqa64 : ITypedInstruction<Vmovdqa64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqa64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQA64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqa64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqa64 src) => AsmMnemonics.VMOVDQA64;

            public static implicit operator AsmHexCode(Vmovdqa64 src) => src.Encoded;

            public static implicit operator Vmovdqa64(AsmHexCode src) => new Vmovdqa64(src);
        }

        public Vmovdqa64 vmovdqa64() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqa64 vmovdqa64(AsmHexCode encoded) => new Vmovdqa64(encoded);

        public struct Vmovdqu : ITypedInstruction<Vmovdqu>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqu(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqu src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqu src) => AsmMnemonics.VMOVDQU;

            public static implicit operator AsmHexCode(Vmovdqu src) => src.Encoded;

            public static implicit operator Vmovdqu(AsmHexCode src) => new Vmovdqu(src);
        }

        public Vmovdqu vmovdqu() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqu vmovdqu(AsmHexCode encoded) => new Vmovdqu(encoded);

        public struct Vmovdqu16 : ITypedInstruction<Vmovdqu16>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqu16(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQU16;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqu16 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqu16 src) => AsmMnemonics.VMOVDQU16;

            public static implicit operator AsmHexCode(Vmovdqu16 src) => src.Encoded;

            public static implicit operator Vmovdqu16(AsmHexCode src) => new Vmovdqu16(src);
        }

        public Vmovdqu16 vmovdqu16() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqu16 vmovdqu16(AsmHexCode encoded) => new Vmovdqu16(encoded);

        public struct Vmovdqu32 : ITypedInstruction<Vmovdqu32>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqu32(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQU32;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqu32 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqu32 src) => AsmMnemonics.VMOVDQU32;

            public static implicit operator AsmHexCode(Vmovdqu32 src) => src.Encoded;

            public static implicit operator Vmovdqu32(AsmHexCode src) => new Vmovdqu32(src);
        }

        public Vmovdqu32 vmovdqu32() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqu32 vmovdqu32(AsmHexCode encoded) => new Vmovdqu32(encoded);

        public struct Vmovdqu64 : ITypedInstruction<Vmovdqu64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqu64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQU64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqu64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqu64 src) => AsmMnemonics.VMOVDQU64;

            public static implicit operator AsmHexCode(Vmovdqu64 src) => src.Encoded;

            public static implicit operator Vmovdqu64(AsmHexCode src) => new Vmovdqu64(src);
        }

        public Vmovdqu64 vmovdqu64() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqu64 vmovdqu64(AsmHexCode encoded) => new Vmovdqu64(encoded);

        public struct Vmovdqu8 : ITypedInstruction<Vmovdqu8>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovdqu8(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVDQU8;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovdqu8 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovdqu8 src) => AsmMnemonics.VMOVDQU8;

            public static implicit operator AsmHexCode(Vmovdqu8 src) => src.Encoded;

            public static implicit operator Vmovdqu8(AsmHexCode src) => new Vmovdqu8(src);
        }

        public Vmovdqu8 vmovdqu8() => default;

        [MethodImpl(Inline), Op]
        public Vmovdqu8 vmovdqu8(AsmHexCode encoded) => new Vmovdqu8(encoded);

        public struct Vmovhlps : ITypedInstruction<Vmovhlps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovhlps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVHLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovhlps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovhlps src) => AsmMnemonics.VMOVHLPS;

            public static implicit operator AsmHexCode(Vmovhlps src) => src.Encoded;

            public static implicit operator Vmovhlps(AsmHexCode src) => new Vmovhlps(src);
        }

        public Vmovhlps vmovhlps() => default;

        [MethodImpl(Inline), Op]
        public Vmovhlps vmovhlps(AsmHexCode encoded) => new Vmovhlps(encoded);

        public struct Vmovhpd : ITypedInstruction<Vmovhpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovhpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVHPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovhpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovhpd src) => AsmMnemonics.VMOVHPD;

            public static implicit operator AsmHexCode(Vmovhpd src) => src.Encoded;

            public static implicit operator Vmovhpd(AsmHexCode src) => new Vmovhpd(src);
        }

        public Vmovhpd vmovhpd() => default;

        [MethodImpl(Inline), Op]
        public Vmovhpd vmovhpd(AsmHexCode encoded) => new Vmovhpd(encoded);

        public struct Vmovhps : ITypedInstruction<Vmovhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovhps src) => AsmMnemonics.VMOVHPS;

            public static implicit operator AsmHexCode(Vmovhps src) => src.Encoded;

            public static implicit operator Vmovhps(AsmHexCode src) => new Vmovhps(src);
        }

        public Vmovhps vmovhps() => default;

        [MethodImpl(Inline), Op]
        public Vmovhps vmovhps(AsmHexCode encoded) => new Vmovhps(encoded);

        public struct Vmovlhps : ITypedInstruction<Vmovlhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovlhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVLHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovlhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovlhps src) => AsmMnemonics.VMOVLHPS;

            public static implicit operator AsmHexCode(Vmovlhps src) => src.Encoded;

            public static implicit operator Vmovlhps(AsmHexCode src) => new Vmovlhps(src);
        }

        public Vmovlhps vmovlhps() => default;

        [MethodImpl(Inline), Op]
        public Vmovlhps vmovlhps(AsmHexCode encoded) => new Vmovlhps(encoded);

        public struct Vmovlpd : ITypedInstruction<Vmovlpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovlpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVLPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovlpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovlpd src) => AsmMnemonics.VMOVLPD;

            public static implicit operator AsmHexCode(Vmovlpd src) => src.Encoded;

            public static implicit operator Vmovlpd(AsmHexCode src) => new Vmovlpd(src);
        }

        public Vmovlpd vmovlpd() => default;

        [MethodImpl(Inline), Op]
        public Vmovlpd vmovlpd(AsmHexCode encoded) => new Vmovlpd(encoded);

        public struct Vmovlps : ITypedInstruction<Vmovlps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovlps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovlps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovlps src) => AsmMnemonics.VMOVLPS;

            public static implicit operator AsmHexCode(Vmovlps src) => src.Encoded;

            public static implicit operator Vmovlps(AsmHexCode src) => new Vmovlps(src);
        }

        public Vmovlps vmovlps() => default;

        [MethodImpl(Inline), Op]
        public Vmovlps vmovlps(AsmHexCode encoded) => new Vmovlps(encoded);

        public struct Vmovmskpd : ITypedInstruction<Vmovmskpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovmskpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVMSKPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovmskpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovmskpd src) => AsmMnemonics.VMOVMSKPD;

            public static implicit operator AsmHexCode(Vmovmskpd src) => src.Encoded;

            public static implicit operator Vmovmskpd(AsmHexCode src) => new Vmovmskpd(src);
        }

        public Vmovmskpd vmovmskpd() => default;

        [MethodImpl(Inline), Op]
        public Vmovmskpd vmovmskpd(AsmHexCode encoded) => new Vmovmskpd(encoded);

        public struct Vmovmskps : ITypedInstruction<Vmovmskps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovmskps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVMSKPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovmskps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovmskps src) => AsmMnemonics.VMOVMSKPS;

            public static implicit operator AsmHexCode(Vmovmskps src) => src.Encoded;

            public static implicit operator Vmovmskps(AsmHexCode src) => new Vmovmskps(src);
        }

        public Vmovmskps vmovmskps() => default;

        [MethodImpl(Inline), Op]
        public Vmovmskps vmovmskps(AsmHexCode encoded) => new Vmovmskps(encoded);

        public struct Vmovntdq : ITypedInstruction<Vmovntdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovntdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVNTDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovntdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovntdq src) => AsmMnemonics.VMOVNTDQ;

            public static implicit operator AsmHexCode(Vmovntdq src) => src.Encoded;

            public static implicit operator Vmovntdq(AsmHexCode src) => new Vmovntdq(src);
        }

        public Vmovntdq vmovntdq() => default;

        [MethodImpl(Inline), Op]
        public Vmovntdq vmovntdq(AsmHexCode encoded) => new Vmovntdq(encoded);

        public struct Vmovntdqa : ITypedInstruction<Vmovntdqa>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovntdqa(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVNTDQA;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovntdqa src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovntdqa src) => AsmMnemonics.VMOVNTDQA;

            public static implicit operator AsmHexCode(Vmovntdqa src) => src.Encoded;

            public static implicit operator Vmovntdqa(AsmHexCode src) => new Vmovntdqa(src);
        }

        public Vmovntdqa vmovntdqa() => default;

        [MethodImpl(Inline), Op]
        public Vmovntdqa vmovntdqa(AsmHexCode encoded) => new Vmovntdqa(encoded);

        public struct Vmovntpd : ITypedInstruction<Vmovntpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovntpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVNTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovntpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovntpd src) => AsmMnemonics.VMOVNTPD;

            public static implicit operator AsmHexCode(Vmovntpd src) => src.Encoded;

            public static implicit operator Vmovntpd(AsmHexCode src) => new Vmovntpd(src);
        }

        public Vmovntpd vmovntpd() => default;

        [MethodImpl(Inline), Op]
        public Vmovntpd vmovntpd(AsmHexCode encoded) => new Vmovntpd(encoded);

        public struct Vmovntps : ITypedInstruction<Vmovntps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovntps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVNTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovntps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovntps src) => AsmMnemonics.VMOVNTPS;

            public static implicit operator AsmHexCode(Vmovntps src) => src.Encoded;

            public static implicit operator Vmovntps(AsmHexCode src) => new Vmovntps(src);
        }

        public Vmovntps vmovntps() => default;

        [MethodImpl(Inline), Op]
        public Vmovntps vmovntps(AsmHexCode encoded) => new Vmovntps(encoded);

        public struct Vmovq : ITypedInstruction<Vmovq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovq src) => AsmMnemonics.VMOVQ;

            public static implicit operator AsmHexCode(Vmovq src) => src.Encoded;

            public static implicit operator Vmovq(AsmHexCode src) => new Vmovq(src);
        }

        public Vmovq vmovq() => default;

        [MethodImpl(Inline), Op]
        public Vmovq vmovq(AsmHexCode encoded) => new Vmovq(encoded);

        public struct Vmovsd : ITypedInstruction<Vmovsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovsd src) => AsmMnemonics.VMOVSD;

            public static implicit operator AsmHexCode(Vmovsd src) => src.Encoded;

            public static implicit operator Vmovsd(AsmHexCode src) => new Vmovsd(src);
        }

        public Vmovsd vmovsd() => default;

        [MethodImpl(Inline), Op]
        public Vmovsd vmovsd(AsmHexCode encoded) => new Vmovsd(encoded);

        public struct Vmovshdup : ITypedInstruction<Vmovshdup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovshdup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVSHDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovshdup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovshdup src) => AsmMnemonics.VMOVSHDUP;

            public static implicit operator AsmHexCode(Vmovshdup src) => src.Encoded;

            public static implicit operator Vmovshdup(AsmHexCode src) => new Vmovshdup(src);
        }

        public Vmovshdup vmovshdup() => default;

        [MethodImpl(Inline), Op]
        public Vmovshdup vmovshdup(AsmHexCode encoded) => new Vmovshdup(encoded);

        public struct Vmovsldup : ITypedInstruction<Vmovsldup>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovsldup(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVSLDUP;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovsldup src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovsldup src) => AsmMnemonics.VMOVSLDUP;

            public static implicit operator AsmHexCode(Vmovsldup src) => src.Encoded;

            public static implicit operator Vmovsldup(AsmHexCode src) => new Vmovsldup(src);
        }

        public Vmovsldup vmovsldup() => default;

        [MethodImpl(Inline), Op]
        public Vmovsldup vmovsldup(AsmHexCode encoded) => new Vmovsldup(encoded);

        public struct Vmovss : ITypedInstruction<Vmovss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovss src) => AsmMnemonics.VMOVSS;

            public static implicit operator AsmHexCode(Vmovss src) => src.Encoded;

            public static implicit operator Vmovss(AsmHexCode src) => new Vmovss(src);
        }

        public Vmovss vmovss() => default;

        [MethodImpl(Inline), Op]
        public Vmovss vmovss(AsmHexCode encoded) => new Vmovss(encoded);

        public struct Vmovupd : ITypedInstruction<Vmovupd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovupd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVUPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovupd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovupd src) => AsmMnemonics.VMOVUPD;

            public static implicit operator AsmHexCode(Vmovupd src) => src.Encoded;

            public static implicit operator Vmovupd(AsmHexCode src) => new Vmovupd(src);
        }

        public Vmovupd vmovupd() => default;

        [MethodImpl(Inline), Op]
        public Vmovupd vmovupd(AsmHexCode encoded) => new Vmovupd(encoded);

        public struct Vmovups : ITypedInstruction<Vmovups>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmovups(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMOVUPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmovups src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmovups src) => AsmMnemonics.VMOVUPS;

            public static implicit operator AsmHexCode(Vmovups src) => src.Encoded;

            public static implicit operator Vmovups(AsmHexCode src) => new Vmovups(src);
        }

        public Vmovups vmovups() => default;

        [MethodImpl(Inline), Op]
        public Vmovups vmovups(AsmHexCode encoded) => new Vmovups(encoded);

        public struct Vmpsadbw : ITypedInstruction<Vmpsadbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmpsadbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMPSADBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmpsadbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmpsadbw src) => AsmMnemonics.VMPSADBW;

            public static implicit operator AsmHexCode(Vmpsadbw src) => src.Encoded;

            public static implicit operator Vmpsadbw(AsmHexCode src) => new Vmpsadbw(src);
        }

        public Vmpsadbw vmpsadbw() => default;

        [MethodImpl(Inline), Op]
        public Vmpsadbw vmpsadbw(AsmHexCode encoded) => new Vmpsadbw(encoded);

        public struct Vmptrld : ITypedInstruction<Vmptrld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmptrld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMPTRLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmptrld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmptrld src) => AsmMnemonics.VMPTRLD;

            public static implicit operator AsmHexCode(Vmptrld src) => src.Encoded;

            public static implicit operator Vmptrld(AsmHexCode src) => new Vmptrld(src);
        }

        public Vmptrld vmptrld() => default;

        [MethodImpl(Inline), Op]
        public Vmptrld vmptrld(AsmHexCode encoded) => new Vmptrld(encoded);

        public struct Vmptrst : ITypedInstruction<Vmptrst>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmptrst(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMPTRST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmptrst src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmptrst src) => AsmMnemonics.VMPTRST;

            public static implicit operator AsmHexCode(Vmptrst src) => src.Encoded;

            public static implicit operator Vmptrst(AsmHexCode src) => new Vmptrst(src);
        }

        public Vmptrst vmptrst() => default;

        [MethodImpl(Inline), Op]
        public Vmptrst vmptrst(AsmHexCode encoded) => new Vmptrst(encoded);

        public struct Vmread : ITypedInstruction<Vmread>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmread(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMREAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmread src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmread src) => AsmMnemonics.VMREAD;

            public static implicit operator AsmHexCode(Vmread src) => src.Encoded;

            public static implicit operator Vmread(AsmHexCode src) => new Vmread(src);
        }

        public Vmread vmread() => default;

        [MethodImpl(Inline), Op]
        public Vmread vmread(AsmHexCode encoded) => new Vmread(encoded);

        public struct Vmresume : ITypedInstruction<Vmresume>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmresume(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMRESUME;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmresume src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmresume src) => AsmMnemonics.VMRESUME;

            public static implicit operator AsmHexCode(Vmresume src) => src.Encoded;

            public static implicit operator Vmresume(AsmHexCode src) => new Vmresume(src);
        }

        public Vmresume vmresume() => default;

        [MethodImpl(Inline), Op]
        public Vmresume vmresume(AsmHexCode encoded) => new Vmresume(encoded);

        public struct Vmrun : ITypedInstruction<Vmrun>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmrun(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMRUN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmrun src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmrun src) => AsmMnemonics.VMRUN;

            public static implicit operator AsmHexCode(Vmrun src) => src.Encoded;

            public static implicit operator Vmrun(AsmHexCode src) => new Vmrun(src);
        }

        public Vmrun vmrun() => default;

        [MethodImpl(Inline), Op]
        public Vmrun vmrun(AsmHexCode encoded) => new Vmrun(encoded);

        public struct Vmsave : ITypedInstruction<Vmsave>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmsave(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMSAVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmsave src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmsave src) => AsmMnemonics.VMSAVE;

            public static implicit operator AsmHexCode(Vmsave src) => src.Encoded;

            public static implicit operator Vmsave(AsmHexCode src) => new Vmsave(src);
        }

        public Vmsave vmsave() => default;

        [MethodImpl(Inline), Op]
        public Vmsave vmsave(AsmHexCode encoded) => new Vmsave(encoded);

        public struct Vmulpd : ITypedInstruction<Vmulpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmulpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMULPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmulpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmulpd src) => AsmMnemonics.VMULPD;

            public static implicit operator AsmHexCode(Vmulpd src) => src.Encoded;

            public static implicit operator Vmulpd(AsmHexCode src) => new Vmulpd(src);
        }

        public Vmulpd vmulpd() => default;

        [MethodImpl(Inline), Op]
        public Vmulpd vmulpd(AsmHexCode encoded) => new Vmulpd(encoded);

        public struct Vmulps : ITypedInstruction<Vmulps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmulps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMULPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmulps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmulps src) => AsmMnemonics.VMULPS;

            public static implicit operator AsmHexCode(Vmulps src) => src.Encoded;

            public static implicit operator Vmulps(AsmHexCode src) => new Vmulps(src);
        }

        public Vmulps vmulps() => default;

        [MethodImpl(Inline), Op]
        public Vmulps vmulps(AsmHexCode encoded) => new Vmulps(encoded);

        public struct Vmulsd : ITypedInstruction<Vmulsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmulsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMULSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmulsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmulsd src) => AsmMnemonics.VMULSD;

            public static implicit operator AsmHexCode(Vmulsd src) => src.Encoded;

            public static implicit operator Vmulsd(AsmHexCode src) => new Vmulsd(src);
        }

        public Vmulsd vmulsd() => default;

        [MethodImpl(Inline), Op]
        public Vmulsd vmulsd(AsmHexCode encoded) => new Vmulsd(encoded);

        public struct Vmulss : ITypedInstruction<Vmulss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmulss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMULSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmulss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmulss src) => AsmMnemonics.VMULSS;

            public static implicit operator AsmHexCode(Vmulss src) => src.Encoded;

            public static implicit operator Vmulss(AsmHexCode src) => new Vmulss(src);
        }

        public Vmulss vmulss() => default;

        [MethodImpl(Inline), Op]
        public Vmulss vmulss(AsmHexCode encoded) => new Vmulss(encoded);

        public struct Vmwrite : ITypedInstruction<Vmwrite>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmwrite(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMWRITE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmwrite src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmwrite src) => AsmMnemonics.VMWRITE;

            public static implicit operator AsmHexCode(Vmwrite src) => src.Encoded;

            public static implicit operator Vmwrite(AsmHexCode src) => new Vmwrite(src);
        }

        public Vmwrite vmwrite() => default;

        [MethodImpl(Inline), Op]
        public Vmwrite vmwrite(AsmHexCode encoded) => new Vmwrite(encoded);

        public struct Vmxoff : ITypedInstruction<Vmxoff>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmxoff(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMXOFF;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmxoff src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmxoff src) => AsmMnemonics.VMXOFF;

            public static implicit operator AsmHexCode(Vmxoff src) => src.Encoded;

            public static implicit operator Vmxoff(AsmHexCode src) => new Vmxoff(src);
        }

        public Vmxoff vmxoff() => default;

        [MethodImpl(Inline), Op]
        public Vmxoff vmxoff(AsmHexCode encoded) => new Vmxoff(encoded);

        public struct Vmxon : ITypedInstruction<Vmxon>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vmxon(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VMXON;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vmxon src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vmxon src) => AsmMnemonics.VMXON;

            public static implicit operator AsmHexCode(Vmxon src) => src.Encoded;

            public static implicit operator Vmxon(AsmHexCode src) => new Vmxon(src);
        }

        public Vmxon vmxon() => default;

        [MethodImpl(Inline), Op]
        public Vmxon vmxon(AsmHexCode encoded) => new Vmxon(encoded);

        public struct Vorpd : ITypedInstruction<Vorpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vorpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VORPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vorpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vorpd src) => AsmMnemonics.VORPD;

            public static implicit operator AsmHexCode(Vorpd src) => src.Encoded;

            public static implicit operator Vorpd(AsmHexCode src) => new Vorpd(src);
        }

        public Vorpd vorpd() => default;

        [MethodImpl(Inline), Op]
        public Vorpd vorpd(AsmHexCode encoded) => new Vorpd(encoded);

        public struct Vorps : ITypedInstruction<Vorps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vorps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VORPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vorps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vorps src) => AsmMnemonics.VORPS;

            public static implicit operator AsmHexCode(Vorps src) => src.Encoded;

            public static implicit operator Vorps(AsmHexCode src) => new Vorps(src);
        }

        public Vorps vorps() => default;

        [MethodImpl(Inline), Op]
        public Vorps vorps(AsmHexCode encoded) => new Vorps(encoded);

        public struct Vp2intersectd : ITypedInstruction<Vp2intersectd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vp2intersectd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VP2INTERSECTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vp2intersectd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vp2intersectd src) => AsmMnemonics.VP2INTERSECTD;

            public static implicit operator AsmHexCode(Vp2intersectd src) => src.Encoded;

            public static implicit operator Vp2intersectd(AsmHexCode src) => new Vp2intersectd(src);
        }

        public Vp2intersectd vp2intersectd() => default;

        [MethodImpl(Inline), Op]
        public Vp2intersectd vp2intersectd(AsmHexCode encoded) => new Vp2intersectd(encoded);

        public struct Vp2intersectq : ITypedInstruction<Vp2intersectq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vp2intersectq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VP2INTERSECTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vp2intersectq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vp2intersectq src) => AsmMnemonics.VP2INTERSECTQ;

            public static implicit operator AsmHexCode(Vp2intersectq src) => src.Encoded;

            public static implicit operator Vp2intersectq(AsmHexCode src) => new Vp2intersectq(src);
        }

        public Vp2intersectq vp2intersectq() => default;

        [MethodImpl(Inline), Op]
        public Vp2intersectq vp2intersectq(AsmHexCode encoded) => new Vp2intersectq(encoded);

        public struct Vp4dpwssd : ITypedInstruction<Vp4dpwssd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vp4dpwssd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VP4DPWSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vp4dpwssd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vp4dpwssd src) => AsmMnemonics.VP4DPWSSD;

            public static implicit operator AsmHexCode(Vp4dpwssd src) => src.Encoded;

            public static implicit operator Vp4dpwssd(AsmHexCode src) => new Vp4dpwssd(src);
        }

        public Vp4dpwssd vp4dpwssd() => default;

        [MethodImpl(Inline), Op]
        public Vp4dpwssd vp4dpwssd(AsmHexCode encoded) => new Vp4dpwssd(encoded);

        public struct Vp4dpwssds : ITypedInstruction<Vp4dpwssds>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vp4dpwssds(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VP4DPWSSDS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vp4dpwssds src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vp4dpwssds src) => AsmMnemonics.VP4DPWSSDS;

            public static implicit operator AsmHexCode(Vp4dpwssds src) => src.Encoded;

            public static implicit operator Vp4dpwssds(AsmHexCode src) => new Vp4dpwssds(src);
        }

        public Vp4dpwssds vp4dpwssds() => default;

        [MethodImpl(Inline), Op]
        public Vp4dpwssds vp4dpwssds(AsmHexCode encoded) => new Vp4dpwssds(encoded);

        public struct Vpabsb : ITypedInstruction<Vpabsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpabsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPABSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpabsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpabsb src) => AsmMnemonics.VPABSB;

            public static implicit operator AsmHexCode(Vpabsb src) => src.Encoded;

            public static implicit operator Vpabsb(AsmHexCode src) => new Vpabsb(src);
        }

        public Vpabsb vpabsb() => default;

        [MethodImpl(Inline), Op]
        public Vpabsb vpabsb(AsmHexCode encoded) => new Vpabsb(encoded);

        public struct Vpabsd : ITypedInstruction<Vpabsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpabsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPABSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpabsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpabsd src) => AsmMnemonics.VPABSD;

            public static implicit operator AsmHexCode(Vpabsd src) => src.Encoded;

            public static implicit operator Vpabsd(AsmHexCode src) => new Vpabsd(src);
        }

        public Vpabsd vpabsd() => default;

        [MethodImpl(Inline), Op]
        public Vpabsd vpabsd(AsmHexCode encoded) => new Vpabsd(encoded);

        public struct Vpabsq : ITypedInstruction<Vpabsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpabsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPABSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpabsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpabsq src) => AsmMnemonics.VPABSQ;

            public static implicit operator AsmHexCode(Vpabsq src) => src.Encoded;

            public static implicit operator Vpabsq(AsmHexCode src) => new Vpabsq(src);
        }

        public Vpabsq vpabsq() => default;

        [MethodImpl(Inline), Op]
        public Vpabsq vpabsq(AsmHexCode encoded) => new Vpabsq(encoded);

        public struct Vpabsw : ITypedInstruction<Vpabsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpabsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPABSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpabsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpabsw src) => AsmMnemonics.VPABSW;

            public static implicit operator AsmHexCode(Vpabsw src) => src.Encoded;

            public static implicit operator Vpabsw(AsmHexCode src) => new Vpabsw(src);
        }

        public Vpabsw vpabsw() => default;

        [MethodImpl(Inline), Op]
        public Vpabsw vpabsw(AsmHexCode encoded) => new Vpabsw(encoded);

        public struct Vpackssdw : ITypedInstruction<Vpackssdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpackssdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPACKSSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpackssdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpackssdw src) => AsmMnemonics.VPACKSSDW;

            public static implicit operator AsmHexCode(Vpackssdw src) => src.Encoded;

            public static implicit operator Vpackssdw(AsmHexCode src) => new Vpackssdw(src);
        }

        public Vpackssdw vpackssdw() => default;

        [MethodImpl(Inline), Op]
        public Vpackssdw vpackssdw(AsmHexCode encoded) => new Vpackssdw(encoded);

        public struct Vpacksswb : ITypedInstruction<Vpacksswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpacksswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPACKSSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpacksswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpacksswb src) => AsmMnemonics.VPACKSSWB;

            public static implicit operator AsmHexCode(Vpacksswb src) => src.Encoded;

            public static implicit operator Vpacksswb(AsmHexCode src) => new Vpacksswb(src);
        }

        public Vpacksswb vpacksswb() => default;

        [MethodImpl(Inline), Op]
        public Vpacksswb vpacksswb(AsmHexCode encoded) => new Vpacksswb(encoded);

        public struct Vpackusdw : ITypedInstruction<Vpackusdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpackusdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPACKUSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpackusdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpackusdw src) => AsmMnemonics.VPACKUSDW;

            public static implicit operator AsmHexCode(Vpackusdw src) => src.Encoded;

            public static implicit operator Vpackusdw(AsmHexCode src) => new Vpackusdw(src);
        }

        public Vpackusdw vpackusdw() => default;

        [MethodImpl(Inline), Op]
        public Vpackusdw vpackusdw(AsmHexCode encoded) => new Vpackusdw(encoded);

        public struct Vpackuswb : ITypedInstruction<Vpackuswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpackuswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPACKUSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpackuswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpackuswb src) => AsmMnemonics.VPACKUSWB;

            public static implicit operator AsmHexCode(Vpackuswb src) => src.Encoded;

            public static implicit operator Vpackuswb(AsmHexCode src) => new Vpackuswb(src);
        }

        public Vpackuswb vpackuswb() => default;

        [MethodImpl(Inline), Op]
        public Vpackuswb vpackuswb(AsmHexCode encoded) => new Vpackuswb(encoded);

        public struct Vpaddb : ITypedInstruction<Vpaddb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddb src) => AsmMnemonics.VPADDB;

            public static implicit operator AsmHexCode(Vpaddb src) => src.Encoded;

            public static implicit operator Vpaddb(AsmHexCode src) => new Vpaddb(src);
        }

        public Vpaddb vpaddb() => default;

        [MethodImpl(Inline), Op]
        public Vpaddb vpaddb(AsmHexCode encoded) => new Vpaddb(encoded);

        public struct Vpaddd : ITypedInstruction<Vpaddd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddd src) => AsmMnemonics.VPADDD;

            public static implicit operator AsmHexCode(Vpaddd src) => src.Encoded;

            public static implicit operator Vpaddd(AsmHexCode src) => new Vpaddd(src);
        }

        public Vpaddd vpaddd() => default;

        [MethodImpl(Inline), Op]
        public Vpaddd vpaddd(AsmHexCode encoded) => new Vpaddd(encoded);

        public struct Vpaddq : ITypedInstruction<Vpaddq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddq src) => AsmMnemonics.VPADDQ;

            public static implicit operator AsmHexCode(Vpaddq src) => src.Encoded;

            public static implicit operator Vpaddq(AsmHexCode src) => new Vpaddq(src);
        }

        public Vpaddq vpaddq() => default;

        [MethodImpl(Inline), Op]
        public Vpaddq vpaddq(AsmHexCode encoded) => new Vpaddq(encoded);

        public struct Vpaddsb : ITypedInstruction<Vpaddsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddsb src) => AsmMnemonics.VPADDSB;

            public static implicit operator AsmHexCode(Vpaddsb src) => src.Encoded;

            public static implicit operator Vpaddsb(AsmHexCode src) => new Vpaddsb(src);
        }

        public Vpaddsb vpaddsb() => default;

        [MethodImpl(Inline), Op]
        public Vpaddsb vpaddsb(AsmHexCode encoded) => new Vpaddsb(encoded);

        public struct Vpaddsw : ITypedInstruction<Vpaddsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddsw src) => AsmMnemonics.VPADDSW;

            public static implicit operator AsmHexCode(Vpaddsw src) => src.Encoded;

            public static implicit operator Vpaddsw(AsmHexCode src) => new Vpaddsw(src);
        }

        public Vpaddsw vpaddsw() => default;

        [MethodImpl(Inline), Op]
        public Vpaddsw vpaddsw(AsmHexCode encoded) => new Vpaddsw(encoded);

        public struct Vpaddusb : ITypedInstruction<Vpaddusb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddusb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDUSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddusb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddusb src) => AsmMnemonics.VPADDUSB;

            public static implicit operator AsmHexCode(Vpaddusb src) => src.Encoded;

            public static implicit operator Vpaddusb(AsmHexCode src) => new Vpaddusb(src);
        }

        public Vpaddusb vpaddusb() => default;

        [MethodImpl(Inline), Op]
        public Vpaddusb vpaddusb(AsmHexCode encoded) => new Vpaddusb(encoded);

        public struct Vpaddusw : ITypedInstruction<Vpaddusw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddusw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDUSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddusw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddusw src) => AsmMnemonics.VPADDUSW;

            public static implicit operator AsmHexCode(Vpaddusw src) => src.Encoded;

            public static implicit operator Vpaddusw(AsmHexCode src) => new Vpaddusw(src);
        }

        public Vpaddusw vpaddusw() => default;

        [MethodImpl(Inline), Op]
        public Vpaddusw vpaddusw(AsmHexCode encoded) => new Vpaddusw(encoded);

        public struct Vpaddw : ITypedInstruction<Vpaddw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpaddw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPADDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpaddw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpaddw src) => AsmMnemonics.VPADDW;

            public static implicit operator AsmHexCode(Vpaddw src) => src.Encoded;

            public static implicit operator Vpaddw(AsmHexCode src) => new Vpaddw(src);
        }

        public Vpaddw vpaddw() => default;

        [MethodImpl(Inline), Op]
        public Vpaddw vpaddw(AsmHexCode encoded) => new Vpaddw(encoded);

        public struct Vpalignr : ITypedInstruction<Vpalignr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpalignr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPALIGNR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpalignr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpalignr src) => AsmMnemonics.VPALIGNR;

            public static implicit operator AsmHexCode(Vpalignr src) => src.Encoded;

            public static implicit operator Vpalignr(AsmHexCode src) => new Vpalignr(src);
        }

        public Vpalignr vpalignr() => default;

        [MethodImpl(Inline), Op]
        public Vpalignr vpalignr(AsmHexCode encoded) => new Vpalignr(encoded);

        public struct Vpand : ITypedInstruction<Vpand>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpand(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPAND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpand src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpand src) => AsmMnemonics.VPAND;

            public static implicit operator AsmHexCode(Vpand src) => src.Encoded;

            public static implicit operator Vpand(AsmHexCode src) => new Vpand(src);
        }

        public Vpand vpand() => default;

        [MethodImpl(Inline), Op]
        public Vpand vpand(AsmHexCode encoded) => new Vpand(encoded);

        public struct Vpandd : ITypedInstruction<Vpandd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpandd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPANDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpandd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpandd src) => AsmMnemonics.VPANDD;

            public static implicit operator AsmHexCode(Vpandd src) => src.Encoded;

            public static implicit operator Vpandd(AsmHexCode src) => new Vpandd(src);
        }

        public Vpandd vpandd() => default;

        [MethodImpl(Inline), Op]
        public Vpandd vpandd(AsmHexCode encoded) => new Vpandd(encoded);

        public struct Vpandn : ITypedInstruction<Vpandn>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpandn(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPANDN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpandn src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpandn src) => AsmMnemonics.VPANDN;

            public static implicit operator AsmHexCode(Vpandn src) => src.Encoded;

            public static implicit operator Vpandn(AsmHexCode src) => new Vpandn(src);
        }

        public Vpandn vpandn() => default;

        [MethodImpl(Inline), Op]
        public Vpandn vpandn(AsmHexCode encoded) => new Vpandn(encoded);

        public struct Vpandnd : ITypedInstruction<Vpandnd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpandnd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPANDND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpandnd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpandnd src) => AsmMnemonics.VPANDND;

            public static implicit operator AsmHexCode(Vpandnd src) => src.Encoded;

            public static implicit operator Vpandnd(AsmHexCode src) => new Vpandnd(src);
        }

        public Vpandnd vpandnd() => default;

        [MethodImpl(Inline), Op]
        public Vpandnd vpandnd(AsmHexCode encoded) => new Vpandnd(encoded);

        public struct Vpandnq : ITypedInstruction<Vpandnq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpandnq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPANDNQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpandnq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpandnq src) => AsmMnemonics.VPANDNQ;

            public static implicit operator AsmHexCode(Vpandnq src) => src.Encoded;

            public static implicit operator Vpandnq(AsmHexCode src) => new Vpandnq(src);
        }

        public Vpandnq vpandnq() => default;

        [MethodImpl(Inline), Op]
        public Vpandnq vpandnq(AsmHexCode encoded) => new Vpandnq(encoded);

        public struct Vpandq : ITypedInstruction<Vpandq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpandq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPANDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpandq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpandq src) => AsmMnemonics.VPANDQ;

            public static implicit operator AsmHexCode(Vpandq src) => src.Encoded;

            public static implicit operator Vpandq(AsmHexCode src) => new Vpandq(src);
        }

        public Vpandq vpandq() => default;

        [MethodImpl(Inline), Op]
        public Vpandq vpandq(AsmHexCode encoded) => new Vpandq(encoded);

        public struct Vpavgb : ITypedInstruction<Vpavgb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpavgb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPAVGB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpavgb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpavgb src) => AsmMnemonics.VPAVGB;

            public static implicit operator AsmHexCode(Vpavgb src) => src.Encoded;

            public static implicit operator Vpavgb(AsmHexCode src) => new Vpavgb(src);
        }

        public Vpavgb vpavgb() => default;

        [MethodImpl(Inline), Op]
        public Vpavgb vpavgb(AsmHexCode encoded) => new Vpavgb(encoded);

        public struct Vpavgw : ITypedInstruction<Vpavgw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpavgw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPAVGW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpavgw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpavgw src) => AsmMnemonics.VPAVGW;

            public static implicit operator AsmHexCode(Vpavgw src) => src.Encoded;

            public static implicit operator Vpavgw(AsmHexCode src) => new Vpavgw(src);
        }

        public Vpavgw vpavgw() => default;

        [MethodImpl(Inline), Op]
        public Vpavgw vpavgw(AsmHexCode encoded) => new Vpavgw(encoded);

        public struct Vpblendd : ITypedInstruction<Vpblendd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendd src) => AsmMnemonics.VPBLENDD;

            public static implicit operator AsmHexCode(Vpblendd src) => src.Encoded;

            public static implicit operator Vpblendd(AsmHexCode src) => new Vpblendd(src);
        }

        public Vpblendd vpblendd() => default;

        [MethodImpl(Inline), Op]
        public Vpblendd vpblendd(AsmHexCode encoded) => new Vpblendd(encoded);

        public struct Vpblendmb : ITypedInstruction<Vpblendmb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendmb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendmb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendmb src) => AsmMnemonics.VPBLENDMB;

            public static implicit operator AsmHexCode(Vpblendmb src) => src.Encoded;

            public static implicit operator Vpblendmb(AsmHexCode src) => new Vpblendmb(src);
        }

        public Vpblendmb vpblendmb() => default;

        [MethodImpl(Inline), Op]
        public Vpblendmb vpblendmb(AsmHexCode encoded) => new Vpblendmb(encoded);

        public struct Vpblendmd : ITypedInstruction<Vpblendmd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendmd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendmd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendmd src) => AsmMnemonics.VPBLENDMD;

            public static implicit operator AsmHexCode(Vpblendmd src) => src.Encoded;

            public static implicit operator Vpblendmd(AsmHexCode src) => new Vpblendmd(src);
        }

        public Vpblendmd vpblendmd() => default;

        [MethodImpl(Inline), Op]
        public Vpblendmd vpblendmd(AsmHexCode encoded) => new Vpblendmd(encoded);

        public struct Vpblendmq : ITypedInstruction<Vpblendmq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendmq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDMQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendmq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendmq src) => AsmMnemonics.VPBLENDMQ;

            public static implicit operator AsmHexCode(Vpblendmq src) => src.Encoded;

            public static implicit operator Vpblendmq(AsmHexCode src) => new Vpblendmq(src);
        }

        public Vpblendmq vpblendmq() => default;

        [MethodImpl(Inline), Op]
        public Vpblendmq vpblendmq(AsmHexCode encoded) => new Vpblendmq(encoded);

        public struct Vpblendmw : ITypedInstruction<Vpblendmw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendmw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDMW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendmw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendmw src) => AsmMnemonics.VPBLENDMW;

            public static implicit operator AsmHexCode(Vpblendmw src) => src.Encoded;

            public static implicit operator Vpblendmw(AsmHexCode src) => new Vpblendmw(src);
        }

        public Vpblendmw vpblendmw() => default;

        [MethodImpl(Inline), Op]
        public Vpblendmw vpblendmw(AsmHexCode encoded) => new Vpblendmw(encoded);

        public struct Vpblendvb : ITypedInstruction<Vpblendvb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendvb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDVB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendvb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendvb src) => AsmMnemonics.VPBLENDVB;

            public static implicit operator AsmHexCode(Vpblendvb src) => src.Encoded;

            public static implicit operator Vpblendvb(AsmHexCode src) => new Vpblendvb(src);
        }

        public Vpblendvb vpblendvb() => default;

        [MethodImpl(Inline), Op]
        public Vpblendvb vpblendvb(AsmHexCode encoded) => new Vpblendvb(encoded);

        public struct Vpblendw : ITypedInstruction<Vpblendw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpblendw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBLENDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpblendw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpblendw src) => AsmMnemonics.VPBLENDW;

            public static implicit operator AsmHexCode(Vpblendw src) => src.Encoded;

            public static implicit operator Vpblendw(AsmHexCode src) => new Vpblendw(src);
        }

        public Vpblendw vpblendw() => default;

        [MethodImpl(Inline), Op]
        public Vpblendw vpblendw(AsmHexCode encoded) => new Vpblendw(encoded);

        public struct Vpbroadcastb : ITypedInstruction<Vpbroadcastb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastb src) => AsmMnemonics.VPBROADCASTB;

            public static implicit operator AsmHexCode(Vpbroadcastb src) => src.Encoded;

            public static implicit operator Vpbroadcastb(AsmHexCode src) => new Vpbroadcastb(src);
        }

        public Vpbroadcastb vpbroadcastb() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastb vpbroadcastb(AsmHexCode encoded) => new Vpbroadcastb(encoded);

        public struct Vpbroadcastd : ITypedInstruction<Vpbroadcastd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastd src) => AsmMnemonics.VPBROADCASTD;

            public static implicit operator AsmHexCode(Vpbroadcastd src) => src.Encoded;

            public static implicit operator Vpbroadcastd(AsmHexCode src) => new Vpbroadcastd(src);
        }

        public Vpbroadcastd vpbroadcastd() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastd vpbroadcastd(AsmHexCode encoded) => new Vpbroadcastd(encoded);

        public struct Vpbroadcastmb2q : ITypedInstruction<Vpbroadcastmb2q>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastmb2q(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTMB2Q;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastmb2q src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastmb2q src) => AsmMnemonics.VPBROADCASTMB2Q;

            public static implicit operator AsmHexCode(Vpbroadcastmb2q src) => src.Encoded;

            public static implicit operator Vpbroadcastmb2q(AsmHexCode src) => new Vpbroadcastmb2q(src);
        }

        public Vpbroadcastmb2q vpbroadcastmb2q() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastmb2q vpbroadcastmb2q(AsmHexCode encoded) => new Vpbroadcastmb2q(encoded);

        public struct Vpbroadcastmw2d : ITypedInstruction<Vpbroadcastmw2d>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastmw2d(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTMW2D;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastmw2d src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastmw2d src) => AsmMnemonics.VPBROADCASTMW2D;

            public static implicit operator AsmHexCode(Vpbroadcastmw2d src) => src.Encoded;

            public static implicit operator Vpbroadcastmw2d(AsmHexCode src) => new Vpbroadcastmw2d(src);
        }

        public Vpbroadcastmw2d vpbroadcastmw2d() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastmw2d vpbroadcastmw2d(AsmHexCode encoded) => new Vpbroadcastmw2d(encoded);

        public struct Vpbroadcastq : ITypedInstruction<Vpbroadcastq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastq src) => AsmMnemonics.VPBROADCASTQ;

            public static implicit operator AsmHexCode(Vpbroadcastq src) => src.Encoded;

            public static implicit operator Vpbroadcastq(AsmHexCode src) => new Vpbroadcastq(src);
        }

        public Vpbroadcastq vpbroadcastq() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastq vpbroadcastq(AsmHexCode encoded) => new Vpbroadcastq(encoded);

        public struct Vpbroadcastw : ITypedInstruction<Vpbroadcastw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpbroadcastw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPBROADCASTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpbroadcastw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpbroadcastw src) => AsmMnemonics.VPBROADCASTW;

            public static implicit operator AsmHexCode(Vpbroadcastw src) => src.Encoded;

            public static implicit operator Vpbroadcastw(AsmHexCode src) => new Vpbroadcastw(src);
        }

        public Vpbroadcastw vpbroadcastw() => default;

        [MethodImpl(Inline), Op]
        public Vpbroadcastw vpbroadcastw(AsmHexCode encoded) => new Vpbroadcastw(encoded);

        public struct Vpclmulqdq : ITypedInstruction<Vpclmulqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpclmulqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCLMULQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpclmulqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpclmulqdq src) => AsmMnemonics.VPCLMULQDQ;

            public static implicit operator AsmHexCode(Vpclmulqdq src) => src.Encoded;

            public static implicit operator Vpclmulqdq(AsmHexCode src) => new Vpclmulqdq(src);
        }

        public Vpclmulqdq vpclmulqdq() => default;

        [MethodImpl(Inline), Op]
        public Vpclmulqdq vpclmulqdq(AsmHexCode encoded) => new Vpclmulqdq(encoded);

        public struct Vpcmov : ITypedInstruction<Vpcmov>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmov(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMOV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmov src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmov src) => AsmMnemonics.VPCMOV;

            public static implicit operator AsmHexCode(Vpcmov src) => src.Encoded;

            public static implicit operator Vpcmov(AsmHexCode src) => new Vpcmov(src);
        }

        public Vpcmov vpcmov() => default;

        [MethodImpl(Inline), Op]
        public Vpcmov vpcmov(AsmHexCode encoded) => new Vpcmov(encoded);

        public struct Vpcmpb : ITypedInstruction<Vpcmpb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpb src) => AsmMnemonics.VPCMPB;

            public static implicit operator AsmHexCode(Vpcmpb src) => src.Encoded;

            public static implicit operator Vpcmpb(AsmHexCode src) => new Vpcmpb(src);
        }

        public Vpcmpb vpcmpb() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpb vpcmpb(AsmHexCode encoded) => new Vpcmpb(encoded);

        public struct Vpcmpd : ITypedInstruction<Vpcmpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpd src) => AsmMnemonics.VPCMPD;

            public static implicit operator AsmHexCode(Vpcmpd src) => src.Encoded;

            public static implicit operator Vpcmpd(AsmHexCode src) => new Vpcmpd(src);
        }

        public Vpcmpd vpcmpd() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpd vpcmpd(AsmHexCode encoded) => new Vpcmpd(encoded);

        public struct Vpcmpeqb : ITypedInstruction<Vpcmpeqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpeqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPEQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpeqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpeqb src) => AsmMnemonics.VPCMPEQB;

            public static implicit operator AsmHexCode(Vpcmpeqb src) => src.Encoded;

            public static implicit operator Vpcmpeqb(AsmHexCode src) => new Vpcmpeqb(src);
        }

        public Vpcmpeqb vpcmpeqb() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpeqb vpcmpeqb(AsmHexCode encoded) => new Vpcmpeqb(encoded);

        public struct Vpcmpeqd : ITypedInstruction<Vpcmpeqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpeqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPEQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpeqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpeqd src) => AsmMnemonics.VPCMPEQD;

            public static implicit operator AsmHexCode(Vpcmpeqd src) => src.Encoded;

            public static implicit operator Vpcmpeqd(AsmHexCode src) => new Vpcmpeqd(src);
        }

        public Vpcmpeqd vpcmpeqd() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpeqd vpcmpeqd(AsmHexCode encoded) => new Vpcmpeqd(encoded);

        public struct Vpcmpeqq : ITypedInstruction<Vpcmpeqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpeqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPEQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpeqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpeqq src) => AsmMnemonics.VPCMPEQQ;

            public static implicit operator AsmHexCode(Vpcmpeqq src) => src.Encoded;

            public static implicit operator Vpcmpeqq(AsmHexCode src) => new Vpcmpeqq(src);
        }

        public Vpcmpeqq vpcmpeqq() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpeqq vpcmpeqq(AsmHexCode encoded) => new Vpcmpeqq(encoded);

        public struct Vpcmpeqw : ITypedInstruction<Vpcmpeqw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpeqw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPEQW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpeqw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpeqw src) => AsmMnemonics.VPCMPEQW;

            public static implicit operator AsmHexCode(Vpcmpeqw src) => src.Encoded;

            public static implicit operator Vpcmpeqw(AsmHexCode src) => new Vpcmpeqw(src);
        }

        public Vpcmpeqw vpcmpeqw() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpeqw vpcmpeqw(AsmHexCode encoded) => new Vpcmpeqw(encoded);

        public struct Vpcmpestri : ITypedInstruction<Vpcmpestri>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpestri(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPESTRI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpestri src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpestri src) => AsmMnemonics.VPCMPESTRI;

            public static implicit operator AsmHexCode(Vpcmpestri src) => src.Encoded;

            public static implicit operator Vpcmpestri(AsmHexCode src) => new Vpcmpestri(src);
        }

        public Vpcmpestri vpcmpestri() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpestri vpcmpestri(AsmHexCode encoded) => new Vpcmpestri(encoded);

        public struct Vpcmpestri64 : ITypedInstruction<Vpcmpestri64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpestri64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPESTRI64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpestri64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpestri64 src) => AsmMnemonics.VPCMPESTRI64;

            public static implicit operator AsmHexCode(Vpcmpestri64 src) => src.Encoded;

            public static implicit operator Vpcmpestri64(AsmHexCode src) => new Vpcmpestri64(src);
        }

        public Vpcmpestri64 vpcmpestri64() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpestri64 vpcmpestri64(AsmHexCode encoded) => new Vpcmpestri64(encoded);

        public struct Vpcmpestrm : ITypedInstruction<Vpcmpestrm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpestrm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPESTRM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpestrm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpestrm src) => AsmMnemonics.VPCMPESTRM;

            public static implicit operator AsmHexCode(Vpcmpestrm src) => src.Encoded;

            public static implicit operator Vpcmpestrm(AsmHexCode src) => new Vpcmpestrm(src);
        }

        public Vpcmpestrm vpcmpestrm() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpestrm vpcmpestrm(AsmHexCode encoded) => new Vpcmpestrm(encoded);

        public struct Vpcmpestrm64 : ITypedInstruction<Vpcmpestrm64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpestrm64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPESTRM64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpestrm64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpestrm64 src) => AsmMnemonics.VPCMPESTRM64;

            public static implicit operator AsmHexCode(Vpcmpestrm64 src) => src.Encoded;

            public static implicit operator Vpcmpestrm64(AsmHexCode src) => new Vpcmpestrm64(src);
        }

        public Vpcmpestrm64 vpcmpestrm64() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpestrm64 vpcmpestrm64(AsmHexCode encoded) => new Vpcmpestrm64(encoded);

        public struct Vpcmpgtb : ITypedInstruction<Vpcmpgtb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpgtb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPGTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpgtb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpgtb src) => AsmMnemonics.VPCMPGTB;

            public static implicit operator AsmHexCode(Vpcmpgtb src) => src.Encoded;

            public static implicit operator Vpcmpgtb(AsmHexCode src) => new Vpcmpgtb(src);
        }

        public Vpcmpgtb vpcmpgtb() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpgtb vpcmpgtb(AsmHexCode encoded) => new Vpcmpgtb(encoded);

        public struct Vpcmpgtd : ITypedInstruction<Vpcmpgtd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpgtd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPGTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpgtd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpgtd src) => AsmMnemonics.VPCMPGTD;

            public static implicit operator AsmHexCode(Vpcmpgtd src) => src.Encoded;

            public static implicit operator Vpcmpgtd(AsmHexCode src) => new Vpcmpgtd(src);
        }

        public Vpcmpgtd vpcmpgtd() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpgtd vpcmpgtd(AsmHexCode encoded) => new Vpcmpgtd(encoded);

        public struct Vpcmpgtq : ITypedInstruction<Vpcmpgtq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpgtq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPGTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpgtq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpgtq src) => AsmMnemonics.VPCMPGTQ;

            public static implicit operator AsmHexCode(Vpcmpgtq src) => src.Encoded;

            public static implicit operator Vpcmpgtq(AsmHexCode src) => new Vpcmpgtq(src);
        }

        public Vpcmpgtq vpcmpgtq() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpgtq vpcmpgtq(AsmHexCode encoded) => new Vpcmpgtq(encoded);

        public struct Vpcmpgtw : ITypedInstruction<Vpcmpgtw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpgtw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPGTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpgtw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpgtw src) => AsmMnemonics.VPCMPGTW;

            public static implicit operator AsmHexCode(Vpcmpgtw src) => src.Encoded;

            public static implicit operator Vpcmpgtw(AsmHexCode src) => new Vpcmpgtw(src);
        }

        public Vpcmpgtw vpcmpgtw() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpgtw vpcmpgtw(AsmHexCode encoded) => new Vpcmpgtw(encoded);

        public struct Vpcmpistri : ITypedInstruction<Vpcmpistri>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpistri(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPISTRI;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpistri src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpistri src) => AsmMnemonics.VPCMPISTRI;

            public static implicit operator AsmHexCode(Vpcmpistri src) => src.Encoded;

            public static implicit operator Vpcmpistri(AsmHexCode src) => new Vpcmpistri(src);
        }

        public Vpcmpistri vpcmpistri() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpistri vpcmpistri(AsmHexCode encoded) => new Vpcmpistri(encoded);

        public struct Vpcmpistri64 : ITypedInstruction<Vpcmpistri64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpistri64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPISTRI64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpistri64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpistri64 src) => AsmMnemonics.VPCMPISTRI64;

            public static implicit operator AsmHexCode(Vpcmpistri64 src) => src.Encoded;

            public static implicit operator Vpcmpistri64(AsmHexCode src) => new Vpcmpistri64(src);
        }

        public Vpcmpistri64 vpcmpistri64() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpistri64 vpcmpistri64(AsmHexCode encoded) => new Vpcmpistri64(encoded);

        public struct Vpcmpistrm : ITypedInstruction<Vpcmpistrm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpistrm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPISTRM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpistrm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpistrm src) => AsmMnemonics.VPCMPISTRM;

            public static implicit operator AsmHexCode(Vpcmpistrm src) => src.Encoded;

            public static implicit operator Vpcmpistrm(AsmHexCode src) => new Vpcmpistrm(src);
        }

        public Vpcmpistrm vpcmpistrm() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpistrm vpcmpistrm(AsmHexCode encoded) => new Vpcmpistrm(encoded);

        public struct Vpcmpq : ITypedInstruction<Vpcmpq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpq src) => AsmMnemonics.VPCMPQ;

            public static implicit operator AsmHexCode(Vpcmpq src) => src.Encoded;

            public static implicit operator Vpcmpq(AsmHexCode src) => new Vpcmpq(src);
        }

        public Vpcmpq vpcmpq() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpq vpcmpq(AsmHexCode encoded) => new Vpcmpq(encoded);

        public struct Vpcmpub : ITypedInstruction<Vpcmpub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpub src) => AsmMnemonics.VPCMPUB;

            public static implicit operator AsmHexCode(Vpcmpub src) => src.Encoded;

            public static implicit operator Vpcmpub(AsmHexCode src) => new Vpcmpub(src);
        }

        public Vpcmpub vpcmpub() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpub vpcmpub(AsmHexCode encoded) => new Vpcmpub(encoded);

        public struct Vpcmpud : ITypedInstruction<Vpcmpud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpud src) => AsmMnemonics.VPCMPUD;

            public static implicit operator AsmHexCode(Vpcmpud src) => src.Encoded;

            public static implicit operator Vpcmpud(AsmHexCode src) => new Vpcmpud(src);
        }

        public Vpcmpud vpcmpud() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpud vpcmpud(AsmHexCode encoded) => new Vpcmpud(encoded);

        public struct Vpcmpuq : ITypedInstruction<Vpcmpuq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpuq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpuq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpuq src) => AsmMnemonics.VPCMPUQ;

            public static implicit operator AsmHexCode(Vpcmpuq src) => src.Encoded;

            public static implicit operator Vpcmpuq(AsmHexCode src) => new Vpcmpuq(src);
        }

        public Vpcmpuq vpcmpuq() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpuq vpcmpuq(AsmHexCode encoded) => new Vpcmpuq(encoded);

        public struct Vpcmpuw : ITypedInstruction<Vpcmpuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpuw src) => AsmMnemonics.VPCMPUW;

            public static implicit operator AsmHexCode(Vpcmpuw src) => src.Encoded;

            public static implicit operator Vpcmpuw(AsmHexCode src) => new Vpcmpuw(src);
        }

        public Vpcmpuw vpcmpuw() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpuw vpcmpuw(AsmHexCode encoded) => new Vpcmpuw(encoded);

        public struct Vpcmpw : ITypedInstruction<Vpcmpw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcmpw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCMPW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcmpw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcmpw src) => AsmMnemonics.VPCMPW;

            public static implicit operator AsmHexCode(Vpcmpw src) => src.Encoded;

            public static implicit operator Vpcmpw(AsmHexCode src) => new Vpcmpw(src);
        }

        public Vpcmpw vpcmpw() => default;

        [MethodImpl(Inline), Op]
        public Vpcmpw vpcmpw(AsmHexCode encoded) => new Vpcmpw(encoded);

        public struct Vpcomb : ITypedInstruction<Vpcomb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomb src) => AsmMnemonics.VPCOMB;

            public static implicit operator AsmHexCode(Vpcomb src) => src.Encoded;

            public static implicit operator Vpcomb(AsmHexCode src) => new Vpcomb(src);
        }

        public Vpcomb vpcomb() => default;

        [MethodImpl(Inline), Op]
        public Vpcomb vpcomb(AsmHexCode encoded) => new Vpcomb(encoded);

        public struct Vpcomd : ITypedInstruction<Vpcomd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomd src) => AsmMnemonics.VPCOMD;

            public static implicit operator AsmHexCode(Vpcomd src) => src.Encoded;

            public static implicit operator Vpcomd(AsmHexCode src) => new Vpcomd(src);
        }

        public Vpcomd vpcomd() => default;

        [MethodImpl(Inline), Op]
        public Vpcomd vpcomd(AsmHexCode encoded) => new Vpcomd(encoded);

        public struct Vpcompressb : ITypedInstruction<Vpcompressb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcompressb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMPRESSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcompressb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcompressb src) => AsmMnemonics.VPCOMPRESSB;

            public static implicit operator AsmHexCode(Vpcompressb src) => src.Encoded;

            public static implicit operator Vpcompressb(AsmHexCode src) => new Vpcompressb(src);
        }

        public Vpcompressb vpcompressb() => default;

        [MethodImpl(Inline), Op]
        public Vpcompressb vpcompressb(AsmHexCode encoded) => new Vpcompressb(encoded);

        public struct Vpcompressd : ITypedInstruction<Vpcompressd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcompressd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMPRESSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcompressd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcompressd src) => AsmMnemonics.VPCOMPRESSD;

            public static implicit operator AsmHexCode(Vpcompressd src) => src.Encoded;

            public static implicit operator Vpcompressd(AsmHexCode src) => new Vpcompressd(src);
        }

        public Vpcompressd vpcompressd() => default;

        [MethodImpl(Inline), Op]
        public Vpcompressd vpcompressd(AsmHexCode encoded) => new Vpcompressd(encoded);

        public struct Vpcompressq : ITypedInstruction<Vpcompressq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcompressq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMPRESSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcompressq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcompressq src) => AsmMnemonics.VPCOMPRESSQ;

            public static implicit operator AsmHexCode(Vpcompressq src) => src.Encoded;

            public static implicit operator Vpcompressq(AsmHexCode src) => new Vpcompressq(src);
        }

        public Vpcompressq vpcompressq() => default;

        [MethodImpl(Inline), Op]
        public Vpcompressq vpcompressq(AsmHexCode encoded) => new Vpcompressq(encoded);

        public struct Vpcompressw : ITypedInstruction<Vpcompressw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcompressw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMPRESSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcompressw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcompressw src) => AsmMnemonics.VPCOMPRESSW;

            public static implicit operator AsmHexCode(Vpcompressw src) => src.Encoded;

            public static implicit operator Vpcompressw(AsmHexCode src) => new Vpcompressw(src);
        }

        public Vpcompressw vpcompressw() => default;

        [MethodImpl(Inline), Op]
        public Vpcompressw vpcompressw(AsmHexCode encoded) => new Vpcompressw(encoded);

        public struct Vpcomq : ITypedInstruction<Vpcomq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomq src) => AsmMnemonics.VPCOMQ;

            public static implicit operator AsmHexCode(Vpcomq src) => src.Encoded;

            public static implicit operator Vpcomq(AsmHexCode src) => new Vpcomq(src);
        }

        public Vpcomq vpcomq() => default;

        [MethodImpl(Inline), Op]
        public Vpcomq vpcomq(AsmHexCode encoded) => new Vpcomq(encoded);

        public struct Vpcomub : ITypedInstruction<Vpcomub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomub src) => AsmMnemonics.VPCOMUB;

            public static implicit operator AsmHexCode(Vpcomub src) => src.Encoded;

            public static implicit operator Vpcomub(AsmHexCode src) => new Vpcomub(src);
        }

        public Vpcomub vpcomub() => default;

        [MethodImpl(Inline), Op]
        public Vpcomub vpcomub(AsmHexCode encoded) => new Vpcomub(encoded);

        public struct Vpcomud : ITypedInstruction<Vpcomud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomud src) => AsmMnemonics.VPCOMUD;

            public static implicit operator AsmHexCode(Vpcomud src) => src.Encoded;

            public static implicit operator Vpcomud(AsmHexCode src) => new Vpcomud(src);
        }

        public Vpcomud vpcomud() => default;

        [MethodImpl(Inline), Op]
        public Vpcomud vpcomud(AsmHexCode encoded) => new Vpcomud(encoded);

        public struct Vpcomuq : ITypedInstruction<Vpcomuq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomuq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomuq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomuq src) => AsmMnemonics.VPCOMUQ;

            public static implicit operator AsmHexCode(Vpcomuq src) => src.Encoded;

            public static implicit operator Vpcomuq(AsmHexCode src) => new Vpcomuq(src);
        }

        public Vpcomuq vpcomuq() => default;

        [MethodImpl(Inline), Op]
        public Vpcomuq vpcomuq(AsmHexCode encoded) => new Vpcomuq(encoded);

        public struct Vpcomuw : ITypedInstruction<Vpcomuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomuw src) => AsmMnemonics.VPCOMUW;

            public static implicit operator AsmHexCode(Vpcomuw src) => src.Encoded;

            public static implicit operator Vpcomuw(AsmHexCode src) => new Vpcomuw(src);
        }

        public Vpcomuw vpcomuw() => default;

        [MethodImpl(Inline), Op]
        public Vpcomuw vpcomuw(AsmHexCode encoded) => new Vpcomuw(encoded);

        public struct Vpcomw : ITypedInstruction<Vpcomw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpcomw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCOMW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpcomw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpcomw src) => AsmMnemonics.VPCOMW;

            public static implicit operator AsmHexCode(Vpcomw src) => src.Encoded;

            public static implicit operator Vpcomw(AsmHexCode src) => new Vpcomw(src);
        }

        public Vpcomw vpcomw() => default;

        [MethodImpl(Inline), Op]
        public Vpcomw vpcomw(AsmHexCode encoded) => new Vpcomw(encoded);

        public struct Vpconflictd : ITypedInstruction<Vpconflictd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpconflictd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCONFLICTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpconflictd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpconflictd src) => AsmMnemonics.VPCONFLICTD;

            public static implicit operator AsmHexCode(Vpconflictd src) => src.Encoded;

            public static implicit operator Vpconflictd(AsmHexCode src) => new Vpconflictd(src);
        }

        public Vpconflictd vpconflictd() => default;

        [MethodImpl(Inline), Op]
        public Vpconflictd vpconflictd(AsmHexCode encoded) => new Vpconflictd(encoded);

        public struct Vpconflictq : ITypedInstruction<Vpconflictq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpconflictq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPCONFLICTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpconflictq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpconflictq src) => AsmMnemonics.VPCONFLICTQ;

            public static implicit operator AsmHexCode(Vpconflictq src) => src.Encoded;

            public static implicit operator Vpconflictq(AsmHexCode src) => new Vpconflictq(src);
        }

        public Vpconflictq vpconflictq() => default;

        [MethodImpl(Inline), Op]
        public Vpconflictq vpconflictq(AsmHexCode encoded) => new Vpconflictq(encoded);

        public struct Vpdpbusd : ITypedInstruction<Vpdpbusd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpdpbusd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPDPBUSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpdpbusd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpdpbusd src) => AsmMnemonics.VPDPBUSD;

            public static implicit operator AsmHexCode(Vpdpbusd src) => src.Encoded;

            public static implicit operator Vpdpbusd(AsmHexCode src) => new Vpdpbusd(src);
        }

        public Vpdpbusd vpdpbusd() => default;

        [MethodImpl(Inline), Op]
        public Vpdpbusd vpdpbusd(AsmHexCode encoded) => new Vpdpbusd(encoded);

        public struct Vpdpbusds : ITypedInstruction<Vpdpbusds>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpdpbusds(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPDPBUSDS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpdpbusds src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpdpbusds src) => AsmMnemonics.VPDPBUSDS;

            public static implicit operator AsmHexCode(Vpdpbusds src) => src.Encoded;

            public static implicit operator Vpdpbusds(AsmHexCode src) => new Vpdpbusds(src);
        }

        public Vpdpbusds vpdpbusds() => default;

        [MethodImpl(Inline), Op]
        public Vpdpbusds vpdpbusds(AsmHexCode encoded) => new Vpdpbusds(encoded);

        public struct Vpdpwssd : ITypedInstruction<Vpdpwssd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpdpwssd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPDPWSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpdpwssd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpdpwssd src) => AsmMnemonics.VPDPWSSD;

            public static implicit operator AsmHexCode(Vpdpwssd src) => src.Encoded;

            public static implicit operator Vpdpwssd(AsmHexCode src) => new Vpdpwssd(src);
        }

        public Vpdpwssd vpdpwssd() => default;

        [MethodImpl(Inline), Op]
        public Vpdpwssd vpdpwssd(AsmHexCode encoded) => new Vpdpwssd(encoded);

        public struct Vpdpwssds : ITypedInstruction<Vpdpwssds>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpdpwssds(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPDPWSSDS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpdpwssds src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpdpwssds src) => AsmMnemonics.VPDPWSSDS;

            public static implicit operator AsmHexCode(Vpdpwssds src) => src.Encoded;

            public static implicit operator Vpdpwssds(AsmHexCode src) => new Vpdpwssds(src);
        }

        public Vpdpwssds vpdpwssds() => default;

        [MethodImpl(Inline), Op]
        public Vpdpwssds vpdpwssds(AsmHexCode encoded) => new Vpdpwssds(encoded);

        public struct Vperm2f128 : ITypedInstruction<Vperm2f128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vperm2f128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERM2F128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vperm2f128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vperm2f128 src) => AsmMnemonics.VPERM2F128;

            public static implicit operator AsmHexCode(Vperm2f128 src) => src.Encoded;

            public static implicit operator Vperm2f128(AsmHexCode src) => new Vperm2f128(src);
        }

        public Vperm2f128 vperm2f128() => default;

        [MethodImpl(Inline), Op]
        public Vperm2f128 vperm2f128(AsmHexCode encoded) => new Vperm2f128(encoded);

        public struct Vperm2i128 : ITypedInstruction<Vperm2i128>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vperm2i128(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERM2I128;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vperm2i128 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vperm2i128 src) => AsmMnemonics.VPERM2I128;

            public static implicit operator AsmHexCode(Vperm2i128 src) => src.Encoded;

            public static implicit operator Vperm2i128(AsmHexCode src) => new Vperm2i128(src);
        }

        public Vperm2i128 vperm2i128() => default;

        [MethodImpl(Inline), Op]
        public Vperm2i128 vperm2i128(AsmHexCode encoded) => new Vperm2i128(encoded);

        public struct Vpermb : ITypedInstruction<Vpermb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermb src) => AsmMnemonics.VPERMB;

            public static implicit operator AsmHexCode(Vpermb src) => src.Encoded;

            public static implicit operator Vpermb(AsmHexCode src) => new Vpermb(src);
        }

        public Vpermb vpermb() => default;

        [MethodImpl(Inline), Op]
        public Vpermb vpermb(AsmHexCode encoded) => new Vpermb(encoded);

        public struct Vpermd : ITypedInstruction<Vpermd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermd src) => AsmMnemonics.VPERMD;

            public static implicit operator AsmHexCode(Vpermd src) => src.Encoded;

            public static implicit operator Vpermd(AsmHexCode src) => new Vpermd(src);
        }

        public Vpermd vpermd() => default;

        [MethodImpl(Inline), Op]
        public Vpermd vpermd(AsmHexCode encoded) => new Vpermd(encoded);

        public struct Vpermi2b : ITypedInstruction<Vpermi2b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2b src) => AsmMnemonics.VPERMI2B;

            public static implicit operator AsmHexCode(Vpermi2b src) => src.Encoded;

            public static implicit operator Vpermi2b(AsmHexCode src) => new Vpermi2b(src);
        }

        public Vpermi2b vpermi2b() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2b vpermi2b(AsmHexCode encoded) => new Vpermi2b(encoded);

        public struct Vpermi2d : ITypedInstruction<Vpermi2d>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2d(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2D;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2d src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2d src) => AsmMnemonics.VPERMI2D;

            public static implicit operator AsmHexCode(Vpermi2d src) => src.Encoded;

            public static implicit operator Vpermi2d(AsmHexCode src) => new Vpermi2d(src);
        }

        public Vpermi2d vpermi2d() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2d vpermi2d(AsmHexCode encoded) => new Vpermi2d(encoded);

        public struct Vpermi2pd : ITypedInstruction<Vpermi2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2pd src) => AsmMnemonics.VPERMI2PD;

            public static implicit operator AsmHexCode(Vpermi2pd src) => src.Encoded;

            public static implicit operator Vpermi2pd(AsmHexCode src) => new Vpermi2pd(src);
        }

        public Vpermi2pd vpermi2pd() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2pd vpermi2pd(AsmHexCode encoded) => new Vpermi2pd(encoded);

        public struct Vpermi2ps : ITypedInstruction<Vpermi2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2ps src) => AsmMnemonics.VPERMI2PS;

            public static implicit operator AsmHexCode(Vpermi2ps src) => src.Encoded;

            public static implicit operator Vpermi2ps(AsmHexCode src) => new Vpermi2ps(src);
        }

        public Vpermi2ps vpermi2ps() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2ps vpermi2ps(AsmHexCode encoded) => new Vpermi2ps(encoded);

        public struct Vpermi2q : ITypedInstruction<Vpermi2q>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2q(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2Q;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2q src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2q src) => AsmMnemonics.VPERMI2Q;

            public static implicit operator AsmHexCode(Vpermi2q src) => src.Encoded;

            public static implicit operator Vpermi2q(AsmHexCode src) => new Vpermi2q(src);
        }

        public Vpermi2q vpermi2q() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2q vpermi2q(AsmHexCode encoded) => new Vpermi2q(encoded);

        public struct Vpermi2w : ITypedInstruction<Vpermi2w>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermi2w(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMI2W;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermi2w src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermi2w src) => AsmMnemonics.VPERMI2W;

            public static implicit operator AsmHexCode(Vpermi2w src) => src.Encoded;

            public static implicit operator Vpermi2w(AsmHexCode src) => new Vpermi2w(src);
        }

        public Vpermi2w vpermi2w() => default;

        [MethodImpl(Inline), Op]
        public Vpermi2w vpermi2w(AsmHexCode encoded) => new Vpermi2w(encoded);

        public struct Vpermil2pd : ITypedInstruction<Vpermil2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermil2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMIL2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermil2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermil2pd src) => AsmMnemonics.VPERMIL2PD;

            public static implicit operator AsmHexCode(Vpermil2pd src) => src.Encoded;

            public static implicit operator Vpermil2pd(AsmHexCode src) => new Vpermil2pd(src);
        }

        public Vpermil2pd vpermil2pd() => default;

        [MethodImpl(Inline), Op]
        public Vpermil2pd vpermil2pd(AsmHexCode encoded) => new Vpermil2pd(encoded);

        public struct Vpermil2ps : ITypedInstruction<Vpermil2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermil2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMIL2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermil2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermil2ps src) => AsmMnemonics.VPERMIL2PS;

            public static implicit operator AsmHexCode(Vpermil2ps src) => src.Encoded;

            public static implicit operator Vpermil2ps(AsmHexCode src) => new Vpermil2ps(src);
        }

        public Vpermil2ps vpermil2ps() => default;

        [MethodImpl(Inline), Op]
        public Vpermil2ps vpermil2ps(AsmHexCode encoded) => new Vpermil2ps(encoded);

        public struct Vpermilpd : ITypedInstruction<Vpermilpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermilpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMILPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermilpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermilpd src) => AsmMnemonics.VPERMILPD;

            public static implicit operator AsmHexCode(Vpermilpd src) => src.Encoded;

            public static implicit operator Vpermilpd(AsmHexCode src) => new Vpermilpd(src);
        }

        public Vpermilpd vpermilpd() => default;

        [MethodImpl(Inline), Op]
        public Vpermilpd vpermilpd(AsmHexCode encoded) => new Vpermilpd(encoded);

        public struct Vpermilps : ITypedInstruction<Vpermilps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermilps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMILPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermilps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermilps src) => AsmMnemonics.VPERMILPS;

            public static implicit operator AsmHexCode(Vpermilps src) => src.Encoded;

            public static implicit operator Vpermilps(AsmHexCode src) => new Vpermilps(src);
        }

        public Vpermilps vpermilps() => default;

        [MethodImpl(Inline), Op]
        public Vpermilps vpermilps(AsmHexCode encoded) => new Vpermilps(encoded);

        public struct Vpermpd : ITypedInstruction<Vpermpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermpd src) => AsmMnemonics.VPERMPD;

            public static implicit operator AsmHexCode(Vpermpd src) => src.Encoded;

            public static implicit operator Vpermpd(AsmHexCode src) => new Vpermpd(src);
        }

        public Vpermpd vpermpd() => default;

        [MethodImpl(Inline), Op]
        public Vpermpd vpermpd(AsmHexCode encoded) => new Vpermpd(encoded);

        public struct Vpermps : ITypedInstruction<Vpermps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermps src) => AsmMnemonics.VPERMPS;

            public static implicit operator AsmHexCode(Vpermps src) => src.Encoded;

            public static implicit operator Vpermps(AsmHexCode src) => new Vpermps(src);
        }

        public Vpermps vpermps() => default;

        [MethodImpl(Inline), Op]
        public Vpermps vpermps(AsmHexCode encoded) => new Vpermps(encoded);

        public struct Vpermq : ITypedInstruction<Vpermq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermq src) => AsmMnemonics.VPERMQ;

            public static implicit operator AsmHexCode(Vpermq src) => src.Encoded;

            public static implicit operator Vpermq(AsmHexCode src) => new Vpermq(src);
        }

        public Vpermq vpermq() => default;

        [MethodImpl(Inline), Op]
        public Vpermq vpermq(AsmHexCode encoded) => new Vpermq(encoded);

        public struct Vpermt2b : ITypedInstruction<Vpermt2b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2b src) => AsmMnemonics.VPERMT2B;

            public static implicit operator AsmHexCode(Vpermt2b src) => src.Encoded;

            public static implicit operator Vpermt2b(AsmHexCode src) => new Vpermt2b(src);
        }

        public Vpermt2b vpermt2b() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2b vpermt2b(AsmHexCode encoded) => new Vpermt2b(encoded);

        public struct Vpermt2d : ITypedInstruction<Vpermt2d>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2d(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2D;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2d src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2d src) => AsmMnemonics.VPERMT2D;

            public static implicit operator AsmHexCode(Vpermt2d src) => src.Encoded;

            public static implicit operator Vpermt2d(AsmHexCode src) => new Vpermt2d(src);
        }

        public Vpermt2d vpermt2d() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2d vpermt2d(AsmHexCode encoded) => new Vpermt2d(encoded);

        public struct Vpermt2pd : ITypedInstruction<Vpermt2pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2pd src) => AsmMnemonics.VPERMT2PD;

            public static implicit operator AsmHexCode(Vpermt2pd src) => src.Encoded;

            public static implicit operator Vpermt2pd(AsmHexCode src) => new Vpermt2pd(src);
        }

        public Vpermt2pd vpermt2pd() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2pd vpermt2pd(AsmHexCode encoded) => new Vpermt2pd(encoded);

        public struct Vpermt2ps : ITypedInstruction<Vpermt2ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2ps src) => AsmMnemonics.VPERMT2PS;

            public static implicit operator AsmHexCode(Vpermt2ps src) => src.Encoded;

            public static implicit operator Vpermt2ps(AsmHexCode src) => new Vpermt2ps(src);
        }

        public Vpermt2ps vpermt2ps() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2ps vpermt2ps(AsmHexCode encoded) => new Vpermt2ps(encoded);

        public struct Vpermt2q : ITypedInstruction<Vpermt2q>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2q(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2Q;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2q src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2q src) => AsmMnemonics.VPERMT2Q;

            public static implicit operator AsmHexCode(Vpermt2q src) => src.Encoded;

            public static implicit operator Vpermt2q(AsmHexCode src) => new Vpermt2q(src);
        }

        public Vpermt2q vpermt2q() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2q vpermt2q(AsmHexCode encoded) => new Vpermt2q(encoded);

        public struct Vpermt2w : ITypedInstruction<Vpermt2w>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermt2w(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMT2W;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermt2w src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermt2w src) => AsmMnemonics.VPERMT2W;

            public static implicit operator AsmHexCode(Vpermt2w src) => src.Encoded;

            public static implicit operator Vpermt2w(AsmHexCode src) => new Vpermt2w(src);
        }

        public Vpermt2w vpermt2w() => default;

        [MethodImpl(Inline), Op]
        public Vpermt2w vpermt2w(AsmHexCode encoded) => new Vpermt2w(encoded);

        public struct Vpermw : ITypedInstruction<Vpermw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpermw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPERMW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpermw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpermw src) => AsmMnemonics.VPERMW;

            public static implicit operator AsmHexCode(Vpermw src) => src.Encoded;

            public static implicit operator Vpermw(AsmHexCode src) => new Vpermw(src);
        }

        public Vpermw vpermw() => default;

        [MethodImpl(Inline), Op]
        public Vpermw vpermw(AsmHexCode encoded) => new Vpermw(encoded);

        public struct Vpexpandb : ITypedInstruction<Vpexpandb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpexpandb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXPANDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpexpandb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpexpandb src) => AsmMnemonics.VPEXPANDB;

            public static implicit operator AsmHexCode(Vpexpandb src) => src.Encoded;

            public static implicit operator Vpexpandb(AsmHexCode src) => new Vpexpandb(src);
        }

        public Vpexpandb vpexpandb() => default;

        [MethodImpl(Inline), Op]
        public Vpexpandb vpexpandb(AsmHexCode encoded) => new Vpexpandb(encoded);

        public struct Vpexpandd : ITypedInstruction<Vpexpandd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpexpandd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXPANDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpexpandd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpexpandd src) => AsmMnemonics.VPEXPANDD;

            public static implicit operator AsmHexCode(Vpexpandd src) => src.Encoded;

            public static implicit operator Vpexpandd(AsmHexCode src) => new Vpexpandd(src);
        }

        public Vpexpandd vpexpandd() => default;

        [MethodImpl(Inline), Op]
        public Vpexpandd vpexpandd(AsmHexCode encoded) => new Vpexpandd(encoded);

        public struct Vpexpandq : ITypedInstruction<Vpexpandq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpexpandq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXPANDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpexpandq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpexpandq src) => AsmMnemonics.VPEXPANDQ;

            public static implicit operator AsmHexCode(Vpexpandq src) => src.Encoded;

            public static implicit operator Vpexpandq(AsmHexCode src) => new Vpexpandq(src);
        }

        public Vpexpandq vpexpandq() => default;

        [MethodImpl(Inline), Op]
        public Vpexpandq vpexpandq(AsmHexCode encoded) => new Vpexpandq(encoded);

        public struct Vpexpandw : ITypedInstruction<Vpexpandw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpexpandw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXPANDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpexpandw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpexpandw src) => AsmMnemonics.VPEXPANDW;

            public static implicit operator AsmHexCode(Vpexpandw src) => src.Encoded;

            public static implicit operator Vpexpandw(AsmHexCode src) => new Vpexpandw(src);
        }

        public Vpexpandw vpexpandw() => default;

        [MethodImpl(Inline), Op]
        public Vpexpandw vpexpandw(AsmHexCode encoded) => new Vpexpandw(encoded);

        public struct Vpextrb : ITypedInstruction<Vpextrb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpextrb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXTRB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpextrb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpextrb src) => AsmMnemonics.VPEXTRB;

            public static implicit operator AsmHexCode(Vpextrb src) => src.Encoded;

            public static implicit operator Vpextrb(AsmHexCode src) => new Vpextrb(src);
        }

        public Vpextrb vpextrb() => default;

        [MethodImpl(Inline), Op]
        public Vpextrb vpextrb(AsmHexCode encoded) => new Vpextrb(encoded);

        public struct Vpextrd : ITypedInstruction<Vpextrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpextrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXTRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpextrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpextrd src) => AsmMnemonics.VPEXTRD;

            public static implicit operator AsmHexCode(Vpextrd src) => src.Encoded;

            public static implicit operator Vpextrd(AsmHexCode src) => new Vpextrd(src);
        }

        public Vpextrd vpextrd() => default;

        [MethodImpl(Inline), Op]
        public Vpextrd vpextrd(AsmHexCode encoded) => new Vpextrd(encoded);

        public struct Vpextrq : ITypedInstruction<Vpextrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpextrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXTRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpextrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpextrq src) => AsmMnemonics.VPEXTRQ;

            public static implicit operator AsmHexCode(Vpextrq src) => src.Encoded;

            public static implicit operator Vpextrq(AsmHexCode src) => new Vpextrq(src);
        }

        public Vpextrq vpextrq() => default;

        [MethodImpl(Inline), Op]
        public Vpextrq vpextrq(AsmHexCode encoded) => new Vpextrq(encoded);

        public struct Vpextrw : ITypedInstruction<Vpextrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpextrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXTRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpextrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpextrw src) => AsmMnemonics.VPEXTRW;

            public static implicit operator AsmHexCode(Vpextrw src) => src.Encoded;

            public static implicit operator Vpextrw(AsmHexCode src) => new Vpextrw(src);
        }

        public Vpextrw vpextrw() => default;

        [MethodImpl(Inline), Op]
        public Vpextrw vpextrw(AsmHexCode encoded) => new Vpextrw(encoded);

        public struct Vpextrw_c5 : ITypedInstruction<Vpextrw_c5>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpextrw_c5(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPEXTRW_C5;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpextrw_c5 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpextrw_c5 src) => AsmMnemonics.VPEXTRW_C5;

            public static implicit operator AsmHexCode(Vpextrw_c5 src) => src.Encoded;

            public static implicit operator Vpextrw_c5(AsmHexCode src) => new Vpextrw_c5(src);
        }

        public Vpextrw_c5 vpextrw_c5() => default;

        [MethodImpl(Inline), Op]
        public Vpextrw_c5 vpextrw_c5(AsmHexCode encoded) => new Vpextrw_c5(encoded);

        public struct Vpgatherdd : ITypedInstruction<Vpgatherdd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpgatherdd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPGATHERDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpgatherdd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpgatherdd src) => AsmMnemonics.VPGATHERDD;

            public static implicit operator AsmHexCode(Vpgatherdd src) => src.Encoded;

            public static implicit operator Vpgatherdd(AsmHexCode src) => new Vpgatherdd(src);
        }

        public Vpgatherdd vpgatherdd() => default;

        [MethodImpl(Inline), Op]
        public Vpgatherdd vpgatherdd(AsmHexCode encoded) => new Vpgatherdd(encoded);

        public struct Vpgatherdq : ITypedInstruction<Vpgatherdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpgatherdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPGATHERDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpgatherdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpgatherdq src) => AsmMnemonics.VPGATHERDQ;

            public static implicit operator AsmHexCode(Vpgatherdq src) => src.Encoded;

            public static implicit operator Vpgatherdq(AsmHexCode src) => new Vpgatherdq(src);
        }

        public Vpgatherdq vpgatherdq() => default;

        [MethodImpl(Inline), Op]
        public Vpgatherdq vpgatherdq(AsmHexCode encoded) => new Vpgatherdq(encoded);

        public struct Vpgatherqd : ITypedInstruction<Vpgatherqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpgatherqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPGATHERQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpgatherqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpgatherqd src) => AsmMnemonics.VPGATHERQD;

            public static implicit operator AsmHexCode(Vpgatherqd src) => src.Encoded;

            public static implicit operator Vpgatherqd(AsmHexCode src) => new Vpgatherqd(src);
        }

        public Vpgatherqd vpgatherqd() => default;

        [MethodImpl(Inline), Op]
        public Vpgatherqd vpgatherqd(AsmHexCode encoded) => new Vpgatherqd(encoded);

        public struct Vpgatherqq : ITypedInstruction<Vpgatherqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpgatherqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPGATHERQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpgatherqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpgatherqq src) => AsmMnemonics.VPGATHERQQ;

            public static implicit operator AsmHexCode(Vpgatherqq src) => src.Encoded;

            public static implicit operator Vpgatherqq(AsmHexCode src) => new Vpgatherqq(src);
        }

        public Vpgatherqq vpgatherqq() => default;

        [MethodImpl(Inline), Op]
        public Vpgatherqq vpgatherqq(AsmHexCode encoded) => new Vpgatherqq(encoded);

        public struct Vphaddbd : ITypedInstruction<Vphaddbd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddbd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddbd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddbd src) => AsmMnemonics.VPHADDBD;

            public static implicit operator AsmHexCode(Vphaddbd src) => src.Encoded;

            public static implicit operator Vphaddbd(AsmHexCode src) => new Vphaddbd(src);
        }

        public Vphaddbd vphaddbd() => default;

        [MethodImpl(Inline), Op]
        public Vphaddbd vphaddbd(AsmHexCode encoded) => new Vphaddbd(encoded);

        public struct Vphaddbq : ITypedInstruction<Vphaddbq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddbq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddbq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddbq src) => AsmMnemonics.VPHADDBQ;

            public static implicit operator AsmHexCode(Vphaddbq src) => src.Encoded;

            public static implicit operator Vphaddbq(AsmHexCode src) => new Vphaddbq(src);
        }

        public Vphaddbq vphaddbq() => default;

        [MethodImpl(Inline), Op]
        public Vphaddbq vphaddbq(AsmHexCode encoded) => new Vphaddbq(encoded);

        public struct Vphaddbw : ITypedInstruction<Vphaddbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddbw src) => AsmMnemonics.VPHADDBW;

            public static implicit operator AsmHexCode(Vphaddbw src) => src.Encoded;

            public static implicit operator Vphaddbw(AsmHexCode src) => new Vphaddbw(src);
        }

        public Vphaddbw vphaddbw() => default;

        [MethodImpl(Inline), Op]
        public Vphaddbw vphaddbw(AsmHexCode encoded) => new Vphaddbw(encoded);

        public struct Vphaddd : ITypedInstruction<Vphaddd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddd src) => AsmMnemonics.VPHADDD;

            public static implicit operator AsmHexCode(Vphaddd src) => src.Encoded;

            public static implicit operator Vphaddd(AsmHexCode src) => new Vphaddd(src);
        }

        public Vphaddd vphaddd() => default;

        [MethodImpl(Inline), Op]
        public Vphaddd vphaddd(AsmHexCode encoded) => new Vphaddd(encoded);

        public struct Vphadddq : ITypedInstruction<Vphadddq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphadddq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphadddq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphadddq src) => AsmMnemonics.VPHADDDQ;

            public static implicit operator AsmHexCode(Vphadddq src) => src.Encoded;

            public static implicit operator Vphadddq(AsmHexCode src) => new Vphadddq(src);
        }

        public Vphadddq vphadddq() => default;

        [MethodImpl(Inline), Op]
        public Vphadddq vphadddq(AsmHexCode encoded) => new Vphadddq(encoded);

        public struct Vphaddsw : ITypedInstruction<Vphaddsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddsw src) => AsmMnemonics.VPHADDSW;

            public static implicit operator AsmHexCode(Vphaddsw src) => src.Encoded;

            public static implicit operator Vphaddsw(AsmHexCode src) => new Vphaddsw(src);
        }

        public Vphaddsw vphaddsw() => default;

        [MethodImpl(Inline), Op]
        public Vphaddsw vphaddsw(AsmHexCode encoded) => new Vphaddsw(encoded);

        public struct Vphaddubd : ITypedInstruction<Vphaddubd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddubd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddubd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddubd src) => AsmMnemonics.VPHADDUBD;

            public static implicit operator AsmHexCode(Vphaddubd src) => src.Encoded;

            public static implicit operator Vphaddubd(AsmHexCode src) => new Vphaddubd(src);
        }

        public Vphaddubd vphaddubd() => default;

        [MethodImpl(Inline), Op]
        public Vphaddubd vphaddubd(AsmHexCode encoded) => new Vphaddubd(encoded);

        public struct Vphaddubq : ITypedInstruction<Vphaddubq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddubq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddubq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddubq src) => AsmMnemonics.VPHADDUBQ;

            public static implicit operator AsmHexCode(Vphaddubq src) => src.Encoded;

            public static implicit operator Vphaddubq(AsmHexCode src) => new Vphaddubq(src);
        }

        public Vphaddubq vphaddubq() => default;

        [MethodImpl(Inline), Op]
        public Vphaddubq vphaddubq(AsmHexCode encoded) => new Vphaddubq(encoded);

        public struct Vphaddubw : ITypedInstruction<Vphaddubw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddubw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddubw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddubw src) => AsmMnemonics.VPHADDUBW;

            public static implicit operator AsmHexCode(Vphaddubw src) => src.Encoded;

            public static implicit operator Vphaddubw(AsmHexCode src) => new Vphaddubw(src);
        }

        public Vphaddubw vphaddubw() => default;

        [MethodImpl(Inline), Op]
        public Vphaddubw vphaddubw(AsmHexCode encoded) => new Vphaddubw(encoded);

        public struct Vphaddudq : ITypedInstruction<Vphaddudq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddudq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddudq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddudq src) => AsmMnemonics.VPHADDUDQ;

            public static implicit operator AsmHexCode(Vphaddudq src) => src.Encoded;

            public static implicit operator Vphaddudq(AsmHexCode src) => new Vphaddudq(src);
        }

        public Vphaddudq vphaddudq() => default;

        [MethodImpl(Inline), Op]
        public Vphaddudq vphaddudq(AsmHexCode encoded) => new Vphaddudq(encoded);

        public struct Vphadduwd : ITypedInstruction<Vphadduwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphadduwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphadduwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphadduwd src) => AsmMnemonics.VPHADDUWD;

            public static implicit operator AsmHexCode(Vphadduwd src) => src.Encoded;

            public static implicit operator Vphadduwd(AsmHexCode src) => new Vphadduwd(src);
        }

        public Vphadduwd vphadduwd() => default;

        [MethodImpl(Inline), Op]
        public Vphadduwd vphadduwd(AsmHexCode encoded) => new Vphadduwd(encoded);

        public struct Vphadduwq : ITypedInstruction<Vphadduwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphadduwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDUWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphadduwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphadduwq src) => AsmMnemonics.VPHADDUWQ;

            public static implicit operator AsmHexCode(Vphadduwq src) => src.Encoded;

            public static implicit operator Vphadduwq(AsmHexCode src) => new Vphadduwq(src);
        }

        public Vphadduwq vphadduwq() => default;

        [MethodImpl(Inline), Op]
        public Vphadduwq vphadduwq(AsmHexCode encoded) => new Vphadduwq(encoded);

        public struct Vphaddw : ITypedInstruction<Vphaddw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddw src) => AsmMnemonics.VPHADDW;

            public static implicit operator AsmHexCode(Vphaddw src) => src.Encoded;

            public static implicit operator Vphaddw(AsmHexCode src) => new Vphaddw(src);
        }

        public Vphaddw vphaddw() => default;

        [MethodImpl(Inline), Op]
        public Vphaddw vphaddw(AsmHexCode encoded) => new Vphaddw(encoded);

        public struct Vphaddwd : ITypedInstruction<Vphaddwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddwd src) => AsmMnemonics.VPHADDWD;

            public static implicit operator AsmHexCode(Vphaddwd src) => src.Encoded;

            public static implicit operator Vphaddwd(AsmHexCode src) => new Vphaddwd(src);
        }

        public Vphaddwd vphaddwd() => default;

        [MethodImpl(Inline), Op]
        public Vphaddwd vphaddwd(AsmHexCode encoded) => new Vphaddwd(encoded);

        public struct Vphaddwq : ITypedInstruction<Vphaddwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphaddwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHADDWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphaddwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphaddwq src) => AsmMnemonics.VPHADDWQ;

            public static implicit operator AsmHexCode(Vphaddwq src) => src.Encoded;

            public static implicit operator Vphaddwq(AsmHexCode src) => new Vphaddwq(src);
        }

        public Vphaddwq vphaddwq() => default;

        [MethodImpl(Inline), Op]
        public Vphaddwq vphaddwq(AsmHexCode encoded) => new Vphaddwq(encoded);

        public struct Vphminposuw : ITypedInstruction<Vphminposuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphminposuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHMINPOSUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphminposuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphminposuw src) => AsmMnemonics.VPHMINPOSUW;

            public static implicit operator AsmHexCode(Vphminposuw src) => src.Encoded;

            public static implicit operator Vphminposuw(AsmHexCode src) => new Vphminposuw(src);
        }

        public Vphminposuw vphminposuw() => default;

        [MethodImpl(Inline), Op]
        public Vphminposuw vphminposuw(AsmHexCode encoded) => new Vphminposuw(encoded);

        public struct Vphsubbw : ITypedInstruction<Vphsubbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubbw src) => AsmMnemonics.VPHSUBBW;

            public static implicit operator AsmHexCode(Vphsubbw src) => src.Encoded;

            public static implicit operator Vphsubbw(AsmHexCode src) => new Vphsubbw(src);
        }

        public Vphsubbw vphsubbw() => default;

        [MethodImpl(Inline), Op]
        public Vphsubbw vphsubbw(AsmHexCode encoded) => new Vphsubbw(encoded);

        public struct Vphsubd : ITypedInstruction<Vphsubd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubd src) => AsmMnemonics.VPHSUBD;

            public static implicit operator AsmHexCode(Vphsubd src) => src.Encoded;

            public static implicit operator Vphsubd(AsmHexCode src) => new Vphsubd(src);
        }

        public Vphsubd vphsubd() => default;

        [MethodImpl(Inline), Op]
        public Vphsubd vphsubd(AsmHexCode encoded) => new Vphsubd(encoded);

        public struct Vphsubdq : ITypedInstruction<Vphsubdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubdq src) => AsmMnemonics.VPHSUBDQ;

            public static implicit operator AsmHexCode(Vphsubdq src) => src.Encoded;

            public static implicit operator Vphsubdq(AsmHexCode src) => new Vphsubdq(src);
        }

        public Vphsubdq vphsubdq() => default;

        [MethodImpl(Inline), Op]
        public Vphsubdq vphsubdq(AsmHexCode encoded) => new Vphsubdq(encoded);

        public struct Vphsubsw : ITypedInstruction<Vphsubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubsw src) => AsmMnemonics.VPHSUBSW;

            public static implicit operator AsmHexCode(Vphsubsw src) => src.Encoded;

            public static implicit operator Vphsubsw(AsmHexCode src) => new Vphsubsw(src);
        }

        public Vphsubsw vphsubsw() => default;

        [MethodImpl(Inline), Op]
        public Vphsubsw vphsubsw(AsmHexCode encoded) => new Vphsubsw(encoded);

        public struct Vphsubw : ITypedInstruction<Vphsubw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubw src) => AsmMnemonics.VPHSUBW;

            public static implicit operator AsmHexCode(Vphsubw src) => src.Encoded;

            public static implicit operator Vphsubw(AsmHexCode src) => new Vphsubw(src);
        }

        public Vphsubw vphsubw() => default;

        [MethodImpl(Inline), Op]
        public Vphsubw vphsubw(AsmHexCode encoded) => new Vphsubw(encoded);

        public struct Vphsubwd : ITypedInstruction<Vphsubwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vphsubwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPHSUBWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vphsubwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vphsubwd src) => AsmMnemonics.VPHSUBWD;

            public static implicit operator AsmHexCode(Vphsubwd src) => src.Encoded;

            public static implicit operator Vphsubwd(AsmHexCode src) => new Vphsubwd(src);
        }

        public Vphsubwd vphsubwd() => default;

        [MethodImpl(Inline), Op]
        public Vphsubwd vphsubwd(AsmHexCode encoded) => new Vphsubwd(encoded);

        public struct Vpinsrb : ITypedInstruction<Vpinsrb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpinsrb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPINSRB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpinsrb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpinsrb src) => AsmMnemonics.VPINSRB;

            public static implicit operator AsmHexCode(Vpinsrb src) => src.Encoded;

            public static implicit operator Vpinsrb(AsmHexCode src) => new Vpinsrb(src);
        }

        public Vpinsrb vpinsrb() => default;

        [MethodImpl(Inline), Op]
        public Vpinsrb vpinsrb(AsmHexCode encoded) => new Vpinsrb(encoded);

        public struct Vpinsrd : ITypedInstruction<Vpinsrd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpinsrd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPINSRD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpinsrd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpinsrd src) => AsmMnemonics.VPINSRD;

            public static implicit operator AsmHexCode(Vpinsrd src) => src.Encoded;

            public static implicit operator Vpinsrd(AsmHexCode src) => new Vpinsrd(src);
        }

        public Vpinsrd vpinsrd() => default;

        [MethodImpl(Inline), Op]
        public Vpinsrd vpinsrd(AsmHexCode encoded) => new Vpinsrd(encoded);

        public struct Vpinsrq : ITypedInstruction<Vpinsrq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpinsrq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPINSRQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpinsrq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpinsrq src) => AsmMnemonics.VPINSRQ;

            public static implicit operator AsmHexCode(Vpinsrq src) => src.Encoded;

            public static implicit operator Vpinsrq(AsmHexCode src) => new Vpinsrq(src);
        }

        public Vpinsrq vpinsrq() => default;

        [MethodImpl(Inline), Op]
        public Vpinsrq vpinsrq(AsmHexCode encoded) => new Vpinsrq(encoded);

        public struct Vpinsrw : ITypedInstruction<Vpinsrw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpinsrw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPINSRW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpinsrw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpinsrw src) => AsmMnemonics.VPINSRW;

            public static implicit operator AsmHexCode(Vpinsrw src) => src.Encoded;

            public static implicit operator Vpinsrw(AsmHexCode src) => new Vpinsrw(src);
        }

        public Vpinsrw vpinsrw() => default;

        [MethodImpl(Inline), Op]
        public Vpinsrw vpinsrw(AsmHexCode encoded) => new Vpinsrw(encoded);

        public struct Vplzcntd : ITypedInstruction<Vplzcntd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vplzcntd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPLZCNTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vplzcntd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vplzcntd src) => AsmMnemonics.VPLZCNTD;

            public static implicit operator AsmHexCode(Vplzcntd src) => src.Encoded;

            public static implicit operator Vplzcntd(AsmHexCode src) => new Vplzcntd(src);
        }

        public Vplzcntd vplzcntd() => default;

        [MethodImpl(Inline), Op]
        public Vplzcntd vplzcntd(AsmHexCode encoded) => new Vplzcntd(encoded);

        public struct Vplzcntq : ITypedInstruction<Vplzcntq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vplzcntq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPLZCNTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vplzcntq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vplzcntq src) => AsmMnemonics.VPLZCNTQ;

            public static implicit operator AsmHexCode(Vplzcntq src) => src.Encoded;

            public static implicit operator Vplzcntq(AsmHexCode src) => new Vplzcntq(src);
        }

        public Vplzcntq vplzcntq() => default;

        [MethodImpl(Inline), Op]
        public Vplzcntq vplzcntq(AsmHexCode encoded) => new Vplzcntq(encoded);

        public struct Vpmacsdd : ITypedInstruction<Vpmacsdd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacsdd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacsdd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacsdd src) => AsmMnemonics.VPMACSDD;

            public static implicit operator AsmHexCode(Vpmacsdd src) => src.Encoded;

            public static implicit operator Vpmacsdd(AsmHexCode src) => new Vpmacsdd(src);
        }

        public Vpmacsdd vpmacsdd() => default;

        [MethodImpl(Inline), Op]
        public Vpmacsdd vpmacsdd(AsmHexCode encoded) => new Vpmacsdd(encoded);

        public struct Vpmacsdqh : ITypedInstruction<Vpmacsdqh>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacsdqh(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSDQH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacsdqh src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacsdqh src) => AsmMnemonics.VPMACSDQH;

            public static implicit operator AsmHexCode(Vpmacsdqh src) => src.Encoded;

            public static implicit operator Vpmacsdqh(AsmHexCode src) => new Vpmacsdqh(src);
        }

        public Vpmacsdqh vpmacsdqh() => default;

        [MethodImpl(Inline), Op]
        public Vpmacsdqh vpmacsdqh(AsmHexCode encoded) => new Vpmacsdqh(encoded);

        public struct Vpmacsdql : ITypedInstruction<Vpmacsdql>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacsdql(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSDQL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacsdql src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacsdql src) => AsmMnemonics.VPMACSDQL;

            public static implicit operator AsmHexCode(Vpmacsdql src) => src.Encoded;

            public static implicit operator Vpmacsdql(AsmHexCode src) => new Vpmacsdql(src);
        }

        public Vpmacsdql vpmacsdql() => default;

        [MethodImpl(Inline), Op]
        public Vpmacsdql vpmacsdql(AsmHexCode encoded) => new Vpmacsdql(encoded);

        public struct Vpmacssdd : ITypedInstruction<Vpmacssdd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacssdd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSSDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacssdd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacssdd src) => AsmMnemonics.VPMACSSDD;

            public static implicit operator AsmHexCode(Vpmacssdd src) => src.Encoded;

            public static implicit operator Vpmacssdd(AsmHexCode src) => new Vpmacssdd(src);
        }

        public Vpmacssdd vpmacssdd() => default;

        [MethodImpl(Inline), Op]
        public Vpmacssdd vpmacssdd(AsmHexCode encoded) => new Vpmacssdd(encoded);

        public struct Vpmacssdqh : ITypedInstruction<Vpmacssdqh>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacssdqh(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSSDQH;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacssdqh src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacssdqh src) => AsmMnemonics.VPMACSSDQH;

            public static implicit operator AsmHexCode(Vpmacssdqh src) => src.Encoded;

            public static implicit operator Vpmacssdqh(AsmHexCode src) => new Vpmacssdqh(src);
        }

        public Vpmacssdqh vpmacssdqh() => default;

        [MethodImpl(Inline), Op]
        public Vpmacssdqh vpmacssdqh(AsmHexCode encoded) => new Vpmacssdqh(encoded);

        public struct Vpmacssdql : ITypedInstruction<Vpmacssdql>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacssdql(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSSDQL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacssdql src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacssdql src) => AsmMnemonics.VPMACSSDQL;

            public static implicit operator AsmHexCode(Vpmacssdql src) => src.Encoded;

            public static implicit operator Vpmacssdql(AsmHexCode src) => new Vpmacssdql(src);
        }

        public Vpmacssdql vpmacssdql() => default;

        [MethodImpl(Inline), Op]
        public Vpmacssdql vpmacssdql(AsmHexCode encoded) => new Vpmacssdql(encoded);

        public struct Vpmacsswd : ITypedInstruction<Vpmacsswd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacsswd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSSWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacsswd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacsswd src) => AsmMnemonics.VPMACSSWD;

            public static implicit operator AsmHexCode(Vpmacsswd src) => src.Encoded;

            public static implicit operator Vpmacsswd(AsmHexCode src) => new Vpmacsswd(src);
        }

        public Vpmacsswd vpmacsswd() => default;

        [MethodImpl(Inline), Op]
        public Vpmacsswd vpmacsswd(AsmHexCode encoded) => new Vpmacsswd(encoded);

        public struct Vpmacssww : ITypedInstruction<Vpmacssww>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacssww(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSSWW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacssww src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacssww src) => AsmMnemonics.VPMACSSWW;

            public static implicit operator AsmHexCode(Vpmacssww src) => src.Encoded;

            public static implicit operator Vpmacssww(AsmHexCode src) => new Vpmacssww(src);
        }

        public Vpmacssww vpmacssww() => default;

        [MethodImpl(Inline), Op]
        public Vpmacssww vpmacssww(AsmHexCode encoded) => new Vpmacssww(encoded);

        public struct Vpmacswd : ITypedInstruction<Vpmacswd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacswd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacswd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacswd src) => AsmMnemonics.VPMACSWD;

            public static implicit operator AsmHexCode(Vpmacswd src) => src.Encoded;

            public static implicit operator Vpmacswd(AsmHexCode src) => new Vpmacswd(src);
        }

        public Vpmacswd vpmacswd() => default;

        [MethodImpl(Inline), Op]
        public Vpmacswd vpmacswd(AsmHexCode encoded) => new Vpmacswd(encoded);

        public struct Vpmacsww : ITypedInstruction<Vpmacsww>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmacsww(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMACSWW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmacsww src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmacsww src) => AsmMnemonics.VPMACSWW;

            public static implicit operator AsmHexCode(Vpmacsww src) => src.Encoded;

            public static implicit operator Vpmacsww(AsmHexCode src) => new Vpmacsww(src);
        }

        public Vpmacsww vpmacsww() => default;

        [MethodImpl(Inline), Op]
        public Vpmacsww vpmacsww(AsmHexCode encoded) => new Vpmacsww(encoded);

        public struct Vpmadcsswd : ITypedInstruction<Vpmadcsswd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmadcsswd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADCSSWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmadcsswd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmadcsswd src) => AsmMnemonics.VPMADCSSWD;

            public static implicit operator AsmHexCode(Vpmadcsswd src) => src.Encoded;

            public static implicit operator Vpmadcsswd(AsmHexCode src) => new Vpmadcsswd(src);
        }

        public Vpmadcsswd vpmadcsswd() => default;

        [MethodImpl(Inline), Op]
        public Vpmadcsswd vpmadcsswd(AsmHexCode encoded) => new Vpmadcsswd(encoded);

        public struct Vpmadcswd : ITypedInstruction<Vpmadcswd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmadcswd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADCSWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmadcswd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmadcswd src) => AsmMnemonics.VPMADCSWD;

            public static implicit operator AsmHexCode(Vpmadcswd src) => src.Encoded;

            public static implicit operator Vpmadcswd(AsmHexCode src) => new Vpmadcswd(src);
        }

        public Vpmadcswd vpmadcswd() => default;

        [MethodImpl(Inline), Op]
        public Vpmadcswd vpmadcswd(AsmHexCode encoded) => new Vpmadcswd(encoded);

        public struct Vpmadd52huq : ITypedInstruction<Vpmadd52huq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmadd52huq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADD52HUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmadd52huq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmadd52huq src) => AsmMnemonics.VPMADD52HUQ;

            public static implicit operator AsmHexCode(Vpmadd52huq src) => src.Encoded;

            public static implicit operator Vpmadd52huq(AsmHexCode src) => new Vpmadd52huq(src);
        }

        public Vpmadd52huq vpmadd52huq() => default;

        [MethodImpl(Inline), Op]
        public Vpmadd52huq vpmadd52huq(AsmHexCode encoded) => new Vpmadd52huq(encoded);

        public struct Vpmadd52luq : ITypedInstruction<Vpmadd52luq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmadd52luq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADD52LUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmadd52luq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmadd52luq src) => AsmMnemonics.VPMADD52LUQ;

            public static implicit operator AsmHexCode(Vpmadd52luq src) => src.Encoded;

            public static implicit operator Vpmadd52luq(AsmHexCode src) => new Vpmadd52luq(src);
        }

        public Vpmadd52luq vpmadd52luq() => default;

        [MethodImpl(Inline), Op]
        public Vpmadd52luq vpmadd52luq(AsmHexCode encoded) => new Vpmadd52luq(encoded);

        public struct Vpmaddubsw : ITypedInstruction<Vpmaddubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaddubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADDUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaddubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaddubsw src) => AsmMnemonics.VPMADDUBSW;

            public static implicit operator AsmHexCode(Vpmaddubsw src) => src.Encoded;

            public static implicit operator Vpmaddubsw(AsmHexCode src) => new Vpmaddubsw(src);
        }

        public Vpmaddubsw vpmaddubsw() => default;

        [MethodImpl(Inline), Op]
        public Vpmaddubsw vpmaddubsw(AsmHexCode encoded) => new Vpmaddubsw(encoded);

        public struct Vpmaddwd : ITypedInstruction<Vpmaddwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaddwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMADDWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaddwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaddwd src) => AsmMnemonics.VPMADDWD;

            public static implicit operator AsmHexCode(Vpmaddwd src) => src.Encoded;

            public static implicit operator Vpmaddwd(AsmHexCode src) => new Vpmaddwd(src);
        }

        public Vpmaddwd vpmaddwd() => default;

        [MethodImpl(Inline), Op]
        public Vpmaddwd vpmaddwd(AsmHexCode encoded) => new Vpmaddwd(encoded);

        public struct Vpmaskmovd : ITypedInstruction<Vpmaskmovd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaskmovd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMASKMOVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaskmovd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaskmovd src) => AsmMnemonics.VPMASKMOVD;

            public static implicit operator AsmHexCode(Vpmaskmovd src) => src.Encoded;

            public static implicit operator Vpmaskmovd(AsmHexCode src) => new Vpmaskmovd(src);
        }

        public Vpmaskmovd vpmaskmovd() => default;

        [MethodImpl(Inline), Op]
        public Vpmaskmovd vpmaskmovd(AsmHexCode encoded) => new Vpmaskmovd(encoded);

        public struct Vpmaskmovq : ITypedInstruction<Vpmaskmovq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaskmovq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMASKMOVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaskmovq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaskmovq src) => AsmMnemonics.VPMASKMOVQ;

            public static implicit operator AsmHexCode(Vpmaskmovq src) => src.Encoded;

            public static implicit operator Vpmaskmovq(AsmHexCode src) => new Vpmaskmovq(src);
        }

        public Vpmaskmovq vpmaskmovq() => default;

        [MethodImpl(Inline), Op]
        public Vpmaskmovq vpmaskmovq(AsmHexCode encoded) => new Vpmaskmovq(encoded);

        public struct Vpmaxsb : ITypedInstruction<Vpmaxsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxsb src) => AsmMnemonics.VPMAXSB;

            public static implicit operator AsmHexCode(Vpmaxsb src) => src.Encoded;

            public static implicit operator Vpmaxsb(AsmHexCode src) => new Vpmaxsb(src);
        }

        public Vpmaxsb vpmaxsb() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxsb vpmaxsb(AsmHexCode encoded) => new Vpmaxsb(encoded);

        public struct Vpmaxsd : ITypedInstruction<Vpmaxsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxsd src) => AsmMnemonics.VPMAXSD;

            public static implicit operator AsmHexCode(Vpmaxsd src) => src.Encoded;

            public static implicit operator Vpmaxsd(AsmHexCode src) => new Vpmaxsd(src);
        }

        public Vpmaxsd vpmaxsd() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxsd vpmaxsd(AsmHexCode encoded) => new Vpmaxsd(encoded);

        public struct Vpmaxsq : ITypedInstruction<Vpmaxsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxsq src) => AsmMnemonics.VPMAXSQ;

            public static implicit operator AsmHexCode(Vpmaxsq src) => src.Encoded;

            public static implicit operator Vpmaxsq(AsmHexCode src) => new Vpmaxsq(src);
        }

        public Vpmaxsq vpmaxsq() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxsq vpmaxsq(AsmHexCode encoded) => new Vpmaxsq(encoded);

        public struct Vpmaxsw : ITypedInstruction<Vpmaxsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxsw src) => AsmMnemonics.VPMAXSW;

            public static implicit operator AsmHexCode(Vpmaxsw src) => src.Encoded;

            public static implicit operator Vpmaxsw(AsmHexCode src) => new Vpmaxsw(src);
        }

        public Vpmaxsw vpmaxsw() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxsw vpmaxsw(AsmHexCode encoded) => new Vpmaxsw(encoded);

        public struct Vpmaxub : ITypedInstruction<Vpmaxub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxub src) => AsmMnemonics.VPMAXUB;

            public static implicit operator AsmHexCode(Vpmaxub src) => src.Encoded;

            public static implicit operator Vpmaxub(AsmHexCode src) => new Vpmaxub(src);
        }

        public Vpmaxub vpmaxub() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxub vpmaxub(AsmHexCode encoded) => new Vpmaxub(encoded);

        public struct Vpmaxud : ITypedInstruction<Vpmaxud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxud src) => AsmMnemonics.VPMAXUD;

            public static implicit operator AsmHexCode(Vpmaxud src) => src.Encoded;

            public static implicit operator Vpmaxud(AsmHexCode src) => new Vpmaxud(src);
        }

        public Vpmaxud vpmaxud() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxud vpmaxud(AsmHexCode encoded) => new Vpmaxud(encoded);

        public struct Vpmaxuq : ITypedInstruction<Vpmaxuq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxuq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxuq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxuq src) => AsmMnemonics.VPMAXUQ;

            public static implicit operator AsmHexCode(Vpmaxuq src) => src.Encoded;

            public static implicit operator Vpmaxuq(AsmHexCode src) => new Vpmaxuq(src);
        }

        public Vpmaxuq vpmaxuq() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxuq vpmaxuq(AsmHexCode encoded) => new Vpmaxuq(encoded);

        public struct Vpmaxuw : ITypedInstruction<Vpmaxuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmaxuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMAXUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmaxuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmaxuw src) => AsmMnemonics.VPMAXUW;

            public static implicit operator AsmHexCode(Vpmaxuw src) => src.Encoded;

            public static implicit operator Vpmaxuw(AsmHexCode src) => new Vpmaxuw(src);
        }

        public Vpmaxuw vpmaxuw() => default;

        [MethodImpl(Inline), Op]
        public Vpmaxuw vpmaxuw(AsmHexCode encoded) => new Vpmaxuw(encoded);

        public struct Vpminsb : ITypedInstruction<Vpminsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminsb src) => AsmMnemonics.VPMINSB;

            public static implicit operator AsmHexCode(Vpminsb src) => src.Encoded;

            public static implicit operator Vpminsb(AsmHexCode src) => new Vpminsb(src);
        }

        public Vpminsb vpminsb() => default;

        [MethodImpl(Inline), Op]
        public Vpminsb vpminsb(AsmHexCode encoded) => new Vpminsb(encoded);

        public struct Vpminsd : ITypedInstruction<Vpminsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminsd src) => AsmMnemonics.VPMINSD;

            public static implicit operator AsmHexCode(Vpminsd src) => src.Encoded;

            public static implicit operator Vpminsd(AsmHexCode src) => new Vpminsd(src);
        }

        public Vpminsd vpminsd() => default;

        [MethodImpl(Inline), Op]
        public Vpminsd vpminsd(AsmHexCode encoded) => new Vpminsd(encoded);

        public struct Vpminsq : ITypedInstruction<Vpminsq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminsq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminsq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminsq src) => AsmMnemonics.VPMINSQ;

            public static implicit operator AsmHexCode(Vpminsq src) => src.Encoded;

            public static implicit operator Vpminsq(AsmHexCode src) => new Vpminsq(src);
        }

        public Vpminsq vpminsq() => default;

        [MethodImpl(Inline), Op]
        public Vpminsq vpminsq(AsmHexCode encoded) => new Vpminsq(encoded);

        public struct Vpminsw : ITypedInstruction<Vpminsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminsw src) => AsmMnemonics.VPMINSW;

            public static implicit operator AsmHexCode(Vpminsw src) => src.Encoded;

            public static implicit operator Vpminsw(AsmHexCode src) => new Vpminsw(src);
        }

        public Vpminsw vpminsw() => default;

        [MethodImpl(Inline), Op]
        public Vpminsw vpminsw(AsmHexCode encoded) => new Vpminsw(encoded);

        public struct Vpminub : ITypedInstruction<Vpminub>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminub(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINUB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminub src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminub src) => AsmMnemonics.VPMINUB;

            public static implicit operator AsmHexCode(Vpminub src) => src.Encoded;

            public static implicit operator Vpminub(AsmHexCode src) => new Vpminub(src);
        }

        public Vpminub vpminub() => default;

        [MethodImpl(Inline), Op]
        public Vpminub vpminub(AsmHexCode encoded) => new Vpminub(encoded);

        public struct Vpminud : ITypedInstruction<Vpminud>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminud(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINUD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminud src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminud src) => AsmMnemonics.VPMINUD;

            public static implicit operator AsmHexCode(Vpminud src) => src.Encoded;

            public static implicit operator Vpminud(AsmHexCode src) => new Vpminud(src);
        }

        public Vpminud vpminud() => default;

        [MethodImpl(Inline), Op]
        public Vpminud vpminud(AsmHexCode encoded) => new Vpminud(encoded);

        public struct Vpminuq : ITypedInstruction<Vpminuq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminuq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINUQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminuq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminuq src) => AsmMnemonics.VPMINUQ;

            public static implicit operator AsmHexCode(Vpminuq src) => src.Encoded;

            public static implicit operator Vpminuq(AsmHexCode src) => new Vpminuq(src);
        }

        public Vpminuq vpminuq() => default;

        [MethodImpl(Inline), Op]
        public Vpminuq vpminuq(AsmHexCode encoded) => new Vpminuq(encoded);

        public struct Vpminuw : ITypedInstruction<Vpminuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpminuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMINUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpminuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpminuw src) => AsmMnemonics.VPMINUW;

            public static implicit operator AsmHexCode(Vpminuw src) => src.Encoded;

            public static implicit operator Vpminuw(AsmHexCode src) => new Vpminuw(src);
        }

        public Vpminuw vpminuw() => default;

        [MethodImpl(Inline), Op]
        public Vpminuw vpminuw(AsmHexCode encoded) => new Vpminuw(encoded);

        public struct Vpmovb2m : ITypedInstruction<Vpmovb2m>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovb2m(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVB2M;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovb2m src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovb2m src) => AsmMnemonics.VPMOVB2M;

            public static implicit operator AsmHexCode(Vpmovb2m src) => src.Encoded;

            public static implicit operator Vpmovb2m(AsmHexCode src) => new Vpmovb2m(src);
        }

        public Vpmovb2m vpmovb2m() => default;

        [MethodImpl(Inline), Op]
        public Vpmovb2m vpmovb2m(AsmHexCode encoded) => new Vpmovb2m(encoded);

        public struct Vpmovd2m : ITypedInstruction<Vpmovd2m>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovd2m(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVD2M;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovd2m src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovd2m src) => AsmMnemonics.VPMOVD2M;

            public static implicit operator AsmHexCode(Vpmovd2m src) => src.Encoded;

            public static implicit operator Vpmovd2m(AsmHexCode src) => new Vpmovd2m(src);
        }

        public Vpmovd2m vpmovd2m() => default;

        [MethodImpl(Inline), Op]
        public Vpmovd2m vpmovd2m(AsmHexCode encoded) => new Vpmovd2m(encoded);

        public struct Vpmovdb : ITypedInstruction<Vpmovdb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovdb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovdb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovdb src) => AsmMnemonics.VPMOVDB;

            public static implicit operator AsmHexCode(Vpmovdb src) => src.Encoded;

            public static implicit operator Vpmovdb(AsmHexCode src) => new Vpmovdb(src);
        }

        public Vpmovdb vpmovdb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovdb vpmovdb(AsmHexCode encoded) => new Vpmovdb(encoded);

        public struct Vpmovdw : ITypedInstruction<Vpmovdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovdw src) => AsmMnemonics.VPMOVDW;

            public static implicit operator AsmHexCode(Vpmovdw src) => src.Encoded;

            public static implicit operator Vpmovdw(AsmHexCode src) => new Vpmovdw(src);
        }

        public Vpmovdw vpmovdw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovdw vpmovdw(AsmHexCode encoded) => new Vpmovdw(encoded);

        public struct Vpmovm2b : ITypedInstruction<Vpmovm2b>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovm2b(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVM2B;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovm2b src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovm2b src) => AsmMnemonics.VPMOVM2B;

            public static implicit operator AsmHexCode(Vpmovm2b src) => src.Encoded;

            public static implicit operator Vpmovm2b(AsmHexCode src) => new Vpmovm2b(src);
        }

        public Vpmovm2b vpmovm2b() => default;

        [MethodImpl(Inline), Op]
        public Vpmovm2b vpmovm2b(AsmHexCode encoded) => new Vpmovm2b(encoded);

        public struct Vpmovm2d : ITypedInstruction<Vpmovm2d>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovm2d(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVM2D;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovm2d src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovm2d src) => AsmMnemonics.VPMOVM2D;

            public static implicit operator AsmHexCode(Vpmovm2d src) => src.Encoded;

            public static implicit operator Vpmovm2d(AsmHexCode src) => new Vpmovm2d(src);
        }

        public Vpmovm2d vpmovm2d() => default;

        [MethodImpl(Inline), Op]
        public Vpmovm2d vpmovm2d(AsmHexCode encoded) => new Vpmovm2d(encoded);

        public struct Vpmovm2q : ITypedInstruction<Vpmovm2q>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovm2q(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVM2Q;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovm2q src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovm2q src) => AsmMnemonics.VPMOVM2Q;

            public static implicit operator AsmHexCode(Vpmovm2q src) => src.Encoded;

            public static implicit operator Vpmovm2q(AsmHexCode src) => new Vpmovm2q(src);
        }

        public Vpmovm2q vpmovm2q() => default;

        [MethodImpl(Inline), Op]
        public Vpmovm2q vpmovm2q(AsmHexCode encoded) => new Vpmovm2q(encoded);

        public struct Vpmovm2w : ITypedInstruction<Vpmovm2w>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovm2w(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVM2W;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovm2w src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovm2w src) => AsmMnemonics.VPMOVM2W;

            public static implicit operator AsmHexCode(Vpmovm2w src) => src.Encoded;

            public static implicit operator Vpmovm2w(AsmHexCode src) => new Vpmovm2w(src);
        }

        public Vpmovm2w vpmovm2w() => default;

        [MethodImpl(Inline), Op]
        public Vpmovm2w vpmovm2w(AsmHexCode encoded) => new Vpmovm2w(encoded);

        public struct Vpmovmskb : ITypedInstruction<Vpmovmskb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovmskb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVMSKB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovmskb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovmskb src) => AsmMnemonics.VPMOVMSKB;

            public static implicit operator AsmHexCode(Vpmovmskb src) => src.Encoded;

            public static implicit operator Vpmovmskb(AsmHexCode src) => new Vpmovmskb(src);
        }

        public Vpmovmskb vpmovmskb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovmskb vpmovmskb(AsmHexCode encoded) => new Vpmovmskb(encoded);

        public struct Vpmovq2m : ITypedInstruction<Vpmovq2m>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovq2m(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVQ2M;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovq2m src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovq2m src) => AsmMnemonics.VPMOVQ2M;

            public static implicit operator AsmHexCode(Vpmovq2m src) => src.Encoded;

            public static implicit operator Vpmovq2m(AsmHexCode src) => new Vpmovq2m(src);
        }

        public Vpmovq2m vpmovq2m() => default;

        [MethodImpl(Inline), Op]
        public Vpmovq2m vpmovq2m(AsmHexCode encoded) => new Vpmovq2m(encoded);

        public struct Vpmovqb : ITypedInstruction<Vpmovqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovqb src) => AsmMnemonics.VPMOVQB;

            public static implicit operator AsmHexCode(Vpmovqb src) => src.Encoded;

            public static implicit operator Vpmovqb(AsmHexCode src) => new Vpmovqb(src);
        }

        public Vpmovqb vpmovqb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovqb vpmovqb(AsmHexCode encoded) => new Vpmovqb(encoded);

        public struct Vpmovqd : ITypedInstruction<Vpmovqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovqd src) => AsmMnemonics.VPMOVQD;

            public static implicit operator AsmHexCode(Vpmovqd src) => src.Encoded;

            public static implicit operator Vpmovqd(AsmHexCode src) => new Vpmovqd(src);
        }

        public Vpmovqd vpmovqd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovqd vpmovqd(AsmHexCode encoded) => new Vpmovqd(encoded);

        public struct Vpmovqw : ITypedInstruction<Vpmovqw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovqw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVQW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovqw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovqw src) => AsmMnemonics.VPMOVQW;

            public static implicit operator AsmHexCode(Vpmovqw src) => src.Encoded;

            public static implicit operator Vpmovqw(AsmHexCode src) => new Vpmovqw(src);
        }

        public Vpmovqw vpmovqw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovqw vpmovqw(AsmHexCode encoded) => new Vpmovqw(encoded);

        public struct Vpmovsdb : ITypedInstruction<Vpmovsdb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsdb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsdb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsdb src) => AsmMnemonics.VPMOVSDB;

            public static implicit operator AsmHexCode(Vpmovsdb src) => src.Encoded;

            public static implicit operator Vpmovsdb(AsmHexCode src) => new Vpmovsdb(src);
        }

        public Vpmovsdb vpmovsdb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsdb vpmovsdb(AsmHexCode encoded) => new Vpmovsdb(encoded);

        public struct Vpmovsdw : ITypedInstruction<Vpmovsdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsdw src) => AsmMnemonics.VPMOVSDW;

            public static implicit operator AsmHexCode(Vpmovsdw src) => src.Encoded;

            public static implicit operator Vpmovsdw(AsmHexCode src) => new Vpmovsdw(src);
        }

        public Vpmovsdw vpmovsdw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsdw vpmovsdw(AsmHexCode encoded) => new Vpmovsdw(encoded);

        public struct Vpmovsqb : ITypedInstruction<Vpmovsqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsqb src) => AsmMnemonics.VPMOVSQB;

            public static implicit operator AsmHexCode(Vpmovsqb src) => src.Encoded;

            public static implicit operator Vpmovsqb(AsmHexCode src) => new Vpmovsqb(src);
        }

        public Vpmovsqb vpmovsqb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsqb vpmovsqb(AsmHexCode encoded) => new Vpmovsqb(encoded);

        public struct Vpmovsqd : ITypedInstruction<Vpmovsqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsqd src) => AsmMnemonics.VPMOVSQD;

            public static implicit operator AsmHexCode(Vpmovsqd src) => src.Encoded;

            public static implicit operator Vpmovsqd(AsmHexCode src) => new Vpmovsqd(src);
        }

        public Vpmovsqd vpmovsqd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsqd vpmovsqd(AsmHexCode encoded) => new Vpmovsqd(encoded);

        public struct Vpmovsqw : ITypedInstruction<Vpmovsqw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsqw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSQW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsqw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsqw src) => AsmMnemonics.VPMOVSQW;

            public static implicit operator AsmHexCode(Vpmovsqw src) => src.Encoded;

            public static implicit operator Vpmovsqw(AsmHexCode src) => new Vpmovsqw(src);
        }

        public Vpmovsqw vpmovsqw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsqw vpmovsqw(AsmHexCode encoded) => new Vpmovsqw(encoded);

        public struct Vpmovswb : ITypedInstruction<Vpmovswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovswb src) => AsmMnemonics.VPMOVSWB;

            public static implicit operator AsmHexCode(Vpmovswb src) => src.Encoded;

            public static implicit operator Vpmovswb(AsmHexCode src) => new Vpmovswb(src);
        }

        public Vpmovswb vpmovswb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovswb vpmovswb(AsmHexCode encoded) => new Vpmovswb(encoded);

        public struct Vpmovsxbd : ITypedInstruction<Vpmovsxbd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxbd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxbd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxbd src) => AsmMnemonics.VPMOVSXBD;

            public static implicit operator AsmHexCode(Vpmovsxbd src) => src.Encoded;

            public static implicit operator Vpmovsxbd(AsmHexCode src) => new Vpmovsxbd(src);
        }

        public Vpmovsxbd vpmovsxbd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxbd vpmovsxbd(AsmHexCode encoded) => new Vpmovsxbd(encoded);

        public struct Vpmovsxbq : ITypedInstruction<Vpmovsxbq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxbq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxbq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxbq src) => AsmMnemonics.VPMOVSXBQ;

            public static implicit operator AsmHexCode(Vpmovsxbq src) => src.Encoded;

            public static implicit operator Vpmovsxbq(AsmHexCode src) => new Vpmovsxbq(src);
        }

        public Vpmovsxbq vpmovsxbq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxbq vpmovsxbq(AsmHexCode encoded) => new Vpmovsxbq(encoded);

        public struct Vpmovsxbw : ITypedInstruction<Vpmovsxbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxbw src) => AsmMnemonics.VPMOVSXBW;

            public static implicit operator AsmHexCode(Vpmovsxbw src) => src.Encoded;

            public static implicit operator Vpmovsxbw(AsmHexCode src) => new Vpmovsxbw(src);
        }

        public Vpmovsxbw vpmovsxbw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxbw vpmovsxbw(AsmHexCode encoded) => new Vpmovsxbw(encoded);

        public struct Vpmovsxdq : ITypedInstruction<Vpmovsxdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxdq src) => AsmMnemonics.VPMOVSXDQ;

            public static implicit operator AsmHexCode(Vpmovsxdq src) => src.Encoded;

            public static implicit operator Vpmovsxdq(AsmHexCode src) => new Vpmovsxdq(src);
        }

        public Vpmovsxdq vpmovsxdq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxdq vpmovsxdq(AsmHexCode encoded) => new Vpmovsxdq(encoded);

        public struct Vpmovsxwd : ITypedInstruction<Vpmovsxwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxwd src) => AsmMnemonics.VPMOVSXWD;

            public static implicit operator AsmHexCode(Vpmovsxwd src) => src.Encoded;

            public static implicit operator Vpmovsxwd(AsmHexCode src) => new Vpmovsxwd(src);
        }

        public Vpmovsxwd vpmovsxwd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxwd vpmovsxwd(AsmHexCode encoded) => new Vpmovsxwd(encoded);

        public struct Vpmovsxwq : ITypedInstruction<Vpmovsxwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovsxwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVSXWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovsxwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovsxwq src) => AsmMnemonics.VPMOVSXWQ;

            public static implicit operator AsmHexCode(Vpmovsxwq src) => src.Encoded;

            public static implicit operator Vpmovsxwq(AsmHexCode src) => new Vpmovsxwq(src);
        }

        public Vpmovsxwq vpmovsxwq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovsxwq vpmovsxwq(AsmHexCode encoded) => new Vpmovsxwq(encoded);

        public struct Vpmovusdb : ITypedInstruction<Vpmovusdb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovusdb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSDB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovusdb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovusdb src) => AsmMnemonics.VPMOVUSDB;

            public static implicit operator AsmHexCode(Vpmovusdb src) => src.Encoded;

            public static implicit operator Vpmovusdb(AsmHexCode src) => new Vpmovusdb(src);
        }

        public Vpmovusdb vpmovusdb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovusdb vpmovusdb(AsmHexCode encoded) => new Vpmovusdb(encoded);

        public struct Vpmovusdw : ITypedInstruction<Vpmovusdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovusdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovusdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovusdw src) => AsmMnemonics.VPMOVUSDW;

            public static implicit operator AsmHexCode(Vpmovusdw src) => src.Encoded;

            public static implicit operator Vpmovusdw(AsmHexCode src) => new Vpmovusdw(src);
        }

        public Vpmovusdw vpmovusdw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovusdw vpmovusdw(AsmHexCode encoded) => new Vpmovusdw(encoded);

        public struct Vpmovusqb : ITypedInstruction<Vpmovusqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovusqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovusqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovusqb src) => AsmMnemonics.VPMOVUSQB;

            public static implicit operator AsmHexCode(Vpmovusqb src) => src.Encoded;

            public static implicit operator Vpmovusqb(AsmHexCode src) => new Vpmovusqb(src);
        }

        public Vpmovusqb vpmovusqb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovusqb vpmovusqb(AsmHexCode encoded) => new Vpmovusqb(encoded);

        public struct Vpmovusqd : ITypedInstruction<Vpmovusqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovusqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovusqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovusqd src) => AsmMnemonics.VPMOVUSQD;

            public static implicit operator AsmHexCode(Vpmovusqd src) => src.Encoded;

            public static implicit operator Vpmovusqd(AsmHexCode src) => new Vpmovusqd(src);
        }

        public Vpmovusqd vpmovusqd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovusqd vpmovusqd(AsmHexCode encoded) => new Vpmovusqd(encoded);

        public struct Vpmovusqw : ITypedInstruction<Vpmovusqw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovusqw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSQW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovusqw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovusqw src) => AsmMnemonics.VPMOVUSQW;

            public static implicit operator AsmHexCode(Vpmovusqw src) => src.Encoded;

            public static implicit operator Vpmovusqw(AsmHexCode src) => new Vpmovusqw(src);
        }

        public Vpmovusqw vpmovusqw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovusqw vpmovusqw(AsmHexCode encoded) => new Vpmovusqw(encoded);

        public struct Vpmovuswb : ITypedInstruction<Vpmovuswb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovuswb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVUSWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovuswb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovuswb src) => AsmMnemonics.VPMOVUSWB;

            public static implicit operator AsmHexCode(Vpmovuswb src) => src.Encoded;

            public static implicit operator Vpmovuswb(AsmHexCode src) => new Vpmovuswb(src);
        }

        public Vpmovuswb vpmovuswb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovuswb vpmovuswb(AsmHexCode encoded) => new Vpmovuswb(encoded);

        public struct Vpmovw2m : ITypedInstruction<Vpmovw2m>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovw2m(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVW2M;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovw2m src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovw2m src) => AsmMnemonics.VPMOVW2M;

            public static implicit operator AsmHexCode(Vpmovw2m src) => src.Encoded;

            public static implicit operator Vpmovw2m(AsmHexCode src) => new Vpmovw2m(src);
        }

        public Vpmovw2m vpmovw2m() => default;

        [MethodImpl(Inline), Op]
        public Vpmovw2m vpmovw2m(AsmHexCode encoded) => new Vpmovw2m(encoded);

        public struct Vpmovwb : ITypedInstruction<Vpmovwb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovwb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVWB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovwb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovwb src) => AsmMnemonics.VPMOVWB;

            public static implicit operator AsmHexCode(Vpmovwb src) => src.Encoded;

            public static implicit operator Vpmovwb(AsmHexCode src) => new Vpmovwb(src);
        }

        public Vpmovwb vpmovwb() => default;

        [MethodImpl(Inline), Op]
        public Vpmovwb vpmovwb(AsmHexCode encoded) => new Vpmovwb(encoded);

        public struct Vpmovzxbd : ITypedInstruction<Vpmovzxbd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxbd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxbd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxbd src) => AsmMnemonics.VPMOVZXBD;

            public static implicit operator AsmHexCode(Vpmovzxbd src) => src.Encoded;

            public static implicit operator Vpmovzxbd(AsmHexCode src) => new Vpmovzxbd(src);
        }

        public Vpmovzxbd vpmovzxbd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxbd vpmovzxbd(AsmHexCode encoded) => new Vpmovzxbd(encoded);

        public struct Vpmovzxbq : ITypedInstruction<Vpmovzxbq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxbq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxbq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxbq src) => AsmMnemonics.VPMOVZXBQ;

            public static implicit operator AsmHexCode(Vpmovzxbq src) => src.Encoded;

            public static implicit operator Vpmovzxbq(AsmHexCode src) => new Vpmovzxbq(src);
        }

        public Vpmovzxbq vpmovzxbq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxbq vpmovzxbq(AsmHexCode encoded) => new Vpmovzxbq(encoded);

        public struct Vpmovzxbw : ITypedInstruction<Vpmovzxbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxbw src) => AsmMnemonics.VPMOVZXBW;

            public static implicit operator AsmHexCode(Vpmovzxbw src) => src.Encoded;

            public static implicit operator Vpmovzxbw(AsmHexCode src) => new Vpmovzxbw(src);
        }

        public Vpmovzxbw vpmovzxbw() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxbw vpmovzxbw(AsmHexCode encoded) => new Vpmovzxbw(encoded);

        public struct Vpmovzxdq : ITypedInstruction<Vpmovzxdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxdq src) => AsmMnemonics.VPMOVZXDQ;

            public static implicit operator AsmHexCode(Vpmovzxdq src) => src.Encoded;

            public static implicit operator Vpmovzxdq(AsmHexCode src) => new Vpmovzxdq(src);
        }

        public Vpmovzxdq vpmovzxdq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxdq vpmovzxdq(AsmHexCode encoded) => new Vpmovzxdq(encoded);

        public struct Vpmovzxwd : ITypedInstruction<Vpmovzxwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxwd src) => AsmMnemonics.VPMOVZXWD;

            public static implicit operator AsmHexCode(Vpmovzxwd src) => src.Encoded;

            public static implicit operator Vpmovzxwd(AsmHexCode src) => new Vpmovzxwd(src);
        }

        public Vpmovzxwd vpmovzxwd() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxwd vpmovzxwd(AsmHexCode encoded) => new Vpmovzxwd(encoded);

        public struct Vpmovzxwq : ITypedInstruction<Vpmovzxwq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmovzxwq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMOVZXWQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmovzxwq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmovzxwq src) => AsmMnemonics.VPMOVZXWQ;

            public static implicit operator AsmHexCode(Vpmovzxwq src) => src.Encoded;

            public static implicit operator Vpmovzxwq(AsmHexCode src) => new Vpmovzxwq(src);
        }

        public Vpmovzxwq vpmovzxwq() => default;

        [MethodImpl(Inline), Op]
        public Vpmovzxwq vpmovzxwq(AsmHexCode encoded) => new Vpmovzxwq(encoded);

        public struct Vpmuldq : ITypedInstruction<Vpmuldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmuldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmuldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmuldq src) => AsmMnemonics.VPMULDQ;

            public static implicit operator AsmHexCode(Vpmuldq src) => src.Encoded;

            public static implicit operator Vpmuldq(AsmHexCode src) => new Vpmuldq(src);
        }

        public Vpmuldq vpmuldq() => default;

        [MethodImpl(Inline), Op]
        public Vpmuldq vpmuldq(AsmHexCode encoded) => new Vpmuldq(encoded);

        public struct Vpmulhrsw : ITypedInstruction<Vpmulhrsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmulhrsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULHRSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmulhrsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmulhrsw src) => AsmMnemonics.VPMULHRSW;

            public static implicit operator AsmHexCode(Vpmulhrsw src) => src.Encoded;

            public static implicit operator Vpmulhrsw(AsmHexCode src) => new Vpmulhrsw(src);
        }

        public Vpmulhrsw vpmulhrsw() => default;

        [MethodImpl(Inline), Op]
        public Vpmulhrsw vpmulhrsw(AsmHexCode encoded) => new Vpmulhrsw(encoded);

        public struct Vpmulhuw : ITypedInstruction<Vpmulhuw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmulhuw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULHUW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmulhuw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmulhuw src) => AsmMnemonics.VPMULHUW;

            public static implicit operator AsmHexCode(Vpmulhuw src) => src.Encoded;

            public static implicit operator Vpmulhuw(AsmHexCode src) => new Vpmulhuw(src);
        }

        public Vpmulhuw vpmulhuw() => default;

        [MethodImpl(Inline), Op]
        public Vpmulhuw vpmulhuw(AsmHexCode encoded) => new Vpmulhuw(encoded);

        public struct Vpmulhw : ITypedInstruction<Vpmulhw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmulhw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULHW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmulhw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmulhw src) => AsmMnemonics.VPMULHW;

            public static implicit operator AsmHexCode(Vpmulhw src) => src.Encoded;

            public static implicit operator Vpmulhw(AsmHexCode src) => new Vpmulhw(src);
        }

        public Vpmulhw vpmulhw() => default;

        [MethodImpl(Inline), Op]
        public Vpmulhw vpmulhw(AsmHexCode encoded) => new Vpmulhw(encoded);

        public struct Vpmulld : ITypedInstruction<Vpmulld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmulld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmulld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmulld src) => AsmMnemonics.VPMULLD;

            public static implicit operator AsmHexCode(Vpmulld src) => src.Encoded;

            public static implicit operator Vpmulld(AsmHexCode src) => new Vpmulld(src);
        }

        public Vpmulld vpmulld() => default;

        [MethodImpl(Inline), Op]
        public Vpmulld vpmulld(AsmHexCode encoded) => new Vpmulld(encoded);

        public struct Vpmullq : ITypedInstruction<Vpmullq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmullq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmullq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmullq src) => AsmMnemonics.VPMULLQ;

            public static implicit operator AsmHexCode(Vpmullq src) => src.Encoded;

            public static implicit operator Vpmullq(AsmHexCode src) => new Vpmullq(src);
        }

        public Vpmullq vpmullq() => default;

        [MethodImpl(Inline), Op]
        public Vpmullq vpmullq(AsmHexCode encoded) => new Vpmullq(encoded);

        public struct Vpmullw : ITypedInstruction<Vpmullw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmullw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmullw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmullw src) => AsmMnemonics.VPMULLW;

            public static implicit operator AsmHexCode(Vpmullw src) => src.Encoded;

            public static implicit operator Vpmullw(AsmHexCode src) => new Vpmullw(src);
        }

        public Vpmullw vpmullw() => default;

        [MethodImpl(Inline), Op]
        public Vpmullw vpmullw(AsmHexCode encoded) => new Vpmullw(encoded);

        public struct Vpmultishiftqb : ITypedInstruction<Vpmultishiftqb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmultishiftqb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULTISHIFTQB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmultishiftqb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmultishiftqb src) => AsmMnemonics.VPMULTISHIFTQB;

            public static implicit operator AsmHexCode(Vpmultishiftqb src) => src.Encoded;

            public static implicit operator Vpmultishiftqb(AsmHexCode src) => new Vpmultishiftqb(src);
        }

        public Vpmultishiftqb vpmultishiftqb() => default;

        [MethodImpl(Inline), Op]
        public Vpmultishiftqb vpmultishiftqb(AsmHexCode encoded) => new Vpmultishiftqb(encoded);

        public struct Vpmuludq : ITypedInstruction<Vpmuludq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpmuludq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPMULUDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpmuludq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpmuludq src) => AsmMnemonics.VPMULUDQ;

            public static implicit operator AsmHexCode(Vpmuludq src) => src.Encoded;

            public static implicit operator Vpmuludq(AsmHexCode src) => new Vpmuludq(src);
        }

        public Vpmuludq vpmuludq() => default;

        [MethodImpl(Inline), Op]
        public Vpmuludq vpmuludq(AsmHexCode encoded) => new Vpmuludq(encoded);

        public struct Vpopcntb : ITypedInstruction<Vpopcntb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpopcntb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPOPCNTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpopcntb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpopcntb src) => AsmMnemonics.VPOPCNTB;

            public static implicit operator AsmHexCode(Vpopcntb src) => src.Encoded;

            public static implicit operator Vpopcntb(AsmHexCode src) => new Vpopcntb(src);
        }

        public Vpopcntb vpopcntb() => default;

        [MethodImpl(Inline), Op]
        public Vpopcntb vpopcntb(AsmHexCode encoded) => new Vpopcntb(encoded);

        public struct Vpopcntd : ITypedInstruction<Vpopcntd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpopcntd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPOPCNTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpopcntd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpopcntd src) => AsmMnemonics.VPOPCNTD;

            public static implicit operator AsmHexCode(Vpopcntd src) => src.Encoded;

            public static implicit operator Vpopcntd(AsmHexCode src) => new Vpopcntd(src);
        }

        public Vpopcntd vpopcntd() => default;

        [MethodImpl(Inline), Op]
        public Vpopcntd vpopcntd(AsmHexCode encoded) => new Vpopcntd(encoded);

        public struct Vpopcntq : ITypedInstruction<Vpopcntq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpopcntq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPOPCNTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpopcntq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpopcntq src) => AsmMnemonics.VPOPCNTQ;

            public static implicit operator AsmHexCode(Vpopcntq src) => src.Encoded;

            public static implicit operator Vpopcntq(AsmHexCode src) => new Vpopcntq(src);
        }

        public Vpopcntq vpopcntq() => default;

        [MethodImpl(Inline), Op]
        public Vpopcntq vpopcntq(AsmHexCode encoded) => new Vpopcntq(encoded);

        public struct Vpopcntw : ITypedInstruction<Vpopcntw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpopcntw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPOPCNTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpopcntw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpopcntw src) => AsmMnemonics.VPOPCNTW;

            public static implicit operator AsmHexCode(Vpopcntw src) => src.Encoded;

            public static implicit operator Vpopcntw(AsmHexCode src) => new Vpopcntw(src);
        }

        public Vpopcntw vpopcntw() => default;

        [MethodImpl(Inline), Op]
        public Vpopcntw vpopcntw(AsmHexCode encoded) => new Vpopcntw(encoded);

        public struct Vpor : ITypedInstruction<Vpor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpor src) => AsmMnemonics.VPOR;

            public static implicit operator AsmHexCode(Vpor src) => src.Encoded;

            public static implicit operator Vpor(AsmHexCode src) => new Vpor(src);
        }

        public Vpor vpor() => default;

        [MethodImpl(Inline), Op]
        public Vpor vpor(AsmHexCode encoded) => new Vpor(encoded);

        public struct Vpord : ITypedInstruction<Vpord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpord src) => AsmMnemonics.VPORD;

            public static implicit operator AsmHexCode(Vpord src) => src.Encoded;

            public static implicit operator Vpord(AsmHexCode src) => new Vpord(src);
        }

        public Vpord vpord() => default;

        [MethodImpl(Inline), Op]
        public Vpord vpord(AsmHexCode encoded) => new Vpord(encoded);

        public struct Vporq : ITypedInstruction<Vporq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vporq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vporq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vporq src) => AsmMnemonics.VPORQ;

            public static implicit operator AsmHexCode(Vporq src) => src.Encoded;

            public static implicit operator Vporq(AsmHexCode src) => new Vporq(src);
        }

        public Vporq vporq() => default;

        [MethodImpl(Inline), Op]
        public Vporq vporq(AsmHexCode encoded) => new Vporq(encoded);

        public struct Vpperm : ITypedInstruction<Vpperm>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpperm(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPPERM;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpperm src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpperm src) => AsmMnemonics.VPPERM;

            public static implicit operator AsmHexCode(Vpperm src) => src.Encoded;

            public static implicit operator Vpperm(AsmHexCode src) => new Vpperm(src);
        }

        public Vpperm vpperm() => default;

        [MethodImpl(Inline), Op]
        public Vpperm vpperm(AsmHexCode encoded) => new Vpperm(encoded);

        public struct Vprold : ITypedInstruction<Vprold>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprold(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprold src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprold src) => AsmMnemonics.VPROLD;

            public static implicit operator AsmHexCode(Vprold src) => src.Encoded;

            public static implicit operator Vprold(AsmHexCode src) => new Vprold(src);
        }

        public Vprold vprold() => default;

        [MethodImpl(Inline), Op]
        public Vprold vprold(AsmHexCode encoded) => new Vprold(encoded);

        public struct Vprolq : ITypedInstruction<Vprolq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprolq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprolq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprolq src) => AsmMnemonics.VPROLQ;

            public static implicit operator AsmHexCode(Vprolq src) => src.Encoded;

            public static implicit operator Vprolq(AsmHexCode src) => new Vprolq(src);
        }

        public Vprolq vprolq() => default;

        [MethodImpl(Inline), Op]
        public Vprolq vprolq(AsmHexCode encoded) => new Vprolq(encoded);

        public struct Vprolvd : ITypedInstruction<Vprolvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprolvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROLVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprolvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprolvd src) => AsmMnemonics.VPROLVD;

            public static implicit operator AsmHexCode(Vprolvd src) => src.Encoded;

            public static implicit operator Vprolvd(AsmHexCode src) => new Vprolvd(src);
        }

        public Vprolvd vprolvd() => default;

        [MethodImpl(Inline), Op]
        public Vprolvd vprolvd(AsmHexCode encoded) => new Vprolvd(encoded);

        public struct Vprolvq : ITypedInstruction<Vprolvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprolvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROLVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprolvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprolvq src) => AsmMnemonics.VPROLVQ;

            public static implicit operator AsmHexCode(Vprolvq src) => src.Encoded;

            public static implicit operator Vprolvq(AsmHexCode src) => new Vprolvq(src);
        }

        public Vprolvq vprolvq() => default;

        [MethodImpl(Inline), Op]
        public Vprolvq vprolvq(AsmHexCode encoded) => new Vprolvq(encoded);

        public struct Vprord : ITypedInstruction<Vprord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPRORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprord src) => AsmMnemonics.VPRORD;

            public static implicit operator AsmHexCode(Vprord src) => src.Encoded;

            public static implicit operator Vprord(AsmHexCode src) => new Vprord(src);
        }

        public Vprord vprord() => default;

        [MethodImpl(Inline), Op]
        public Vprord vprord(AsmHexCode encoded) => new Vprord(encoded);

        public struct Vprorq : ITypedInstruction<Vprorq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprorq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPRORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprorq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprorq src) => AsmMnemonics.VPRORQ;

            public static implicit operator AsmHexCode(Vprorq src) => src.Encoded;

            public static implicit operator Vprorq(AsmHexCode src) => new Vprorq(src);
        }

        public Vprorq vprorq() => default;

        [MethodImpl(Inline), Op]
        public Vprorq vprorq(AsmHexCode encoded) => new Vprorq(encoded);

        public struct Vprorvd : ITypedInstruction<Vprorvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprorvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPRORVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprorvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprorvd src) => AsmMnemonics.VPRORVD;

            public static implicit operator AsmHexCode(Vprorvd src) => src.Encoded;

            public static implicit operator Vprorvd(AsmHexCode src) => new Vprorvd(src);
        }

        public Vprorvd vprorvd() => default;

        [MethodImpl(Inline), Op]
        public Vprorvd vprorvd(AsmHexCode encoded) => new Vprorvd(encoded);

        public struct Vprorvq : ITypedInstruction<Vprorvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprorvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPRORVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprorvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprorvq src) => AsmMnemonics.VPRORVQ;

            public static implicit operator AsmHexCode(Vprorvq src) => src.Encoded;

            public static implicit operator Vprorvq(AsmHexCode src) => new Vprorvq(src);
        }

        public Vprorvq vprorvq() => default;

        [MethodImpl(Inline), Op]
        public Vprorvq vprorvq(AsmHexCode encoded) => new Vprorvq(encoded);

        public struct Vprotb : ITypedInstruction<Vprotb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprotb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROTB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprotb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprotb src) => AsmMnemonics.VPROTB;

            public static implicit operator AsmHexCode(Vprotb src) => src.Encoded;

            public static implicit operator Vprotb(AsmHexCode src) => new Vprotb(src);
        }

        public Vprotb vprotb() => default;

        [MethodImpl(Inline), Op]
        public Vprotb vprotb(AsmHexCode encoded) => new Vprotb(encoded);

        public struct Vprotd : ITypedInstruction<Vprotd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprotd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROTD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprotd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprotd src) => AsmMnemonics.VPROTD;

            public static implicit operator AsmHexCode(Vprotd src) => src.Encoded;

            public static implicit operator Vprotd(AsmHexCode src) => new Vprotd(src);
        }

        public Vprotd vprotd() => default;

        [MethodImpl(Inline), Op]
        public Vprotd vprotd(AsmHexCode encoded) => new Vprotd(encoded);

        public struct Vprotq : ITypedInstruction<Vprotq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprotq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROTQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprotq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprotq src) => AsmMnemonics.VPROTQ;

            public static implicit operator AsmHexCode(Vprotq src) => src.Encoded;

            public static implicit operator Vprotq(AsmHexCode src) => new Vprotq(src);
        }

        public Vprotq vprotq() => default;

        [MethodImpl(Inline), Op]
        public Vprotq vprotq(AsmHexCode encoded) => new Vprotq(encoded);

        public struct Vprotw : ITypedInstruction<Vprotw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vprotw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPROTW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vprotw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vprotw src) => AsmMnemonics.VPROTW;

            public static implicit operator AsmHexCode(Vprotw src) => src.Encoded;

            public static implicit operator Vprotw(AsmHexCode src) => new Vprotw(src);
        }

        public Vprotw vprotw() => default;

        [MethodImpl(Inline), Op]
        public Vprotw vprotw(AsmHexCode encoded) => new Vprotw(encoded);

        public struct Vpsadbw : ITypedInstruction<Vpsadbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsadbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSADBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsadbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsadbw src) => AsmMnemonics.VPSADBW;

            public static implicit operator AsmHexCode(Vpsadbw src) => src.Encoded;

            public static implicit operator Vpsadbw(AsmHexCode src) => new Vpsadbw(src);
        }

        public Vpsadbw vpsadbw() => default;

        [MethodImpl(Inline), Op]
        public Vpsadbw vpsadbw(AsmHexCode encoded) => new Vpsadbw(encoded);

        public struct Vpscatterdd : ITypedInstruction<Vpscatterdd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpscatterdd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSCATTERDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpscatterdd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpscatterdd src) => AsmMnemonics.VPSCATTERDD;

            public static implicit operator AsmHexCode(Vpscatterdd src) => src.Encoded;

            public static implicit operator Vpscatterdd(AsmHexCode src) => new Vpscatterdd(src);
        }

        public Vpscatterdd vpscatterdd() => default;

        [MethodImpl(Inline), Op]
        public Vpscatterdd vpscatterdd(AsmHexCode encoded) => new Vpscatterdd(encoded);

        public struct Vpscatterdq : ITypedInstruction<Vpscatterdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpscatterdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSCATTERDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpscatterdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpscatterdq src) => AsmMnemonics.VPSCATTERDQ;

            public static implicit operator AsmHexCode(Vpscatterdq src) => src.Encoded;

            public static implicit operator Vpscatterdq(AsmHexCode src) => new Vpscatterdq(src);
        }

        public Vpscatterdq vpscatterdq() => default;

        [MethodImpl(Inline), Op]
        public Vpscatterdq vpscatterdq(AsmHexCode encoded) => new Vpscatterdq(encoded);

        public struct Vpscatterqd : ITypedInstruction<Vpscatterqd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpscatterqd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSCATTERQD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpscatterqd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpscatterqd src) => AsmMnemonics.VPSCATTERQD;

            public static implicit operator AsmHexCode(Vpscatterqd src) => src.Encoded;

            public static implicit operator Vpscatterqd(AsmHexCode src) => new Vpscatterqd(src);
        }

        public Vpscatterqd vpscatterqd() => default;

        [MethodImpl(Inline), Op]
        public Vpscatterqd vpscatterqd(AsmHexCode encoded) => new Vpscatterqd(encoded);

        public struct Vpscatterqq : ITypedInstruction<Vpscatterqq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpscatterqq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSCATTERQQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpscatterqq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpscatterqq src) => AsmMnemonics.VPSCATTERQQ;

            public static implicit operator AsmHexCode(Vpscatterqq src) => src.Encoded;

            public static implicit operator Vpscatterqq(AsmHexCode src) => new Vpscatterqq(src);
        }

        public Vpscatterqq vpscatterqq() => default;

        [MethodImpl(Inline), Op]
        public Vpscatterqq vpscatterqq(AsmHexCode encoded) => new Vpscatterqq(encoded);

        public struct Vpshab : ITypedInstruction<Vpshab>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshab(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHAB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshab src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshab src) => AsmMnemonics.VPSHAB;

            public static implicit operator AsmHexCode(Vpshab src) => src.Encoded;

            public static implicit operator Vpshab(AsmHexCode src) => new Vpshab(src);
        }

        public Vpshab vpshab() => default;

        [MethodImpl(Inline), Op]
        public Vpshab vpshab(AsmHexCode encoded) => new Vpshab(encoded);

        public struct Vpshad : ITypedInstruction<Vpshad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshad src) => AsmMnemonics.VPSHAD;

            public static implicit operator AsmHexCode(Vpshad src) => src.Encoded;

            public static implicit operator Vpshad(AsmHexCode src) => new Vpshad(src);
        }

        public Vpshad vpshad() => default;

        [MethodImpl(Inline), Op]
        public Vpshad vpshad(AsmHexCode encoded) => new Vpshad(encoded);

        public struct Vpshaq : ITypedInstruction<Vpshaq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshaq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHAQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshaq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshaq src) => AsmMnemonics.VPSHAQ;

            public static implicit operator AsmHexCode(Vpshaq src) => src.Encoded;

            public static implicit operator Vpshaq(AsmHexCode src) => new Vpshaq(src);
        }

        public Vpshaq vpshaq() => default;

        [MethodImpl(Inline), Op]
        public Vpshaq vpshaq(AsmHexCode encoded) => new Vpshaq(encoded);

        public struct Vpshaw : ITypedInstruction<Vpshaw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshaw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHAW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshaw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshaw src) => AsmMnemonics.VPSHAW;

            public static implicit operator AsmHexCode(Vpshaw src) => src.Encoded;

            public static implicit operator Vpshaw(AsmHexCode src) => new Vpshaw(src);
        }

        public Vpshaw vpshaw() => default;

        [MethodImpl(Inline), Op]
        public Vpshaw vpshaw(AsmHexCode encoded) => new Vpshaw(encoded);

        public struct Vpshlb : ITypedInstruction<Vpshlb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshlb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshlb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshlb src) => AsmMnemonics.VPSHLB;

            public static implicit operator AsmHexCode(Vpshlb src) => src.Encoded;

            public static implicit operator Vpshlb(AsmHexCode src) => new Vpshlb(src);
        }

        public Vpshlb vpshlb() => default;

        [MethodImpl(Inline), Op]
        public Vpshlb vpshlb(AsmHexCode encoded) => new Vpshlb(encoded);

        public struct Vpshld : ITypedInstruction<Vpshld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshld src) => AsmMnemonics.VPSHLD;

            public static implicit operator AsmHexCode(Vpshld src) => src.Encoded;

            public static implicit operator Vpshld(AsmHexCode src) => new Vpshld(src);
        }

        public Vpshld vpshld() => default;

        [MethodImpl(Inline), Op]
        public Vpshld vpshld(AsmHexCode encoded) => new Vpshld(encoded);

        public struct Vpshldd : ITypedInstruction<Vpshldd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldd src) => AsmMnemonics.VPSHLDD;

            public static implicit operator AsmHexCode(Vpshldd src) => src.Encoded;

            public static implicit operator Vpshldd(AsmHexCode src) => new Vpshldd(src);
        }

        public Vpshldd vpshldd() => default;

        [MethodImpl(Inline), Op]
        public Vpshldd vpshldd(AsmHexCode encoded) => new Vpshldd(encoded);

        public struct Vpshldq : ITypedInstruction<Vpshldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldq src) => AsmMnemonics.VPSHLDQ;

            public static implicit operator AsmHexCode(Vpshldq src) => src.Encoded;

            public static implicit operator Vpshldq(AsmHexCode src) => new Vpshldq(src);
        }

        public Vpshldq vpshldq() => default;

        [MethodImpl(Inline), Op]
        public Vpshldq vpshldq(AsmHexCode encoded) => new Vpshldq(encoded);

        public struct Vpshldvd : ITypedInstruction<Vpshldvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldvd src) => AsmMnemonics.VPSHLDVD;

            public static implicit operator AsmHexCode(Vpshldvd src) => src.Encoded;

            public static implicit operator Vpshldvd(AsmHexCode src) => new Vpshldvd(src);
        }

        public Vpshldvd vpshldvd() => default;

        [MethodImpl(Inline), Op]
        public Vpshldvd vpshldvd(AsmHexCode encoded) => new Vpshldvd(encoded);

        public struct Vpshldvq : ITypedInstruction<Vpshldvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldvq src) => AsmMnemonics.VPSHLDVQ;

            public static implicit operator AsmHexCode(Vpshldvq src) => src.Encoded;

            public static implicit operator Vpshldvq(AsmHexCode src) => new Vpshldvq(src);
        }

        public Vpshldvq vpshldvq() => default;

        [MethodImpl(Inline), Op]
        public Vpshldvq vpshldvq(AsmHexCode encoded) => new Vpshldvq(encoded);

        public struct Vpshldvw : ITypedInstruction<Vpshldvw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldvw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldvw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldvw src) => AsmMnemonics.VPSHLDVW;

            public static implicit operator AsmHexCode(Vpshldvw src) => src.Encoded;

            public static implicit operator Vpshldvw(AsmHexCode src) => new Vpshldvw(src);
        }

        public Vpshldvw vpshldvw() => default;

        [MethodImpl(Inline), Op]
        public Vpshldvw vpshldvw(AsmHexCode encoded) => new Vpshldvw(encoded);

        public struct Vpshldw : ITypedInstruction<Vpshldw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshldw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshldw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshldw src) => AsmMnemonics.VPSHLDW;

            public static implicit operator AsmHexCode(Vpshldw src) => src.Encoded;

            public static implicit operator Vpshldw(AsmHexCode src) => new Vpshldw(src);
        }

        public Vpshldw vpshldw() => default;

        [MethodImpl(Inline), Op]
        public Vpshldw vpshldw(AsmHexCode encoded) => new Vpshldw(encoded);

        public struct Vpshlq : ITypedInstruction<Vpshlq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshlq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshlq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshlq src) => AsmMnemonics.VPSHLQ;

            public static implicit operator AsmHexCode(Vpshlq src) => src.Encoded;

            public static implicit operator Vpshlq(AsmHexCode src) => new Vpshlq(src);
        }

        public Vpshlq vpshlq() => default;

        [MethodImpl(Inline), Op]
        public Vpshlq vpshlq(AsmHexCode encoded) => new Vpshlq(encoded);

        public struct Vpshlw : ITypedInstruction<Vpshlw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshlw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshlw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshlw src) => AsmMnemonics.VPSHLW;

            public static implicit operator AsmHexCode(Vpshlw src) => src.Encoded;

            public static implicit operator Vpshlw(AsmHexCode src) => new Vpshlw(src);
        }

        public Vpshlw vpshlw() => default;

        [MethodImpl(Inline), Op]
        public Vpshlw vpshlw(AsmHexCode encoded) => new Vpshlw(encoded);

        public struct Vpshrdd : ITypedInstruction<Vpshrdd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdd src) => AsmMnemonics.VPSHRDD;

            public static implicit operator AsmHexCode(Vpshrdd src) => src.Encoded;

            public static implicit operator Vpshrdd(AsmHexCode src) => new Vpshrdd(src);
        }

        public Vpshrdd vpshrdd() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdd vpshrdd(AsmHexCode encoded) => new Vpshrdd(encoded);

        public struct Vpshrdq : ITypedInstruction<Vpshrdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdq src) => AsmMnemonics.VPSHRDQ;

            public static implicit operator AsmHexCode(Vpshrdq src) => src.Encoded;

            public static implicit operator Vpshrdq(AsmHexCode src) => new Vpshrdq(src);
        }

        public Vpshrdq vpshrdq() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdq vpshrdq(AsmHexCode encoded) => new Vpshrdq(encoded);

        public struct Vpshrdvd : ITypedInstruction<Vpshrdvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdvd src) => AsmMnemonics.VPSHRDVD;

            public static implicit operator AsmHexCode(Vpshrdvd src) => src.Encoded;

            public static implicit operator Vpshrdvd(AsmHexCode src) => new Vpshrdvd(src);
        }

        public Vpshrdvd vpshrdvd() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdvd vpshrdvd(AsmHexCode encoded) => new Vpshrdvd(encoded);

        public struct Vpshrdvq : ITypedInstruction<Vpshrdvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdvq src) => AsmMnemonics.VPSHRDVQ;

            public static implicit operator AsmHexCode(Vpshrdvq src) => src.Encoded;

            public static implicit operator Vpshrdvq(AsmHexCode src) => new Vpshrdvq(src);
        }

        public Vpshrdvq vpshrdvq() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdvq vpshrdvq(AsmHexCode encoded) => new Vpshrdvq(encoded);

        public struct Vpshrdvw : ITypedInstruction<Vpshrdvw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdvw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdvw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdvw src) => AsmMnemonics.VPSHRDVW;

            public static implicit operator AsmHexCode(Vpshrdvw src) => src.Encoded;

            public static implicit operator Vpshrdvw(AsmHexCode src) => new Vpshrdvw(src);
        }

        public Vpshrdvw vpshrdvw() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdvw vpshrdvw(AsmHexCode encoded) => new Vpshrdvw(encoded);

        public struct Vpshrdw : ITypedInstruction<Vpshrdw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshrdw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHRDW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshrdw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshrdw src) => AsmMnemonics.VPSHRDW;

            public static implicit operator AsmHexCode(Vpshrdw src) => src.Encoded;

            public static implicit operator Vpshrdw(AsmHexCode src) => new Vpshrdw(src);
        }

        public Vpshrdw vpshrdw() => default;

        [MethodImpl(Inline), Op]
        public Vpshrdw vpshrdw(AsmHexCode encoded) => new Vpshrdw(encoded);

        public struct Vpshufb : ITypedInstruction<Vpshufb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshufb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHUFB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshufb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshufb src) => AsmMnemonics.VPSHUFB;

            public static implicit operator AsmHexCode(Vpshufb src) => src.Encoded;

            public static implicit operator Vpshufb(AsmHexCode src) => new Vpshufb(src);
        }

        public Vpshufb vpshufb() => default;

        [MethodImpl(Inline), Op]
        public Vpshufb vpshufb(AsmHexCode encoded) => new Vpshufb(encoded);

        public struct Vpshufbitqmb : ITypedInstruction<Vpshufbitqmb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshufbitqmb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHUFBITQMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshufbitqmb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshufbitqmb src) => AsmMnemonics.VPSHUFBITQMB;

            public static implicit operator AsmHexCode(Vpshufbitqmb src) => src.Encoded;

            public static implicit operator Vpshufbitqmb(AsmHexCode src) => new Vpshufbitqmb(src);
        }

        public Vpshufbitqmb vpshufbitqmb() => default;

        [MethodImpl(Inline), Op]
        public Vpshufbitqmb vpshufbitqmb(AsmHexCode encoded) => new Vpshufbitqmb(encoded);

        public struct Vpshufd : ITypedInstruction<Vpshufd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshufd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHUFD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshufd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshufd src) => AsmMnemonics.VPSHUFD;

            public static implicit operator AsmHexCode(Vpshufd src) => src.Encoded;

            public static implicit operator Vpshufd(AsmHexCode src) => new Vpshufd(src);
        }

        public Vpshufd vpshufd() => default;

        [MethodImpl(Inline), Op]
        public Vpshufd vpshufd(AsmHexCode encoded) => new Vpshufd(encoded);

        public struct Vpshufhw : ITypedInstruction<Vpshufhw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshufhw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHUFHW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshufhw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshufhw src) => AsmMnemonics.VPSHUFHW;

            public static implicit operator AsmHexCode(Vpshufhw src) => src.Encoded;

            public static implicit operator Vpshufhw(AsmHexCode src) => new Vpshufhw(src);
        }

        public Vpshufhw vpshufhw() => default;

        [MethodImpl(Inline), Op]
        public Vpshufhw vpshufhw(AsmHexCode encoded) => new Vpshufhw(encoded);

        public struct Vpshuflw : ITypedInstruction<Vpshuflw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpshuflw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSHUFLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpshuflw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpshuflw src) => AsmMnemonics.VPSHUFLW;

            public static implicit operator AsmHexCode(Vpshuflw src) => src.Encoded;

            public static implicit operator Vpshuflw(AsmHexCode src) => new Vpshuflw(src);
        }

        public Vpshuflw vpshuflw() => default;

        [MethodImpl(Inline), Op]
        public Vpshuflw vpshuflw(AsmHexCode encoded) => new Vpshuflw(encoded);

        public struct Vpsignb : ITypedInstruction<Vpsignb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsignb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSIGNB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsignb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsignb src) => AsmMnemonics.VPSIGNB;

            public static implicit operator AsmHexCode(Vpsignb src) => src.Encoded;

            public static implicit operator Vpsignb(AsmHexCode src) => new Vpsignb(src);
        }

        public Vpsignb vpsignb() => default;

        [MethodImpl(Inline), Op]
        public Vpsignb vpsignb(AsmHexCode encoded) => new Vpsignb(encoded);

        public struct Vpsignd : ITypedInstruction<Vpsignd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsignd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSIGND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsignd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsignd src) => AsmMnemonics.VPSIGND;

            public static implicit operator AsmHexCode(Vpsignd src) => src.Encoded;

            public static implicit operator Vpsignd(AsmHexCode src) => new Vpsignd(src);
        }

        public Vpsignd vpsignd() => default;

        [MethodImpl(Inline), Op]
        public Vpsignd vpsignd(AsmHexCode encoded) => new Vpsignd(encoded);

        public struct Vpsignw : ITypedInstruction<Vpsignw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsignw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSIGNW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsignw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsignw src) => AsmMnemonics.VPSIGNW;

            public static implicit operator AsmHexCode(Vpsignw src) => src.Encoded;

            public static implicit operator Vpsignw(AsmHexCode src) => new Vpsignw(src);
        }

        public Vpsignw vpsignw() => default;

        [MethodImpl(Inline), Op]
        public Vpsignw vpsignw(AsmHexCode encoded) => new Vpsignw(encoded);

        public struct Vpslld : ITypedInstruction<Vpslld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpslld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpslld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpslld src) => AsmMnemonics.VPSLLD;

            public static implicit operator AsmHexCode(Vpslld src) => src.Encoded;

            public static implicit operator Vpslld(AsmHexCode src) => new Vpslld(src);
        }

        public Vpslld vpslld() => default;

        [MethodImpl(Inline), Op]
        public Vpslld vpslld(AsmHexCode encoded) => new Vpslld(encoded);

        public struct Vpslldq : ITypedInstruction<Vpslldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpslldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpslldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpslldq src) => AsmMnemonics.VPSLLDQ;

            public static implicit operator AsmHexCode(Vpslldq src) => src.Encoded;

            public static implicit operator Vpslldq(AsmHexCode src) => new Vpslldq(src);
        }

        public Vpslldq vpslldq() => default;

        [MethodImpl(Inline), Op]
        public Vpslldq vpslldq(AsmHexCode encoded) => new Vpslldq(encoded);

        public struct Vpsllq : ITypedInstruction<Vpsllq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsllq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsllq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsllq src) => AsmMnemonics.VPSLLQ;

            public static implicit operator AsmHexCode(Vpsllq src) => src.Encoded;

            public static implicit operator Vpsllq(AsmHexCode src) => new Vpsllq(src);
        }

        public Vpsllq vpsllq() => default;

        [MethodImpl(Inline), Op]
        public Vpsllq vpsllq(AsmHexCode encoded) => new Vpsllq(encoded);

        public struct Vpsllvd : ITypedInstruction<Vpsllvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsllvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsllvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsllvd src) => AsmMnemonics.VPSLLVD;

            public static implicit operator AsmHexCode(Vpsllvd src) => src.Encoded;

            public static implicit operator Vpsllvd(AsmHexCode src) => new Vpsllvd(src);
        }

        public Vpsllvd vpsllvd() => default;

        [MethodImpl(Inline), Op]
        public Vpsllvd vpsllvd(AsmHexCode encoded) => new Vpsllvd(encoded);

        public struct Vpsllvq : ITypedInstruction<Vpsllvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsllvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsllvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsllvq src) => AsmMnemonics.VPSLLVQ;

            public static implicit operator AsmHexCode(Vpsllvq src) => src.Encoded;

            public static implicit operator Vpsllvq(AsmHexCode src) => new Vpsllvq(src);
        }

        public Vpsllvq vpsllvq() => default;

        [MethodImpl(Inline), Op]
        public Vpsllvq vpsllvq(AsmHexCode encoded) => new Vpsllvq(encoded);

        public struct Vpsllvw : ITypedInstruction<Vpsllvw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsllvw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsllvw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsllvw src) => AsmMnemonics.VPSLLVW;

            public static implicit operator AsmHexCode(Vpsllvw src) => src.Encoded;

            public static implicit operator Vpsllvw(AsmHexCode src) => new Vpsllvw(src);
        }

        public Vpsllvw vpsllvw() => default;

        [MethodImpl(Inline), Op]
        public Vpsllvw vpsllvw(AsmHexCode encoded) => new Vpsllvw(encoded);

        public struct Vpsllw : ITypedInstruction<Vpsllw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsllw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSLLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsllw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsllw src) => AsmMnemonics.VPSLLW;

            public static implicit operator AsmHexCode(Vpsllw src) => src.Encoded;

            public static implicit operator Vpsllw(AsmHexCode src) => new Vpsllw(src);
        }

        public Vpsllw vpsllw() => default;

        [MethodImpl(Inline), Op]
        public Vpsllw vpsllw(AsmHexCode encoded) => new Vpsllw(encoded);

        public struct Vpsrad : ITypedInstruction<Vpsrad>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrad(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrad src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrad src) => AsmMnemonics.VPSRAD;

            public static implicit operator AsmHexCode(Vpsrad src) => src.Encoded;

            public static implicit operator Vpsrad(AsmHexCode src) => new Vpsrad(src);
        }

        public Vpsrad vpsrad() => default;

        [MethodImpl(Inline), Op]
        public Vpsrad vpsrad(AsmHexCode encoded) => new Vpsrad(encoded);

        public struct Vpsraq : ITypedInstruction<Vpsraq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsraq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsraq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsraq src) => AsmMnemonics.VPSRAQ;

            public static implicit operator AsmHexCode(Vpsraq src) => src.Encoded;

            public static implicit operator Vpsraq(AsmHexCode src) => new Vpsraq(src);
        }

        public Vpsraq vpsraq() => default;

        [MethodImpl(Inline), Op]
        public Vpsraq vpsraq(AsmHexCode encoded) => new Vpsraq(encoded);

        public struct Vpsravd : ITypedInstruction<Vpsravd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsravd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsravd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsravd src) => AsmMnemonics.VPSRAVD;

            public static implicit operator AsmHexCode(Vpsravd src) => src.Encoded;

            public static implicit operator Vpsravd(AsmHexCode src) => new Vpsravd(src);
        }

        public Vpsravd vpsravd() => default;

        [MethodImpl(Inline), Op]
        public Vpsravd vpsravd(AsmHexCode encoded) => new Vpsravd(encoded);

        public struct Vpsravq : ITypedInstruction<Vpsravq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsravq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsravq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsravq src) => AsmMnemonics.VPSRAVQ;

            public static implicit operator AsmHexCode(Vpsravq src) => src.Encoded;

            public static implicit operator Vpsravq(AsmHexCode src) => new Vpsravq(src);
        }

        public Vpsravq vpsravq() => default;

        [MethodImpl(Inline), Op]
        public Vpsravq vpsravq(AsmHexCode encoded) => new Vpsravq(encoded);

        public struct Vpsravw : ITypedInstruction<Vpsravw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsravw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsravw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsravw src) => AsmMnemonics.VPSRAVW;

            public static implicit operator AsmHexCode(Vpsravw src) => src.Encoded;

            public static implicit operator Vpsravw(AsmHexCode src) => new Vpsravw(src);
        }

        public Vpsravw vpsravw() => default;

        [MethodImpl(Inline), Op]
        public Vpsravw vpsravw(AsmHexCode encoded) => new Vpsravw(encoded);

        public struct Vpsraw : ITypedInstruction<Vpsraw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsraw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRAW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsraw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsraw src) => AsmMnemonics.VPSRAW;

            public static implicit operator AsmHexCode(Vpsraw src) => src.Encoded;

            public static implicit operator Vpsraw(AsmHexCode src) => new Vpsraw(src);
        }

        public Vpsraw vpsraw() => default;

        [MethodImpl(Inline), Op]
        public Vpsraw vpsraw(AsmHexCode encoded) => new Vpsraw(encoded);

        public struct Vpsrld : ITypedInstruction<Vpsrld>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrld(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrld src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrld src) => AsmMnemonics.VPSRLD;

            public static implicit operator AsmHexCode(Vpsrld src) => src.Encoded;

            public static implicit operator Vpsrld(AsmHexCode src) => new Vpsrld(src);
        }

        public Vpsrld vpsrld() => default;

        [MethodImpl(Inline), Op]
        public Vpsrld vpsrld(AsmHexCode encoded) => new Vpsrld(encoded);

        public struct Vpsrldq : ITypedInstruction<Vpsrldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrldq src) => AsmMnemonics.VPSRLDQ;

            public static implicit operator AsmHexCode(Vpsrldq src) => src.Encoded;

            public static implicit operator Vpsrldq(AsmHexCode src) => new Vpsrldq(src);
        }

        public Vpsrldq vpsrldq() => default;

        [MethodImpl(Inline), Op]
        public Vpsrldq vpsrldq(AsmHexCode encoded) => new Vpsrldq(encoded);

        public struct Vpsrlq : ITypedInstruction<Vpsrlq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrlq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrlq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrlq src) => AsmMnemonics.VPSRLQ;

            public static implicit operator AsmHexCode(Vpsrlq src) => src.Encoded;

            public static implicit operator Vpsrlq(AsmHexCode src) => new Vpsrlq(src);
        }

        public Vpsrlq vpsrlq() => default;

        [MethodImpl(Inline), Op]
        public Vpsrlq vpsrlq(AsmHexCode encoded) => new Vpsrlq(encoded);

        public struct Vpsrlvd : ITypedInstruction<Vpsrlvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrlvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrlvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrlvd src) => AsmMnemonics.VPSRLVD;

            public static implicit operator AsmHexCode(Vpsrlvd src) => src.Encoded;

            public static implicit operator Vpsrlvd(AsmHexCode src) => new Vpsrlvd(src);
        }

        public Vpsrlvd vpsrlvd() => default;

        [MethodImpl(Inline), Op]
        public Vpsrlvd vpsrlvd(AsmHexCode encoded) => new Vpsrlvd(encoded);

        public struct Vpsrlvq : ITypedInstruction<Vpsrlvq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrlvq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLVQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrlvq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrlvq src) => AsmMnemonics.VPSRLVQ;

            public static implicit operator AsmHexCode(Vpsrlvq src) => src.Encoded;

            public static implicit operator Vpsrlvq(AsmHexCode src) => new Vpsrlvq(src);
        }

        public Vpsrlvq vpsrlvq() => default;

        [MethodImpl(Inline), Op]
        public Vpsrlvq vpsrlvq(AsmHexCode encoded) => new Vpsrlvq(encoded);

        public struct Vpsrlvw : ITypedInstruction<Vpsrlvw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrlvw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLVW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrlvw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrlvw src) => AsmMnemonics.VPSRLVW;

            public static implicit operator AsmHexCode(Vpsrlvw src) => src.Encoded;

            public static implicit operator Vpsrlvw(AsmHexCode src) => new Vpsrlvw(src);
        }

        public Vpsrlvw vpsrlvw() => default;

        [MethodImpl(Inline), Op]
        public Vpsrlvw vpsrlvw(AsmHexCode encoded) => new Vpsrlvw(encoded);

        public struct Vpsrlw : ITypedInstruction<Vpsrlw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsrlw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSRLW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsrlw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsrlw src) => AsmMnemonics.VPSRLW;

            public static implicit operator AsmHexCode(Vpsrlw src) => src.Encoded;

            public static implicit operator Vpsrlw(AsmHexCode src) => new Vpsrlw(src);
        }

        public Vpsrlw vpsrlw() => default;

        [MethodImpl(Inline), Op]
        public Vpsrlw vpsrlw(AsmHexCode encoded) => new Vpsrlw(encoded);

        public struct Vpsubb : ITypedInstruction<Vpsubb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubb src) => AsmMnemonics.VPSUBB;

            public static implicit operator AsmHexCode(Vpsubb src) => src.Encoded;

            public static implicit operator Vpsubb(AsmHexCode src) => new Vpsubb(src);
        }

        public Vpsubb vpsubb() => default;

        [MethodImpl(Inline), Op]
        public Vpsubb vpsubb(AsmHexCode encoded) => new Vpsubb(encoded);

        public struct Vpsubd : ITypedInstruction<Vpsubd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubd src) => AsmMnemonics.VPSUBD;

            public static implicit operator AsmHexCode(Vpsubd src) => src.Encoded;

            public static implicit operator Vpsubd(AsmHexCode src) => new Vpsubd(src);
        }

        public Vpsubd vpsubd() => default;

        [MethodImpl(Inline), Op]
        public Vpsubd vpsubd(AsmHexCode encoded) => new Vpsubd(encoded);

        public struct Vpsubq : ITypedInstruction<Vpsubq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubq src) => AsmMnemonics.VPSUBQ;

            public static implicit operator AsmHexCode(Vpsubq src) => src.Encoded;

            public static implicit operator Vpsubq(AsmHexCode src) => new Vpsubq(src);
        }

        public Vpsubq vpsubq() => default;

        [MethodImpl(Inline), Op]
        public Vpsubq vpsubq(AsmHexCode encoded) => new Vpsubq(encoded);

        public struct Vpsubsb : ITypedInstruction<Vpsubsb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubsb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubsb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubsb src) => AsmMnemonics.VPSUBSB;

            public static implicit operator AsmHexCode(Vpsubsb src) => src.Encoded;

            public static implicit operator Vpsubsb(AsmHexCode src) => new Vpsubsb(src);
        }

        public Vpsubsb vpsubsb() => default;

        [MethodImpl(Inline), Op]
        public Vpsubsb vpsubsb(AsmHexCode encoded) => new Vpsubsb(encoded);

        public struct Vpsubsw : ITypedInstruction<Vpsubsw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubsw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubsw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubsw src) => AsmMnemonics.VPSUBSW;

            public static implicit operator AsmHexCode(Vpsubsw src) => src.Encoded;

            public static implicit operator Vpsubsw(AsmHexCode src) => new Vpsubsw(src);
        }

        public Vpsubsw vpsubsw() => default;

        [MethodImpl(Inline), Op]
        public Vpsubsw vpsubsw(AsmHexCode encoded) => new Vpsubsw(encoded);

        public struct Vpsubusb : ITypedInstruction<Vpsubusb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubusb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBUSB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubusb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubusb src) => AsmMnemonics.VPSUBUSB;

            public static implicit operator AsmHexCode(Vpsubusb src) => src.Encoded;

            public static implicit operator Vpsubusb(AsmHexCode src) => new Vpsubusb(src);
        }

        public Vpsubusb vpsubusb() => default;

        [MethodImpl(Inline), Op]
        public Vpsubusb vpsubusb(AsmHexCode encoded) => new Vpsubusb(encoded);

        public struct Vpsubusw : ITypedInstruction<Vpsubusw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubusw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBUSW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubusw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubusw src) => AsmMnemonics.VPSUBUSW;

            public static implicit operator AsmHexCode(Vpsubusw src) => src.Encoded;

            public static implicit operator Vpsubusw(AsmHexCode src) => new Vpsubusw(src);
        }

        public Vpsubusw vpsubusw() => default;

        [MethodImpl(Inline), Op]
        public Vpsubusw vpsubusw(AsmHexCode encoded) => new Vpsubusw(encoded);

        public struct Vpsubw : ITypedInstruction<Vpsubw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpsubw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPSUBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpsubw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpsubw src) => AsmMnemonics.VPSUBW;

            public static implicit operator AsmHexCode(Vpsubw src) => src.Encoded;

            public static implicit operator Vpsubw(AsmHexCode src) => new Vpsubw(src);
        }

        public Vpsubw vpsubw() => default;

        [MethodImpl(Inline), Op]
        public Vpsubw vpsubw(AsmHexCode encoded) => new Vpsubw(encoded);

        public struct Vpternlogd : ITypedInstruction<Vpternlogd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpternlogd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTERNLOGD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpternlogd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpternlogd src) => AsmMnemonics.VPTERNLOGD;

            public static implicit operator AsmHexCode(Vpternlogd src) => src.Encoded;

            public static implicit operator Vpternlogd(AsmHexCode src) => new Vpternlogd(src);
        }

        public Vpternlogd vpternlogd() => default;

        [MethodImpl(Inline), Op]
        public Vpternlogd vpternlogd(AsmHexCode encoded) => new Vpternlogd(encoded);

        public struct Vpternlogq : ITypedInstruction<Vpternlogq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpternlogq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTERNLOGQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpternlogq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpternlogq src) => AsmMnemonics.VPTERNLOGQ;

            public static implicit operator AsmHexCode(Vpternlogq src) => src.Encoded;

            public static implicit operator Vpternlogq(AsmHexCode src) => new Vpternlogq(src);
        }

        public Vpternlogq vpternlogq() => default;

        [MethodImpl(Inline), Op]
        public Vpternlogq vpternlogq(AsmHexCode encoded) => new Vpternlogq(encoded);

        public struct Vptest : ITypedInstruction<Vptest>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptest(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTEST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptest src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptest src) => AsmMnemonics.VPTEST;

            public static implicit operator AsmHexCode(Vptest src) => src.Encoded;

            public static implicit operator Vptest(AsmHexCode src) => new Vptest(src);
        }

        public Vptest vptest() => default;

        [MethodImpl(Inline), Op]
        public Vptest vptest(AsmHexCode encoded) => new Vptest(encoded);

        public struct Vptestmb : ITypedInstruction<Vptestmb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestmb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestmb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestmb src) => AsmMnemonics.VPTESTMB;

            public static implicit operator AsmHexCode(Vptestmb src) => src.Encoded;

            public static implicit operator Vptestmb(AsmHexCode src) => new Vptestmb(src);
        }

        public Vptestmb vptestmb() => default;

        [MethodImpl(Inline), Op]
        public Vptestmb vptestmb(AsmHexCode encoded) => new Vptestmb(encoded);

        public struct Vptestmd : ITypedInstruction<Vptestmd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestmd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestmd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestmd src) => AsmMnemonics.VPTESTMD;

            public static implicit operator AsmHexCode(Vptestmd src) => src.Encoded;

            public static implicit operator Vptestmd(AsmHexCode src) => new Vptestmd(src);
        }

        public Vptestmd vptestmd() => default;

        [MethodImpl(Inline), Op]
        public Vptestmd vptestmd(AsmHexCode encoded) => new Vptestmd(encoded);

        public struct Vptestmq : ITypedInstruction<Vptestmq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestmq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTMQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestmq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestmq src) => AsmMnemonics.VPTESTMQ;

            public static implicit operator AsmHexCode(Vptestmq src) => src.Encoded;

            public static implicit operator Vptestmq(AsmHexCode src) => new Vptestmq(src);
        }

        public Vptestmq vptestmq() => default;

        [MethodImpl(Inline), Op]
        public Vptestmq vptestmq(AsmHexCode encoded) => new Vptestmq(encoded);

        public struct Vptestmw : ITypedInstruction<Vptestmw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestmw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTMW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestmw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestmw src) => AsmMnemonics.VPTESTMW;

            public static implicit operator AsmHexCode(Vptestmw src) => src.Encoded;

            public static implicit operator Vptestmw(AsmHexCode src) => new Vptestmw(src);
        }

        public Vptestmw vptestmw() => default;

        [MethodImpl(Inline), Op]
        public Vptestmw vptestmw(AsmHexCode encoded) => new Vptestmw(encoded);

        public struct Vptestnmb : ITypedInstruction<Vptestnmb>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestnmb(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTNMB;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestnmb src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestnmb src) => AsmMnemonics.VPTESTNMB;

            public static implicit operator AsmHexCode(Vptestnmb src) => src.Encoded;

            public static implicit operator Vptestnmb(AsmHexCode src) => new Vptestnmb(src);
        }

        public Vptestnmb vptestnmb() => default;

        [MethodImpl(Inline), Op]
        public Vptestnmb vptestnmb(AsmHexCode encoded) => new Vptestnmb(encoded);

        public struct Vptestnmd : ITypedInstruction<Vptestnmd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestnmd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTNMD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestnmd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestnmd src) => AsmMnemonics.VPTESTNMD;

            public static implicit operator AsmHexCode(Vptestnmd src) => src.Encoded;

            public static implicit operator Vptestnmd(AsmHexCode src) => new Vptestnmd(src);
        }

        public Vptestnmd vptestnmd() => default;

        [MethodImpl(Inline), Op]
        public Vptestnmd vptestnmd(AsmHexCode encoded) => new Vptestnmd(encoded);

        public struct Vptestnmq : ITypedInstruction<Vptestnmq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestnmq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTNMQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestnmq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestnmq src) => AsmMnemonics.VPTESTNMQ;

            public static implicit operator AsmHexCode(Vptestnmq src) => src.Encoded;

            public static implicit operator Vptestnmq(AsmHexCode src) => new Vptestnmq(src);
        }

        public Vptestnmq vptestnmq() => default;

        [MethodImpl(Inline), Op]
        public Vptestnmq vptestnmq(AsmHexCode encoded) => new Vptestnmq(encoded);

        public struct Vptestnmw : ITypedInstruction<Vptestnmw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vptestnmw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPTESTNMW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vptestnmw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vptestnmw src) => AsmMnemonics.VPTESTNMW;

            public static implicit operator AsmHexCode(Vptestnmw src) => src.Encoded;

            public static implicit operator Vptestnmw(AsmHexCode src) => new Vptestnmw(src);
        }

        public Vptestnmw vptestnmw() => default;

        [MethodImpl(Inline), Op]
        public Vptestnmw vptestnmw(AsmHexCode encoded) => new Vptestnmw(encoded);

        public struct Vpunpckhbw : ITypedInstruction<Vpunpckhbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpckhbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKHBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpckhbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpckhbw src) => AsmMnemonics.VPUNPCKHBW;

            public static implicit operator AsmHexCode(Vpunpckhbw src) => src.Encoded;

            public static implicit operator Vpunpckhbw(AsmHexCode src) => new Vpunpckhbw(src);
        }

        public Vpunpckhbw vpunpckhbw() => default;

        [MethodImpl(Inline), Op]
        public Vpunpckhbw vpunpckhbw(AsmHexCode encoded) => new Vpunpckhbw(encoded);

        public struct Vpunpckhdq : ITypedInstruction<Vpunpckhdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpckhdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKHDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpckhdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpckhdq src) => AsmMnemonics.VPUNPCKHDQ;

            public static implicit operator AsmHexCode(Vpunpckhdq src) => src.Encoded;

            public static implicit operator Vpunpckhdq(AsmHexCode src) => new Vpunpckhdq(src);
        }

        public Vpunpckhdq vpunpckhdq() => default;

        [MethodImpl(Inline), Op]
        public Vpunpckhdq vpunpckhdq(AsmHexCode encoded) => new Vpunpckhdq(encoded);

        public struct Vpunpckhqdq : ITypedInstruction<Vpunpckhqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpckhqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKHQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpckhqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpckhqdq src) => AsmMnemonics.VPUNPCKHQDQ;

            public static implicit operator AsmHexCode(Vpunpckhqdq src) => src.Encoded;

            public static implicit operator Vpunpckhqdq(AsmHexCode src) => new Vpunpckhqdq(src);
        }

        public Vpunpckhqdq vpunpckhqdq() => default;

        [MethodImpl(Inline), Op]
        public Vpunpckhqdq vpunpckhqdq(AsmHexCode encoded) => new Vpunpckhqdq(encoded);

        public struct Vpunpckhwd : ITypedInstruction<Vpunpckhwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpckhwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKHWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpckhwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpckhwd src) => AsmMnemonics.VPUNPCKHWD;

            public static implicit operator AsmHexCode(Vpunpckhwd src) => src.Encoded;

            public static implicit operator Vpunpckhwd(AsmHexCode src) => new Vpunpckhwd(src);
        }

        public Vpunpckhwd vpunpckhwd() => default;

        [MethodImpl(Inline), Op]
        public Vpunpckhwd vpunpckhwd(AsmHexCode encoded) => new Vpunpckhwd(encoded);

        public struct Vpunpcklbw : ITypedInstruction<Vpunpcklbw>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpcklbw(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKLBW;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpcklbw src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpcklbw src) => AsmMnemonics.VPUNPCKLBW;

            public static implicit operator AsmHexCode(Vpunpcklbw src) => src.Encoded;

            public static implicit operator Vpunpcklbw(AsmHexCode src) => new Vpunpcklbw(src);
        }

        public Vpunpcklbw vpunpcklbw() => default;

        [MethodImpl(Inline), Op]
        public Vpunpcklbw vpunpcklbw(AsmHexCode encoded) => new Vpunpcklbw(encoded);

        public struct Vpunpckldq : ITypedInstruction<Vpunpckldq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpckldq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKLDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpckldq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpckldq src) => AsmMnemonics.VPUNPCKLDQ;

            public static implicit operator AsmHexCode(Vpunpckldq src) => src.Encoded;

            public static implicit operator Vpunpckldq(AsmHexCode src) => new Vpunpckldq(src);
        }

        public Vpunpckldq vpunpckldq() => default;

        [MethodImpl(Inline), Op]
        public Vpunpckldq vpunpckldq(AsmHexCode encoded) => new Vpunpckldq(encoded);

        public struct Vpunpcklqdq : ITypedInstruction<Vpunpcklqdq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpcklqdq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKLQDQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpcklqdq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpcklqdq src) => AsmMnemonics.VPUNPCKLQDQ;

            public static implicit operator AsmHexCode(Vpunpcklqdq src) => src.Encoded;

            public static implicit operator Vpunpcklqdq(AsmHexCode src) => new Vpunpcklqdq(src);
        }

        public Vpunpcklqdq vpunpcklqdq() => default;

        [MethodImpl(Inline), Op]
        public Vpunpcklqdq vpunpcklqdq(AsmHexCode encoded) => new Vpunpcklqdq(encoded);

        public struct Vpunpcklwd : ITypedInstruction<Vpunpcklwd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpunpcklwd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPUNPCKLWD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpunpcklwd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpunpcklwd src) => AsmMnemonics.VPUNPCKLWD;

            public static implicit operator AsmHexCode(Vpunpcklwd src) => src.Encoded;

            public static implicit operator Vpunpcklwd(AsmHexCode src) => new Vpunpcklwd(src);
        }

        public Vpunpcklwd vpunpcklwd() => default;

        [MethodImpl(Inline), Op]
        public Vpunpcklwd vpunpcklwd(AsmHexCode encoded) => new Vpunpcklwd(encoded);

        public struct Vpxor : ITypedInstruction<Vpxor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpxor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPXOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpxor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpxor src) => AsmMnemonics.VPXOR;

            public static implicit operator AsmHexCode(Vpxor src) => src.Encoded;

            public static implicit operator Vpxor(AsmHexCode src) => new Vpxor(src);
        }

        public Vpxor vpxor() => default;

        [MethodImpl(Inline), Op]
        public Vpxor vpxor(AsmHexCode encoded) => new Vpxor(encoded);

        public struct Vpxord : ITypedInstruction<Vpxord>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpxord(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPXORD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpxord src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpxord src) => AsmMnemonics.VPXORD;

            public static implicit operator AsmHexCode(Vpxord src) => src.Encoded;

            public static implicit operator Vpxord(AsmHexCode src) => new Vpxord(src);
        }

        public Vpxord vpxord() => default;

        [MethodImpl(Inline), Op]
        public Vpxord vpxord(AsmHexCode encoded) => new Vpxord(encoded);

        public struct Vpxorq : ITypedInstruction<Vpxorq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vpxorq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VPXORQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vpxorq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vpxorq src) => AsmMnemonics.VPXORQ;

            public static implicit operator AsmHexCode(Vpxorq src) => src.Encoded;

            public static implicit operator Vpxorq(AsmHexCode src) => new Vpxorq(src);
        }

        public Vpxorq vpxorq() => default;

        [MethodImpl(Inline), Op]
        public Vpxorq vpxorq(AsmHexCode encoded) => new Vpxorq(encoded);

        public struct Vrangepd : ITypedInstruction<Vrangepd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrangepd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRANGEPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrangepd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrangepd src) => AsmMnemonics.VRANGEPD;

            public static implicit operator AsmHexCode(Vrangepd src) => src.Encoded;

            public static implicit operator Vrangepd(AsmHexCode src) => new Vrangepd(src);
        }

        public Vrangepd vrangepd() => default;

        [MethodImpl(Inline), Op]
        public Vrangepd vrangepd(AsmHexCode encoded) => new Vrangepd(encoded);

        public struct Vrangeps : ITypedInstruction<Vrangeps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrangeps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRANGEPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrangeps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrangeps src) => AsmMnemonics.VRANGEPS;

            public static implicit operator AsmHexCode(Vrangeps src) => src.Encoded;

            public static implicit operator Vrangeps(AsmHexCode src) => new Vrangeps(src);
        }

        public Vrangeps vrangeps() => default;

        [MethodImpl(Inline), Op]
        public Vrangeps vrangeps(AsmHexCode encoded) => new Vrangeps(encoded);

        public struct Vrangesd : ITypedInstruction<Vrangesd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrangesd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRANGESD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrangesd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrangesd src) => AsmMnemonics.VRANGESD;

            public static implicit operator AsmHexCode(Vrangesd src) => src.Encoded;

            public static implicit operator Vrangesd(AsmHexCode src) => new Vrangesd(src);
        }

        public Vrangesd vrangesd() => default;

        [MethodImpl(Inline), Op]
        public Vrangesd vrangesd(AsmHexCode encoded) => new Vrangesd(encoded);

        public struct Vrangess : ITypedInstruction<Vrangess>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrangess(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRANGESS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrangess src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrangess src) => AsmMnemonics.VRANGESS;

            public static implicit operator AsmHexCode(Vrangess src) => src.Encoded;

            public static implicit operator Vrangess(AsmHexCode src) => new Vrangess(src);
        }

        public Vrangess vrangess() => default;

        [MethodImpl(Inline), Op]
        public Vrangess vrangess(AsmHexCode encoded) => new Vrangess(encoded);

        public struct Vrcp14pd : ITypedInstruction<Vrcp14pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp14pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP14PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp14pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp14pd src) => AsmMnemonics.VRCP14PD;

            public static implicit operator AsmHexCode(Vrcp14pd src) => src.Encoded;

            public static implicit operator Vrcp14pd(AsmHexCode src) => new Vrcp14pd(src);
        }

        public Vrcp14pd vrcp14pd() => default;

        [MethodImpl(Inline), Op]
        public Vrcp14pd vrcp14pd(AsmHexCode encoded) => new Vrcp14pd(encoded);

        public struct Vrcp14ps : ITypedInstruction<Vrcp14ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp14ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP14PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp14ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp14ps src) => AsmMnemonics.VRCP14PS;

            public static implicit operator AsmHexCode(Vrcp14ps src) => src.Encoded;

            public static implicit operator Vrcp14ps(AsmHexCode src) => new Vrcp14ps(src);
        }

        public Vrcp14ps vrcp14ps() => default;

        [MethodImpl(Inline), Op]
        public Vrcp14ps vrcp14ps(AsmHexCode encoded) => new Vrcp14ps(encoded);

        public struct Vrcp14sd : ITypedInstruction<Vrcp14sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp14sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP14SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp14sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp14sd src) => AsmMnemonics.VRCP14SD;

            public static implicit operator AsmHexCode(Vrcp14sd src) => src.Encoded;

            public static implicit operator Vrcp14sd(AsmHexCode src) => new Vrcp14sd(src);
        }

        public Vrcp14sd vrcp14sd() => default;

        [MethodImpl(Inline), Op]
        public Vrcp14sd vrcp14sd(AsmHexCode encoded) => new Vrcp14sd(encoded);

        public struct Vrcp14ss : ITypedInstruction<Vrcp14ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp14ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP14SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp14ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp14ss src) => AsmMnemonics.VRCP14SS;

            public static implicit operator AsmHexCode(Vrcp14ss src) => src.Encoded;

            public static implicit operator Vrcp14ss(AsmHexCode src) => new Vrcp14ss(src);
        }

        public Vrcp14ss vrcp14ss() => default;

        [MethodImpl(Inline), Op]
        public Vrcp14ss vrcp14ss(AsmHexCode encoded) => new Vrcp14ss(encoded);

        public struct Vrcp28pd : ITypedInstruction<Vrcp28pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp28pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP28PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp28pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp28pd src) => AsmMnemonics.VRCP28PD;

            public static implicit operator AsmHexCode(Vrcp28pd src) => src.Encoded;

            public static implicit operator Vrcp28pd(AsmHexCode src) => new Vrcp28pd(src);
        }

        public Vrcp28pd vrcp28pd() => default;

        [MethodImpl(Inline), Op]
        public Vrcp28pd vrcp28pd(AsmHexCode encoded) => new Vrcp28pd(encoded);

        public struct Vrcp28ps : ITypedInstruction<Vrcp28ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp28ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP28PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp28ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp28ps src) => AsmMnemonics.VRCP28PS;

            public static implicit operator AsmHexCode(Vrcp28ps src) => src.Encoded;

            public static implicit operator Vrcp28ps(AsmHexCode src) => new Vrcp28ps(src);
        }

        public Vrcp28ps vrcp28ps() => default;

        [MethodImpl(Inline), Op]
        public Vrcp28ps vrcp28ps(AsmHexCode encoded) => new Vrcp28ps(encoded);

        public struct Vrcp28sd : ITypedInstruction<Vrcp28sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp28sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP28SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp28sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp28sd src) => AsmMnemonics.VRCP28SD;

            public static implicit operator AsmHexCode(Vrcp28sd src) => src.Encoded;

            public static implicit operator Vrcp28sd(AsmHexCode src) => new Vrcp28sd(src);
        }

        public Vrcp28sd vrcp28sd() => default;

        [MethodImpl(Inline), Op]
        public Vrcp28sd vrcp28sd(AsmHexCode encoded) => new Vrcp28sd(encoded);

        public struct Vrcp28ss : ITypedInstruction<Vrcp28ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcp28ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCP28SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcp28ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcp28ss src) => AsmMnemonics.VRCP28SS;

            public static implicit operator AsmHexCode(Vrcp28ss src) => src.Encoded;

            public static implicit operator Vrcp28ss(AsmHexCode src) => new Vrcp28ss(src);
        }

        public Vrcp28ss vrcp28ss() => default;

        [MethodImpl(Inline), Op]
        public Vrcp28ss vrcp28ss(AsmHexCode encoded) => new Vrcp28ss(encoded);

        public struct Vrcpps : ITypedInstruction<Vrcpps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcpps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCPPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcpps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcpps src) => AsmMnemonics.VRCPPS;

            public static implicit operator AsmHexCode(Vrcpps src) => src.Encoded;

            public static implicit operator Vrcpps(AsmHexCode src) => new Vrcpps(src);
        }

        public Vrcpps vrcpps() => default;

        [MethodImpl(Inline), Op]
        public Vrcpps vrcpps(AsmHexCode encoded) => new Vrcpps(encoded);

        public struct Vrcpss : ITypedInstruction<Vrcpss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrcpss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRCPSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrcpss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrcpss src) => AsmMnemonics.VRCPSS;

            public static implicit operator AsmHexCode(Vrcpss src) => src.Encoded;

            public static implicit operator Vrcpss(AsmHexCode src) => new Vrcpss(src);
        }

        public Vrcpss vrcpss() => default;

        [MethodImpl(Inline), Op]
        public Vrcpss vrcpss(AsmHexCode encoded) => new Vrcpss(encoded);

        public struct Vreducepd : ITypedInstruction<Vreducepd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vreducepd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VREDUCEPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vreducepd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vreducepd src) => AsmMnemonics.VREDUCEPD;

            public static implicit operator AsmHexCode(Vreducepd src) => src.Encoded;

            public static implicit operator Vreducepd(AsmHexCode src) => new Vreducepd(src);
        }

        public Vreducepd vreducepd() => default;

        [MethodImpl(Inline), Op]
        public Vreducepd vreducepd(AsmHexCode encoded) => new Vreducepd(encoded);

        public struct Vreduceps : ITypedInstruction<Vreduceps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vreduceps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VREDUCEPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vreduceps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vreduceps src) => AsmMnemonics.VREDUCEPS;

            public static implicit operator AsmHexCode(Vreduceps src) => src.Encoded;

            public static implicit operator Vreduceps(AsmHexCode src) => new Vreduceps(src);
        }

        public Vreduceps vreduceps() => default;

        [MethodImpl(Inline), Op]
        public Vreduceps vreduceps(AsmHexCode encoded) => new Vreduceps(encoded);

        public struct Vreducesd : ITypedInstruction<Vreducesd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vreducesd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VREDUCESD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vreducesd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vreducesd src) => AsmMnemonics.VREDUCESD;

            public static implicit operator AsmHexCode(Vreducesd src) => src.Encoded;

            public static implicit operator Vreducesd(AsmHexCode src) => new Vreducesd(src);
        }

        public Vreducesd vreducesd() => default;

        [MethodImpl(Inline), Op]
        public Vreducesd vreducesd(AsmHexCode encoded) => new Vreducesd(encoded);

        public struct Vreducess : ITypedInstruction<Vreducess>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vreducess(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VREDUCESS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vreducess src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vreducess src) => AsmMnemonics.VREDUCESS;

            public static implicit operator AsmHexCode(Vreducess src) => src.Encoded;

            public static implicit operator Vreducess(AsmHexCode src) => new Vreducess(src);
        }

        public Vreducess vreducess() => default;

        [MethodImpl(Inline), Op]
        public Vreducess vreducess(AsmHexCode encoded) => new Vreducess(encoded);

        public struct Vrndscalepd : ITypedInstruction<Vrndscalepd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrndscalepd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRNDSCALEPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrndscalepd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrndscalepd src) => AsmMnemonics.VRNDSCALEPD;

            public static implicit operator AsmHexCode(Vrndscalepd src) => src.Encoded;

            public static implicit operator Vrndscalepd(AsmHexCode src) => new Vrndscalepd(src);
        }

        public Vrndscalepd vrndscalepd() => default;

        [MethodImpl(Inline), Op]
        public Vrndscalepd vrndscalepd(AsmHexCode encoded) => new Vrndscalepd(encoded);

        public struct Vrndscaleps : ITypedInstruction<Vrndscaleps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrndscaleps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRNDSCALEPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrndscaleps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrndscaleps src) => AsmMnemonics.VRNDSCALEPS;

            public static implicit operator AsmHexCode(Vrndscaleps src) => src.Encoded;

            public static implicit operator Vrndscaleps(AsmHexCode src) => new Vrndscaleps(src);
        }

        public Vrndscaleps vrndscaleps() => default;

        [MethodImpl(Inline), Op]
        public Vrndscaleps vrndscaleps(AsmHexCode encoded) => new Vrndscaleps(encoded);

        public struct Vrndscalesd : ITypedInstruction<Vrndscalesd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrndscalesd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRNDSCALESD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrndscalesd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrndscalesd src) => AsmMnemonics.VRNDSCALESD;

            public static implicit operator AsmHexCode(Vrndscalesd src) => src.Encoded;

            public static implicit operator Vrndscalesd(AsmHexCode src) => new Vrndscalesd(src);
        }

        public Vrndscalesd vrndscalesd() => default;

        [MethodImpl(Inline), Op]
        public Vrndscalesd vrndscalesd(AsmHexCode encoded) => new Vrndscalesd(encoded);

        public struct Vrndscaless : ITypedInstruction<Vrndscaless>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrndscaless(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRNDSCALESS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrndscaless src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrndscaless src) => AsmMnemonics.VRNDSCALESS;

            public static implicit operator AsmHexCode(Vrndscaless src) => src.Encoded;

            public static implicit operator Vrndscaless(AsmHexCode src) => new Vrndscaless(src);
        }

        public Vrndscaless vrndscaless() => default;

        [MethodImpl(Inline), Op]
        public Vrndscaless vrndscaless(AsmHexCode encoded) => new Vrndscaless(encoded);

        public struct Vroundpd : ITypedInstruction<Vroundpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vroundpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VROUNDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vroundpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vroundpd src) => AsmMnemonics.VROUNDPD;

            public static implicit operator AsmHexCode(Vroundpd src) => src.Encoded;

            public static implicit operator Vroundpd(AsmHexCode src) => new Vroundpd(src);
        }

        public Vroundpd vroundpd() => default;

        [MethodImpl(Inline), Op]
        public Vroundpd vroundpd(AsmHexCode encoded) => new Vroundpd(encoded);

        public struct Vroundps : ITypedInstruction<Vroundps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vroundps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VROUNDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vroundps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vroundps src) => AsmMnemonics.VROUNDPS;

            public static implicit operator AsmHexCode(Vroundps src) => src.Encoded;

            public static implicit operator Vroundps(AsmHexCode src) => new Vroundps(src);
        }

        public Vroundps vroundps() => default;

        [MethodImpl(Inline), Op]
        public Vroundps vroundps(AsmHexCode encoded) => new Vroundps(encoded);

        public struct Vroundsd : ITypedInstruction<Vroundsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vroundsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VROUNDSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vroundsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vroundsd src) => AsmMnemonics.VROUNDSD;

            public static implicit operator AsmHexCode(Vroundsd src) => src.Encoded;

            public static implicit operator Vroundsd(AsmHexCode src) => new Vroundsd(src);
        }

        public Vroundsd vroundsd() => default;

        [MethodImpl(Inline), Op]
        public Vroundsd vroundsd(AsmHexCode encoded) => new Vroundsd(encoded);

        public struct Vroundss : ITypedInstruction<Vroundss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vroundss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VROUNDSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vroundss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vroundss src) => AsmMnemonics.VROUNDSS;

            public static implicit operator AsmHexCode(Vroundss src) => src.Encoded;

            public static implicit operator Vroundss(AsmHexCode src) => new Vroundss(src);
        }

        public Vroundss vroundss() => default;

        [MethodImpl(Inline), Op]
        public Vroundss vroundss(AsmHexCode encoded) => new Vroundss(encoded);

        public struct Vrsqrt14pd : ITypedInstruction<Vrsqrt14pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt14pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT14PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt14pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt14pd src) => AsmMnemonics.VRSQRT14PD;

            public static implicit operator AsmHexCode(Vrsqrt14pd src) => src.Encoded;

            public static implicit operator Vrsqrt14pd(AsmHexCode src) => new Vrsqrt14pd(src);
        }

        public Vrsqrt14pd vrsqrt14pd() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt14pd vrsqrt14pd(AsmHexCode encoded) => new Vrsqrt14pd(encoded);

        public struct Vrsqrt14ps : ITypedInstruction<Vrsqrt14ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt14ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT14PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt14ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt14ps src) => AsmMnemonics.VRSQRT14PS;

            public static implicit operator AsmHexCode(Vrsqrt14ps src) => src.Encoded;

            public static implicit operator Vrsqrt14ps(AsmHexCode src) => new Vrsqrt14ps(src);
        }

        public Vrsqrt14ps vrsqrt14ps() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt14ps vrsqrt14ps(AsmHexCode encoded) => new Vrsqrt14ps(encoded);

        public struct Vrsqrt14sd : ITypedInstruction<Vrsqrt14sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt14sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT14SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt14sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt14sd src) => AsmMnemonics.VRSQRT14SD;

            public static implicit operator AsmHexCode(Vrsqrt14sd src) => src.Encoded;

            public static implicit operator Vrsqrt14sd(AsmHexCode src) => new Vrsqrt14sd(src);
        }

        public Vrsqrt14sd vrsqrt14sd() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt14sd vrsqrt14sd(AsmHexCode encoded) => new Vrsqrt14sd(encoded);

        public struct Vrsqrt14ss : ITypedInstruction<Vrsqrt14ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt14ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT14SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt14ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt14ss src) => AsmMnemonics.VRSQRT14SS;

            public static implicit operator AsmHexCode(Vrsqrt14ss src) => src.Encoded;

            public static implicit operator Vrsqrt14ss(AsmHexCode src) => new Vrsqrt14ss(src);
        }

        public Vrsqrt14ss vrsqrt14ss() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt14ss vrsqrt14ss(AsmHexCode encoded) => new Vrsqrt14ss(encoded);

        public struct Vrsqrt28pd : ITypedInstruction<Vrsqrt28pd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt28pd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT28PD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt28pd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt28pd src) => AsmMnemonics.VRSQRT28PD;

            public static implicit operator AsmHexCode(Vrsqrt28pd src) => src.Encoded;

            public static implicit operator Vrsqrt28pd(AsmHexCode src) => new Vrsqrt28pd(src);
        }

        public Vrsqrt28pd vrsqrt28pd() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt28pd vrsqrt28pd(AsmHexCode encoded) => new Vrsqrt28pd(encoded);

        public struct Vrsqrt28ps : ITypedInstruction<Vrsqrt28ps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt28ps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT28PS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt28ps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt28ps src) => AsmMnemonics.VRSQRT28PS;

            public static implicit operator AsmHexCode(Vrsqrt28ps src) => src.Encoded;

            public static implicit operator Vrsqrt28ps(AsmHexCode src) => new Vrsqrt28ps(src);
        }

        public Vrsqrt28ps vrsqrt28ps() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt28ps vrsqrt28ps(AsmHexCode encoded) => new Vrsqrt28ps(encoded);

        public struct Vrsqrt28sd : ITypedInstruction<Vrsqrt28sd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt28sd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT28SD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt28sd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt28sd src) => AsmMnemonics.VRSQRT28SD;

            public static implicit operator AsmHexCode(Vrsqrt28sd src) => src.Encoded;

            public static implicit operator Vrsqrt28sd(AsmHexCode src) => new Vrsqrt28sd(src);
        }

        public Vrsqrt28sd vrsqrt28sd() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt28sd vrsqrt28sd(AsmHexCode encoded) => new Vrsqrt28sd(encoded);

        public struct Vrsqrt28ss : ITypedInstruction<Vrsqrt28ss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrt28ss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRT28SS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrt28ss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrt28ss src) => AsmMnemonics.VRSQRT28SS;

            public static implicit operator AsmHexCode(Vrsqrt28ss src) => src.Encoded;

            public static implicit operator Vrsqrt28ss(AsmHexCode src) => new Vrsqrt28ss(src);
        }

        public Vrsqrt28ss vrsqrt28ss() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrt28ss vrsqrt28ss(AsmHexCode encoded) => new Vrsqrt28ss(encoded);

        public struct Vrsqrtps : ITypedInstruction<Vrsqrtps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrtps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrtps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrtps src) => AsmMnemonics.VRSQRTPS;

            public static implicit operator AsmHexCode(Vrsqrtps src) => src.Encoded;

            public static implicit operator Vrsqrtps(AsmHexCode src) => new Vrsqrtps(src);
        }

        public Vrsqrtps vrsqrtps() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrtps vrsqrtps(AsmHexCode encoded) => new Vrsqrtps(encoded);

        public struct Vrsqrtss : ITypedInstruction<Vrsqrtss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vrsqrtss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VRSQRTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vrsqrtss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vrsqrtss src) => AsmMnemonics.VRSQRTSS;

            public static implicit operator AsmHexCode(Vrsqrtss src) => src.Encoded;

            public static implicit operator Vrsqrtss(AsmHexCode src) => new Vrsqrtss(src);
        }

        public Vrsqrtss vrsqrtss() => default;

        [MethodImpl(Inline), Op]
        public Vrsqrtss vrsqrtss(AsmHexCode encoded) => new Vrsqrtss(encoded);

        public struct Vscalefpd : ITypedInstruction<Vscalefpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscalefpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCALEFPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscalefpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscalefpd src) => AsmMnemonics.VSCALEFPD;

            public static implicit operator AsmHexCode(Vscalefpd src) => src.Encoded;

            public static implicit operator Vscalefpd(AsmHexCode src) => new Vscalefpd(src);
        }

        public Vscalefpd vscalefpd() => default;

        [MethodImpl(Inline), Op]
        public Vscalefpd vscalefpd(AsmHexCode encoded) => new Vscalefpd(encoded);

        public struct Vscalefps : ITypedInstruction<Vscalefps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscalefps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCALEFPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscalefps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscalefps src) => AsmMnemonics.VSCALEFPS;

            public static implicit operator AsmHexCode(Vscalefps src) => src.Encoded;

            public static implicit operator Vscalefps(AsmHexCode src) => new Vscalefps(src);
        }

        public Vscalefps vscalefps() => default;

        [MethodImpl(Inline), Op]
        public Vscalefps vscalefps(AsmHexCode encoded) => new Vscalefps(encoded);

        public struct Vscalefsd : ITypedInstruction<Vscalefsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscalefsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCALEFSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscalefsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscalefsd src) => AsmMnemonics.VSCALEFSD;

            public static implicit operator AsmHexCode(Vscalefsd src) => src.Encoded;

            public static implicit operator Vscalefsd(AsmHexCode src) => new Vscalefsd(src);
        }

        public Vscalefsd vscalefsd() => default;

        [MethodImpl(Inline), Op]
        public Vscalefsd vscalefsd(AsmHexCode encoded) => new Vscalefsd(encoded);

        public struct Vscalefss : ITypedInstruction<Vscalefss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscalefss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCALEFSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscalefss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscalefss src) => AsmMnemonics.VSCALEFSS;

            public static implicit operator AsmHexCode(Vscalefss src) => src.Encoded;

            public static implicit operator Vscalefss(AsmHexCode src) => new Vscalefss(src);
        }

        public Vscalefss vscalefss() => default;

        [MethodImpl(Inline), Op]
        public Vscalefss vscalefss(AsmHexCode encoded) => new Vscalefss(encoded);

        public struct Vscatterdpd : ITypedInstruction<Vscatterdpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterdpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERDPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterdpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterdpd src) => AsmMnemonics.VSCATTERDPD;

            public static implicit operator AsmHexCode(Vscatterdpd src) => src.Encoded;

            public static implicit operator Vscatterdpd(AsmHexCode src) => new Vscatterdpd(src);
        }

        public Vscatterdpd vscatterdpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterdpd vscatterdpd(AsmHexCode encoded) => new Vscatterdpd(encoded);

        public struct Vscatterdps : ITypedInstruction<Vscatterdps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterdps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERDPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterdps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterdps src) => AsmMnemonics.VSCATTERDPS;

            public static implicit operator AsmHexCode(Vscatterdps src) => src.Encoded;

            public static implicit operator Vscatterdps(AsmHexCode src) => new Vscatterdps(src);
        }

        public Vscatterdps vscatterdps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterdps vscatterdps(AsmHexCode encoded) => new Vscatterdps(encoded);

        public struct Vscatterpf0dpd : ITypedInstruction<Vscatterpf0dpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf0dpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF0DPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf0dpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf0dpd src) => AsmMnemonics.VSCATTERPF0DPD;

            public static implicit operator AsmHexCode(Vscatterpf0dpd src) => src.Encoded;

            public static implicit operator Vscatterpf0dpd(AsmHexCode src) => new Vscatterpf0dpd(src);
        }

        public Vscatterpf0dpd vscatterpf0dpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf0dpd vscatterpf0dpd(AsmHexCode encoded) => new Vscatterpf0dpd(encoded);

        public struct Vscatterpf0dps : ITypedInstruction<Vscatterpf0dps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf0dps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF0DPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf0dps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf0dps src) => AsmMnemonics.VSCATTERPF0DPS;

            public static implicit operator AsmHexCode(Vscatterpf0dps src) => src.Encoded;

            public static implicit operator Vscatterpf0dps(AsmHexCode src) => new Vscatterpf0dps(src);
        }

        public Vscatterpf0dps vscatterpf0dps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf0dps vscatterpf0dps(AsmHexCode encoded) => new Vscatterpf0dps(encoded);

        public struct Vscatterpf0qpd : ITypedInstruction<Vscatterpf0qpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf0qpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF0QPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf0qpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf0qpd src) => AsmMnemonics.VSCATTERPF0QPD;

            public static implicit operator AsmHexCode(Vscatterpf0qpd src) => src.Encoded;

            public static implicit operator Vscatterpf0qpd(AsmHexCode src) => new Vscatterpf0qpd(src);
        }

        public Vscatterpf0qpd vscatterpf0qpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf0qpd vscatterpf0qpd(AsmHexCode encoded) => new Vscatterpf0qpd(encoded);

        public struct Vscatterpf0qps : ITypedInstruction<Vscatterpf0qps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf0qps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF0QPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf0qps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf0qps src) => AsmMnemonics.VSCATTERPF0QPS;

            public static implicit operator AsmHexCode(Vscatterpf0qps src) => src.Encoded;

            public static implicit operator Vscatterpf0qps(AsmHexCode src) => new Vscatterpf0qps(src);
        }

        public Vscatterpf0qps vscatterpf0qps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf0qps vscatterpf0qps(AsmHexCode encoded) => new Vscatterpf0qps(encoded);

        public struct Vscatterpf1dpd : ITypedInstruction<Vscatterpf1dpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf1dpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF1DPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf1dpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf1dpd src) => AsmMnemonics.VSCATTERPF1DPD;

            public static implicit operator AsmHexCode(Vscatterpf1dpd src) => src.Encoded;

            public static implicit operator Vscatterpf1dpd(AsmHexCode src) => new Vscatterpf1dpd(src);
        }

        public Vscatterpf1dpd vscatterpf1dpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf1dpd vscatterpf1dpd(AsmHexCode encoded) => new Vscatterpf1dpd(encoded);

        public struct Vscatterpf1dps : ITypedInstruction<Vscatterpf1dps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf1dps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF1DPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf1dps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf1dps src) => AsmMnemonics.VSCATTERPF1DPS;

            public static implicit operator AsmHexCode(Vscatterpf1dps src) => src.Encoded;

            public static implicit operator Vscatterpf1dps(AsmHexCode src) => new Vscatterpf1dps(src);
        }

        public Vscatterpf1dps vscatterpf1dps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf1dps vscatterpf1dps(AsmHexCode encoded) => new Vscatterpf1dps(encoded);

        public struct Vscatterpf1qpd : ITypedInstruction<Vscatterpf1qpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf1qpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF1QPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf1qpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf1qpd src) => AsmMnemonics.VSCATTERPF1QPD;

            public static implicit operator AsmHexCode(Vscatterpf1qpd src) => src.Encoded;

            public static implicit operator Vscatterpf1qpd(AsmHexCode src) => new Vscatterpf1qpd(src);
        }

        public Vscatterpf1qpd vscatterpf1qpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf1qpd vscatterpf1qpd(AsmHexCode encoded) => new Vscatterpf1qpd(encoded);

        public struct Vscatterpf1qps : ITypedInstruction<Vscatterpf1qps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterpf1qps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERPF1QPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterpf1qps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterpf1qps src) => AsmMnemonics.VSCATTERPF1QPS;

            public static implicit operator AsmHexCode(Vscatterpf1qps src) => src.Encoded;

            public static implicit operator Vscatterpf1qps(AsmHexCode src) => new Vscatterpf1qps(src);
        }

        public Vscatterpf1qps vscatterpf1qps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterpf1qps vscatterpf1qps(AsmHexCode encoded) => new Vscatterpf1qps(encoded);

        public struct Vscatterqpd : ITypedInstruction<Vscatterqpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterqpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERQPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterqpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterqpd src) => AsmMnemonics.VSCATTERQPD;

            public static implicit operator AsmHexCode(Vscatterqpd src) => src.Encoded;

            public static implicit operator Vscatterqpd(AsmHexCode src) => new Vscatterqpd(src);
        }

        public Vscatterqpd vscatterqpd() => default;

        [MethodImpl(Inline), Op]
        public Vscatterqpd vscatterqpd(AsmHexCode encoded) => new Vscatterqpd(encoded);

        public struct Vscatterqps : ITypedInstruction<Vscatterqps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vscatterqps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSCATTERQPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vscatterqps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vscatterqps src) => AsmMnemonics.VSCATTERQPS;

            public static implicit operator AsmHexCode(Vscatterqps src) => src.Encoded;

            public static implicit operator Vscatterqps(AsmHexCode src) => new Vscatterqps(src);
        }

        public Vscatterqps vscatterqps() => default;

        [MethodImpl(Inline), Op]
        public Vscatterqps vscatterqps(AsmHexCode encoded) => new Vscatterqps(encoded);

        public struct Vshuff32x4 : ITypedInstruction<Vshuff32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshuff32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFF32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshuff32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshuff32x4 src) => AsmMnemonics.VSHUFF32X4;

            public static implicit operator AsmHexCode(Vshuff32x4 src) => src.Encoded;

            public static implicit operator Vshuff32x4(AsmHexCode src) => new Vshuff32x4(src);
        }

        public Vshuff32x4 vshuff32x4() => default;

        [MethodImpl(Inline), Op]
        public Vshuff32x4 vshuff32x4(AsmHexCode encoded) => new Vshuff32x4(encoded);

        public struct Vshuff64x2 : ITypedInstruction<Vshuff64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshuff64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFF64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshuff64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshuff64x2 src) => AsmMnemonics.VSHUFF64X2;

            public static implicit operator AsmHexCode(Vshuff64x2 src) => src.Encoded;

            public static implicit operator Vshuff64x2(AsmHexCode src) => new Vshuff64x2(src);
        }

        public Vshuff64x2 vshuff64x2() => default;

        [MethodImpl(Inline), Op]
        public Vshuff64x2 vshuff64x2(AsmHexCode encoded) => new Vshuff64x2(encoded);

        public struct Vshufi32x4 : ITypedInstruction<Vshufi32x4>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshufi32x4(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFI32X4;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshufi32x4 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshufi32x4 src) => AsmMnemonics.VSHUFI32X4;

            public static implicit operator AsmHexCode(Vshufi32x4 src) => src.Encoded;

            public static implicit operator Vshufi32x4(AsmHexCode src) => new Vshufi32x4(src);
        }

        public Vshufi32x4 vshufi32x4() => default;

        [MethodImpl(Inline), Op]
        public Vshufi32x4 vshufi32x4(AsmHexCode encoded) => new Vshufi32x4(encoded);

        public struct Vshufi64x2 : ITypedInstruction<Vshufi64x2>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshufi64x2(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFI64X2;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshufi64x2 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshufi64x2 src) => AsmMnemonics.VSHUFI64X2;

            public static implicit operator AsmHexCode(Vshufi64x2 src) => src.Encoded;

            public static implicit operator Vshufi64x2(AsmHexCode src) => new Vshufi64x2(src);
        }

        public Vshufi64x2 vshufi64x2() => default;

        [MethodImpl(Inline), Op]
        public Vshufi64x2 vshufi64x2(AsmHexCode encoded) => new Vshufi64x2(encoded);

        public struct Vshufpd : ITypedInstruction<Vshufpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshufpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshufpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshufpd src) => AsmMnemonics.VSHUFPD;

            public static implicit operator AsmHexCode(Vshufpd src) => src.Encoded;

            public static implicit operator Vshufpd(AsmHexCode src) => new Vshufpd(src);
        }

        public Vshufpd vshufpd() => default;

        [MethodImpl(Inline), Op]
        public Vshufpd vshufpd(AsmHexCode encoded) => new Vshufpd(encoded);

        public struct Vshufps : ITypedInstruction<Vshufps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vshufps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSHUFPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vshufps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vshufps src) => AsmMnemonics.VSHUFPS;

            public static implicit operator AsmHexCode(Vshufps src) => src.Encoded;

            public static implicit operator Vshufps(AsmHexCode src) => new Vshufps(src);
        }

        public Vshufps vshufps() => default;

        [MethodImpl(Inline), Op]
        public Vshufps vshufps(AsmHexCode encoded) => new Vshufps(encoded);

        public struct Vsqrtpd : ITypedInstruction<Vsqrtpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsqrtpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSQRTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsqrtpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsqrtpd src) => AsmMnemonics.VSQRTPD;

            public static implicit operator AsmHexCode(Vsqrtpd src) => src.Encoded;

            public static implicit operator Vsqrtpd(AsmHexCode src) => new Vsqrtpd(src);
        }

        public Vsqrtpd vsqrtpd() => default;

        [MethodImpl(Inline), Op]
        public Vsqrtpd vsqrtpd(AsmHexCode encoded) => new Vsqrtpd(encoded);

        public struct Vsqrtps : ITypedInstruction<Vsqrtps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsqrtps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSQRTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsqrtps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsqrtps src) => AsmMnemonics.VSQRTPS;

            public static implicit operator AsmHexCode(Vsqrtps src) => src.Encoded;

            public static implicit operator Vsqrtps(AsmHexCode src) => new Vsqrtps(src);
        }

        public Vsqrtps vsqrtps() => default;

        [MethodImpl(Inline), Op]
        public Vsqrtps vsqrtps(AsmHexCode encoded) => new Vsqrtps(encoded);

        public struct Vsqrtsd : ITypedInstruction<Vsqrtsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsqrtsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSQRTSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsqrtsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsqrtsd src) => AsmMnemonics.VSQRTSD;

            public static implicit operator AsmHexCode(Vsqrtsd src) => src.Encoded;

            public static implicit operator Vsqrtsd(AsmHexCode src) => new Vsqrtsd(src);
        }

        public Vsqrtsd vsqrtsd() => default;

        [MethodImpl(Inline), Op]
        public Vsqrtsd vsqrtsd(AsmHexCode encoded) => new Vsqrtsd(encoded);

        public struct Vsqrtss : ITypedInstruction<Vsqrtss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsqrtss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSQRTSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsqrtss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsqrtss src) => AsmMnemonics.VSQRTSS;

            public static implicit operator AsmHexCode(Vsqrtss src) => src.Encoded;

            public static implicit operator Vsqrtss(AsmHexCode src) => new Vsqrtss(src);
        }

        public Vsqrtss vsqrtss() => default;

        [MethodImpl(Inline), Op]
        public Vsqrtss vsqrtss(AsmHexCode encoded) => new Vsqrtss(encoded);

        public struct Vstmxcsr : ITypedInstruction<Vstmxcsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vstmxcsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSTMXCSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vstmxcsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vstmxcsr src) => AsmMnemonics.VSTMXCSR;

            public static implicit operator AsmHexCode(Vstmxcsr src) => src.Encoded;

            public static implicit operator Vstmxcsr(AsmHexCode src) => new Vstmxcsr(src);
        }

        public Vstmxcsr vstmxcsr() => default;

        [MethodImpl(Inline), Op]
        public Vstmxcsr vstmxcsr(AsmHexCode encoded) => new Vstmxcsr(encoded);

        public struct Vsubpd : ITypedInstruction<Vsubpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsubpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSUBPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsubpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsubpd src) => AsmMnemonics.VSUBPD;

            public static implicit operator AsmHexCode(Vsubpd src) => src.Encoded;

            public static implicit operator Vsubpd(AsmHexCode src) => new Vsubpd(src);
        }

        public Vsubpd vsubpd() => default;

        [MethodImpl(Inline), Op]
        public Vsubpd vsubpd(AsmHexCode encoded) => new Vsubpd(encoded);

        public struct Vsubps : ITypedInstruction<Vsubps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsubps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSUBPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsubps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsubps src) => AsmMnemonics.VSUBPS;

            public static implicit operator AsmHexCode(Vsubps src) => src.Encoded;

            public static implicit operator Vsubps(AsmHexCode src) => new Vsubps(src);
        }

        public Vsubps vsubps() => default;

        [MethodImpl(Inline), Op]
        public Vsubps vsubps(AsmHexCode encoded) => new Vsubps(encoded);

        public struct Vsubsd : ITypedInstruction<Vsubsd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsubsd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSUBSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsubsd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsubsd src) => AsmMnemonics.VSUBSD;

            public static implicit operator AsmHexCode(Vsubsd src) => src.Encoded;

            public static implicit operator Vsubsd(AsmHexCode src) => new Vsubsd(src);
        }

        public Vsubsd vsubsd() => default;

        [MethodImpl(Inline), Op]
        public Vsubsd vsubsd(AsmHexCode encoded) => new Vsubsd(encoded);

        public struct Vsubss : ITypedInstruction<Vsubss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vsubss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VSUBSS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vsubss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vsubss src) => AsmMnemonics.VSUBSS;

            public static implicit operator AsmHexCode(Vsubss src) => src.Encoded;

            public static implicit operator Vsubss(AsmHexCode src) => new Vsubss(src);
        }

        public Vsubss vsubss() => default;

        [MethodImpl(Inline), Op]
        public Vsubss vsubss(AsmHexCode encoded) => new Vsubss(encoded);

        public struct Vtestpd : ITypedInstruction<Vtestpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vtestpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VTESTPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vtestpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vtestpd src) => AsmMnemonics.VTESTPD;

            public static implicit operator AsmHexCode(Vtestpd src) => src.Encoded;

            public static implicit operator Vtestpd(AsmHexCode src) => new Vtestpd(src);
        }

        public Vtestpd vtestpd() => default;

        [MethodImpl(Inline), Op]
        public Vtestpd vtestpd(AsmHexCode encoded) => new Vtestpd(encoded);

        public struct Vtestps : ITypedInstruction<Vtestps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vtestps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VTESTPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vtestps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vtestps src) => AsmMnemonics.VTESTPS;

            public static implicit operator AsmHexCode(Vtestps src) => src.Encoded;

            public static implicit operator Vtestps(AsmHexCode src) => new Vtestps(src);
        }

        public Vtestps vtestps() => default;

        [MethodImpl(Inline), Op]
        public Vtestps vtestps(AsmHexCode encoded) => new Vtestps(encoded);

        public struct Vucomisd : ITypedInstruction<Vucomisd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vucomisd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUCOMISD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vucomisd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vucomisd src) => AsmMnemonics.VUCOMISD;

            public static implicit operator AsmHexCode(Vucomisd src) => src.Encoded;

            public static implicit operator Vucomisd(AsmHexCode src) => new Vucomisd(src);
        }

        public Vucomisd vucomisd() => default;

        [MethodImpl(Inline), Op]
        public Vucomisd vucomisd(AsmHexCode encoded) => new Vucomisd(encoded);

        public struct Vucomiss : ITypedInstruction<Vucomiss>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vucomiss(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUCOMISS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vucomiss src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vucomiss src) => AsmMnemonics.VUCOMISS;

            public static implicit operator AsmHexCode(Vucomiss src) => src.Encoded;

            public static implicit operator Vucomiss(AsmHexCode src) => new Vucomiss(src);
        }

        public Vucomiss vucomiss() => default;

        [MethodImpl(Inline), Op]
        public Vucomiss vucomiss(AsmHexCode encoded) => new Vucomiss(encoded);

        public struct Vunpckhpd : ITypedInstruction<Vunpckhpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vunpckhpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUNPCKHPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vunpckhpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vunpckhpd src) => AsmMnemonics.VUNPCKHPD;

            public static implicit operator AsmHexCode(Vunpckhpd src) => src.Encoded;

            public static implicit operator Vunpckhpd(AsmHexCode src) => new Vunpckhpd(src);
        }

        public Vunpckhpd vunpckhpd() => default;

        [MethodImpl(Inline), Op]
        public Vunpckhpd vunpckhpd(AsmHexCode encoded) => new Vunpckhpd(encoded);

        public struct Vunpckhps : ITypedInstruction<Vunpckhps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vunpckhps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUNPCKHPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vunpckhps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vunpckhps src) => AsmMnemonics.VUNPCKHPS;

            public static implicit operator AsmHexCode(Vunpckhps src) => src.Encoded;

            public static implicit operator Vunpckhps(AsmHexCode src) => new Vunpckhps(src);
        }

        public Vunpckhps vunpckhps() => default;

        [MethodImpl(Inline), Op]
        public Vunpckhps vunpckhps(AsmHexCode encoded) => new Vunpckhps(encoded);

        public struct Vunpcklpd : ITypedInstruction<Vunpcklpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vunpcklpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUNPCKLPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vunpcklpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vunpcklpd src) => AsmMnemonics.VUNPCKLPD;

            public static implicit operator AsmHexCode(Vunpcklpd src) => src.Encoded;

            public static implicit operator Vunpcklpd(AsmHexCode src) => new Vunpcklpd(src);
        }

        public Vunpcklpd vunpcklpd() => default;

        [MethodImpl(Inline), Op]
        public Vunpcklpd vunpcklpd(AsmHexCode encoded) => new Vunpcklpd(encoded);

        public struct Vunpcklps : ITypedInstruction<Vunpcklps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vunpcklps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VUNPCKLPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vunpcklps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vunpcklps src) => AsmMnemonics.VUNPCKLPS;

            public static implicit operator AsmHexCode(Vunpcklps src) => src.Encoded;

            public static implicit operator Vunpcklps(AsmHexCode src) => new Vunpcklps(src);
        }

        public Vunpcklps vunpcklps() => default;

        [MethodImpl(Inline), Op]
        public Vunpcklps vunpcklps(AsmHexCode encoded) => new Vunpcklps(encoded);

        public struct Vxorpd : ITypedInstruction<Vxorpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vxorpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VXORPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vxorpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vxorpd src) => AsmMnemonics.VXORPD;

            public static implicit operator AsmHexCode(Vxorpd src) => src.Encoded;

            public static implicit operator Vxorpd(AsmHexCode src) => new Vxorpd(src);
        }

        public Vxorpd vxorpd() => default;

        [MethodImpl(Inline), Op]
        public Vxorpd vxorpd(AsmHexCode encoded) => new Vxorpd(encoded);

        public struct Vxorps : ITypedInstruction<Vxorps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vxorps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VXORPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vxorps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vxorps src) => AsmMnemonics.VXORPS;

            public static implicit operator AsmHexCode(Vxorps src) => src.Encoded;

            public static implicit operator Vxorps(AsmHexCode src) => new Vxorps(src);
        }

        public Vxorps vxorps() => default;

        [MethodImpl(Inline), Op]
        public Vxorps vxorps(AsmHexCode encoded) => new Vxorps(encoded);

        public struct Vzeroall : ITypedInstruction<Vzeroall>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vzeroall(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VZEROALL;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vzeroall src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vzeroall src) => AsmMnemonics.VZEROALL;

            public static implicit operator AsmHexCode(Vzeroall src) => src.Encoded;

            public static implicit operator Vzeroall(AsmHexCode src) => new Vzeroall(src);
        }

        public Vzeroall vzeroall() => default;

        [MethodImpl(Inline), Op]
        public Vzeroall vzeroall(AsmHexCode encoded) => new Vzeroall(encoded);

        public struct Vzeroupper : ITypedInstruction<Vzeroupper>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Vzeroupper(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.VZEROUPPER;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Vzeroupper src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Vzeroupper src) => AsmMnemonics.VZEROUPPER;

            public static implicit operator AsmHexCode(Vzeroupper src) => src.Encoded;

            public static implicit operator Vzeroupper(AsmHexCode src) => new Vzeroupper(src);
        }

        public Vzeroupper vzeroupper() => default;

        [MethodImpl(Inline), Op]
        public Vzeroupper vzeroupper(AsmHexCode encoded) => new Vzeroupper(encoded);

        public struct Wbinvd : ITypedInstruction<Wbinvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wbinvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WBINVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wbinvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wbinvd src) => AsmMnemonics.WBINVD;

            public static implicit operator AsmHexCode(Wbinvd src) => src.Encoded;

            public static implicit operator Wbinvd(AsmHexCode src) => new Wbinvd(src);
        }

        public Wbinvd wbinvd() => default;

        [MethodImpl(Inline), Op]
        public Wbinvd wbinvd(AsmHexCode encoded) => new Wbinvd(encoded);

        public struct Wbnoinvd : ITypedInstruction<Wbnoinvd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wbnoinvd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WBNOINVD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wbnoinvd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wbnoinvd src) => AsmMnemonics.WBNOINVD;

            public static implicit operator AsmHexCode(Wbnoinvd src) => src.Encoded;

            public static implicit operator Wbnoinvd(AsmHexCode src) => new Wbnoinvd(src);
        }

        public Wbnoinvd wbnoinvd() => default;

        [MethodImpl(Inline), Op]
        public Wbnoinvd wbnoinvd(AsmHexCode encoded) => new Wbnoinvd(encoded);

        public struct Wrfsbase : ITypedInstruction<Wrfsbase>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrfsbase(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRFSBASE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrfsbase src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrfsbase src) => AsmMnemonics.WRFSBASE;

            public static implicit operator AsmHexCode(Wrfsbase src) => src.Encoded;

            public static implicit operator Wrfsbase(AsmHexCode src) => new Wrfsbase(src);
        }

        public Wrfsbase wrfsbase() => default;

        [MethodImpl(Inline), Op]
        public Wrfsbase wrfsbase(AsmHexCode encoded) => new Wrfsbase(encoded);

        public struct Wrgsbase : ITypedInstruction<Wrgsbase>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrgsbase(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRGSBASE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrgsbase src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrgsbase src) => AsmMnemonics.WRGSBASE;

            public static implicit operator AsmHexCode(Wrgsbase src) => src.Encoded;

            public static implicit operator Wrgsbase(AsmHexCode src) => new Wrgsbase(src);
        }

        public Wrgsbase wrgsbase() => default;

        [MethodImpl(Inline), Op]
        public Wrgsbase wrgsbase(AsmHexCode encoded) => new Wrgsbase(encoded);

        public struct Wrmsr : ITypedInstruction<Wrmsr>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrmsr(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRMSR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrmsr src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrmsr src) => AsmMnemonics.WRMSR;

            public static implicit operator AsmHexCode(Wrmsr src) => src.Encoded;

            public static implicit operator Wrmsr(AsmHexCode src) => new Wrmsr(src);
        }

        public Wrmsr wrmsr() => default;

        [MethodImpl(Inline), Op]
        public Wrmsr wrmsr(AsmHexCode encoded) => new Wrmsr(encoded);

        public struct Wrpkru : ITypedInstruction<Wrpkru>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrpkru(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRPKRU;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrpkru src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrpkru src) => AsmMnemonics.WRPKRU;

            public static implicit operator AsmHexCode(Wrpkru src) => src.Encoded;

            public static implicit operator Wrpkru(AsmHexCode src) => new Wrpkru(src);
        }

        public Wrpkru wrpkru() => default;

        [MethodImpl(Inline), Op]
        public Wrpkru wrpkru(AsmHexCode encoded) => new Wrpkru(encoded);

        public struct Wrssd : ITypedInstruction<Wrssd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrssd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrssd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrssd src) => AsmMnemonics.WRSSD;

            public static implicit operator AsmHexCode(Wrssd src) => src.Encoded;

            public static implicit operator Wrssd(AsmHexCode src) => new Wrssd(src);
        }

        public Wrssd wrssd() => default;

        [MethodImpl(Inline), Op]
        public Wrssd wrssd(AsmHexCode encoded) => new Wrssd(encoded);

        public struct Wrssq : ITypedInstruction<Wrssq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrssq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRSSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrssq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrssq src) => AsmMnemonics.WRSSQ;

            public static implicit operator AsmHexCode(Wrssq src) => src.Encoded;

            public static implicit operator Wrssq(AsmHexCode src) => new Wrssq(src);
        }

        public Wrssq wrssq() => default;

        [MethodImpl(Inline), Op]
        public Wrssq wrssq(AsmHexCode encoded) => new Wrssq(encoded);

        public struct Wrussd : ITypedInstruction<Wrussd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrussd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRUSSD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrussd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrussd src) => AsmMnemonics.WRUSSD;

            public static implicit operator AsmHexCode(Wrussd src) => src.Encoded;

            public static implicit operator Wrussd(AsmHexCode src) => new Wrussd(src);
        }

        public Wrussd wrussd() => default;

        [MethodImpl(Inline), Op]
        public Wrussd wrussd(AsmHexCode encoded) => new Wrussd(encoded);

        public struct Wrussq : ITypedInstruction<Wrussq>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Wrussq(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.WRUSSQ;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Wrussq src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Wrussq src) => AsmMnemonics.WRUSSQ;

            public static implicit operator AsmHexCode(Wrussq src) => src.Encoded;

            public static implicit operator Wrussq(AsmHexCode src) => new Wrussq(src);
        }

        public Wrussq wrussq() => default;

        [MethodImpl(Inline), Op]
        public Wrussq wrussq(AsmHexCode encoded) => new Wrussq(encoded);

        public struct Xabort : ITypedInstruction<Xabort>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xabort(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XABORT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xabort src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xabort src) => AsmMnemonics.XABORT;

            public static implicit operator AsmHexCode(Xabort src) => src.Encoded;

            public static implicit operator Xabort(AsmHexCode src) => new Xabort(src);
        }

        public Xabort xabort() => default;

        [MethodImpl(Inline), Op]
        public Xabort xabort(AsmHexCode encoded) => new Xabort(encoded);

        public struct Xadd : ITypedInstruction<Xadd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xadd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XADD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xadd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xadd src) => AsmMnemonics.XADD;

            public static implicit operator AsmHexCode(Xadd src) => src.Encoded;

            public static implicit operator Xadd(AsmHexCode src) => new Xadd(src);
        }

        public Xadd xadd() => default;

        [MethodImpl(Inline), Op]
        public Xadd xadd(AsmHexCode encoded) => new Xadd(encoded);

        public struct Xadd_lock : ITypedInstruction<Xadd_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xadd_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XADD_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xadd_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xadd_lock src) => AsmMnemonics.XADD_LOCK;

            public static implicit operator AsmHexCode(Xadd_lock src) => src.Encoded;

            public static implicit operator Xadd_lock(AsmHexCode src) => new Xadd_lock(src);
        }

        public Xadd_lock xadd_lock() => default;

        [MethodImpl(Inline), Op]
        public Xadd_lock xadd_lock(AsmHexCode encoded) => new Xadd_lock(encoded);

        public struct Xbegin : ITypedInstruction<Xbegin>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xbegin(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XBEGIN;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xbegin src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xbegin src) => AsmMnemonics.XBEGIN;

            public static implicit operator AsmHexCode(Xbegin src) => src.Encoded;

            public static implicit operator Xbegin(AsmHexCode src) => new Xbegin(src);
        }

        public Xbegin xbegin() => default;

        [MethodImpl(Inline), Op]
        public Xbegin xbegin(AsmHexCode encoded) => new Xbegin(encoded);

        public struct Xchg : ITypedInstruction<Xchg>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xchg(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XCHG;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xchg src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xchg src) => AsmMnemonics.XCHG;

            public static implicit operator AsmHexCode(Xchg src) => src.Encoded;

            public static implicit operator Xchg(AsmHexCode src) => new Xchg(src);
        }

        public Xchg xchg() => default;

        [MethodImpl(Inline), Op]
        public Xchg xchg(AsmHexCode encoded) => new Xchg(encoded);

        public struct Xend : ITypedInstruction<Xend>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xend(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XEND;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xend src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xend src) => AsmMnemonics.XEND;

            public static implicit operator AsmHexCode(Xend src) => src.Encoded;

            public static implicit operator Xend(AsmHexCode src) => new Xend(src);
        }

        public Xend xend() => default;

        [MethodImpl(Inline), Op]
        public Xend xend(AsmHexCode encoded) => new Xend(encoded);

        public struct Xgetbv : ITypedInstruction<Xgetbv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xgetbv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XGETBV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xgetbv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xgetbv src) => AsmMnemonics.XGETBV;

            public static implicit operator AsmHexCode(Xgetbv src) => src.Encoded;

            public static implicit operator Xgetbv(AsmHexCode src) => new Xgetbv(src);
        }

        public Xgetbv xgetbv() => default;

        [MethodImpl(Inline), Op]
        public Xgetbv xgetbv(AsmHexCode encoded) => new Xgetbv(encoded);

        public struct Xlat : ITypedInstruction<Xlat>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xlat(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XLAT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xlat src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xlat src) => AsmMnemonics.XLAT;

            public static implicit operator AsmHexCode(Xlat src) => src.Encoded;

            public static implicit operator Xlat(AsmHexCode src) => new Xlat(src);
        }

        public Xlat xlat() => default;

        [MethodImpl(Inline), Op]
        public Xlat xlat(AsmHexCode encoded) => new Xlat(encoded);

        public struct Xor : ITypedInstruction<Xor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xor src) => AsmMnemonics.XOR;

            public static implicit operator AsmHexCode(Xor src) => src.Encoded;

            public static implicit operator Xor(AsmHexCode src) => new Xor(src);
        }

        public Xor xor() => default;

        [MethodImpl(Inline), Op]
        public Xor xor(AsmHexCode encoded) => new Xor(encoded);

        public struct Xor_lock : ITypedInstruction<Xor_lock>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xor_lock(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XOR_LOCK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xor_lock src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xor_lock src) => AsmMnemonics.XOR_LOCK;

            public static implicit operator AsmHexCode(Xor_lock src) => src.Encoded;

            public static implicit operator Xor_lock(AsmHexCode src) => new Xor_lock(src);
        }

        public Xor_lock xor_lock() => default;

        [MethodImpl(Inline), Op]
        public Xor_lock xor_lock(AsmHexCode encoded) => new Xor_lock(encoded);

        public struct Xorpd : ITypedInstruction<Xorpd>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xorpd(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XORPD;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xorpd src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xorpd src) => AsmMnemonics.XORPD;

            public static implicit operator AsmHexCode(Xorpd src) => src.Encoded;

            public static implicit operator Xorpd(AsmHexCode src) => new Xorpd(src);
        }

        public Xorpd xorpd() => default;

        [MethodImpl(Inline), Op]
        public Xorpd xorpd(AsmHexCode encoded) => new Xorpd(encoded);

        public struct Xorps : ITypedInstruction<Xorps>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xorps(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XORPS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xorps src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xorps src) => AsmMnemonics.XORPS;

            public static implicit operator AsmHexCode(Xorps src) => src.Encoded;

            public static implicit operator Xorps(AsmHexCode src) => new Xorps(src);
        }

        public Xorps xorps() => default;

        [MethodImpl(Inline), Op]
        public Xorps xorps(AsmHexCode encoded) => new Xorps(encoded);

        public struct Xresldtrk : ITypedInstruction<Xresldtrk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xresldtrk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XRESLDTRK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xresldtrk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xresldtrk src) => AsmMnemonics.XRESLDTRK;

            public static implicit operator AsmHexCode(Xresldtrk src) => src.Encoded;

            public static implicit operator Xresldtrk(AsmHexCode src) => new Xresldtrk(src);
        }

        public Xresldtrk xresldtrk() => default;

        [MethodImpl(Inline), Op]
        public Xresldtrk xresldtrk(AsmHexCode encoded) => new Xresldtrk(encoded);

        public struct Xrstor : ITypedInstruction<Xrstor>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xrstor(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XRSTOR;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xrstor src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xrstor src) => AsmMnemonics.XRSTOR;

            public static implicit operator AsmHexCode(Xrstor src) => src.Encoded;

            public static implicit operator Xrstor(AsmHexCode src) => new Xrstor(src);
        }

        public Xrstor xrstor() => default;

        [MethodImpl(Inline), Op]
        public Xrstor xrstor(AsmHexCode encoded) => new Xrstor(encoded);

        public struct Xrstor64 : ITypedInstruction<Xrstor64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xrstor64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XRSTOR64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xrstor64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xrstor64 src) => AsmMnemonics.XRSTOR64;

            public static implicit operator AsmHexCode(Xrstor64 src) => src.Encoded;

            public static implicit operator Xrstor64(AsmHexCode src) => new Xrstor64(src);
        }

        public Xrstor64 xrstor64() => default;

        [MethodImpl(Inline), Op]
        public Xrstor64 xrstor64(AsmHexCode encoded) => new Xrstor64(encoded);

        public struct Xrstors : ITypedInstruction<Xrstors>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xrstors(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XRSTORS;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xrstors src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xrstors src) => AsmMnemonics.XRSTORS;

            public static implicit operator AsmHexCode(Xrstors src) => src.Encoded;

            public static implicit operator Xrstors(AsmHexCode src) => new Xrstors(src);
        }

        public Xrstors xrstors() => default;

        [MethodImpl(Inline), Op]
        public Xrstors xrstors(AsmHexCode encoded) => new Xrstors(encoded);

        public struct Xrstors64 : ITypedInstruction<Xrstors64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xrstors64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XRSTORS64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xrstors64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xrstors64 src) => AsmMnemonics.XRSTORS64;

            public static implicit operator AsmHexCode(Xrstors64 src) => src.Encoded;

            public static implicit operator Xrstors64(AsmHexCode src) => new Xrstors64(src);
        }

        public Xrstors64 xrstors64() => default;

        [MethodImpl(Inline), Op]
        public Xrstors64 xrstors64(AsmHexCode encoded) => new Xrstors64(encoded);

        public struct Xsave : ITypedInstruction<Xsave>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsave(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsave src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsave src) => AsmMnemonics.XSAVE;

            public static implicit operator AsmHexCode(Xsave src) => src.Encoded;

            public static implicit operator Xsave(AsmHexCode src) => new Xsave(src);
        }

        public Xsave xsave() => default;

        [MethodImpl(Inline), Op]
        public Xsave xsave(AsmHexCode encoded) => new Xsave(encoded);

        public struct Xsave64 : ITypedInstruction<Xsave64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsave64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVE64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsave64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsave64 src) => AsmMnemonics.XSAVE64;

            public static implicit operator AsmHexCode(Xsave64 src) => src.Encoded;

            public static implicit operator Xsave64(AsmHexCode src) => new Xsave64(src);
        }

        public Xsave64 xsave64() => default;

        [MethodImpl(Inline), Op]
        public Xsave64 xsave64(AsmHexCode encoded) => new Xsave64(encoded);

        public struct Xsavec : ITypedInstruction<Xsavec>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsavec(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVEC;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsavec src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsavec src) => AsmMnemonics.XSAVEC;

            public static implicit operator AsmHexCode(Xsavec src) => src.Encoded;

            public static implicit operator Xsavec(AsmHexCode src) => new Xsavec(src);
        }

        public Xsavec xsavec() => default;

        [MethodImpl(Inline), Op]
        public Xsavec xsavec(AsmHexCode encoded) => new Xsavec(encoded);

        public struct Xsavec64 : ITypedInstruction<Xsavec64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsavec64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVEC64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsavec64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsavec64 src) => AsmMnemonics.XSAVEC64;

            public static implicit operator AsmHexCode(Xsavec64 src) => src.Encoded;

            public static implicit operator Xsavec64(AsmHexCode src) => new Xsavec64(src);
        }

        public Xsavec64 xsavec64() => default;

        [MethodImpl(Inline), Op]
        public Xsavec64 xsavec64(AsmHexCode encoded) => new Xsavec64(encoded);

        public struct Xsaveopt : ITypedInstruction<Xsaveopt>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsaveopt(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVEOPT;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsaveopt src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsaveopt src) => AsmMnemonics.XSAVEOPT;

            public static implicit operator AsmHexCode(Xsaveopt src) => src.Encoded;

            public static implicit operator Xsaveopt(AsmHexCode src) => new Xsaveopt(src);
        }

        public Xsaveopt xsaveopt() => default;

        [MethodImpl(Inline), Op]
        public Xsaveopt xsaveopt(AsmHexCode encoded) => new Xsaveopt(encoded);

        public struct Xsaveopt64 : ITypedInstruction<Xsaveopt64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsaveopt64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVEOPT64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsaveopt64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsaveopt64 src) => AsmMnemonics.XSAVEOPT64;

            public static implicit operator AsmHexCode(Xsaveopt64 src) => src.Encoded;

            public static implicit operator Xsaveopt64(AsmHexCode src) => new Xsaveopt64(src);
        }

        public Xsaveopt64 xsaveopt64() => default;

        [MethodImpl(Inline), Op]
        public Xsaveopt64 xsaveopt64(AsmHexCode encoded) => new Xsaveopt64(encoded);

        public struct Xsaves : ITypedInstruction<Xsaves>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsaves(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVES;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsaves src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsaves src) => AsmMnemonics.XSAVES;

            public static implicit operator AsmHexCode(Xsaves src) => src.Encoded;

            public static implicit operator Xsaves(AsmHexCode src) => new Xsaves(src);
        }

        public Xsaves xsaves() => default;

        [MethodImpl(Inline), Op]
        public Xsaves xsaves(AsmHexCode encoded) => new Xsaves(encoded);

        public struct Xsaves64 : ITypedInstruction<Xsaves64>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsaves64(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSAVES64;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsaves64 src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsaves64 src) => AsmMnemonics.XSAVES64;

            public static implicit operator AsmHexCode(Xsaves64 src) => src.Encoded;

            public static implicit operator Xsaves64(AsmHexCode src) => new Xsaves64(src);
        }

        public Xsaves64 xsaves64() => default;

        [MethodImpl(Inline), Op]
        public Xsaves64 xsaves64(AsmHexCode encoded) => new Xsaves64(encoded);

        public struct Xsetbv : ITypedInstruction<Xsetbv>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsetbv(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSETBV;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsetbv src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsetbv src) => AsmMnemonics.XSETBV;

            public static implicit operator AsmHexCode(Xsetbv src) => src.Encoded;

            public static implicit operator Xsetbv(AsmHexCode src) => new Xsetbv(src);
        }

        public Xsetbv xsetbv() => default;

        [MethodImpl(Inline), Op]
        public Xsetbv xsetbv(AsmHexCode encoded) => new Xsetbv(encoded);

        public struct Xstore : ITypedInstruction<Xstore>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xstore(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSTORE;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xstore src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xstore src) => AsmMnemonics.XSTORE;

            public static implicit operator AsmHexCode(Xstore src) => src.Encoded;

            public static implicit operator Xstore(AsmHexCode src) => new Xstore(src);
        }

        public Xstore xstore() => default;

        [MethodImpl(Inline), Op]
        public Xstore xstore(AsmHexCode encoded) => new Xstore(encoded);

        public struct Xsusldtrk : ITypedInstruction<Xsusldtrk>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xsusldtrk(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XSUSLDTRK;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xsusldtrk src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xsusldtrk src) => AsmMnemonics.XSUSLDTRK;

            public static implicit operator AsmHexCode(Xsusldtrk src) => src.Encoded;

            public static implicit operator Xsusldtrk(AsmHexCode src) => new Xsusldtrk(src);
        }

        public Xsusldtrk xsusldtrk() => default;

        [MethodImpl(Inline), Op]
        public Xsusldtrk xsusldtrk(AsmHexCode encoded) => new Xsusldtrk(encoded);

        public struct Xtest : ITypedInstruction<Xtest>
        {
            public AsmHexCode Content;

            [MethodImpl(Inline)]
            public Xtest(AsmHexCode encoded)
            {
                Content = encoded;
            }

            public AsmMnemonicCode Mnemonic => AsmMnemonicCode.XTEST;

            public AsmHexCode Encoded => Content;

            public static implicit operator AsmMnemonicCode(Xtest src) => src.Mnemonic;

            public static implicit operator AsmMnemonic(Xtest src) => AsmMnemonics.XTEST;

            public static implicit operator AsmHexCode(Xtest src) => src.Encoded;

            public static implicit operator Xtest(AsmHexCode src) => new Xtest(src);
        }

        public Xtest xtest() => default;

        [MethodImpl(Inline), Op]
        public Xtest xtest(AsmHexCode encoded) => new Xtest(encoded);

    }
}
