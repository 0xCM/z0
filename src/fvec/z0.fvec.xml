<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.fvec</name>
    </assembly>
    <members>
        <member name="T:Z0.dinxfp">
            <summary>
            Direct vectorized intrinsics over floating-point domains
            </summary>
        </member>
        <member name="M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128d _mm_ceil_sd (__m128d a) ROUNDSD xmm, xmm/m128, imm8(10) 
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_ceil_pd (__m128d a) ROUNDPD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_ceil_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256 _mm256_ceil_pd (__m256 a) VROUNDPS ymm, ymm/m256, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_div_ps (__m128 a, __m128 b)DIVPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             __m128d _mm_div_pd (__m128d a, __m128d b)DIVPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_div_ps (__m256 a, __m256 b)VDIVPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_div_pd (__m256d a, __m256d b)VDIVPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Nullable{System.Byte})">
            <summary>
            __m128 _mm_dp_ps (__m128 a, __m128 b, const int imm8) DPPS xmm, xmm/m128, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Nullable{System.Byte})">
            <summary>
            __m128d _mm_dp_pd (__m128d a, __m128d b, const int imm8) DPPD xmm, xmm/m128, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Nullable{System.Byte})">
            <summary>
            __m256 _mm256_dp_ps (__m256 a, __m256 b, const int imm8) VDPPS ymm, ymm, ymm/m256,
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_floor_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128 _mm_floor_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_floor_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
             __m256d _mm256_floor_pd (__m256d a) VROUNDPS ymm, ymm/m256, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_fnmadd_ps (__m128 a, __m128 b, __m128 c) VFNMADDPS xmm, xmm, xmm/m128
            dst = -(x*y + c)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_fnmadd_pd (__m128d a, __m128d b, __m128d c) VFNMADDPD xmm, xmm, xmm/m128
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c) VFMADDSUBPS xmm, xmm, xmm/m128
            dst = x*y - z
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c) VFMADDSUBPD xmm, xmm, xmm/m128
            dst[i] = x[i]*y[i] + z (i is even?)
            dst[i] = x[i]*y[i] - z (i is odd?)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c) VFNMADDPS ymm, ymm, ymm/m256
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c) VFNMADDPD ymm, ymm,ymm/m256
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c) VFMADDSUBPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c) VFMADDSUBPD ymm, ymm, ymm/m256
            dst[i] = x[i]*y[i] + z (i is even?)
            dst[i] = x[i]*y[i] - z (i is odd?)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            dst = x*y + z
            __m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c) VFMADDPS xmm, xmm, xmm/m128
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            dst = x*y + z
             __m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c) VFMADDPD xmm, xmm, xmm/m128
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_fmadd_ps (__m256 a, __m256 b, __m256 c) VFMADDPS ymm, ymm, ymm/m256
            dst = a*b + c
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c) VFMADDPS ymm, ymm, ymm/m256
            dst = a*b + c
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_hadd_ps (__m128 a, __m128 b) HADDPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             __m128d _mm_hadd_pd (__m128d a, __m128d b) HADDPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_hadd_ps (__m256 a, __m256 b) VHADDPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_hadd_pd (__m256d a, __m256d b) VHADDPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_hsub_ps (__m128 a, __m128 b) HSUBPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_hsub_pd (__m128d a, __m128d b) HSUBPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_hsub_ps (__m256 a, __m256 b) VHSUBPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_hsub_pd (__m256d a, __m256d b) VHSUBPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_mul_ps (__m128 a, __m128 b) MULPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_mul_pd (__m128d a, __m128d b) MULPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_mul_ps (__m256 a, __m256 b) VMULPS ymm, ymm, ymm/m256
            Multiplies corresponding components and returns the result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_mul_pd (__m256d a, __m256d b) VMULPD ymm, ymm, ymm/m256
            Multiplies corresponding components and returns the result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.rcp(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_rcp_ps (__m128 a) RCPPS xmm, xmm/m128
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.rcp(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_rcp_ps (__m256 a) VRCPPS ymm, ymm/m256
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            _mm_round_ps:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            _mm_round_pd:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            _mm_round_ss:
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            _mm_round_sd:
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            _mm256_round_ps:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(8)
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)VROUNDPS ymm, ymm/m256, imm8(11)
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(11)
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_sqrt_ps (__m128 a) SQRTPS xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_sqrt_pd (__m128d a) SQRTPD xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_sqrt_ps (__m256 a) VSQRTPS ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_sqrt_pd (__m256d a) VSQRTPD ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.rsqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_rsqrt_ps (__m128 a) RSQRTPS xmm, xmm/m128
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128d _mm_sub_ps (__m128d a, __m128d b) SUBPS xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_sub_pd (__m128d a, __m128d b) SUBPD xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_sub_ps (__m256 a, __m256 b) VSUBPS ymm, ymm, ymm/m256
            Subtracts the right vector from the left
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_sub_pd (__m256d a, __m256d b) VSUBPD ymm, ymm, ymm/m256
            Subtracts the right vector from the left
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vbroadcast(Z0.N256,System.Single@)">
            <summary>
            __m256 _mm256_broadcast_ss (float const * mem_addr) VBROADCASTSS ymm, m32
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        </member>
        <member name="M:Z0.dinxfp.vbroadcast(Z0.N256,System.Double@)">
            <summary>
            __m256d _mm256_broadcast_sd (double const * mem_addr) VBROADCASTSD ymm, m64
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        </member>
        <member name="M:Z0.dinxfp.vbroadcast(Z0.N128,System.Single@)">
            <summary>
            __m128 _mm_broadcast_ss (float const * mem_addr) VBROADCASTSS xmm, m32
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        </member>
        <member name="M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector128{System.Single},Z0.Hex2Seq)">
            <summary>
            int _mm_extract_ps (__m128 a, const int imm8)EXTRACTPS xmm, xmm/m32, imm8
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        </member>
        <member name="M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
            <summary>
            __m128 _mm256_extractf128_ps (__m256 a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8
            Extracts either the lo (pos = 0) or hi (pos = 1) 128-bit lane of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The index of the lane to extract</param>
        </member>
        <member name="M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
            <summary>
            __m128d _mm256_extractf128_pd (__m256d a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8
            Extracts either the lo (pos = 0) or hi (pos = 1) 128-bit lane of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The index of the lane to extract</param>
        </member>
        <member name="M:Z0.dinxfp.vxscalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
            <summary>
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        </member>
        <member name="M:Z0.dinxfp.vxscalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
            <summary>
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        </member>
        <member name="M:Z0.dinxfp.vhi(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            Creates a scalar vector from the upper 64 bits of the source vector
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vhi(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            Creates a scalar vector from the upper 64 bits of the source vector
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmaskload(System.Single@,System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_maskload_ps (float const * mem_addr, __m128i mask) VMASKMOVPS xmm,xmm, m128
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        </member>
        <member name="M:Z0.dinxfp.vmaskload(System.Double@,System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128 _mm_maskload_ps (float const * mem_addr, __m128i mask) VMASKMOVPS xmm,xmm, m128
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        </member>
        <member name="M:Z0.dinxfp.vmaskload(System.Single@,System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask) VMASKMOVPD ymm, ymm, m256
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        </member>
        <member name="M:Z0.dinxfp.vmaskload(System.Double@,System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask) VMASKMOVPD ymm, ymm, m256
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        </member>
        <member name="M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)">
            <summary>
            void _mm_maskstore_ps (float * mem_addr, __m128i mask, __m128 a) VMASKMOVPS m128, xmm, xmm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        </member>
        <member name="M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Double@)">
            <summary>
            void _mm_maskstore_pd (double * mem_addr, __m128i mask, __m128d a) VMASKMOVPD m128, xmm, xmm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        </member>
        <member name="M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Single@)">
            <summary>
            void _mm256_maskstore_ps (float * mem_addr, __m256i mask, __m256 a) VMASKMOVPS m256, ymm, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        </member>
        <member name="M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)">
            <summary>
            void _mm256_maskstore_pd (double * mem_addr, __m256i mask, __m256d a) VMASKMOVPD m256, ymm, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        </member>
        <member name="M:Z0.dinxfp.vmovescalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_move_ss (__m128 a, __m128 b) MOVSS xmm, xmm
            z[0] = y[0]
            z[1] = x[1]
            z[2] = x[2]
            z[3] = x[3]
            </summary>
        </member>
        <member name="M:Z0.dinxfp.vmovescalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_move_sd (__m128d a, __m128d b) MOVSD xmm, xmm
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vshuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
            <summary>
            __m128 _mm_shuffle_ps (__m128 a, __m128 b, unsigned int control) SHUFPS xmm, xmm/m128, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="control"></param>
        </member>
        <member name="M:Z0.dinxfp.vshuffle(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
            <summary>
            __m128d _mm_shuffle_pd (__m128d a, __m128d b, int immediate) SHUFPD xmm, xmm/m128, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="control"></param>
        </member>
        <member name="M:Z0.dinxfp.vswaphl(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            Swaps hi/lo 128-bit lanes
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vswaphl(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            Swaps hi/lo 128-bit lanes
            </summary>
            <param name="src">The source vector</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector128{System.Single})" -->
        <member name="M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            int _mm_movemask_pd (__m128d a) MOVMSKPD reg, xmm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
        </member>
        <member name="M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            int _mm256_movemask_ps (__m256 a) VMOVMSKPS reg, ymm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            int _mm256_movemask_pd (__m256d a) VMOVMSKPD reg, ymm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
            <param name="src">The source vector</param>
        </member>
        <member name="M:Z0.dinxfp.movehl(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_movehl_ps (__m128 a, __m128 b) MOVHLPS xmm, xmm
            z[0] = x[3]
            z[1] = y[3]
            z[2] = x[0]
            z[3] = y[0]
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.movelh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_movelh_ps (__m128 a, __m128 b) MOVLHPS xmm, xmm
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vtranspose(System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)">
            <summary>
            Transposes a 4x4 matrix of floats, adapted from MSVC intrinsic headers
            </summary>
            <param name="row0">The first row</param>
            <param name="row1">The second row</param>
            <param name="row2">The third row</param>
            <param name="row3">The fourth row</param>
        </member>
        <member name="M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_unpackhi_ps (__m128 a, __m128 b) UNPCKHPS xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            higher 64 bits of the first source vector and the higher 64 bits are taken 
            from the higher 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_unpackhi_pd (__m128d a, __m128d b) UNPCKHPD xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            higher 64 bits of the first source vector and the higher 64 bits are taken 
            from the higher 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_unpackhi_ps (__m256 a, __m256 b) VUNPCKHPS ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            higher 128 bits of the first source vector and the higher 128 bits are taken 
            from the higher 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_unpackhi_pd (__m256d a, __m256d b) VUNPCKHPD ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            higher 128 bits of the first source vector and the higher 128 bits are taken 
            from the higher 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        </member>
        <member name="M:Z0.dinxfp.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
            <summary>
            __m256d _mm256_permute4x64_pd (__m256d a, const int imm8) VPERMPD ymm, ymm/m256, imm8
            Permutes components in the source vector across lanes as specified by the control byte
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The control byte</param>
        </member>
        <member name="M:Z0.dinxfp.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Double},Z0.Perm4L)">
            <summary>
            __m256d _mm256_permute4x64_pd (__m256d a, const int imm8) VPERMPD ymm, ymm/m256, imm8
            </summary>
            <param name="x">The source vector</param>
            <param name="spec">The permutation spec</param>
        </member>
        <member name="M:Z0.dinxfp.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
            <summary>
            Permutes components in the source vector across lanes as specified by the control vector
            __m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)VPERMPS ymm, ymm/m256, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The control vector</param>
        </member>
        <member name="M:Z0.dinxfp.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.UInt32})">
            <summary>
            __m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)VPERMPS ymm, ymm/m256, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The perm spec</param>
        </member>
        <member name="M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
            <summary>
            __m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        </member>
        <member name="M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
            <summary>
            __m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        </member>
        <member name="M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},Z0.Perm2x4)">
            <summary>
            __m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        </member>
        <member name="M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},Z0.Perm2x4)">
            <summary>
            __m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        </member>
        <member name="M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             __m128 _mm_cmpeq_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(0)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpeq_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(0)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpgt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(6)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpgt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(6)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm,ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpge_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpge_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm,ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             __m128 _mm_cmplt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(1)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmplt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(1)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmple_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmple_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})" -->
        <member name="M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             __m128d _mm_max_pd (__m128d a, __m128d b)MAXPD xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_max_ps (__m256 a, __m256 b) VMAXPS ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_max_pd (__m256d a, __m256d b)VMAXPD ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_min_ps (__m128 a, __m128 b) MINPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_min_pd (__m128d a, __m128d b) MINPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_min_ps (__m256 a, __m256 b) VMINPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_min_pd (__m256d a, __m256d b) VMINPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpneq_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(4)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpneq_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(4)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             __m128d _mm_cmpnlt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vnlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpnlt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vngt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpngt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vngt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpngt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vngteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_cmpnge_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(1)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="M:Z0.dinxfp.vngteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpnge_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(1)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        </member>
        <member name="T:Z0.dinxsfp">
            <summary>
            Direct floating-point scalar intrinsics
            </summary>
        </member>
        <member name="M:Z0.dinxsfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_fmadd_ss (__m128 a, __m128 b, __m128 c) VFMADDSS xmm, xmm, xmm/m32
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxsfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c) VFMADDSS xmm, xmm, xmm/m64
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxsfp.fmsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c)VFMSUBSS xmm, xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Z0.dinxsfp.fmsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_fmsub_sd (__m128d a, __m128d b, __m128d c)VFMSUBSD xmm, xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Z0.dinxsfp.fnmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_fnmadd_ss (__m128 a, __m128 b, __m128 c) VFNMADDSS xmm, xmm, xmm/m32
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxsfp.fnmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c) VFNMADDSD xmm, xmm, xmm/m64
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        </member>
        <member name="M:Z0.dinxsfp.div(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_div_ss (__m128 a, __m128 b)DIVSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Z0.dinxsfp.div(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             __m128d _mm_div_sd (__m128d a, __m128d b)DIVSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.sub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_sub_ss (__m128 a, __m128 b) SUBSS xmm, xmm/m32
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        </member>
        <member name="M:Z0.dinxsfp.sub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_sub_sd (__m128d a, __m128d b) SUBSD xmm, xmm/m64
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        </member>
        <member name="M:Z0.dinxsfp.max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            __m128 _mm_max_ss (__m128 a, __m128 b) MAXSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.max(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_max_sd (__m128d a, __m128d b) MAXSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             __m128 _mm_min_ss (__m128 a, __m128 b) MINSS xmm, xmm/m32
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        </member>
        <member name="M:Z0.dinxsfp.min(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_min_sd (__m128d a, __m128d b) MINSD xmm, xmm/m64
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        </member>
        <member name="M:Z0.dinxsfp.eq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             int _mm_ucomieq_ss (__m128 a, __m128 b)UCOMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.eq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            int _mm_ucomieq_sd (__m128d a, __m128d b)UCOMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.neq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            int _mm_comineq_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.neq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
             int _mm_comineq_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.gt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            int _mm_comigt_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.gt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            int _mm_comigt_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.lt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            int _mm_comilt_sd (__m128d a, __m128d b) COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.nlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             __m128 _mm_cmpnlt_ss (__m128 a, __m128 b)CMPSS xmm, xmm/m32, imm8(5)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.nlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            __m128d _mm_cmpnlt_sd (__m128d a, __m128d b)CMPSD xmm, xmm/m64, imm8(5)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.lteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
             int _mm_ucomile_ss (__m128 a, __m128 b)UCOMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Z0.dinxsfp.IsNaN(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)">
            <summary>
            Determines whether the first component is NaN
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.dinxsfp.IsNaN(System.Runtime.Intrinsics.Vector128{System.Double},System.Int32)">
            <summary>
            Determines whether the first component is NaN
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="T:Z0.ginxfp">
            <summary>
            Generic intrinsics over floating-point domains
            </summary>
        </member>
        <member name="M:Z0.ginxfp.vfpsign``1(Z0.N256)">
            <summary>
            Defines a vector of 32 or 64-bit floating point values where each component has been intialized to the value -0.0
            </summary>
            <typeparam name="T">The floating point type</typeparam>
        </member>
        <member name="T:Z0.ginxsfp">
            <summary>
            Generic scalar intrinsics over floating-point domains
            </summary>
        </member>
    </members>
</doc>
