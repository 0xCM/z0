# SAL â€” Shift
| Opcode***        | Instruction      | Op/En | 64-Bit Mode | Compat/Leg Mode | Description                             |
| D0 /4            | SAL r/m8, 1     | M1    | Valid       | Valid           | Multiply r/m8 by 2, once.               |
| REX + D0 /4      | SAL r/m8** , 1   | M1    | Valid       | N.E.            | Multiply r/m8 by 2, once.               |
| D2 /4            | SAL r/m8, CL    | MC    | Valid       | Valid           | Multiply r/m8 by 2, CL times.           |
| REX + D2 /4      | SAL r/m8**, CL  | MC    | Valid       | N.E.            | Multiply r/m8 by 2, CL times.           |
| C0 /4 ib         | SAL r/m8, imm8   | MI    | Valid       | Valid           | Multiply r/m8 by 2, imm8 times.         |
| REX + C0 /4 ib   | SAL r/m8**, imm8 | MI    | Valid       | N.E.            | Multiply r/m8 by 2, imm8 times.         |
| D1 /4            | SAL r/m16, 1    | M1    | Valid       | Valid           | Multiply r/m16 by 2, once.              |
| D3 /4            | SAL r/m16, CL   | MC    | Valid       | Valid           | Multiply r/m16 by 2, CL times.          |
| C1 /4 ib         | SAL r/m16, imm8  | MI    | Valid       | Valid           | Multiply r/m16 by 2, imm8 times.        |
| D1 /4            | SAL r/m32, 1    | M1    | Valid       | Valid           | Multiply r/m32 by 2, once.              |
| REX.W + D1 /4    | SAL r/m64, 1    | M1    | Valid       | N.E.            | Multiply r/m64 by 2, once.              |
| D3 /4            | SAL r/m32, CL   | MC    | Valid       | Valid           | Multiply r/m32 by 2, CL times.          |
| REX.W + D3 /4    | SAL r/m64, CL   | MC    | Valid       | N.E.            | Multiply r/m64 by 2, CL times.          |
| C1 /4 ib         | SAL r/m32, imm8  | MI    | Valid       | Valid           | Multiply r/m32 by 2, imm8 times.        |
| REX.W + C1 /4 ib | SAL r/m64, imm8  | MI    | Valid       | N.E.            | Multiply r/m64 by 2, imm8 times.        |


## Notes
----------------------------------------------------------------------------------------------------------------------------
* Not the same form of division as IDIV; rounding is toward negative infinity.
** In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH
*** The 8086 does not mask the shift count. However, all other IA-32 processors (starting with the Intel 286 processor)
do mask the shift count to 5 bits, resulting in a maximum count of 31. This masking is done in all operating modes
(including the virtual-8086 mode) to reduce the maximum execution time of the instructions.