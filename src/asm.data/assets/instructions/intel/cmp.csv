# CMP

## OpCodes
------------------------------------------------------------------------------------------------------------------------
| Opcode           | Instruction       | Op/En | 64-Bit Mode | Compat/Leg Mode | Description                                        |
| 3C ib            | CMP AL, imm8      | I     | Valid       | Valid           | Compare imm8 with AL.                              |
| 3D iw            | CMP AX, imm16     | I     | Valid       | Valid           | Compare imm16 with AX.                             |
| 3D id            | CMP EAX, imm32    | I     | Valid       | Valid           | Compare imm32 with EAX.                            |
| REX.W + 3D id    | CMP RAX, imm32    | I     | Valid       | N.E.            | Compare imm32 sign-extended to 64-bits with RAX.   |
| 80 /7 ib         | CMP r/m8, imm8    | MI    | Valid       | Valid           | Compare imm8 with r/m8.                            |
| REX + 80 /7 ib   | CMP r/m8 * , imm8 | MI    | Valid       | N.E.            | Compare imm8 with r/m8.                            |
| 81 /7 iw         | CMP r/m16, imm16  | MI    | Valid       | Valid           | Compare imm16 with r/m16.                          |
| 81 /7 id         | CMP r/m32, imm32  | MI    | Valid       | Valid           | Compare imm32 with r/m32.                          |
| REX.W + 81 /7 id | CMP r/m64, imm32  | MI    | Valid       | N.E.            | Compare imm32 sign-extended to 64-bits with r/m64. |
| 83 /7 ib         | CMP r/m16, imm8   | MI    | Valid       | Valid           | Compare imm8 with r/m16.                           |
| 83 /7 ib         | CMP r/m32, imm8   | MI    | Valid       | Valid           | Compare imm8 with r/m32.                           |
| REX.W + 83 /7 ib | CMP r/m64, imm8   | MI    | Valid       | N.E.            | Compare imm8 with r/m64.                           |
| 38 / r           | CMP r/m8, r8      | MR    | Valid       | Valid           | Compare r8 with r/m8.                              |
| REX + 38 / r     | CMP r/m8 * , r8 * | MR    | Valid       | N.E.            | Compare r8 with r/m8.                              |
| 39 / r           | CMP r/m16, r16    | MR    | Valid       | Valid           | Compare r16 with r/m16.                            |
| 39 / r           | CMP r/m32, r32    | MR    | Valid       | Valid           | Compare r32 with r/m32.                            |
| REX.W + 39 / r   | CMP r/m64,r64     | MR    | Valid       | N.E.            | Compare r64 with r/m64.                            |
| 3A / r           | CMP r8, r/m8      | RM    | Valid       | Valid           | Compare r/m8 with r8.                              |
| REX + 3A / r     | CMP r8 * , r/m8 * | RM    | Valid       | N.E.            | Compare r/m8 with r8.                              |
| 3B / r           | CMP r16, r/m16    | RM    | Valid       | Valid           | Compare r/m16 with r16.                            |
| 3B / r           | CMP r32, r/m32    | RM    | Valid       | Valid           | Compare r/m32 with r32.                            |
| REX.W + 3B / r   | CMP r64, r/m64    | RM    | Valid       | N.E.            | Compare r/m64 with r64.                            |

## Encoding
------------------------------------------------------------------------------------------------------------------------
| Op/En | Operand 1         | Operand 2     | Operand 3 | Operand 4 |
| RM    | ModRM:reg (r)     | ModRM:r/m (r) | NA        | NA        |
| MR    | ModRM:r/m (r)     | ModRM:reg (r) | NA        | NA        |
| MI    | ModRM:r/m (r)     | imm8/16/32    | NA        | NA        |
| I     | AL/AX/EAX/RAX (r) | imm8/16/32    | NA        | NA        |

## Description
------------------------------------------------------------------------------------------------------------------------
Compares the first source operand with the second source operand and sets the status flags in the EFLAGS register according to the
results. The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in
the same manner as the SUB instruction. When an immediate value is used as an operand, it is sign-extended to the length of the first
operand.

The condition codes used by the Jcc, CMOVcc, and SETcc instructions are based on the results of a CMP instruction. Appendix B,
“EFLAGS Condition Codes,” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, shows the relationship
of the status flags and the condition codes.

In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers
(R8-R15). Use of the REX.W prefix promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding
data and limits.

## Operation
------------------------------------------------------------------------------------------------------------------------
temp ← SRC1 − SignExtend(SRC2);
ModifyStatusFlags; (* Modify status flags in the same manner as the SUB instruction*)

## Flags Affected
------------------------------------------------------------------------------------------------------------------------
The CF, OF, SF, ZF, AF, and PF flags are set according to the result.

## Layout
------------------------------------------------------------------------------------------------------------------------
| register1 with register2           | 0100 0R0B 0011 100w : 11 reg1 reg2            |
| qwordregister1 with qwordregister2 | 0100 1R0B 0011 1001 : 11 qwordreg1 qwordreg2  |
| register2 with register1           | 0100 0R0B 0011 101w : 11 reg1 reg2            |
| qwordregister2 with qwordregister1 | 0100 1R0B 0011 101w : 11 qwordreg1 qwordreg2  |
| memory with register               | 0100 0RXB 0011 100w : mod reg r/m             |
| memory64 with qwordregister        | 0100 1RXB 0011 1001 : mod qwordreg r/m        |
| register with memory               | 0100 0RXB 0011 101w : mod reg r/m             |
| qwordregister with memory64        | 0100 1RXB 0011 101w1 : mod qwordreg r/m       |
| immediate with register            | 0100 000B 1000 00sw : 11 111 reg : imm        |
| immediate32 with qwordregister     | 0100 100B 1000 0001 : 11 111 qwordreg : imm64 |
| immediate with AL, AX, or EAX      | 0011 110w : imm                               |
| immediate32 with RAX               | 0100 1000 0011 1101 : imm32                   |
| immediate with memory              | 0100 00XB 1000 00sw : mod 111 r/m : imm       |
| immediate32 with memory64          | 0100 1RXB 1000 0001 : mod 111 r/m : imm64     |
| immediate8 with memory64           | 0100 1RXB 1000 0011 : mod 111 r/m : imm8      |