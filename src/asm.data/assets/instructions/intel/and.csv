# AND - Logical And

## OpCodes
----------------------------------------------------------------------------------------------------------------------------
| Opcode           | Instruction      | Op/En | 64-bit Mode | Compat/Leg Mode | Description                               |
| 20 /r            | AND r/m8, r8     | MR    | Valid       | Valid           | r/m8 AND r8.                              |
| 22 /r            | AND r8, r/m8     | RM    | Valid       | Valid           | r8 AND r/m8.                              |
| REX + 20 /r      | AND r/m8*, r8*   | MR    | Valid       | N.E.            | r/m64 AND r8 (sign-extended).             |
| REX + 22 /r      | AND r8*, r/m8*   | RM    | Valid       | N.E.            | r/m64 AND r8 (sign-extended).             |
| 24 ib            | AND AL, imm8     | I     | Valid       | Valid           | AL AND imm8.                              |
| 80 /4 ib         | AND r/m8, imm8   | MI    | Valid       | Valid           | r/m8 AND imm8.                            |
| REX + 80 /4 ib   | AND r/m8*, imm8  | MI    | Valid       | N.E.            | r/m8 AND imm8.                            |
| 25 iw            | AND AX, imm16    | I     | Valid       | Valid           | AX AND i mm16.                            |
| 83 /4 ib         | AND r/m16, imm8  | MI    | Valid       | Valid           | r/m16 AND imm8 (sign-extended).           |
| 23 /r            | AND r16, r/m16   | RM    | Valid       | Valid           | r16 AND r/m16.                            |
| 81 /4 iw         | AND r/m16, imm16 | MI    | Valid       | Valid           | r/m16 AND imm16.                          |
| 21 /r            | AND r/m16, r16   | MR    | Valid       | Valid           | r/m16 AND r16.                            |
| 25 id            | AND EAX, imm32   | I     | Valid       | Valid           | EAX AND imm32.                            |
| 81 /4 id         | AND r/m32, imm32 | MI    | Valid       | Valid           | r/m32 AND imm32.                          |
| 23 /r            | AND r32, r/m32   | RM    | Valid       | Valid           | r32 AND r/m32.                            |
| 83 /4 ib         | AND r/m32, imm8  | MI    | Valid       | Valid           | r/m32 AND imm8 (sign-extended).           |
| 21 /r            | AND r/m32, r32   | MR    | Valid       | Valid           | r/m32 AND r32.                            |
| REX.W + 25 id    | AND RAX, imm32   | I     | Valid       | N.E.            | RAX AND imm32 sign-extended to 64-bits.   |
| REX.W + 81 /4 id | AND r/m64, imm32 | MI    | Valid       | N.E.            | r/m64 AND imm32 sign extended to 64-bits. |
| REX.W + 21 /r    | AND r/m64, r64   | MR    | Valid       | N.E.            | r/m64 AND r32.                            |
| REX.W + 83 /4 ib | AND r/m64, imm8  | MI    | Valid       | N.E.            | r/m64 AND imm8 (sign-extended).           |
| REX.W + 23 /r    | AND r64, r/m64   | RM    | Valid       | N.E.            | r64 AND r/m64.                            |


## Encoding
----------------------------------------------------------------------------------------------------------------------------
| Op/En | Operand 1        | Operand 2     | Operand 3 | Operand 4 |
| RM    | ModRM:reg (r, w) | ModRM:r/m (r) | NA        | NA        |
| MR    | ModRM:r/m (r, w) | ModRM:reg (r) | NA        | NA        |
| MI    | ModRM:r/m (r, w) | imm8/16/32    | NA        | NA        |
| I     | AL/AX/EAX/RAX    | imm8/16/32    | NA        | NA        |

## Description
----------------------------------------------------------------------------------------------------------------------------
Performs a bitwise AND operation on the destination (first) and source (second) operands and stores the result in the
destination operand location. The source operand can be an immediate, a register, or a memory location; the destination
operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of
the result is set to 1 if both corresponding bits of the first and second operands are 1; otherwise, it is set to 0.

This instruction can be used with a LOCK prefix to allow the it to be executed atomically.

In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access
to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary
chart at the beginning of this section for encoding data and limits.

## Operation
----------------------------------------------------------------------------------------------------------------------------
 DEST ← DEST AND SRC;

## Flags
----------------------------------------------------------------------------------------------------------------------------
The OF and CF flags are cleared; the SF, ZF, and PF flags are set according to the result. The state of the AF flag is undefined.

## BinaryFormat
----------------------------------------------------------------------------------------------------------------------------
| register1 to register2           | 0100 0R0B 0010 000w : 11 reg1 reg2                |
| qwordregister1 to qwordregister2 | 0100 1R0B 0010 0001 : 11 qwordreg1 qwordreg2      |
| register2 to register1           | 0100 0R0B 0010 001w : 11 reg1 reg2                |
| register1 to register2           | 0100 1R0B 0010 0011 : 11 qwordreg1 qwordreg2      |
| memory to register               | 0100 0RXB 0010 001w : mod reg r/m                 |
| memory64 to qwordregister        | 0100 1RXB : 0010 0011 : mod qwordreg r/m          |
| register to memory               | 0100 0RXB : 0010 000w : mod reg r/m               |
| qwordregister to memory64        | 0100 1RXB : 0010 0001 : mod qwordreg r/m          |
| immediate to register            | 0100 000B : 1000 00sw : 11 100 reg : immediate    |
| immediate32 to qwordregister     | 0100 100B 1000 0001 : 11 100 qwordreg : imm32     |
| immediate to AL, AX, or EAX      | 0010 010w : immediate                             |
| immediate32 to RAX               | 0100 1000 0010 1001 : imm32                       |
| immediate to memory              | 0100 00XB : 1000 00sw : mod 100 r/m : immediate   |
| immediate32 to memory64          | 0100 10XB : 1000 0001 : mod 100 r/m : immediate32 |
| immediate8 to memory64           | 0100 10XB : 1000 0011 : mod 100 r/m : imm8        |