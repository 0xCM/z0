<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.circuits</name>
    </assembly>
    <members>
        <member name="T:Z0.ILogicGate">
            <summary>
            Represents one (or more) logic gates, which is intended to represent
            a physical component that receives one or more bits of input and emits a single bit of output;
            i.e., boolean function reification
            </summary>
        </member>
        <member name="T:Z0.IUnaryLogicGate">
            <summary>
            Characterizes a logic gate that receives 1 bit
            </summary>
        </member>
        <member name="T:Z0.IBinaryLogicGate">
            <summary>
            Characterizes a logic gate that receives 2 bits
            </summary>
        </member>
        <member name="T:Z0.ITernaryLogicGate">
            <summary>
            Characterizes a logic gate that receives 3 bits
            </summary>
        </member>
        <member name="T:Z0.IUnaryGate`1">
            <summary>
            Characterizes a set of logic gates where each member accepts 1 bit of input
            </summary>
            <typeparam name="T">A type that defines a finite sequence of bits</typeparam>
        </member>
        <member name="T:Z0.IBinaryGate`1">
            <summary>
            Characterizes a set of logic gates where each member accepts 2 bits of input
            </summary>
            <typeparam name="T">A type that defines a finite sequence of bits</typeparam>
        </member>
        <member name="T:Z0.ITernaryGate`1">
            <summary>
            Characterizes a set of logic gates where each member accepts 3 bits of input
            </summary>
            <typeparam name="T">A type that defines a finite sequence of bits</typeparam>
        </member>
        <member name="M:Z0.AndGate`1.Invoke(Z0.Bit32,Z0.Bit32)">
            <summary>
            Defines the canonical boolean or function, or:{0,1} x {0,1} -> {0,1}
            </summary>
            <param name="x">The first input value</param>
            <param name="y">The second input value</param>
        </member>
        <member name="M:Z0.AndGate`1.Invoke(`0,`0)">
            <summary>
            Simultaneously evaluates N boolean or functions wher N denotes the bit-width of the parametric type
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="M:Z0.AndGate`1.Invoke(System.Runtime.Intrinsics.Vector128{`0},System.Runtime.Intrinsics.Vector128{`0})">
            <summary>
            Computes 128 boolean OR functions simultaneously
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="M:Z0.AndGate`1.Invoke(System.Runtime.Intrinsics.Vector256{`0},System.Runtime.Intrinsics.Vector256{`0})">
            <summary>
            Computes 256 boolean OR functions simultaneously
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="M:Z0.AndGate`1.Invoke(Z0.Vector512{`0}@,Z0.Vector512{`0}@)">
            <summary>
            Computes 512 boolean OR functions simultaneously
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="M:Z0.XOrGate`1.Invoke(System.Runtime.Intrinsics.Vector256{`0},System.Runtime.Intrinsics.Vector256{`0})">
            <summary>
            Computes 256 boolean XOR functions simultaneously
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="M:Z0.XOrGate`1.Invoke(Z0.Vector512{`0}@,Z0.Vector512{`0}@)">
            <summary>
            Computes 512 boolean XOR functions simultaneously
            </summary>
            <param name="x">The left operands</param>
            <param name="y">The right operands</param>
        </member>
        <member name="T:Z0.Circuits">
            <summary>
            Generic vectorized intrinsics
            </summary>
        </member>
    </members>
</doc>
