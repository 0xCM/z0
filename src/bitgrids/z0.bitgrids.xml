<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.bitgrids</name>
    </assembly>
    <members>
        <member name="M:Z0.BitGrid.negate``1(Z0.BitGrid16{``0})">
            <summary>
            Computes the two's complement negation of source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``1(Z0.BitGrid32{``0})">
            <summary>
            Computes the two's complement negation of source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``1(Z0.BitGrid64{``0})">
            <summary>
            Computes the two's complement negation of source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the two's complement negation of the first grid and deposits the result into the second
            </summary>
            <param name="x">The source grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the two's complement negation of the source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the two's complement negation of the source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the two's complement negation of the source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the two's complement negation of the source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the two's complement negation of the source grid
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the two's complement negation of the first grid and deposits the result into the second
            </summary>
            <param name="x">The source grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.negate``3(Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the two's complement negation of the source grid and returns the allocated result
            </summary>
            <param name="x">The source grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise AND between fixed-width 16-bit generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise AND between fixed-width 32-bit generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise AND between fixed-width 64-bit grids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise AND between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <param name="dst">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid16{``0,``1,``2},Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise AND between fixed-width natural bitgrids
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise AND between fixed-width natural bitgrids
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise AND between fixed-width natural bitgrids
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise AND between fixed-width natural bitgrids
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise AND between fixed-width natural bitgrids
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.and``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise AND between natural bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <param name="dst">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise nand between generic bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise nand between generic bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise nand between generic bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise NAND between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid16{``0,``1,``2},Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise nand between natural bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise nand between natural bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise nand between natural bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise nand between natural bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise nand between natural bitgrids
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NAND between natural bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nand``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NAND between generic bitgrids and returns the allocated result
            </summary>
            <param name="x">The left grid</param>
            <param name="y">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise NOR between 16-bit generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise NOR between fixed-width 32-bit generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise NOR between fixed-width 64-bit grids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise NOR between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid16{``0,``1,``2},Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise NOR between fixed-width natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise NOR between fixed-width 32-bit natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise NOR between fixed-width 64-bit natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NOR between 128-bit fixed-width natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NOR between 256-bit fixed-width natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NOR between natural bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.nor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise NOR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``1(Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``1(Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``1(Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise complement of the source grid and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``3(Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise complement of the source grid and deposits the result int a caller-supplied target
            </summary>
            <param name="gx">The source grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.not``1(Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise complement of the source grid
            </summary>
            <param name="gx">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise OR between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid16{``0,``1,``2},Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids of natural dimensions
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids of natural dimensions
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids of natural dimensions
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids of natural dimensions
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise OR between fixed-width bitgrids of natural dimensions
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise OR between natural bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.or``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise OR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise XNOR between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise XNOR between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise XNOR between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise XNOR between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise XNOR between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise XNOR between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise XNOR between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise XNOR between 256-bit fixed-width natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise XNOR between natural bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xnor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise XNOR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``1(Z0.BitGrid16{``0},Z0.BitGrid16{``0})">
            <summary>
            Computes the bitwise xor between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Computes the bitwise xor between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Computes the bitwise xor between generic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise XOR between generic bitgrids and stores the result to a caller-supplied target
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid16{``0,``1,``2},Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Computes the bitwise xor between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid32{``0,``1,``2},Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Computes the bitwise xor between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid64{``0,``1,``2},Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Computes the bitwise xor between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Computes the bitwise xor between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise xor between natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.SubGrid256{``0,``1,``2}@,Z0.SubGrid256{``0,``1,``2}@)">
            <summary>
            Computes the bitwise xor between subgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise xor unfixed natural bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.xor``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise xor between natural dynamic bitgrids
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.rotl``1(Z0.BitGrid16{``0},System.Byte)">
            <summary>
            Circulates grid content clockwise
            </summary>
            <param name="g">The source grid</param>
            <param name="shift">The rotation amount</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.rotl``1(Z0.BitGrid32{``0},System.Byte)">
            <summary>
            Circulates grid content clockwise
            </summary>
            <param name="g">The source grid</param>
            <param name="shift">The rotation amount</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.rotl``1(Z0.BitGrid64{``0},System.Byte)">
            <summary>
            Circulates grid content clockwise
            </summary>
            <param name="g">The source grid</param>
            <param name="shift">The rotation amount</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``1(Z0.BitGrid16{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.BitGrid.bitstring``1(Z0.BitGrid32{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.BitGrid.bitstring``1(Z0.BitGrid64{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``3(Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitstring``1(Z0.BitGrid{``0}@)">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.BitGrid.bitvector``3(Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Presents a fixed 16-bit grid as a 16-bit bitvector
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitvector``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Presents a fixed 32-bit grid as a 32-bit bitvector
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitvector``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Presents a fixed 64-bit grid as a 64-bit bitvector
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.bitvector``3(Z0.BitGrid128{``0,``1,``2})">
            <summary>
            Presents a fixed 128-bit grid as a 128-bit bitvector
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16)">
            <summary>
            Creates a zero-filled 16-bit grid of caller-interpreted dimension
            </summary>
            <param name="w">The grid width selector</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32)">
            <summary>
            Creates a zero-filled 32-bit grid of caller-interpreted dimension
            </summary>
            <param name="w">The grid width selector</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64)">
            <summary>
            Creates a zero-filled 64-bit grid of caller-interpreted dimension
            </summary>
            <param name="w">The grid width selector</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16,Z0.N1,Z0.N16,``0)">
            <summary>
            Allocates a zero-filled 1x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16,Z0.N16,Z0.N1,``0)">
            <summary>
            Allocates a zero-filled 16x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16,Z0.N2,Z0.N8,``0)">
            <summary>
            Allocates a zero-filled 2x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16,Z0.N8,Z0.N2,``0)">
            <summary>
            Allocates a zero-filled 8x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N16,Z0.N4,Z0.N4,``0)">
            <summary>
            Allocates a zero-filled 4x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N1,Z0.N32,``0)">
            <summary>
            Allocates a zero-filled 1x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N32,Z0.N1,``0)">
            <summary>
            Allocates a zero-filled 32x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N16,Z0.N2,``0)">
            <summary>
            Allocates a zero-filled 16x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N2,Z0.N16,``0)" -->
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N8,Z0.N4,``0)">
            <summary>
            Allocates a zero-filled 8x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N32,Z0.N4,Z0.N8,``0)">
            <summary>
            Allocates a zero-filled 4x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N1,Z0.N64,``0)">
            <summary>
            Allocates a zero-filled 1x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N64,Z0.N1,``0)">
            <summary>
            Allocates a zero-filled 64x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N2,Z0.N32,``0)">
            <summary>
            Allocates a zero-filled 2x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N32,Z0.N2,``0)">
            <summary>
            Allocates a zero-filled 32x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N4,Z0.N16,``0)">
            <summary>
            Allocates a zero-filled 4x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N16,Z0.N4,``0)">
            <summary>
            Allocates a zero-filled 16x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N64,Z0.N8,Z0.N8,``0)">
            <summary>
            Allocates a zero-filled 8x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N1,Z0.N128,``0)">
            <summary>
            Allocates a zero-filled 1x128 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N128,Z0.N1,``0)">
            <summary>
            Allocates a zero-filled 128x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N2,Z0.N64,``0)">
            <summary>
            Allocates a zero-filled 2x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N64,Z0.N2,``0)">
            <summary>
            Allocates a zero-filled 64x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N4,Z0.N32,``0)">
            <summary>
            Allocates a zero-filled 4x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N32,Z0.N4,``0)">
            <summary>
            Allocates a zero-filled 32x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N8,Z0.N16,``0)">
            <summary>
            Allocates a zero-filled 8x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N128,Z0.N16,Z0.N8,``0)">
            <summary>
            Allocates a zero-filled 16x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N1,Z0.N256,``0)">
            <summary>
            Allocates a zero-filled 1x256 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N256,Z0.N1,``0)">
            <summary>
            Allocates a zero-filled 256x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N2,Z0.N128,``0)">
            <summary>
            Allocates a zero-filled 2x128 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N128,Z0.N2,``0)">
            <summary>
            Allocates a zero-filled 128x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N4,Z0.N64,``0)">
            <summary>
            Allocates a zero-filled 4x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N64,Z0.N4,``0)">
            <summary>
            Allocates a zero-filled 64x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N8,Z0.N32,``0)">
            <summary>
            Allocates a zero-filled 8x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N32,Z0.N8,``0)">
            <summary>
            Allocates a zero-filled 32x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``1(Z0.N256,Z0.N16,Z0.N16,``0)">
            <summary>
            Allocates a zero-filled 16x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc``3(``0,``1,``2)">
            <summary>
            Allocates a natural bitgrid
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc16``3(``0,``1,``2)">
            <summary>
            Creates a zero-filled 16-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc32``3(``0,``1,``2)">
            <summary>
            Creates a zero-filled 32-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc64``3(``0,``1,``2)">
            <summary>
            Creates a zero-filled 64-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc128``3(``0,``1,``2)">
            <summary>
            Creates a zero-filled 128-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.alloc256``3(``0,``1,``2)">
            <summary>
            Creates a zero-filled 256-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``1(``0,Z0.BitGrid{``0}@)">
            <summary>
            Fills a caller-allocated generic grid
            </summary>
            <param name="cell">The data to replicate across all grid cells</param>
            <param name="dst">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``3(``2,Z0.BitGrid32{``0,``1,``2}@)">
            <summary>
            Transmits the content of a single cell to all cells in a grid
            </summary>
            <param name="cell">The source cell</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``3(``2,Z0.BitGrid64{``0,``1,``2}@)">
            <summary>
            Transmits the content of a single cell to all cells in a grid
            </summary>
            <param name="cell">The source cell</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``3(``2,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Transmits the content of a single cell to all cells in a grid
            </summary>
            <param name="cell">The source cell</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``3(``2,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Transmits the content of a single cell to all cells in a grid
            </summary>
            <param name="cell">The source cell</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``3(``2,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Fills a caller-allocated natural grid
            </summary>
            <param name="cell">The data to replicate across all grid cells</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,``0)">
            <summary>
            Creates a 66-bit generic grid initialized with a specified fill-value
            </summary>
            <param name="w">The grid width selector</param>
            <param name="data">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N32,``0)">
            <summary>
            Creates a 32-bit generic grid initialized with a specified fill-value
            </summary>
            <param name="w">The grid width selector</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,``0)">
            <summary>
            Creates a 64-bit generic grid initialized with a specified fill-value
            </summary>
            <param name="w">The grid width selector</param>
            <param name="data">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,Z0.N1,Z0.N16,``0)">
            <summary>
            Creates a populated 1x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,Z0.N16,Z0.N1,``0)">
            <summary>
            Creates a populated 16x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,Z0.N2,Z0.N8,``0)">
            <summary>
            Creates a populated 2x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,Z0.N8,Z0.N2,``0)">
            <summary>
            Creates a populated 8x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N16,Z0.N4,Z0.N4,``0)">
            <summary>
            Creates a populated 4x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N32,Z0.N1,Z0.N32,``0)">
            <summary>
            Creates a populated 1x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N32,Z0.N32,Z0.N1,``0)">
            <summary>
            Creates a populated 32x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N32,Z0.N16,Z0.N2,``0)">
            <summary>
            Creates a populated 16x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Z0.BitGrid.init``1(Z0.N32,Z0.N2,Z0.N16,``0)" -->
        <member name="M:Z0.BitGrid.init``1(Z0.N32,Z0.N8,Z0.N4,``0)">
            <summary>
            Creates a populated 8x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N32,Z0.N4,Z0.N8,``0)">
            <summary>
            Creates a populated 4x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N1,Z0.N64,``0)">
            <summary>
            Creates a populated 1x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N64,Z0.N1,``0)">
            <summary>
            Creates a populated 64x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N2,Z0.N32,``0)">
            <summary>
            Creates a populated 2x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N32,Z0.N2,``0)">
            <summary>
            Creates a populated 32x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N4,Z0.N16,``0)">
            <summary>
            Creates a populated 4x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N16,Z0.N4,``0)">
            <summary>
            Creates a populated 16x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The  cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N64,Z0.N8,Z0.N8,``0)">
            <summary>
            Creates a populated 8x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N1,Z0.N128,``0)">
            <summary>
            Creates a populated 1x128 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N128,Z0.N1,``0)">
            <summary>
            Creates a populated 128x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N2,Z0.N64,``0)">
            <summary>
            Creates a populated 2x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N64,Z0.N2,``0)">
            <summary>
            Creates a populated 64x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N4,Z0.N32,``0)">
            <summary>
            Creates a populated 4x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N32,Z0.N4,``0)">
            <summary>
            Creates a populated 32x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N8,Z0.N16,``0)">
            <summary>
            Creates a populated 8x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N128,Z0.N16,Z0.N8,``0)">
            <summary>
            Creates a populated 16x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N1,Z0.N256,``0)">
            <summary>
            Creates a populated 1x256 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N256,Z0.N1,``0)">
            <summary>
            Creates a populated 256x1 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N2,Z0.N128,``0)">
            <summary>
            Creates a populated 2x128 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N128,Z0.N2,``0)">
            <summary>
            Creates a populated 128x2 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N4,Z0.N64,``0)">
            <summary>
            Creates a populated 4x64 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N64,Z0.N4,``0)">
            <summary>
            Creates a populated 64x4 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N8,Z0.N32,``0)">
            <summary>
            Creates a populated 8x32 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N32,Z0.N8,``0)">
            <summary>
            Creates a populated 32x8 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(Z0.N256,Z0.N16,Z0.N16,``0)">
            <summary>
            Creates a populated 16x16 grid
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``1(System.UInt32,System.UInt32,``0)">
            <summary>
            Creates a dynamically-sized grid of soft dimensions filled with specified data
            </summary>
            <param name="m">The number of grid rows</param>
            <param name="n">The number of grid columns</param>
            <param name="d">The fill data</param>
            <typeparam name="T">The segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init16``1(System.UInt16)">
            <summary>
            Initializes 16-bit grid
            </summary>
            <param name="data">The grid data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init32``1(System.UInt32)">
            <summary>
            Initializes 32-bit grid
            </summary>
            <param name="data">The grid data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init64``1(System.UInt64)">
            <summary>
            Initializes 64-bit grid
            </summary>
            <param name="data">The grid data</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.broadcast``1(``0,Z0.SpanBlock256{``0}@)">
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init``3(``0,``1,``2)">
            <summary>
            Creates a dynamically-sized grid of natural dimensions filled with specified data
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init16``3(``0,``1,``2)">
            <summary>
            Initializes a 128-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init32``3(``0,``1,``2)">
            <summary>
            Initializes a 32-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init64``3(``0,``1,``2)">
            <summary>
            Initializes a 64-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init128``3(``0,``1,``2)">
            <summary>
            Initializes a 128-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.init256``3(``0,``1,``2)">
            <summary>
            Initializes a 256-bit grid of natural dimensions
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="d">The fill data</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock16{``0}@,Z0.N1,Z0.N16)">
            <summary>
            Loads a 1x16 grid from the first 16-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock16{``0}@,Z0.N16,Z0.N1)">
            <summary>
            Loads a 16x1 grid from the first 16-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock16{``0}@,Z0.N2,Z0.N8)">
            <summary>
            Loads a 2x8 grid from the first 16-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock16{``0}@,Z0.N8,Z0.N2)">
            <summary>
            Loads a 8x2 grid from the first 16-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock16{``0}@,Z0.N4,Z0.N4)">
            <summary>
            Loads a 4x4 grid from the first 16-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N1,Z0.N32)">
            <summary>
            Loads a 1x32 grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N32,Z0.N1)">
            <summary>
            Loads a 32x1 grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N2,Z0.N16)">
            <summary>
            Loads a 2x16 grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N16,Z0.N2)">
            <summary>
            Loads a 16x2 grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N4,Z0.N8)">
            <summary>
            Loads a 4x8grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock32{``0}@,Z0.N8,Z0.N4)">
            <summary>
            Loads a 8x4 grid from the first 32-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N1,Z0.N64)">
            <summary>
            Loads a 1x64 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N64,Z0.N1)">
            <summary>
            Loads a 64x1 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N2,Z0.N32)">
            <summary>
            Loads a 2x32 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N32,Z0.N2)">
            <summary>
            Loads a 32x2 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N4,Z0.N16)">
            <summary>
            Loads a 4x16 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N16,Z0.N4)">
            <summary>
            Loads a 16x4 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock64{``0}@,Z0.N8,Z0.N8)">
            <summary>
            Loads an 8x8 grid from the first 64-bit source block
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N1,Z0.N128)">
            <summary>
            Loads a 1x128 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N128,Z0.N1)">
            <summary>
            Forms a 128x1 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N2,Z0.N64)">
            <summary>
            Forms a 2x64 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N64,Z0.N2)">
            <summary>
            Forms a 64x2 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N4,Z0.N32)">
            <summary>
            Forms a 4x32 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N32,Z0.N4)">
            <summary>
            Forms a 32x4 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N8,Z0.N16)">
            <summary>
            Forms a 8x16 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N16,Z0.N8)">
            <summary>
            Forms a 16x8 grid from a 128-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N1,Z0.N256)">
            <summary>
            Forms a 1x256 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N256,Z0.N1)">
            <summary>
            Forms a 256x1 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N2,Z0.N128)">
            <summary>
            Forms a 2x128 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N128,Z0.N2)">
            <summary>
            Forms a 128x2 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N4,Z0.N64)">
            <summary>
            Forms a 4x64 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N64,Z0.N4)">
            <summary>
            Forms a 64x4 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N8,Z0.N32)">
            <summary>
            Forms a 8x32 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N32,Z0.N8)">
            <summary>
            Loads a 32x8 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N16,Z0.N16)">
            <summary>
            Loads a 16x16 grid from a 256-bit vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``1(Z0.SpanBlock256{``0}@,System.UInt16,System.UInt16)">
            <summary>
            Loads a generic bitgrid from a 256-bit block
            </summary>
            <param name="src">The source span</param>
            <param name="map">The grid map</param>
            <typeparam name="T">The segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.load``3(Z0.SpanBlock256{``2},``0,``1,``2)">
            <summary>
            Loads a natural bitgrid from a span
            </summary>
            <param name="src">The source span</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="zero">The storage representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``1(Z0.BitString,Z0.W16)">
            <summary>
            Hydrates a fixed-width 32-bit dimensionless grid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``1(Z0.BitString,Z0.N32,System.Int32,System.Int32,``0)">
            <summary>
            Hydrates a fixed-width 32-bit dimensionless grid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="n">The number of bitstring bits to parse</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``1(Z0.BitString,Z0.N64,System.Int32,System.Int32,``0)">
            <summary>
            Hydrates a fixed-width 64-bit dimensionless grid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="n">The number of bitstring bits to parse</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``3(Z0.BitString,Z0.N16,``0,``1,``2)">
            <summary>
            Hydrates a fixed-width natural bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``3(Z0.BitString,Z0.N32,``0,``1,``2)">
            <summary>
            Hydrates a fixed-width natural bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``3(Z0.BitString,Z0.N64,``0,``1,``2)">
            <summary>
            Hydrates a 64-bit natural bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``3(Z0.BitString,Z0.N128,``0,``1,``2)">
            <summary>
            Hydrates a 128-bit natural bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.parse``3(Z0.BitString,Z0.N256,``0,``1,``2)">
            <summary>
            Hydrates a 256-bit natural bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The number of bitstring bits to parse</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.slice``1(Z0.BitGrid32{``0},System.Byte,System.Byte)">
            <summary>
            Extracts a sequence of bits
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The offset</param>
            <param name="index">The bit count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.slice``1(Z0.BitGrid64{``0},System.Byte,System.Byte)">
            <summary>
            Extracts a sequence of bits
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The offset</param>
            <param name="index">The bit count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``1(System.Runtime.Intrinsics.Vector256{``0},Z0.BitGrid{``0}@,System.Int32)">
            <summary>
            Stores a 256-bit cpu vector to an index-identified block
            </summary>
            <param name="src">The source grid</param>
            <param name="block">The block index</param>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``3(Z0.BitGrid128{``0,``1,``2}@,Z0.SpanBlock128{``2}@)">
            <summary>
            Stores a 128-bit bitgrid to a caller-supplied target
            </summary>
            <param name="src">The source grid</param>
            <param name="dst">The target block</param>
            <typeparam name="M">The grid row count</typeparam>
            <typeparam name="N">THe grid column count</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``3(Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Allocates and stores a 128-bit bitgrid to a blocked span
            </summary>
            <param name="src">The source grid</param>
            <param name="dst">The target block</param>
            <typeparam name="M">The grid row count</typeparam>
            <typeparam name="N">THe grid column count</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``3(Z0.BitGrid256{``0,``1,``2}@,Z0.SpanBlock256{``2}@)">
            <summary>
            Stores a 256-bit bitgrid to a caller-supplied target
            </summary>
            <param name="src">The source grid</param>
            <param name="dst">The target block</param>
            <typeparam name="M">The grid row count</typeparam>
            <typeparam name="N">THe grid column count</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``3(Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Allocates and stores a 256-bit bitgrid to a blocked span
            </summary>
            <param name="src">The source grid</param>
            <param name="dst">The target block</param>
            <typeparam name="M">The grid row count</typeparam>
            <typeparam name="N">THe grid column count</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.store``3(System.Runtime.Intrinsics.Vector256{``2},Z0.BitGrid{``0,``1,``2}@,System.Int32)">
            <summary>
            Stores a 256-bit cpu vector to an index-identified block
            </summary>
            <param name="src">The source grid</param>
            <param name="block">The block index</param>
            <typeparam name="M">The grid row count</typeparam>
            <typeparam name="N">THe grid column count</typeparam>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.cell``1(``0@,System.Int32)">
            <summary>
            Reads/manipulates a cell identified by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.cell``1(Z0.BitGrid{``0}@,System.Int32)">
            <summary>
            Reads/manipulates a cell identified by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.cell``3(Z0.BitGrid{``0,``1,``2}@,System.Int32)">
            <summary>
            Reads/manipulates a cell identified by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid16{Z0.N1,Z0.N16,``0},System.Int32)">
            <summary>
            Extracts an index-identified 1-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid16{Z0.N2,Z0.N8,``0},System.Int32)">
            <summary>
            Extracts an index-identified 2-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid16{Z0.N8,Z0.N2,``0},System.Int32)">
            <summary>
            Extracts an index-identified 8-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, either 0 or 1</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid16{Z0.N4,Z0.N4,``0},System.Int32)">
            <summary>
            Extracts an index-identified 4-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...3</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid32{Z0.N1,Z0.N32,``0},System.Int32)">
            <summary>
            Extracts an index-identified 1-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid32{Z0.N2,Z0.N16,``0},System.Int32)">
            <summary>
            Extracts an index-identified 2-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid32{Z0.N4,Z0.N8,``0},System.Int32)">
            <summary>
            Extracts an index-identified 4-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid32{Z0.N8,Z0.N4,``0},System.Int32)">
            <summary>
            Extracts an index-identified 8-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid32{Z0.N16,Z0.N2,``0},System.Int32)">
            <summary>
            Extracts an index-identified 16-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, either 0 or 1</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N1,Z0.N64,``0},System.Int32)">
            <summary>
            Extracts an index-identified 1-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N2,Z0.N32,``0},System.Int32)">
            <summary>
            Extracts an index-identified 2-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...31</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N4,Z0.N16,``0},System.Int32)">
            <summary>
            Extracts an index-identified 4-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...15</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N8,Z0.N8,``0},System.Int32)">
            <summary>
            Extracts an index-identified 8-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N16,Z0.N4,``0},System.Int32)">
            <summary>
            Extracts an index-identified 16-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...3</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N32,Z0.N2,``0},System.Int32)">
            <summary>
            Extracts an index-identified 32-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, either 0 or 1</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid64{Z0.N64,Z0.N1,``0},System.Int32)">
            <summary>
            Presents grid content as a bitvector
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, either 0 or 1</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid128{Z0.N16,Z0.N8,``0}@,System.Int32)">
            <summary>
            Extracts an index-identified 16-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.col``1(Z0.BitGrid256{Z0.N32,Z0.N8,``0}@,System.Int32)">
            <summary>
            Extracts an index-identified 32-bit grid column
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, in the inclusive range 0...7</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.define(Z0.Perm4L)">
            <summary>
            Derives a 4x4 bitgrid from a permutation of length 4
            </summary>
            <param name="spec">The permutaton spec</param>
            <example>
            Permutation: [11 10 00 01] (ABCD -> BACD)
            Grid: [1000 | 0000 | 0100 | 1100]
            </example>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N8)">
            <summary>
            Enumerates the valid dimensions for a 16-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N16)">
            <summary>
            Enumerates the valid dimensions for a 16-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N32)">
            <summary>
            Enumerates the valid dimensions for a 32-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N64)">
            <summary>
            Enumerates the valid dimensions for a 64-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N128)">
            <summary>
            Enumerates the valid dimensions for a 128-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimensions(Z0.N256)">
            <summary>
            Enumerates the valid dimensions for a 256-bit fixed bitgrid
            </summary>
            <param name="w">The grid width selector</param>
        </member>
        <member name="M:Z0.BitGrid.dimension``4(``0,``1,``2,``3)">
            <summary>
            Computes dimension information for a blocked grid predicated on parametric types
            </summary>
            <param name="w">The block width representative</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="W">The block width</typeparam>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.p2dimensions``1">
            <summary>
            Enunerates the valid grid dimensions where the total bit width is a power of 2
            </summary>
            <typeparam name="W">The grid dimension type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.p2dimensions(System.UInt64)">
            <summary>
            Enunerates the valid grid dimensions where the total bit width is a power of 2
            </summary>
            <param name="w">A power of 2 that specifies the bit width of the grid</param>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.BitGrid16{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indices should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.BitGrid32{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.BitGrid64{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.BitGrid128{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.BitGrid256{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.SubGrid16{``0,``1,``2},Z0.FilePath,System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.SubGrid32{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.SubGrid64{``0,``1,``2},Z0.FilePath,System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.SubGrid128{``0,``1,``2},Z0.FilePath,System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(Z0.SubGrid256{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Exports a grid report to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.writer``4(System.String,``0,``1,``2,``3)">
            <summary>
            Creates a grid writer predicated on type parameters
            </summary>
            <param name="label">The grid label</param>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cel type representative</param>
            <typeparam name="W">The grid width type</typeparam>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``2(System.UInt16,System.Boolean,System.String)">
            <summary>
            Exports grid data to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``2(System.UInt32,System.Boolean,System.String)">
            <summary>
            Exports grid data to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``2(System.UInt64,System.Boolean,System.String)">
            <summary>
            Exports grid data to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(System.Runtime.Intrinsics.Vector128{``2},System.Boolean,System.String)">
            <summary>
            Exports grid data to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.export``3(System.Runtime.Intrinsics.Vector256{``2},System.Boolean,System.String)">
            <summary>
            Exports grid data to a file
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.first``3(Z0.SpanBlock16{``2}@,``0,``1)">
            <summary>
            Loads a fixed-width natural bitgrid the first block in the source
            </summary>
            <param name="src">The blocked source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.first``3(Z0.SpanBlock32{``2}@,``0,``1)">
            <summary>
            Loads a fixed-width natural bitgrid the first block in the source
            </summary>
            <param name="src">The blocked source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.first``3(Z0.SpanBlock64{``2}@,``0,``1)">
            <summary>
            Loads a fixed-width natural bitgrid the first block in the source
            </summary>
            <param name="src">The blocked source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.first``3(Z0.SpanBlock128{``2}@,``0,``1)">
            <summary>
            Loads a fixed-width natural bitgrid the first block in the source
            </summary>
            <param name="src">The blocked source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.first``3(Z0.SpanBlock256{``2}@,``0,``1)">
            <summary>
            Loads a fixed-width natural bitgrid the first block in the source
            </summary>
            <param name="src"></param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.metrics(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Defines a grid map predicated row count, col count and storage segment bit width width
            </summary>
            <param name="rows">The number of rows in the grid</param>
            <param name="cols">The number of columns in the grid</param>
            <param name="segwidth">The width of a grid cell</param>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N1,Z0.N64)">
            <summary>
            Forms a 1x64 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N64,Z0.N1)">
            <summary>
            Forms a 64x1 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N2,Z0.N32)">
            <summary>
            Forms a 2x32 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N32,Z0.N2)">
            <summary>
            Forms a 32x2 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N4,Z0.N16)">
            <summary>
            Forms a 4x16 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N16,Z0.N4)">
            <summary>
            Forms a 16x4 from the lower 64 bits of a vector
            </summary>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadhi``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N8,Z0.N8)">
            <summary>
            Forms a 8x8 grid from the lower 64 bits of a vector
            </summary>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N1,Z0.N64)">
            <summary>
            Forms a 1x64 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N64,Z0.N1)">
            <summary>
            Forms a 64x1 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N2,Z0.N32)">
            <summary>
            Forms a 2x32 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N32,Z0.N2)">
            <summary>
            Forms a 32x2 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N4,Z0.N16)">
            <summary>
            Forms a 4x16 grid from the lower 64 bits of a vector
            </summary>
            <param name="block">The block size selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N16,Z0.N4)">
            <summary>
            Forms a 16x4 from the lower 64 bits of a vector
            </summary>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.loadlo``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N8,Z0.N8)">
            <summary>
            Forms a 8x8 grid from the lower 64 bits of a vector
            </summary>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="fill">The value with which to fill the grid</param>
            <typeparam name="T">The primal cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``1(Z0.W16)">
            <summary>
            Retuns a one-filled 16-bit bitgrid
            </summary>
            <param name="n">The width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``1(Z0.W32)">
            <summary>
            Retuns a one-filled bitgrid
            </summary>
            <param name="n">The width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``1(Z0.N64)">
            <summary>
            Retuns a one-filled bitgrid
            </summary>
            <param name="n">The width selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``3(Z0.N16,``0,``1,``2)">
            <summary>
            Returns a 1-filled natural bitgrid 
            </summary>
            <param name="width">The grid width</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``3(Z0.N32,``0,``1,``2)">
            <summary>
            Returns a 1-filled natural bitgrid 
            </summary>
            <param name="width">The grid width</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``3(Z0.N64,``0,``1,``2)">
            <summary>
            Returns a 1-filled natural bitgrid 
            </summary>
            <param name="width">The grid width</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``3(Z0.N128,``0,``1,``2)">
            <summary>
            Returns a 1-filled natural bitgrid 
            </summary>
            <param name="width">The grid width</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.ones``3(Z0.N256,``0,``1,``2)">
            <summary>
            Returns a 1-filled natural bitgrid 
            </summary>
            <param name="width">The grid width</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.readcell``1(``0@,System.Int32)">
            <summary>
            Reads a cell determined by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.readbit``2(``0,``1@,System.Int32,System.Int32)">
            <summary>
            Reads a bit from a grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid.readbit``1(System.Int32,``0@,System.Int32,System.Int32)">
            <summary>
            Reads a bit from a grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.BitGrid16{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.BitGrid32{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.BitGrid64{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.BitGrid128{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.BitGrid256{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.SubGrid16{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.SubGrid32{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.SubGrid64{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.SubGrid128{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(Z0.SubGrid256{``0,``1,``2},System.Boolean,System.String)">
            <summary>
            Formats a grid with a title and the option to display row indices
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``2(System.UInt16,System.Boolean,System.String)">
            <summary>
            Renders grid data
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``2(System.UInt32,System.Boolean,System.String)">
            <summary>
            Renders grid data
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``2(System.UInt64,System.Boolean,System.String)">
            <summary>
            Renders grid data
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(System.Runtime.Intrinsics.Vector128{``2},System.Boolean,System.String)">
            <summary>
            Renders grid data
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.report``3(System.Runtime.Intrinsics.Vector256{``2},System.Boolean,System.String)">
            <summary>
            Renders grid data
            </summary>
            <param name="g">The grid to render</param>
            <param name="showrow">Whether grid row indicies should be displayed</param>
            <param name="label">The grid label</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.BitGrid16{``0,``1,``2},System.Int32)">
            <summary>
            Extracts an index-identified row from a 16-bit grid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.BitGrid32{``0,``1,``2},System.Int32)">
            <summary>
            Extracts an index-identified row from a 32-bit grid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.BitGrid64{``0,``1,``2},System.Int32)">
            <summary>
            Extracts an index-identified row from a 64-bit grid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.SubGrid16{``0,``1,``2},System.Int32,``1)">
            <summary>
            Extracts an index-identified row from a 16-bit subgrid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.SubGrid32{``1,``0,``2},System.Int32,``0)">
            <summary>
            Extracts an index-identified row from a 32-bit subgrid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``3(Z0.SubGrid64{``0,``1,``2},System.Int32,``1)">
            <summary>
            Extracts an index-identified row from a 64-bit subgrid
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The row index, which must be an integer in the range[0...M-1]</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid128{Z0.N2,Z0.N64,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 64-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index, either 0 or 1</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid128{Z0.N4,Z0.N32,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 32-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...3]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid128{Z0.N8,Z0.N16,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 16-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...7]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid128{Z0.N16,Z0.N8,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 8-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...15]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid128{Z0.N32,Z0.N4,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 4-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...31]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid256{Z0.N8,Z0.N32,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 32-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...7]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid256{Z0.N32,Z0.N8,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 8-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...31]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid256{Z0.N16,Z0.N16,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 16-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...15]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.row``1(Z0.BitGrid256{Z0.N4,Z0.N64,``0}@,System.Int32)">
            <summary>
            Extracts an index-identifed 64-bit grid row
            </summary>
            <param name="g">The source grid</param>
            <param name="index">The zero-based column index in the range [0...3]</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.same``1(Z0.BitGrid32{``0},Z0.BitGrid32{``0})">
            <summary>
            Returns 1 if the source grids have identical conent and 0 otherwise
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.same``1(Z0.BitGrid64{``0},Z0.BitGrid64{``0})">
            <summary>
            Returns 1 if the source grids have identical conent and 0 otherwise
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.same``3(Z0.BitGrid128{``0,``1,``2}@,Z0.BitGrid128{``0,``1,``2}@)">
            <summary>
            Returns 1 if the source grids have identical conent and 0 otherwise
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M"></typeparam>
            <typeparam name="N"></typeparam>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.same``3(Z0.BitGrid256{``0,``1,``2}@,Z0.BitGrid256{``0,``1,``2}@)">
            <summary>
            Returns 1 if the source grids have identical conent and 0 otherwise
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M"></typeparam>
            <typeparam name="N"></typeparam>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.same``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Returns 1 if the source grids have identical conent and 0 otherwise
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="M"></typeparam>
            <typeparam name="N"></typeparam>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.setbit``1(System.Int32,Z0.Bit32,``0@)">
            <summary>
            Sets the state of a grid bit identified by its linear position
            </summary>
            <param name="bitpos">The 0-based linear bit index</param>
            <param name="state">The source state</param>
            <param name="dst">A reference to the grid storage</param>
            <typeparam name="T">The grid storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.setbit``1(System.Int32,System.Int32,System.Int32,Z0.Bit32,``0@)">
            <summary>
            Sets the state of an a coordinate-identified bit
            </summary>
            <param name="M">The number of rows in the grid</param>
            <param name="N">The number of columns in the grid</param>
            <param name="row">The row of interest</param>
            <param name="col">The column of interest</param>
            <param name="state">The source state</param>
            <typeparam name="T">The grid storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.setbit``2(``0,System.Int32,System.Int32,Z0.Bit32,``1@)">
            <summary>
            Sets the state of an a coordinate-identified bit
            </summary>
            <param name="M">The number of rows in the grid</param>
            <param name="N">The number of columns in the grid</param>
            <param name="row">The row of interest</param>
            <param name="col">The column of interest</param>
            <param name="state">The source state</param>
            <typeparam name="T">The grid storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N16,``0,``1,``2)">
            <summary>
            Allocates a 0-filled 16-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N16,``2,``0,``1)">
            <summary>
            Allocates a populated 16-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="data">The data with which to populate the grid</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N32,``0,``1,``2)">
            <summary>
            Allocates a 0-filled 32-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N32,``2,``0,``1)">
            <summary>
            Allocates a populated 32-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="data">The data with which to populate the grid</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N64,``0,``1,``2)">
            <summary>
            Allocates a 0-filled 64-bitsubgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N64,``2,``0,``1)">
            <summary>
            Allocates a populated 64-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="data">The data with which to populate the grid</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N128,``0,``1,``2)">
            <summary>
            Allocates a 0-filled 128-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(System.Runtime.Intrinsics.Vector128{``2},``0,``1)">
            <summary>
            Allocates a populated 128-bit subgrid
            </summary>
            <param name="data">The data with which to populate the grid</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(Z0.N256,``0,``1,``2)">
            <summary>
            Allocates a 0-filled 256-bit subgrid
            </summary>
            <param name="w">The total bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.subgrid``3(System.Runtime.Intrinsics.Vector256{``2},``0,``1)">
            <summary>
            Allocates a populated 256-bit subgrid
            </summary>
            <param name="data">The data with which to populate the grid</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.title``4(System.String,``0,``1,``2,``3)">
            <summary>
            Defines a grid title suffixed with its signature
            </summary>
            <param name="label">Informative (?) text of some sort</param>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cel type representative</param>
            <typeparam name="W">The grid width type</typeparam>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.sigtext``4(``0,``1,``2,``3)">
            <summary>
            Renders the grid signature as text
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cel type representative</param>
            <typeparam name="W"></typeparam>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.vector``1(Z0.BitGrid{``0}@,System.Int32,Z0.N256)">
            <summary>
            Loads a 256-bit cpu vector from an index-identified block
            </summary>
            <param name="src">The source grid</param>
            <param name="block">The block index</param>
            <typeparam name="T">The storage segment type</typeparam>
        </member>
        <member name="M:Z0.BitGrid.vector``3(Z0.BitGrid{``0,``1,``2}@,System.Int32,Z0.N256)">
            <summary>
            Loads a 256-bit cpu vector from an index-identified block
            </summary>
            <param name="src">The source grid</param>
            <param name="block">The block index</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.negate``1(Z0.BitGrid{``0}@)">
            <summary>
            Computes the two's complement negation of source grid and returns the allocated result
            </summary>
            <param name="x">The source grid</param>
            <param name="gz">The target grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.xor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise xor between unfixed generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.xnor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise XNOR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.or``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise OR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.nor``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise NOR between generic bitgrids and returns the allocated result
            </summary>
            <param name="gx">The left grid</param>
            <param name="gy">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.and``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise AND between generic bitgrids and returns the allocated result
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.and``3(Z0.BitGrid{``0,``1,``2}@,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Computes the bitwise AND between generic bitgrids and returns the allocated result
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitGridA.nand``1(Z0.BitGrid{``0}@,Z0.BitGrid{``0}@)">
            <summary>
            Computes the bitwise NAND between generic bitgrids and returns the allocated result
            </summary>
            <param name="a">The left grid</param>
            <param name="b">The right grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridPatterns.exchange``1(Z0.N256,Z0.N16,Z0.N16,``0)">
            <summary>
            Defines an anti-identity matrix pattern with ones on the anti-diagonal and zeroes elsewhere
            </summary>
            <param name="w">The grid width selector</param>
            <param name="m">The row count selector</param>
            <param name="n">The col count selector</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Exchange_matrix</remarks>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(Z0.BitMatrix32)">
            <summary>
            Represents the source matrix as a generic bitgrid of dimension 32x32 over cells of width 32
            </summary>
            <param name="src">The source matrix</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(Z0.BitMatrix64)">
            <summary>
            Represents the source matrix as a generic bitgrid of dimension 64x64 over cells of width 64
            </summary>
            <param name="src">The source matrix</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N1,Z0.N32)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 1x32
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N32,Z0.N1)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 32x1
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N2,Z0.N16)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 2x16
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N16,Z0.N2)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 16x2
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N4,Z0.N8)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 4x8
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt32,Z0.N8,Z0.N4)">
            <summary>
            Represents the source value as a 32-bit natural bitgrid of dimension 8x4
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N64,Z0.N1)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 64x1
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N1,Z0.N64)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 1x64
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N32,Z0.N2)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 32x2
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N2,Z0.N32)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 2x32
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N16,Z0.N4)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 16x4
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N4,Z0.N16)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 4x16
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid(System.UInt64,Z0.N8,Z0.N8)">
            <summary>
            Represents the source value as a 64-bit natural bitgrid of dimension 8x8
            </summary>
            <param name="x">The source value</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N1,Z0.N128)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 1x128
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N128,Z0.N1)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 128x1
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N2,Z0.N64)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 2x64
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N64,Z0.N2)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 64x2
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N4,Z0.N32)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 4x32
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N32,Z0.N4)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 32x4
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N8,Z0.N16)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 8x16
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector128{``0},Z0.N16,Z0.N8)">
            <summary>
            Represents the source vector as a 128-bit natural bitgrid of dimension 16x8
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N1,Z0.N256)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 1x256
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N256,Z0.N1)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 256x1
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N2,Z0.N128)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 2x128
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N128,Z0.N2)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 128x2
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N4,Z0.N64)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 4x64
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N64,Z0.N4)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 64x4
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N8,Z0.N32)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 8x32
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N32,Z0.N8)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 32x8
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(System.Runtime.Intrinsics.Vector256{``0},Z0.N16,Z0.N16)">
            <summary>
            Represents the source vector as a 256-bit natural bitgrid of dimension 16x16
            </summary>
            <param name="x">The source vector</param>
            <param name="m">The target row count</param>
            <param name="n">The garget col count</param>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(Z0.BitString,Z0.W16)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(Z0.BitString,Z0.N32,System.Int32,System.Int32,``0)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``1(Z0.BitString,Z0.N64,System.Int32,System.Int32,``0)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count</param>
            <param name="n">The col count</param>
            <param name="t">The cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``3(Z0.BitString,Z0.N32,``0,``1,``2)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``3(Z0.BitString,Z0.N64,``0,``1,``2)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``3(Z0.BitString,Z0.N128,``0,``1,``2)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.GridLoad.ToBitGrid``3(Z0.BitString,Z0.N256,``0,``1,``2)">
            <summary>
            Hydrates a bitgrid from a bitstring
            </summary>
            <param name="bs">The source bitstring</param>
            <param name="w">The grid bit-width selector</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.Map(Z0.GridSpec)">
            <summary>
            Calculates a grid layout from a specification
            </summary>
            <param name="spec">The grid specification that characterizes the layout</param>
            <typeparam name="T">The storage type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``1(Z0.BitGrid16{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.XTend.ToBitString``1(Z0.BitGrid32{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.XTend.ToBitString``1(Z0.BitGrid64{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``1(Z0.BitGrid{``0})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid16{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid128{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToBitString``3(Z0.BitGrid256{``0,``1,``2})">
            <summary>
            Converts a grid to an equivalent linear bitstring representation
            </summary>
            <param name="g">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``1(Z0.BitGrid16{``0})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``1(Z0.BitGrid32{``0})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``1(Z0.BitGrid64{``0})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.BitGrid32{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.BitGrid64{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.BitGrid128{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.BitGrid256{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.SubGrid16{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.SubGrid32{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.SubGrid64{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.SubGrid128{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSpan``3(Z0.SubGrid256{``0,``1,``2})">
            <summary>
            Extracts grid content to a span
            </summary>
            <param name="src">The source grid</param>
            <typeparam name="M">The row type</typeparam>
            <typeparam name="N">The col type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N2,Z0.N12)">
            <summary>
            Creates a subgrid of dimensions 2x12 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N12,Z0.N2)">
            <summary>
            Creates a subgrid of dimensions 12x2 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N3,Z0.N8)">
            <summary>
            Creates a subgrid of dimensions 3x8 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N8,Z0.N3)">
            <summary>
            Creates a subgrid of dimensions 8x3 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N4,Z0.N6)">
            <summary>
            Creates a subgrid of dimensions 4x6 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="M:Z0.XTend.ToSubGrid(Z0.BitVector24,Z0.N6,Z0.N4)">
            <summary>
            Creates a subgrid of dimensions 6x4 from a 24-bit bitvector
            </summary>
            <param name="x">The source vector</param>
        </member>
        <member name="T:Z0.GridDim`4">
            <summary>
            Defines a parametrically-predicated blocked grid
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.BlockWidth">
            <summary>
            The bit width of a block
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.RowCount">
            <summary>
            The number of grid rows
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.ColCount">
            <summary>
            The number of grid columns
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.CellWidth">
            <summary>
            The bit width of a storage cell
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.BitCount">
            <summary>
            The total number of grid bits
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.CellCount">
            <summary>
            The number of cells required cover a grid
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.ByteCount">
            <summary>
            The number of bytes required to cover a grid
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.BlockCount">
            <summary>
            Computes the aligned number of W-blocks required to cover M*N bits
            </summary>
        </member>
        <member name="P:Z0.GridDim`4.BlockLength">
            <summary>
            Computes the number of cells covered by a block
            </summary>
        </member>
        <member name="M:Z0.GridDim`4.Format">
            <summary>
            Returns a dimension expression of the form {R}x{C}x{W}w where
            R := row count
            C := column count
            W := cell width
            </summary>
        </member>
        <member name="T:Z0.GridSpec`1">
            <summary>
            Characterizes the memory layout of a BitMatrix
            </summary>
        </member>
        <member name="F:Z0.GridSpec`1.RowCount">
            <summary>
            The number of grid rows
            </summary>
        </member>
        <member name="F:Z0.GridSpec`1.ColCount">
            <summary>
            The number of grid columns
            </summary>
        </member>
        <member name="F:Z0.GridSpec`1.SegWidth">
            <summary>
            The number of bits in a storage segment
            </summary>
        </member>
        <member name="P:Z0.GridStats.RowCount">
            <summary>
            The number of grid rows
            </summary>
        </member>
        <member name="P:Z0.GridStats.ColCount">
            <summary>
            The number of grid columns
            </summary>
        </member>
        <member name="P:Z0.GridStats.SegWidth">
            <summary>
            The number of bits in a storage segment
            </summary>
        </member>
        <member name="P:Z0.GridStats.PointCount">
            <summary>
            The number of points covered by the grid
            </summary>
        </member>
        <member name="P:Z0.GridStats.SorageSegs">
            <summary>
            The number of segment-aligned segments required for storage
            </summary>
        </member>
        <member name="P:Z0.GridStats.StorageBits">
            <summary>
            The number of segment-aligned bits required for storage
            </summary>
        </member>
        <member name="P:Z0.GridStats.StorageBytes">
            <summary>
            The number of segment-aligned bytes bits required for storage
            </summary>
        </member>
        <member name="P:Z0.GridStats.Vec128Count">
            <summary>
            The number of whole 128-bit vectors required for storage
            </summary>
        </member>
        <member name="P:Z0.GridStats.Vec128Remainder">
            <summary>
            The number bytes that do not fit into a whole number of 128-bit vectors
            </summary>
        </member>
        <member name="P:Z0.GridStats.Vec256Count">
            <summary>
            The number of whole 256-bit vectors required for storage
            </summary>
        </member>
        <member name="P:Z0.GridStats.Vec256Remainder">
            <summary>
            The number bytes that do not fit into a whole number of 256-bit vectors
            </summary>
        </member>
        <member name="M:Z0.GridTypeExpr.define``4(``0,``1,``2,``3)">
            <summary>
            Defines a parametrically-specified grid type expression
            </summary>
            <typeparam name="W">The block width type</typeparam>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The storage cell type</typeparam>
        </member>
        <member name="T:Z0.GridTypeExpr`4">
            <summary>
            Charcterizes a bitgrid and consequent attribute expressions
            </summary>
            <typeparam name="W">The block width type</typeparam>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The storage cell type</typeparam>
        </member>
        <member name="P:Z0.GridTypeExpr`4.BlockWidth">
            <summary>
            Specifies the bit width block as determined by W
            </summary>
        </member>
        <member name="P:Z0.GridTypeExpr`4.RowCount">
            <summary>
            Specifies the M-identified number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.GridTypeExpr`4.ColCount">
            <summary>
            Specifies the number of N-columns in the grid
            </summary>
        </member>
        <member name="P:Z0.GridTypeExpr`4.CellWidth">
            <summary>
            Specifies the bit width of a T-cell
            </summary>
        </member>
        <member name="P:Z0.GridTypeExpr`4.BlockCount">
            <summary>
            Specifies the aligned number of W-blocks required to cover M*N bits
            </summary>
        </member>
        <member name="P:Z0.GridTypeExpr`4.BlockLength">
            <summary>
            Specifies the number of cells covered by a block
            </summary>
        </member>
        <member name="M:Z0.GridWriter.GridHeader(System.Nullable{System.Int32},System.Nullable{System.Char})">
            <summary>
            Defines a standard header for a grid map summary line
            </summary>
            <param name="colpad">The amount by which to pad each column</param>
            <param name="delimiter">The column separator</param>
        </member>
        <member name="T:Z0.BitGrid`1">
            <summary>
            Defines a grid of bits over a contiguous sequence of primal values stored in blocks of 256 bits
            </summary>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="F:Z0.BitGrid`1.RowCount">
            <summary>
            The number of grid rows
            </summary>
        </member>
        <member name="F:Z0.BitGrid`1.ColCount">
            <summary>
            The number of grid columns
            </summary>
        </member>
        <member name="P:Z0.BitGrid`1.CellCount">
            <summary>
            The number of cells over which the grid is defined
            </summary>
        </member>
        <member name="P:Z0.BitGrid`1.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid`1.Item(System.Int32)">
            <summary>
            Transfers 256-bit cpu vectors to/from blocked storage
            </summary>
        </member>
        <member name="M:Z0.BitGrid`1.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified grid cell
            </summary>
            <param name="index">The 0-based linear cell index</param>
        </member>
        <member name="M:Z0.BitGrid`1.Block(System.Int32)">
            <summary>
            Returns the 256-bit block corresponding to a block index
            </summary>
            <param name="block">The block index</param>
        </member>
        <member name="T:Z0.BitGrid128`3">
            <summary>
            A grid of natural dimensions M and N such that M*N = W := 128
            </summary>
            <remarks>Conforming dimensions include 1x128, 128x1, 2x64, 64x2, 4x32, 32x4, 8x16, and 16x8</remarks>
        </member>
        <member name="F:Z0.BitGrid128`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.BitGrid128`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid128`3.op_Implicit(Z0.SpanBlock128{`2}@)~Z0.BitGrid128{`0,`1,`2}">
            <summary>
            Creates a grid from the leading source block
            </summary>
            <param name="src">The data source</param>
        </member>
        <member name="M:Z0.BitGrid128`3.op_Implicit(System.Runtime.Intrinsics.Vector128{`2})~Z0.BitGrid128{`0,`1,`2}">
            <summary>
            Creates a grid from a generic vector
            </summary>
            <param name="src">The data source</param>
        </member>
        <member name="M:Z0.BitGrid128`3.op_Implicit(System.Runtime.Intrinsics.Vector128{System.Byte})~Z0.BitGrid128{`0,`1,`2}">
            <summary>
            Creates a grid from a 128x8u vector
            </summary>
            <param name="src">The data source</param>
        </member>
        <member name="P:Z0.BitGrid128`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.BitGrid128`3.CellCount">
            <summary>
            The number of allocated cells
            </summary>
        </member>
        <member name="P:Z0.BitGrid128`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid128`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid128`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid128`3.Cell(System.Int32)">
            <summary>
            Reads an index-identified cell
            </summary>
        </member>
        <member name="T:Z0.BitGrid16`1">
            <summary>
            Defines a 16-bit grid of caller-interpreted dimension
            </summary>
        </member>
        <member name="F:Z0.BitGrid16`1.Data">
            <summary>
            Grid storage
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.BitCount">
            <summary>
            The number of covered bits := 16
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.Content">
            <summary>
            Returns a copy of the grid's backing storage
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.CellCount">
            <summary>
            The number of grid cells := {1 | 2}
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.Cells">
            <summary>
            Covers grid content with a span that defines cells of width := {1 | 2}
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.Head">
            <summary>
            Yields a mutable reference to the grid's leading storage cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`1.Item(System.Int32)">
            <summary>
            Manipulates an index-identified cell, where index := {0 | 1}
            </summary>
        </member>
        <member name="M:Z0.BitGrid16`1.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="T:Z0.BitGrid16`3">
            <summary>
            A grid of natural dimensions M and N such that M*N = W := 16
            </summary>
            <remarks>Conforming dimensions include 1x16, 16x1, 2x8, 8x2, and 4x4</remarks>
        </member>
        <member name="F:Z0.BitGrid16`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.BitGrid16`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.CellCount">
            <summary>
            The number of allocated cells
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.Head">
            <summary>
            The leading storage cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid16`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid16`3.Item(System.Int32)">
            <summary>
            Extracts row contant as a bitvector
            </summary>
        </member>
        <member name="T:Z0.BitGrid256`3">
            <summary>
            A grid of natural dimensions M and N such that M*N = W := 256
            </summary>
        </member>
        <member name="F:Z0.BitGrid256`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.BitGrid256`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid256`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.BitGrid256`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid256`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid256`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid256`3.Cell(System.Int32)">
            <summary>
            Reads an index-identified cell
            </summary>
        </member>
        <member name="T:Z0.BitGrid32`1">
            <summary>
            Defines a 32-bit grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`1.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`1.CellCount">
            <summary>
            The number of grid cells := {1 | 2 | 4}
            </summary>
        </member>
        <member name="M:Z0.BitGrid32`1.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`1.Item(System.Byte,System.Byte)">
            <summary>
            Slices a sequence of bits
            </summary>
        </member>
        <member name="T:Z0.BitGrid32`3">
            <summary>
            A grid of natural dimensions M and N such that M*N = W := 32
            </summary>
            <remarks>Conforming dimensions include 1x32, 32x1, 2x16, 16x2, 4x8, and 8x4</remarks>
        </member>
        <member name="F:Z0.BitGrid32`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.BitGrid32`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid32`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid32`3.Item(System.Int32)">
            <summary>
            Extracts row contant as a bitvector
            </summary>
        </member>
        <member name="M:Z0.BitGrid32`3.As``1">
            <summary>
            Converts the current grid defined over T-cells to a target grid defined over U-cells
            </summary>
            <typeparam name="U">The target type</typeparam>
        </member>
        <member name="T:Z0.BitGrid64`1">
            <summary>
            Defines a 64-bit grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`1.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="M:Z0.BitGrid64`1.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`1.Item(System.Byte,System.Byte)">
            <summary>
            Slices a sequence of bits
            </summary>
        </member>
        <member name="T:Z0.BitGrid64`3">
            <summary>
            A grid of natural dimensions M and N such that M*N = W := 64
            </summary>
        </member>
        <member name="F:Z0.BitGrid64`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.BitGrid64`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.BitGrid64`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid64`3.Item(System.Int32)">
            <summary>
            Extracts row content as a bitvector
            </summary>
        </member>
        <member name="M:Z0.BitGrid64`3.As``1">
            <summary>
            Converts the current grid defined over T-cells to a target grid defined over U-cells
            </summary>
            <typeparam name="U">The target type</typeparam>
        </member>
        <member name="T:Z0.BitGrid`3">
            <summary>
            Defines a maximally packed data structure of natural dimensions over a primal type
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.Content">
            <summary>
            The allocated storage
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.Head">
            <summary>
            A reference to the leading storage cell
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.RowCount">
            <summary>
            The number of grid rows
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.ColCount">
            <summary>
            The number of grid columns
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.BlockCount">
            <summary>
            The number of allocated 256-bit blocks
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.CellCount">
            <summary>
            The number of cells over which the grid is defined
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.BitCount">
            <summary>
            The number of bits covered by the grid
            </summary>
        </member>
        <member name="P:Z0.BitGrid`3.Item(System.Int32)">
            <summary>
            Transfers 256-bit cpu vectors to/from blocked storage
            </summary>
        </member>
        <member name="M:Z0.BitGrid`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified grid cell
            </summary>
            <param name="index">The 0-based linear cell index</param>
        </member>
        <member name="M:Z0.BitGrid`3.SpanBlock(System.Int32)">
            <summary>
            Returns the 256-bit block corresponding to a block index
            </summary>
            <param name="block">The block index</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16)">
            <summary>
            Creates a 16-bit generic bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="w">The grid bit width</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N32)">
            <summary>
            Creates a 32-bit generic bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="w">The grid bit width</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N64)">
            <summary>
            Creates a 64-bit generic bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="w">The grid bit width</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitGrid``3(Z0.IPolyrand,``0,``1,``2)">
            <summary>
            Allocates and populates a naturally-sized bitgrid from a random source
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.Fill``3(Z0.IPolyrand,Z0.BitGrid{``0,``1,``2}@)">
            <summary>
            Fills a caller-supplied naturally-sized bitgrid from a random source
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target grid</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N1,Z0.N16)">
            <summary>
            Creates a 1x16 16-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16,Z0.N1)">
            <summary>
            Creates a 16x1 6-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N2,Z0.N8)">
            <summary>
            Creates a 2x8 16-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N8,Z0.N2)">
            <summary>
            Creates an 8x2 16-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N4,Z0.N4)">
            <summary>
            Creates a 4x4 16-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N1,Z0.N32)">
            <summary>
            Creates a 1x32 32-bit natural bitgrid
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N32,Z0.N1,``0)">
            <summary>
            Creates a 32-bit natural bitgrid of dimension 32x1
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N2,Z0.N16,``0)">
            <summary>
            Creates a 32-bit natural bitgrid of dimension 2x16
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16,Z0.N2,``0)">
            <summary>
            Creates a 32-bit natural bitgrid of dimension 16x2
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N8,Z0.N4,``0)">
            <summary>
            Creates a natural 32-bit grid of dimension 8x4
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N4,Z0.N8,``0)">
            <summary>
            Creates a natural 32-bit grid of dimension 4x8
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N1,Z0.N64,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 1x64
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N64,Z0.N1,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 64x1
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N32,Z0.N2,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 32x2
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N2,Z0.N32,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 2x32
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16,Z0.N4,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 16x4
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N4,Z0.N16,``0)">
            <summary>
            Creates a natural 64-bit grid of dimension 4x16
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N8,Z0.N8,``0)">
            <summary>
            Creates a 64-bit natural bitgrid of dimension 8x8 over generic cells
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N1,Z0.N128,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 1x128
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N128,Z0.N1,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 128x1
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N2,Z0.N64,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 2x64
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N64,Z0.N2,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 64x2
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N4,Z0.N32,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 4x32
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N32,Z0.N4,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 32x4
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N8,Z0.N16,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 8x16
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16,Z0.N8,``0)">
            <summary>
            Creates a 128-bit natural bitgrid of dimension 16x8
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N1,Z0.N256,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 1x256
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N256,Z0.N1,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 256x1
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N2,Z0.N128,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 2x128
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N128,Z0.N2,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 128x2
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N4,Z0.N64,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 4x64
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N64,Z0.N4,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 64x4
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N8,Z0.N32,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 8x32
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N32,Z0.N8,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 32x8
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,Z0.N16,Z0.N16,``0)">
            <summary>
            Creates a 256-bit natural bitgrid of dimension 16x16
            </summary>
            <param name="random">The random source</param>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">The cell type representative</param>
        </member>
        <member name="M:Z0.BitRng.BitGrid``1(Z0.IPolyrand,System.UInt32,System.UInt32,``0)">
            <summary>
            Allocates and fills a generic bitgrid from a random source
            </summary>
            <param name="random">The random source</param>
            <param name="m">The grid row count</param>
            <param name="n">The grid col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.Fill``1(Z0.IPolyrand,Z0.BitGrid{``0}@)">
            <summary>
            Fills a caller-supplied generic bitgrid from a random source
            </summary>
            <param name="random">The random source</param>
            <param name="m">The grid row count</param>
            <param name="n">The grid col count</param>
            <typeparam name="T">The grid cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitPositions``1(Z0.IPolyrand,System.UInt16,System.UInt16)">
            <summary>
            Produces a stream of bit positions
            </summary>
            <param name="mincells">The minimum number of cells</param>
            <param name="maxcells">The maximum number of cells</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitPositions(Z0.IPolyrand,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Produces a stream of bit positions
            </summary>
            <param name="capacity">The cell bit width</param>
            <param name="mincells">The minimum number of cells</param>
            <param name="maxcells">The maximum number of cells</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitBlock``2(Z0.IPolyrand)">
            <summary>
            Produces a natural bitblock
            </summary>
            <param name="random">The random source</param>
            <param name="n">The number of bits to cover</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitBlock``1(Z0.IPolyrand,System.Int32)">
            <summary>
            Produces a bitblock over a specified number of bits
            </summary>
            <param name="random">The random source</param>
            <param name="bitcount">The number of bits to cover</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitMatrix``1(Z0.IPolyrand)">
            <summary>
            Produces a generic bitmatrix predicated on a primal type
            </summary>
            <param name="random">The random source</param>
            <typeparam name="T">The defining primal type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitMatrix4(Z0.IPolyrand)">
            <summary>
            Produces a 4x4 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix(Z0.IPolyrand,Z0.N4)">
            <summary>
            Produces a 4x4 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix8(Z0.IPolyrand)">
            <summary>
            Produces a 8x8 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix(Z0.IPolyrand,Z0.N8)">
            <summary>
            Produces a 8x8 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix16(Z0.IPolyrand)">
            <summary>
            Produces a 16x16 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix(Z0.IPolyrand,Z0.N16)">
            <summary>
            Produces a 16x16 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix32(Z0.IPolyrand)">
            <summary>
            Produces a 32x32 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix(Z0.IPolyrand,Z0.N32)">
            <summary>
            Produces a 32x32 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix64(Z0.IPolyrand)">
            <summary>
            Produces a 64x64 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix(Z0.IPolyrand,Z0.N64)">
            <summary>
            Produces a 64x64 bitmatrix from a random source
            </summary>
            <param name="random">The random source</param>
        </member>
        <member name="M:Z0.BitRng.BitMatrix``3(Z0.IPolyrand,``0,``1,``2)">
            <summary>
            Produces a generic bitmatrix of natural dimensions
            </summary>
            <param name="random">The random source</param>
            <param name="n">The matrix order</param>
            <param name="rep">A scalar representative</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        </member>
        <member name="M:Z0.BitRng.BitMatrix``2(Z0.IPolyrand,``0,``1)">
            <summary>
            Produces an generic bitmatrix of natural order
            </summary>
            <param name="random">The random source</param>
            <param name="n">The matrix order</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.SubGrid128`3" -->
        <member name="F:Z0.SubGrid128`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.SubGrid128`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid128`3.W">
            <summary>
            The maximum grid width
            </summary>
        </member>
        <member name="P:Z0.SubGrid128`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.SubGrid128`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid128`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid128`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="M:Z0.SubGrid128`3.Cell(System.Int32)">
            <summary>
            Reads an index-identified cell
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.SubGrid16`3" -->
        <member name="F:Z0.SubGrid16`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.SubGrid16`3.ByteCount">
            <summary>
            The maximum number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.W">
            <summary>
            The maximum grid width
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.CellCount">
            <summary>
            The number of allocated cells
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.SubGrid16`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.SubGrid16`3.Item(System.Int32)">
            <summary>
            Extracts row content as a bitvector
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.SubGrid256`3" -->
        <member name="F:Z0.SubGrid256`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.SubGrid256`3.ByteCount">
            <summary>
            The maximum number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid256`3.W">
            <summary>
            The maximum grid width
            </summary>
        </member>
        <member name="P:Z0.SubGrid256`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.SubGrid256`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid256`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid256`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="M:Z0.SubGrid256`3.Cell(System.Int32)">
            <summary>
            Reads an index-identified cell
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.SubGrid32`3" -->
        <member name="F:Z0.SubGrid32`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.SubGrid32`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid32`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.SubGrid32`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="P:Z0.SubGrid32`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid32`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="M:Z0.SubGrid32`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.SubGrid32`3.Item(System.Int32)">
            <summary>
            Extracts row content as a bitvector
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.SubGrid64`3" -->
        <member name="F:Z0.SubGrid64`3.Data">
            <summary>
            The grid state
            </summary>
        </member>
        <member name="F:Z0.SubGrid64`3.ByteCount">
            <summary>
            The number of bytes covered by the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.W">
            <summary>
            The maximum grid width
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.Content">
            <summary>
            The exposed grid state
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.RowCount">
            <summary>
            The number of rows in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.ColCount">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.BitCount">
            <summary>
            The number of covered bits
            </summary>
        </member>
        <member name="M:Z0.SubGrid64`3.Cell(System.Int32)">
            <summary>
            Reads/writes an index-identified cell
            </summary>
        </member>
        <member name="P:Z0.SubGrid64`3.Item(System.Int32)">
            <summary>
            Extracts row content as a bitvector
            </summary>
        </member>
    </members>
</doc>
