<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.imagine</name>
    </assembly>
    <members>
        <member name="M:Z0.AsDeprecated.add``1(``0@,System.Int32)">
            <summary>
            Adds an offset to a reference
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The T-cell count to add</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>
            u8:  movsxd rax,edx -> add rax,rcx
            u16: movsxd rax,edx -> lea rax,[rcx+rax*2]
            u32: movsxd rax,edx -> lea rax,[rcx+rax*4]
            u64: movsxd rax,edx -> lea rax,[rcx+rax*8]
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.as``2(``0@)">
            <summary>
            Presents an S-cell as a T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.as``2(``0@,``1@)">
            <summary>
            Presents an S-cell as a T-cell
            </summary>
            <param name="src">The source cell</param>
            <param name="src">The target cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.bytes``1(``0@)">
            <summary>
            Presents a generic value as a bytespan
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source value type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.bytes``1(System.Span{``0})">
            <summary>
            Presents a span of generic values as bytespan
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.bytes``1(System.ReadOnlySpan{``0})">
            <summary>
            Presents a readonly span over T-cells as a readonly bytespan
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.bytes``1(System.Span{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Presents a selected segment of T-cels from a soruce span as a readonly bytespan
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The source length</param>
            <typeparam name="T">The source cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.bytes``1(System.ReadOnlySpan{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Presents a selected segment of a readonly span over T-cells as a readonly bytespan
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The source length</param>
            <typeparam name="T">The source cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``1(``0*,System.Int32)">
            <summary>
            Covers a pointer-identified T-counted buffer with a span
            </summary>
            <param name="pSrc">The memory source</param>
            <param name="count">The number of bytes to cover</param>
            <typeparam name="T">The span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``1(``0*,System.UInt32)">
            <summary>
            Covers a pointer-identified T-counted buffer with a span
            </summary>
            <param name="pSrc">The memory source</param>
            <param name="count">The number of bytes to cover</param>
            <typeparam name="T">The span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``1(``0@,System.Int32)">
            <summary>
            Covers a reference-identified T-counted buffer with a span
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The number of T-cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``1(``0@,System.UInt32)">
            <summary>
            Covers a reference-identified T-counted buffer with a span
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The number of T-cells to cover</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``2(``0@,System.Int32)">
            <summary>
            Creates a span over a sequence of T-cells from a specified number of S-cells
            </summary>
            <param name="src">The data source</param>
            <param name="count">The S-cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.cover``2(``0@)">
            <summary>
            Creates a span over a sequence of T-cells from a single S-cell
            </summary>
            <param name="src">The data source</param>
            <param name="count">The S-cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.edit``1(``0@)">
            <summary>
            Transforms a readonly T-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.edit``1(System.ReadOnlySpan{``0})">
            <summary>
            Covers the content of a readonly span with an editable span
            </summary>
            <param name="src">The memory source</param>
            <param name="count">The number of source cells to read</param>
            <typeparam name="T">The cell type</typeparam>
            <returns>Obviously, this trick could be particularly dangerous</returns>
        </member>
        <member name="M:Z0.AsDeprecated.edit``2(``0@)">
            <summary>
            Transforms a readonly S-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.edit``2(``0@,``1@)">
            <summary>
            Transforms a readonly S-cell into an editable T-cell
            </summary>
            <param name="src">The source cell</param>
            <param name="dst">The target cell</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(System.Span{``0})">
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W8,System.ReadOnlySpan{``0})">
            <summary>
            Presents the span head as a readonly reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W16,System.ReadOnlySpan{``0})">
            <summary>
            Presents the span head as a readonly reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W32,System.ReadOnlySpan{``0})">
            <summary>
            Presents the span head as a readonly reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W64,System.ReadOnlySpan{``0})">
            <summary>
            Presents the span head as a readonly reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W8,System.Span{``0})">
            <summary>
            Presents the span head as a reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W16,System.Span{``0})">
            <summary>
            Presents the span head as a reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W32,System.Span{``0})">
            <summary>
            Presents the span head as a reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first``1(Z0.W64,System.Span{``0})">
            <summary>
            Presents the span head as a reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first64``1(System.Span{``0})">
            <summary>
            Presents the span head as a reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first64``1(System.ReadOnlySpan{``0})">
            <summary>
            Presents the span head as a readonly reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.first64i(System.ReadOnlySpan{System.Byte})">
            <summary>
            Presents the span head as a reference to a signed 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.gptr``1(``0@)">
            <summary>
            Presents a readonly reference to an unmanaged value as a pointer
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.inc``1(``0*)">
            <summary>
            lea rax,[rcx+n] where n = 1,2,4,8
            </summary>
            <param name="pSrc"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.add``1(``0*,System.Int32)">
            <summary>
            For n=1: movsxd rax,edx => add rax,rcx
            For n=2,4,2: lea rax,[rcx+rax*n]
            </summary>
            <param name="pSrc"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.inc``1(``0@)">
            <summary>
            Increments a reference by a unit
            </summary>
            <param name="src">The source cell</param>
            <param name="count">The cell offset count</param>
            <typeparam name="T">The cell type</typeparam>
            <remarks>
            For n = 1,2,4,8: lea rax,[rcx+4]
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.one``1(``0)">
            <summary>
            Returns generic 1 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.ones``1(``0)">
            <summary>
            Ones all bits each and every ... one
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.pchar(System.String)">
            <summary>
            Retrieves a pointer to a string that, hopefully (shouldn't)  move
            </summary>
            <param name="src">The source string</param>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.SByte})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
            <remarks>
            width[T] = 8: mov rax,[rdx] => [rcx],rax => mov dword ptr [rcx+8],1 => mov rax,rcx
            width[T] = 16: mov rax,[rdx] => [rcx],rax => mov dword ptr [rcx+8],2 => mov rax,rcx
            width[T] = 32: mov rax,[rdx] => [rcx],rax => mov dword ptr [rcx+8],4 => mov rax,rcx
            width[T] = 64: mov rax,[rdx] => [rcx],rax => mov dword ptr [rcx+8],8 => mov rax,rcx
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
            <remarks>
            Using the system-supplid cast function:
            0000h sub rsp,28h
            0004h nop
            0005h mov rax,[rcx]
            0008h mov ecx,[rcx+8]
            000bh cmp ecx,1
            000eh jl short 0018h
            0010h movzx eax,byte ptr [rax]
            0013h add rsp,28h
            0017h ret
            0018h mov ecx,28h
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Int16})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.UInt16})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Int32})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Int64})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Single})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Double})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.ReadOnlySpan{System.Decimal})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Byte})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.UInt32})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.SByte})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Int16})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.UInt16})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Int32})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Int64})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.UInt64})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Single})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Double})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.recover``1(System.Span{System.Decimal})">
            <summary>
            Presents a source span as a T-span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The target span cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.ref``1(``0*)">
            <summary>
            Presents a pointer as a reference
            </summary>
            <param name="ptr">The source pointer</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>For all T, effects: mov rax,rcx</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.refptr``1(``0@)">
            <summary>
            Presents generic reference as a generic pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>For all T, effects: mov rax,rcx</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.refptr``1(``0@,System.Int32)">
            <summary>
            Presents generic reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>
            Effects
            width[T]=8:  movsxd rax,edx => add rax,rcx
            width[T]=16: movsxd rax,edx => lea rax,[rcx+rax*2]
            width[T]=32: movsxd rax,edx => lea rax,[rcx+rax*4]
            width[T]=64: movsxd rax,edx => lea rax,[rcx+rax*8]
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.refptr``2(``0@)">
            <summary>
            Presents a generic reference r:T as a generic pointer p:T
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
            <typeparam name="P">The target pointer type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(System.Span{``0},System.UInt32)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
            <remarks>
            Effects
            width[T]=8:  mov rax,[rcx] => movsxd rdx,edx => add rax,rdx
            width[T]=16: mov rax,[rcx] => movsxd rdx,edx => lea rax,[rax+rdx*2]
            width[T]=32: mov rax,[rcx] => movsxd rdx,edx => lea rax,[rax+rdx*4]
            width[T]=64: mov rax,[rcx] => movsxd rdx,edx => lea rax,[rax+rdx*8]
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(System.Span{``0},System.Byte)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(System.Span{``0},System.UInt16)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(``0@,System.UInt32)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
            <remarks>
            Effects
            width[T]=8:  movsxd rax,edx => add rax,rcx
            width[T]=16: movsxd rax,edx => lea rax,[rcx+rax*2]
            width[T]=32: movsxd rax,edx => lea rax,[rcx+rax*4]
            width[T]=64: movsxd rax,edx => lea rax,[rcx+rax*8]
            </remarks>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(``0@,System.Byte)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(``0@,System.UInt16)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``1(``0@,System.Int32)">
            <summary>
            Returns a reference to a T-measured offset-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek``2(``0@,System.UInt32)">
            <summary>
            Advances an S-reference in units measured by T-cells and returns
            the resulting T-cell reference
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of T-cells to advance</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek32``1(``0@,System.UInt32)">
            <summary>
            Adds an offset, measured by segments of bit-width <see cref='T:Z0.W64'/>, to a source reference and presents the cell
            at the offset as an unsigned integer of bit-width <see cref='T:Z0.W64'/>
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek32``1(System.Span{``0},System.UInt32)">
            <summary>
            Adds an offset to the head of a span, measured relative to 32-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek64``1(``0@,System.UInt32)">
            <summary>
            Adds an offset, measured by 32-bit segments, to a source reference and presents the cell
            at the offset as an unsigned integer of bit-width <see cref='T:Z0.W64'/>
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek64``1(System.Span{``0},System.UInt32)">
            <summary>
            Adds a specified offset count, measured by 64-bit segments, to the leading cell of a source span
            and returns the offset cell as an unsigned integer of bit-width <see cref='T:Z0.W64'/>
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek8``1(``0@,System.UInt32)">
            <summary>
            Skips a specified number of 8-bit source segments and returns a reference to the located cell
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.seek8``1(System.Span{``0},System.UInt32)">
            <summary>
            Adds an offset to the head of a span, measured relative to 8-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip``1(``0@,System.Byte)">
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip``1(``0@,System.UInt16)">
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip``1(``0@,System.UInt32)">
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip``1(``0@,System.UInt64)">
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip16``1(``0@,System.Int32)">
            <summary>
            Skips a specified number of 16-bit source segments and returns a reference to the located cell
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 16-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip32``1(``0@,System.UInt32)">
            <summary>
            Skips a specified number of 32-bit source segments and returns a reference to the located cell
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip64``1(``0@,System.UInt32)">
            <summary>
            Skips a specified number of 54-bit source segments and returns a reference to the located cell
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.skip8``1(``0@,System.UInt32)">
            <summary>
            Skips a specified number of 8-bit source segments and returns a reference to the located cell
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The (arbitrary) source type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.ReadOnlySpan{``0},System.UInt32)">
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:ReadOnlySpan[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:ReadOnlySpan[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.ReadOnlySpan{``0},System.UInt32,System.UInt32)">
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.Span{``0},System.Int32)">
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:Span[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.Span{``0},System.UInt32)">
            <summary>
            Selects a segment [offset, length(src) - 1] from a source span src:Span[T]
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.Span{``0},System.Int32,System.Int32)">
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.slice``1(System.Span{``0},System.UInt32,System.UInt32)">
            <summary>
            Draws a specified count of T-cells from a source span beginning at a specified offset
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The T-measured offset count</param>
            <param name="length"></param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.uint(System.Boolean)">
            <summary>
            Converts a <see cref='T:System.Boolean'/> to a <see cref='T:System.UInt32'/>
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Single}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector128{System.Double}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Single}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(System.Runtime.Intrinsics.Vector256{System.Double}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.SByte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Byte}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Int16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.UInt16}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Int32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.UInt32}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Int64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.UInt64}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Single}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.generic``1(Z0.Vector512{System.Double}@)">
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        </member>
        <member name="M:Z0.AsDeprecated.v16i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v16i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v16u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v16u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32f``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32f``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v32u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64f``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64f``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64i``1(Z0.Vector512{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v64u``1(Z0.Vector512{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v8i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v8i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over cells of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v8u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a vector over T-cells as a vector over i8 cells
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v8u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a vector over T-cells as a vector over u8 cells
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.AsDeprecated.v8u``1(Z0.Vector512{``0})">
            <summary>
            Presents a vector over T-cells as a vector over u8 cells
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="T:Z0.Imagine">
            <summary>
            Presents the world as one wishes it to be, though usage could be disastrous if reality and expectation diverge
            </summary>
        </member>
        <member name="M:Z0.Root.eSeek``2(System.Span{``1},``0)">
            <summary>
            Advances to a T-cell predicated on the numeric value of an E-literal, which does not necessarily refine a T-primal
            </summary>
            <param name="src">The data source</param>
            <param name="field">The enumeration literal</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        </member>
        <member name="M:Z0.Root.ifNotNull``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Evaluates a function over a value if the value is not null; otherwise, returns the default result value
            </summary>
            <typeparam name="X">The operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="x">The operand</param>
            <param name="f1">The function to potentially evaluate</param>
        </member>
        <member name="M:Z0.Root.ifelse``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Executes one of two functions depending on the evaulation criterion
            </summary>
            <param name="x">The value to supply to the predicate and one of the handlers</param>
            <param name="bool">The predicate to evalue to determine which function will map the value</param>
            <param name="true">The function to evaulate when the criterion is true</param>
            <param name="false">The function to evaulate when the criterion is false</param>
            <typeparam name="X">The function input type</typeparam>
            <typeparam name="Y">The function output type</typeparam>
        </member>
        <member name="M:Z0.Root.ifelse(System.Boolean,System.Action,System.Action)">
            <summary>
            Executes one action if a condition is true and another should it be false
            </summary>
            <param name="condition">Specifies whether some condition is true</param>
            <param name="true">The action to invoke when condition is true</param>
            <param name="false">The action to invoke when condition is false</param>
        </member>
        <member name="M:Z0.Root.ifempty(System.String,System.String)">
            <summary>
            A string-specific coalescing operation
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        </member>
        <member name="M:Z0.Root.some``1(``0)">
            <summary>
            Defines a valued option
            </summary>
            <param name="value">The value</param>
            <typeparam name="T">The type of the extant value</typeparam>
        </member>
        <member name="M:Z0.Root.ifsome``1(``0,System.Action{``0})">
            <summary>
            Invokes an action if the supplied value is not null
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="x">The potentially null value</param>
            <param name="f">The action to invoke if possible</param>
        </member>
        <member name="M:Z0.Root.ifsome``1(System.Nullable{``0},System.Action{``0})">
            <summary>
            Invokes an action if the supplied value is not null
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="x">The potentially null value</param>
            <param name="f">The action to invoke if possible</param>
        </member>
        <member name="M:Z0.Root.iftrue``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Executes a function if the criterion is true, otherwise returns the supplied value
            </summary>
            <typeparam name="T">The function input/output type</typeparam>
            <param name="criterion">The criterion on which to branch</param>
            <param name="x">The value to supply to the chosen function</param>
            <param name="onTrue">The function to evaulate when the criterion is true</param>
        </member>
        <member name="M:Z0.Root.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
            Iterates over the supplied items, invoking a receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Z0.Root.iter``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Action{``0,``1})">
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a caller-supplied action for each cell pair
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        </member>
        <member name="M:Z0.Root.iter``2(System.Span{``0},System.Span{``1},System.Action{``0,``1})">
            <summary>
            Iterates a pair of spans in tandem, invoking a caller-supplied action for each cell pair
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        </member>
        <member name="M:Z0.Root.length``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1})">
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        </member>
        <member name="M:Z0.Root.length``2(System.ReadOnlySpan{``0},System.Span{``1})">
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        </member>
        <member name="M:Z0.Root.length``2(System.Span{``0},System.ReadOnlySpan{``1})">
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        </member>
        <member name="M:Z0.Root.length``2(System.Span{``0},System.Span{``1})">
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        </member>
        <member name="M:Z0.Root.list``1(``0[])">
            <summary>
            Creates a list from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Z0.Root.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a function to an input sequence to yield a transformed output sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns the target's default value
            </summary>
            <param name="src">The source value</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        </member>
        <member name="M:Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns value raised by a caller-supplied emitter
            </summary>
            <param name="src">The source value</param>
            <param name="some">The projector</param>
            <param name="none">The alternative emitter</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.Root.map``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})">
            <summary>
            Projects a source span to target span via a supplied transformation
            </summary>
            <param name="src">The source</param>
            <param name="f">The transformation</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.Root.apply``1(System.ReadOnlySpan{``0},System.Func{``0,``0},System.Span{``0})">
            <summary>
            Applies a unary operator to an input sequence and deposits the result to a caller-supplied target
            </summary>
            <param name="src">The source</param>
            <param name="f">The operator</param>
            <typeparam name="T">The operand type</typeparam>
        </member>
        <member name="M:Z0.Root.map``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,``0},System.Span{``0})">
            <summary>
            Projects a pair of source spans to target span via a binary operator
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
            <param name="f">The operator</param>
            <typeparam name="T">The operand type</typeparam>
        </member>
        <member name="M:Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2},System.Span{``2})">
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a function for each cell pair
            and deposits the result in a caller-supplied target
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        </member>
        <member name="M:Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2})">
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a function for each cell pair,
            and deposits the result to an allocated target that is returned
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        </member>
        <member name="M:Z0.Root.none``1">
            <summary>
            Defines a non-valued option
            </summary>
            <typeparam name="T">The value type, if the value existed</typeparam>
        </member>
        <member name="M:Z0.Root.paired``2(``0,``1)">
            <summary>
            Creates a non-homogenous pair
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
        </member>
        <member name="M:Z0.Root.pair``1(``0,``0)">
            <summary>
            Creates an homogenous pair
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T">The member type</typeparam>
        </member>
        <member name="M:Z0.Root.readonly``1(``0[])">
            <summary>
            Reflects the content of an array as a readonly span
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Root.scalar``2(``0)">
            <summary>
            Reads a T-value from the value of an E-enum of primal T-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="M:Z0.Root.e8u``1(``0)">
            <summary>
            Reads a u8 value from the value of an E-enum of primal u8-kind
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type</typeparam>
        </member>
        <member name="M:Z0.Root.seq``1(``0[])">
            <summary>
            An indespensable combinator that produces a stream from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Z0.Root.store``1(System.Collections.Generic.IEnumerable{``0},System.Span{``0})">
            <summary>
            Fills a caller-supplied span with data produced by a T-enumerable
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Root.span``1(``0[])">
            <summary>
            Creates a span from an array
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The source cell count</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Root.thread(System.UInt32)">
            <summary>
            Searches for a thread given an OS-assigned id, not the useless clr id
            </summary>
            <param name="id">The OS thread Id</param>
        </member>
        <member name="M:Z0.Root.type``1">
            <summary>
            Returns the type of the type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
    </members>
</doc>
