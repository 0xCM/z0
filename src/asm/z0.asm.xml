<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.asm</name>
    </assembly>
    <members>
        <member name="M:Z0.asm.counts(Z0.AsmCallSummary@)">
            <summary>
            Summarizes far-call summary count statistics
            </summary>
            <param name="src">The summary over which to compute count statistics</param>
        </member>
        <member name="M:Z0.asm.encoded(System.Runtime.Intrinsics.Vector128{System.Byte})">
            <summary>
            Defines an encoded instruction from the lower 15 source bytes
            </summary>
            <param name="src">The encoded data</param>
        </member>
        <member name="M:Z0.asm.farcalls(Z0.MemoryAddress[],Z0.MemoryAddress[],Z0.MemoryAddress[],Z0.MemoryAddress[])">
            <summary>
            Summarizes a collection of far-call datapoints
            </summary>
            <param name="targets">The call target addresses</param>
            <param name="bases">The base addresses of the callers</param>
            <param name="hosted">Base addresses of api host functions that are targets of a far call</param>
            <param name="unhosted">Far call targets that are not defined by an api host</param>
        </member>
        <member name="M:Z0.asm.identify(Z0.Asm.MemorySize)">
            <summary>
            Assigns identity to a <see cref='T:Z0.Asm.MemorySize'/> specification
            </summary>
            <param name="src">A memory size specification</param>
        </member>
        <member name="M:Z0.asm.immval(Z0.Asm.Instruction,System.Byte)">
            <summary>
            Extracts an immediate operand from an instruction
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        </member>
        <member name="M:Z0.asm.immwidth(Z0.Asm.OpKind)">
            <summary>
            Determines the size of a classified immediate operand, if applicable; otherwise, returns 0
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isBranch(Z0.Asm.OpKind)">
            <summary>
            Determines whether a classified operand is associated with a branching instruction
            </summary>
            <param name="src">The operand classification</param>
        </member>
        <member name="M:Z0.asm.isFarBranch(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is a 32-bit or 64-bit far branch
            Assessed respectively via the FarBranch32 and FarBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        </member>
        <member name="M:Z0.asm.isSignedImm(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand a sign-extended immediate which may include:
            An 8-bit value sign extended to 16 bits, accessed via the Immediate8to16 instruction attribute
            An 8-bit value sign extended to 32 bits, accessed via Immediate8to32 instruction attribute
            An 8-bit value sign extended to 64 bits, accessed via the Immediate8to64 instruction attribute
            A 32-bit value sign extended to 64 bits, accessed via the Immediate32to64 instruction attribute
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isDirectImm(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is an 8-bit, 16-bit, 32-bit or 64-bit constant
            which are accessed respectively through the Immediate8, Immediate16, Immediate32, and Immediate64
            instruction attributes
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isSpecialImm(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is an 8-bit immediate
            used by the enter, extrq, or insertq instructions
            Accessed via the instruction attribute Immediate8_2nd
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isImm(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is an immediate of some sort
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isMem(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is some sort of memory
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isMem64(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is a 64-bit memory offset. 
            Relevant instruction attributes include:
            MemoryAddress64, MemorySegment, SegmentPrefix, MemorySize
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isMemDirect(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is direct memory.
            Relevant instruction attributes include: 
            MemoryDisplSize, MemorySize, MemoryIndexScale, MemoryDisplacement, MemoryBase, 
            MemoryIndex, MemorySegment, SegmentPrefix
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isNearBranch(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is a 16-bit, 32-bit or 64-bit near branch
            Assessed respectively via the NearBranch16, NearBranch32 and NearBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        </member>
        <member name="M:Z0.asm.isRegister(Z0.Asm.OpKind)">
            <summary>
            Tests whether the the source operand kind is a register kind
            </summary>
            <param name="src">The source operand kind</param>
        </member>
        <member name="M:Z0.asm.isSegBase(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is a segment of the form 
            seg:[di], seg:[edi], seg:[esi], seg:[rdi], seg:[rsi], seg:[si]
            Relevant instruction attributes include: MemorySize, MemorySegment, SegmentPrefix 
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.isSegEs(Z0.Asm.OpKind)">
            <summary>
            Determines whether the classified operand is an ES ("extra") memory segment.
            Possible choices include es:[di], es:[edi], es:[rdi]
            Relevant instruction attributes inlude: MemorySize
            </summary>
            <param name="src">The operand classifier</param>
        </member>
        <member name="M:Z0.asm.kind(Z0.Asm.Instruction@,System.Byte)">
            <summary>
            Gets an operand's kind if it exists
            </summary>
            <param name="index">Operand number, 0-4</param>
        </member>
        <member name="M:Z0.asm.memory(Z0.Asm.Instruction,System.Byte)">
            <summary>
            Extracts memory information, if applicable, from an instruction operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        </member>
        <member name="M:Z0.asm.offset(Z0.MemoryAddress,System.Byte,Z0.MemoryAddress)">
            <summary>
            Defines an IP offset relative to a specified base address, instruction size and target address
            </summary>
            <param name="base">The base address</param>
            <param name="size">The size, in bytes, of the call/branch/jmp instruction</param>
            <param name="dst">The call/branch/jmp target</param>
        </member>
        <member name="M:Z0.asm.operand(Z0.MemoryAddress,Z0.Asm.Instruction@,System.Byte)">
            <summary>
            Defines an instruction operand
            </summary>
            <param name="base">The base address</param>
            <param name="fx"></param>
            <param name="index"></param>
        </member>
        <member name="M:Z0.asm.operands(Z0.MemoryAddress,Z0.Asm.Instruction@)">
            <summary>
            Extracts operand instruction data
            </summary>
            <param name="fx">The source instruction</param>
            <param name="@base">The base address</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,System.Byte)">
            <summary>
            Extracts register information, should it exist, from an index-identified register operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,Z0.N0)">
            <summary>
            Gets the register value of a naturally-identified operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="n">The operand selector</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,Z0.N1)">
            <summary>
            Gets the register value of a naturally-identified operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="n">The operand selector</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,Z0.N2)">
            <summary>
            Gets the register value of a naturally-identified operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="n">The operand selector</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,Z0.N3)">
            <summary>
            Gets the register value of a naturally-identified operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="n">The operand selector</param>
        </member>
        <member name="M:Z0.asm.register(Z0.Asm.Instruction@,Z0.N4)">
            <summary>
            Gets the register value of a naturally-identified operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="n">The operand selector</param>
        </member>
        <member name="M:Z0.asm.summarize(Z0.Asm.AsmFxList@)">
            <summary>
            Describes the instructions that comprise an instruction list
            </summary>
            <param name="src">The source instruction list</param>
        </member>
        <member name="M:Z0.asm.summarize(Z0.Asm.AsmRoutine@)">
            <summary>
            Describes the instructions that comprise a function
            </summary>
            <param name="src">The source function</param>
        </member>
        <member name="T:Z0.Asm.IAsmFormatter">
            <summary>
            Defines service contract for asm text formatting support
            </summary>
        </member>
        <member name="P:Z0.Asm.IAsmFormatter.Config">
            <summary>
            The configuration used when rendering the formatted text
            </summary>
        </member>
        <member name="M:Z0.Asm.IAsmFormatter.FormatFunction(Z0.Asm.AsmRoutine)">
            <summary>
            Creates a detailed presentation of decoded x86 asm data per the accompanying configuration spec
            </summary>
            <param name="src">The function to render as asm text</param>
        </member>
        <member name="M:Z0.Asm.IAsmFormatter.FormatInstruction(Z0.MemoryAddress@,Z0.Asm.AsmFxSummary@)">
            <summary>
            Formats a single instruction
            </summary>
            <param name="@base">The base address to which the instruction is relative</param>
            <param name="src">The source instruction</param>
        </member>
        <member name="M:Z0.Asm.IAsmFormatter.Format(Z0.Asm.AsmRoutine@,Z0.ITextBuffer)">
            <summary>
            Renders a routine to a caller-supplied buffer
            </summary>
            <param name="src">The source routine</param>
            <param name="dst">The target buffer</param>
        </member>
        <member name="M:Z0.Asm.IAsmFormatter.Format(Z0.Asm.AsmRoutines@,Z0.ITextBuffer)">
            <summary>
            Renders a routine sequence to a caller-supplied buffer
            </summary>
            <param name="src">The source routines</param>
            <param name="dst">The target buffer</param>
        </member>
        <member name="T:Z0.Asm.IAsmFxBranch">
            <summary>
            Defines branch-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxBranching">
            <summary>
            Aggregates call/jmp/branching instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxCall">
            <summary>
            Defines call-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxFlags">
            <summary>
            Defines flag-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxImm">
            <summary>
            Defines imm-related instruction aspects
            </summary>
        </member>
        <member name="P:Z0.Asm.IAsmFxInfo.FormattedInstruction">
            <summary>
            Captures the formatted view of the instruction
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxIp">
            <summary>
            Defines IP-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmFxMasking">
            <summary>
            Defines mask-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmJmpAspects">
            <summary>
            Defines branch-related instruction aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmOperandKinds">
            <summary>
            Defines instruction operand kind designation aspects
            </summary>
        </member>
        <member name="T:Z0.Asm.IAsmJccAspects">
            <summary>
            Defines branch-related instruction aspects
            </summary>
        </member>
        <member name="P:Z0.Asm.ILazyAsmFxInfo.InstructionCode">
            <summary>
            Encapsulates the result of ToInstructionCodeString() and ToInstructionString()
            </summary>
        </member>
        <member name="P:Z0.Asm.ILazyAsmFxInfo.Access">
            <summary>
            Captures the op access array as specified by the InstructionInfo type
            </summary>
        </member>
        <member name="T:Z0.Asm.CodeSize">
            <summary>
            Default code size when an instruction was decoded
            </summary>
        </member>
        <member name="F:Z0.Asm.CodeSize.Unknown">
            <summary>
            Unknown size
            </summary>
        </member>
        <member name="F:Z0.Asm.CodeSize.Code16">
            <summary>
            16-bit code
            </summary>
        </member>
        <member name="F:Z0.Asm.CodeSize.Code32">
            <summary>
            32-bit code
            </summary>
        </member>
        <member name="F:Z0.Asm.CodeSize.Code64">
            <summary>
            64-bit code
            </summary>
        </member>
        <member name="T:Z0.Asm.CpuidFeature">
            <summary>
            CPUID feature flags
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL8086">
            <summary>
            8086 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL8086_ONLY">
            <summary>
            8086 only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL186">
            <summary>
            80186 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL286">
            <summary>
            80286 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL286_ONLY">
            <summary>
            80286 only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL386">
            <summary>
            80386 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL386_ONLY">
            <summary>
            80386 only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL386_A0_ONLY">
            <summary>
            80386 A0-B0 stepping only (xbts, ibts instructions)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL486">
            <summary>
            Intel486 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL486_A_ONLY">
            <summary>
            Intel486 A stepping only (cmpxchg)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INTEL386_486_ONLY">
            <summary>
            80386 and Intel486 only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.IA64">
            <summary>
            IA-64
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.X64">
            <summary>
            CPUID.80000001H:EDX.LM[bit 29]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.ADX">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.ADX[bit 19]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AES">
            <summary>
            CPUID.01H:ECX.AES[bit 25]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX">
            <summary>
            CPUID.01H:ECX.AVX[bit 28]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX2">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX2[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_4FMAPS">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EDX.AVX512_4FMAPS[bit 3]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_4VNNIW">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EDX.AVX512_4VNNIW[bit 2]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_BF16">
            <summary>
            CPUID.(EAX=07H, ECX=1):EAX[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_BITALG">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.AVX512_BITALG[bit 12]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_IFMA">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512_IFMA[bit 21]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_VBMI">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.AVX512_VBMI[bit 1]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_VBMI2">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.AVX512_VBMI2[bit 6] 
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_VNNI">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.AVX512_VNNI[bit 11]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_VP2INTERSECT">
            <summary>
            CPUID.(EAX=07H, ECX=0):EDX[bit 08]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512_VPOPCNTDQ">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.AVX512_VPOPCNTDQ[bit 14]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512BW">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512BW[bit 30]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512CD">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512CD[bit 28]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512DQ">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512DQ[bit 17]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512ER">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512ER[bit 27]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512F">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512F[bit 16]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512PF">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512PF[bit 26]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.AVX512VL">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.AVX512VL[bit 31]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.BMI1">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.BMI1[bit 3]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.BMI2">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.BMI2[bit 8]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CET_IBT">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EDX.CET_IBT[bit 20]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CET_SS">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.CET_SS[bit 7]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CL1INVMB">
            <summary>
            CL1INVMB instruction (Intel SCC = Single-Chip Computer)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CLDEMOTE">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.CLDEMOTE[bit 25]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CLFLUSHOPT">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.CLFLUSHOPT[bit 23]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CLFSH">
            <summary>
            CPUID.01H:EDX.CLFSH[bit 19]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CLWB">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.CLWB[bit 24]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CLZERO">
            <summary>
            CPUID.80000008H:EBX.CLZERO[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CMOV">
            <summary>
            CPUID.01H:EDX.CMOV[bit 15]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CMPXCHG16B">
            <summary>
            CPUID.01H:ECX.CMPXCHG16B[bit 13]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CPUID">
            <summary>
            RFLAGS.ID can be toggled
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.CX8">
            <summary>
            CPUID.01H:EDX.CX8[bit 8]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.D3NOW">
            <summary>
            CPUID.80000001H:EDX.3DNOW[bit 31]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.D3NOWEXT">
            <summary>
            CPUID.80000001H:EDX.3DNOWEXT[bit 30]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.ENCLV">
            <summary>
            CPUID.(EAX=12H, ECX=0H):EAX.OSS[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.ENQCMD">
            <summary>
            CPUID.(EAX=07H, ECX=0):ECX[bit 29]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.F16C">
            <summary>
            CPUID.01H:ECX.F16C[bit 29]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FMA">
            <summary>
            CPUID.01H:ECX.FMA[bit 12]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FMA4">
            <summary>
            CPUID.80000001H:ECX.FMA4[bit 16]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FPU">
            <summary>
            8087 or later (CPUID.01H:EDX.FPU[bit 0])
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FPU287">
            <summary>
            80287 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FPU287XL_ONLY">
            <summary>
            80287XL only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FPU387">
            <summary>
            80387 or later
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FPU387SL_ONLY">
            <summary>
            80387SL only
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FSGSBASE">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.FSGSBASE[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.FXSR">
            <summary>
            CPUID.01H:EDX.FXSR[bit 24]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.GEODE">
            <summary>
            AMD Geode LX/GX CPU
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.GFNI">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.GFNI[bit 8]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.HLE">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.HLE[bit 4]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.HLE_or_RTM">
            <summary>
            <see cref="F:Z0.Asm.CpuidFeature.HLE"/> or <see cref="F:Z0.Asm.CpuidFeature.RTM"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INVEPT">
            <summary>
            <see cref="F:Z0.Asm.CpuidFeature.VMX"/> and IA32_VMX_EPT_VPID_CAP[bit 20]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INVPCID">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.INVPCID[bit 10]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.INVVPID">
            <summary>
            <see cref="F:Z0.Asm.CpuidFeature.VMX"/> and IA32_VMX_EPT_VPID_CAP[bit 32]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.LWP">
            <summary>
            CPUID.80000001H:ECX.LWP[bit 15]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.LZCNT">
            <summary>
            CPUID.80000001H:ECX.LZCNT[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MCOMMIT">
            <summary>
            CPUID.80000008H:EBX.MCOMMIT[bit 8]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MMX">
            <summary>
            CPUID.01H:EDX.MMX[bit 23]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MONITOR">
            <summary>
            CPUID.01H:ECX.MONITOR[bit 3]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MONITORX">
            <summary>
            CPUID.80000001H:ECX.MONITORX[bit 29]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MOVBE">
            <summary>
            CPUID.01H:ECX.MOVBE[bit 22]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MOVDIR64B">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.MOVDIR64B[bit 28]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MOVDIRI">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.MOVDIRI[bit 27]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MPX">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.MPX[bit 14]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MSR">
            <summary>
            CPUID.01H:EDX.MSR[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.MULTIBYTENOP">
            <summary>
            Multi-byte nops (0F1F /0): CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PADLOCK_ACE">
            <summary>
            CPUID.0C0000000H:EAX >= 0C0000001H AND CPUID.0C0000001H:EDX.ACE[Bits 7:6] = 11B ([6] = exists, [7] = enabled)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PADLOCK_PHE">
            <summary>
            CPUID.0C0000000H:EAX >= 0C0000001H AND CPUID.0C0000001H:EDX.PHE[Bits 11:10] = 11B ([10] = exists, [11] = enabled)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PADLOCK_PMM">
            <summary>
            CPUID.0C0000000H:EAX >= 0C0000001H AND CPUID.0C0000001H:EDX.PMM[Bits 13:12] = 11B ([12] = exists, [13] = enabled)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PADLOCK_RNG">
            <summary>
            CPUID.0C0000000H:EAX >= 0C0000001H AND CPUID.0C0000001H:EDX.RNG[Bits 3:2] = 11B ([2] = exists, [3] = enabled)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PAUSE">
            <summary>
            PAUSE instruction (Pentium 4 or later)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PCLMULQDQ">
            <summary>
            CPUID.01H:ECX.PCLMULQDQ[bit 1]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PCOMMIT">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.PCOMMIT[bit 22]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PCONFIG">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EDX.PCONFIG[bit 18]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PKU">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.PKU[bit 3]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.POPCNT">
            <summary>
            CPUID.01H:ECX.POPCNT[bit 23]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PREFETCHW">
            <summary>
            CPUID.80000001H:ECX.PREFETCHW[bit 8]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PREFETCHWT1">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.PREFETCHWT1[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.PTWRITE">
            <summary>
            CPUID.(EAX=14H, ECX=0H):EBX.PTWRITE[bit 4]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDPID">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.RDPID[bit 22]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDPMC">
            <summary>
            RDPMC instruction (Pentium MMX or later, or Pentium Pro or later)
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDPRU">
            <summary>
            CPUID.80000008H:EBX.RDPRU[bit 4]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDRAND">
            <summary>
            CPUID.01H:ECX.RDRAND[bit 30]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDSEED">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.RDSEED[bit 18]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RDTSCP">
            <summary>
            CPUID.80000001H:EDX.RDTSCP[bit 27]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.RTM">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.RTM[bit 11]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SEP">
            <summary>
            CPUID.01H:EDX.SEP[bit 11]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SGX1">
            <summary>
            CPUID.(EAX=12H, ECX=0H):EAX.SGX1[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SHA">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.SHA[bit 29]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SKINIT">
            <summary>
            CPUID.80000001H:ECX.SKINIT[bit 12]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SKINIT_or_SVML">
            <summary>
            <see cref="F:Z0.Asm.CpuidFeature.SKINIT"/> or <see cref="F:Z0.Asm.CpuidFeature.SVML"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SMAP">
            <summary>
            CPUID.(EAX=07H, ECX=0H):EBX.SMAP[bit 20]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SMX">
            <summary>
            CPUID.01H:ECX.SMX[bit 6]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE">
            <summary>
            CPUID.01H:EDX.SSE[bit 25]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE2">
            <summary>
            CPUID.01H:EDX.SSE2[bit 26]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE3">
            <summary>
            CPUID.01H:ECX.SSE3[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE4_1">
            <summary>
            CPUID.01H:ECX.SSE4_1[bit 19]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE4_2">
            <summary>
            CPUID.01H:ECX.SSE4_2[bit 20]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSE4A">
            <summary>
            CPUID.80000001H:ECX.SSE4A[bit 6]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SSSE3">
            <summary>
            CPUID.01H:ECX.SSSE3[bit 9]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SVM">
            <summary>
            CPUID.80000001H:ECX.SVM[bit 2]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SVML">
            <summary>
            CPUID.8000000AH:EDX.SVML[bit 2]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.SYSCALL">
            <summary>
            CPUID.80000001H:EDX.SYSCALL[bit 11]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.TBM">
            <summary>
            CPUID.80000001H:ECX.TBM[bit 21]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.TSC">
            <summary>
            CPUID.01H:EDX.TSC[bit 4]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.VAES">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.VAES[bit 9]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.VMX">
            <summary>
            CPUID.01H:ECX.VMX[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.VPCLMULQDQ">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.VPCLMULQDQ[bit 10]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.WAITPKG">
            <summary>
            CPUID.(EAX=07H, ECX=0H):ECX.WAITPKG[bit 5]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.WBNOINVD">
            <summary>
            CPUID.(EAX=80000008H, ECX=0H):EBX.WBNOINVD[bit 9]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.XOP">
            <summary>
            CPUID.80000001H:ECX.XOP[bit 11]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.XSAVE">
            <summary>
            CPUID.01H:ECX.XSAVE[bit 26]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.XSAVEC">
            <summary>
            CPUID.(EAX=0DH, ECX=1H):EAX.XSAVEC[bit 1]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.XSAVEOPT">
            <summary>
            CPUID.(EAX=0DH, ECX=1H):EAX.XSAVEOPT[bit 0]
            </summary>
        </member>
        <member name="F:Z0.Asm.CpuidFeature.XSAVES">
            <summary>
            CPUID.(EAX=0DH, ECX=1H):EAX.XSAVES[bit 3]
            </summary>
        </member>
        <member name="T:Z0.Asm.EncodingKind">
            <summary>
            Instruction encoding
            </summary>
        </member>
        <member name="F:Z0.Asm.EncodingKind.Legacy">
            <summary>
            Legacy encoding
            </summary>
        </member>
        <member name="F:Z0.Asm.EncodingKind.VEX">
            <summary>
            VEX encoding
            </summary>
        </member>
        <member name="F:Z0.Asm.EncodingKind.EVEX">
            <summary>
            EVEX encoding
            </summary>
        </member>
        <member name="F:Z0.Asm.EncodingKind.XOP">
            <summary>
            XOP encoding
            </summary>
        </member>
        <member name="F:Z0.Asm.EncodingKind.D3NOW">
            <summary>
            3DNow! encoding
            </summary>
        </member>
        <member name="T:Z0.Asm.IceRegister">
            <summary>
            A register
            </summary>
        </member>
        <member name="T:Z0.Asm.MandatoryPrefix">
            <summary>
            Mandatory prefix
            </summary>
        </member>
        <member name="F:Z0.Asm.MandatoryPrefix.None">
            <summary>
            No mandatory prefix (legacy and 3DNow! tables only)
            </summary>
        </member>
        <member name="F:Z0.Asm.MandatoryPrefix.PNP">
            <summary>
            Empty mandatory prefix (no 66, F3 or F2 prefix)
            </summary>
        </member>
        <member name="F:Z0.Asm.MandatoryPrefix.P66">
            <summary>
            66 prefix
            </summary>
        </member>
        <member name="F:Z0.Asm.MandatoryPrefix.PF3">
            <summary>
            F3 prefix
            </summary>
        </member>
        <member name="F:Z0.Asm.MandatoryPrefix.PF2">
            <summary>
            F2 prefix
            </summary>
        </member>
        <member name="T:Z0.Asm.OpAccess">
            <summary>
            Operand, register and memory access
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.None">
            <summary>
            Nothing is read and nothing is written
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.Read">
            <summary>
            The value is read
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.CondRead">
            <summary>
            The value is sometimes read and sometimes not
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.Write">
            <summary>
            The value is completely overwritten
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.CondWrite">
            <summary>
            Conditional write, sometimes it's written and sometimes it's not modified
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.ReadWrite">
            <summary>
            The value is read and written
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.ReadCondWrite">
            <summary>
            The value is read and sometimes written
            </summary>
        </member>
        <member name="F:Z0.Asm.OpAccess.NoMemAccess">
            <summary>
            The memory operand doesn't refer to memory (eg. lea instruction) or it's an instruction that doesn't
            read the data to a register or doesn't write to the memory location, it just prefetches/invalidates it,
            eg. invlpg, prefetchnta, vgatherpf0dps, etc.
            </summary>
        </member>
        <member name="T:Z0.Asm.OpCodeOperandKind">
            <summary>
            Operand kind
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.None">
            <summary>
            No operand
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.farbr2_2">
            <summary>
            Far branch 16-bit offset, 16-bit segment/selector
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.farbr4_2">
            <summary>
            Far branch 32-bit offset, 16-bit segment/selector
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_offs">
            <summary>
            Memory offset without a modrm byte (eg. mov al,[offset])
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem">
            <summary>
            Memory (modrm)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_mpx">
            <summary>
            Memory (modrm), MPX: 16/32-bit mode: must be 32-bit addressing, 64-bit mode: 64-bit addressing is forced
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_mib">
            <summary>
            Memory (modrm), MPX: 16/32-bit mode: must be 32-bit addressing, 64-bit mode: 64-bit addressing is forced and must not be RIP relative
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib32x">
            <summary>
            Memory (modrm), vsib32, xmm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib64x">
            <summary>
            Memory (modrm), vsib64, xmm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib32y">
            <summary>
            Memory (modrm), vsib32, ymm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib64y">
            <summary>
            Memory (modrm), vsib64, ymm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib32z">
            <summary>
            Memory (modrm), vsib32, zmm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mem_vsib64z">
            <summary>
            Memory (modrm), vsib64, zmm registers
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r8_or_mem">
            <summary>
            8-bit GPR or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r16_or_mem">
            <summary>
            16-bit GPR or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_or_mem">
            <summary>
            32-bit GPR or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_or_mem_mpx">
            <summary>
            32-bit GPR or memory, MPX: 16/32-bit mode: must be 32-bit addressing, 64-bit mode: 64-bit addressing is forced
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_or_mem">
            <summary>
            64-bit GPR or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_or_mem_mpx">
            <summary>
            64-bit GPR or memory, MPX: 16/32-bit mode: must be 32-bit addressing, 64-bit mode: 64-bit addressing is forced
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mm_or_mem">
            <summary>
            MM register or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_or_mem">
            <summary>
            XMM register or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_or_mem">
            <summary>
            YMM register or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.zmm_or_mem">
            <summary>
            ZMM register or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.bnd_or_mem_mpx">
            <summary>
            BND register or memory, MPX: 16/32-bit mode: must be 32-bit addressing, 64-bit mode: 64-bit addressing is forced
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.k_or_mem">
            <summary>
            K register or memory
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r8_reg">
            <summary>
            8-bit GPR encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r8_opcode">
            <summary>
            8-bit GPR encoded in the low 3 bits of the opcode
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r16_reg">
            <summary>
            16-bit GPR encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r16_rm">
            <summary>
            16-bit GPR encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r16_opcode">
            <summary>
            16-bit GPR encoded in the low 3 bits of the opcode
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_reg">
            <summary>
            32-bit GPR encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_rm">
            <summary>
            32-bit GPR encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_opcode">
            <summary>
            32-bit GPR encoded in the low 3 bits of the opcode
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r32_vvvv">
            <summary>
            32-bit GPR encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_reg">
            <summary>
            64-bit GPR encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_rm">
            <summary>
            64-bit GPR encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_opcode">
            <summary>
            64-bit GPR encoded in the low 3 bits of the opcode
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.r64_vvvv">
            <summary>
            64-bit GPR encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.seg_reg">
            <summary>
            Segment register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.k_reg">
            <summary>
            K register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.kp1_reg">
            <summary>
            K register (+1) encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.k_rm">
            <summary>
            K register encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.k_vvvv">
            <summary>
            K register encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mm_reg">
            <summary>
            MM register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.mm_rm">
            <summary>
            MM register encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_reg">
            <summary>
            XMM register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_rm">
            <summary>
            XMM register encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_vvvv">
            <summary>
            XMM register encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmmp3_vvvv">
            <summary>
            XMM register (+3) encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_is4">
            <summary>
            XMM register encoded in the the high 4 bits of the last 8-bit immediate (VEX/XOP only so only XMM0-XMM15)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xmm_is5">
            <summary>
            XMM register encoded in the the high 4 bits of the last 8-bit immediate (VEX/XOP only so only XMM0-XMM15)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_reg">
            <summary>
            YMM register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_rm">
            <summary>
            YMM register encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_vvvv">
            <summary>
            YMM register encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_is4">
            <summary>
            YMM register encoded in the the high 4 bits of the last 8-bit immediate (VEX/XOP only so only YMM0-YMM15)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ymm_is5">
            <summary>
            YMM register encoded in the the high 4 bits of the last 8-bit immediate (VEX/XOP only so only YMM0-YMM15)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.zmm_reg">
            <summary>
            ZMM register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.zmm_rm">
            <summary>
            ZMM register encoded in the 'mod + r/m' fields of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.zmm_vvvv">
            <summary>
            ZMM register encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.zmmp3_vvvv">
            <summary>
            ZMM register (+3) encoded in the the V'vvvv field (VEX/EVEX/XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.cr_reg">
            <summary>
            CR register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.dr_reg">
            <summary>
            DR register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.tr_reg">
            <summary>
            TR register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.bnd_reg">
            <summary>
            BND register encoded in the 'reg' field of the modrm byte
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.es">
            <summary>
            ES register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.cs">
            <summary>
            CS register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ss">
            <summary>
            SS register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ds">
            <summary>
            DS register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.fs">
            <summary>
            FS register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.gs">
            <summary>
            GS register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.al">
            <summary>
            AL register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.cl">
            <summary>
            CL register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.ax">
            <summary>
            AX register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.dx">
            <summary>
            DX register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.eax">
            <summary>
            EAX register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.rax">
            <summary>
            RAX register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.st0">
            <summary>
            ST0 register
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.sti_opcode">
            <summary>
            ST(i) register encoded in the low 3 bits of the opcode
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm2_m2z">
            <summary>
            2-bit immediate (m2z field, low 2 bits of the /is5 immediate, eg. vpermil2ps)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm8">
            <summary>
            8-bit immediate
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm8_const_1">
            <summary>
            Constant 1 (8-bit immediate)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm8sex16">
            <summary>
            8-bit immediate sign extended to 16 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm8sex32">
            <summary>
            8-bit immediate sign extended to 32 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm8sex64">
            <summary>
            8-bit immediate sign extended to 64 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm16">
            <summary>
            16-bit immediate
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm32">
            <summary>
            32-bit immediate
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm32sex64">
            <summary>
            32-bit immediate sign extended to 64 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.imm64">
            <summary>
            64-bit immediate
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.seg_rSI">
            <summary>
            seg:[rSI] memory operand (string instructions)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.es_rDI">
            <summary>
            es:[rDI] memory operand (string instructions)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.seg_rDI">
            <summary>
            seg:[rDI] memory operand ((v)maskmovq instructions)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.seg_rBX_al">
            <summary>
            seg:[rBX+al] memory operand (xlatb instruction)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br16_1">
            <summary>
            16-bit branch, 1-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br32_1">
            <summary>
            32-bit branch, 1-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br64_1">
            <summary>
            64-bit branch, 1-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br16_2">
            <summary>
            16-bit branch, 2-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br32_4">
            <summary>
            32-bit branch, 4-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.br64_4">
            <summary>
            64-bit branch, 4-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xbegin_2">
            <summary>
            xbegin, 2-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.xbegin_4">
            <summary>
            xbegin, 4-byte signed relative offset
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.brdisp_2">
            <summary>
            2-byte branch offset (jmpe instruction)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeOperandKind.brdisp_4">
            <summary>
            4-byte branch offset (jmpe instruction)
            </summary>
        </member>
        <member name="T:Z0.Asm.OpCodeTableKind">
            <summary>
            Opcode table
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.Normal">
            <summary>
            Legacy encoding table
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.T0F">
            <summary>
            0Fxx table (legacy, VEX, EVEX)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.T0F38">
            <summary>
            0F38xx table (legacy, VEX, EVEX)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.T0F3A">
            <summary>
            0F3Axx table (legacy, VEX, EVEX)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.XOP8">
            <summary>
            XOP8 table (XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.XOP9">
            <summary>
            XOP9 table (XOP)
            </summary>
        </member>
        <member name="F:Z0.Asm.OpCodeTableKind.XOPA">
            <summary>
            XOPA table (XOP)
            </summary>
        </member>
        <member name="T:Z0.Asm.OpKind">
            <summary>
            Instruction operand kind
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Register">
            <summary>
            A register (<see cref="!:Intel.Register"/>).
            This operand kind uses <see cref="P:Z0.Asm.Instruction.Op0Register"/>, <see cref="P:Z0.Asm.Instruction.Op1Register"/>,
            <see cref="P:Z0.Asm.Instruction.Op2Register"/> or <see cref="P:Z0.Asm.Instruction.Op3Register"/> depending on operand number.
            See also <see cref="!:Instruction.GetOpRegister(int)"/>.
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.NearBranch16">
            <summary>
            Near 16-bit branch. This operand kind uses <see cref="P:Z0.Asm.Instruction.NearBranch16"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.NearBranch32">
            <summary>
            Near 32-bit branch. This operand kind uses <see cref="P:Z0.Asm.Instruction.NearBranch32"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.NearBranch64">
            <summary>
            Near 64-bit branch. This operand kind uses <see cref="P:Z0.Asm.Instruction.NearBranch64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.FarBranch16">
            <summary>
            Far 16-bit branch. This operand kind uses <see cref="P:Z0.Asm.Instruction.FarBranch16"/> and <see cref="P:Z0.Asm.Instruction.FarBranchSelector"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.FarBranch32">
            <summary>
            Far 32-bit branch. This operand kind uses <see cref="P:Z0.Asm.Instruction.FarBranch32"/> and <see cref="P:Z0.Asm.Instruction.FarBranchSelector"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate8">
            <summary>
            8-bit constant. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate8"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate8_2nd">
            <summary>
            8-bit constant used by the enter, extrq, insertq instructions. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate8_2nd"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate16">
            <summary>
            16-bit constant. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate16"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate32">
            <summary>
            32-bit constant. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate32"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate64">
            <summary>
            64-bit constant. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate8to16">
            <summary>
            An 8-bit value sign extended to 16 bits. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate8to16"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate8to32">
            <summary>
            An 8-bit value sign extended to 32 bits. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate8to32"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate8to64">
            <summary>
            An 8-bit value sign extended to 64 bits. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate8to64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Immediate32to64">
            <summary>
            A 32-bit value sign extended to 64 bits. This operand kind uses <see cref="P:Z0.Asm.Instruction.Immediate32to64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegSI">
            <summary>
            seg:[si]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegESI">
            <summary>
            seg:[esi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegRSI">
            <summary>
            seg:[rsi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegDI">
            <summary>
            seg:[di]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegEDI">
            <summary>
            seg:[edi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemorySegRDI">
            <summary>
            seg:[rdi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemoryESDI">
            <summary>
            es:[di]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemoryESEDI">
            <summary>
            es:[edi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.MemoryESRDI">
            <summary>
            es:[rdi]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemorySize"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Memory64">
            <summary>
            64-bit offset [xxxxxxxxxxxxxxxx]. This operand kind uses <see cref="P:Z0.Asm.Instruction.MemoryAddress64"/>,
            <see cref="P:Z0.Asm.Instruction.MemorySegment"/>, <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>, <see cref="P:Z0.Asm.Instruction.MemorySize"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.OpKind.Memory">
             <summary>
             Memory operand.
            
             This operand kind uses <see cref="P:Z0.Asm.Instruction.MemoryDisplSize"/>, <see cref="P:Z0.Asm.Instruction.MemorySize"/>,
             <see cref="P:Z0.Asm.Instruction.MemoryIndexScale"/>, <see cref="P:Z0.Asm.Instruction.MemoryDisplacement"/>,
             <see cref="P:Z0.Asm.Instruction.MemoryBase"/>, <see cref="P:Z0.Asm.Instruction.MemoryIndex"/>, <see cref="P:Z0.Asm.Instruction.MemorySegment"/>,
             <see cref="P:Z0.Asm.Instruction.SegmentPrefix"/>
             </summary>
        </member>
        <member name="T:Z0.Asm.RflagsBits">
            <summary>
            RFLAGS bits supported by the instruction info code
            </summary>
        </member>
        <member name="T:Z0.Asm.RoundingControl">
            <summary>
            Rounding control
            </summary>
        </member>
        <member name="F:Z0.Asm.RoundingControl.None">
            <summary>
            No rounding mode
            </summary>
        </member>
        <member name="F:Z0.Asm.RoundingControl.RoundToNearest">
            <summary>
            Round to nearest (even)
            </summary>
        </member>
        <member name="F:Z0.Asm.RoundingControl.RoundDown">
            <summary>
            Round down (toward -inf)
            </summary>
        </member>
        <member name="F:Z0.Asm.RoundingControl.RoundUp">
            <summary>
            Round up (toward +inf)
            </summary>
        </member>
        <member name="F:Z0.Asm.RoundingControl.RoundTowardZero">
            <summary>
            Round toward zero (truncate)
            </summary>
        </member>
        <member name="T:Z0.Asm.TupleType">
            <summary>
            Tuple type (EVEX) which can be used to get the disp8 scale factor N
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.None">
            <summary>
            N = 1
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_128">
            <summary>
            N = b ? (W ? 8 : 4) : 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_256">
            <summary>
            N = b ? (W ? 8 : 4) : 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_512">
            <summary>
            N = b ? (W ? 8 : 4) : 64
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_128">
            <summary>
            N = b ? 4 : 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_256">
            <summary>
            N = b ? 4 : 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_512">
            <summary>
            N = b ? 4 : 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_Mem_128">
            <summary>
            N = 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_Mem_256">
            <summary>
            N = 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Full_Mem_512">
            <summary>
            N = 64
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Scalar">
            <summary>
            N = W ? 8 : 4
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Scalar_1">
            <summary>
            N = 1
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Scalar_2">
            <summary>
            N = 2
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Scalar_4">
            <summary>
            N = 4
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Scalar_8">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Fixed_4">
            <summary>
            N = 4
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_Fixed_8">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple2">
            <summary>
            N = W ? 16 : 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple4">
            <summary>
            N = W ? 32 : 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple8">
            <summary>
            N = W ? error : 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Tuple1_4X">
            <summary>
            N = 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_Mem_128">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_Mem_256">
            <summary>
            N = 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Half_Mem_512">
            <summary>
            N = 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Quarter_Mem_128">
            <summary>
            N = 4
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Quarter_Mem_256">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Quarter_Mem_512">
            <summary>
            N = 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Eighth_Mem_128">
            <summary>
            N = 2
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Eighth_Mem_256">
            <summary>
            N = 4
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Eighth_Mem_512">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.Mem128">
            <summary>
            N = 16
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.MOVDDUP_128">
            <summary>
            N = 8
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.MOVDDUP_256">
            <summary>
            N = 32
            </summary>
        </member>
        <member name="F:Z0.Asm.TupleType.MOVDDUP_512">
            <summary>
            N = 64
            </summary>
        </member>
        <member name="P:Z0.Asm.Instruction.InstructionCode">
            <summary>
            Encapsulates the result of ToInstructionCodeString() and ToInstructionString()
            </summary>
        </member>
        <member name="P:Z0.Asm.Instruction.FormattedInstruction">
            <summary>
            Captures the formatted view of the instruction
            </summary>
        </member>
        <member name="P:Z0.Asm.Instruction.UsedMemory">
            <summary>
            Retrieves the used memory array as specified by the InstructionInfo type
            </summary>
        </member>
        <member name="P:Z0.Asm.Instruction.UsedRegisters">
            <summary>
            Captures the used register array as specified by the InstructionInfo type
            </summary>
        </member>
        <member name="P:Z0.Asm.Instruction.Access">
            <summary>
            Captures the op access array as specified by the InstructionInfo type
            </summary>
        </member>
        <member name="T:Z0.Asm.InstructionInfo">
            <summary>
            Contains information about an instruction, eg. read/written registers, read/written RFLAGS bits, CPUID feature bit, etc
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Z0.Asm.InstructionInfo.IsProtectedMode" -->
        <member name="P:Z0.Asm.InstructionInfo.IsPrivileged">
            <summary>
            true if this is a privileged instruction
            </summary>
        </member>
        <member name="P:Z0.Asm.InstructionInfo.IsStackInstruction">
            <summary>
            true if this is an instruction that implicitly uses the stack pointer (SP/ESP/RSP), eg. call, push, pop, ret, etc.
            See also <see cref="P:Z0.Asm.Instruction.StackPointerIncrement"/>
            </summary>
        </member>
        <member name="P:Z0.Asm.InstructionInfo.IsSaveRestoreInstruction">
            <summary>
            true if it's an instruction that saves or restores too many registers (eg. fxrstor, xsave, etc).
            <see cref="!:GetUsedRegisters"/> won't return all read/written registers.
            </summary>
        </member>
        <member name="P:Z0.Asm.InstructionInfo.Encoding">
            <summary>
            Instruction encoding, eg. legacy, VEX, EVEX, ...
            </summary>
        </member>
        <member name="P:Z0.Asm.InstructionInfo.CpuidFeatures">
            <summary>
            Gets the CPU or CPUID feature flags
            </summary>
        </member>
        <member name="P:Z0.Asm.InstructionInfo.FlowControl">
            <summary>
            Flow control info
            </summary>
        </member>
        <member name="T:Z0.Asm.MemoryOperand">
            <summary>
            Memory operand
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.SegmentPrefix">
            <summary>
            Segment override or <see cref="F:Z0.Asm.IceRegister.None"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.Base">
            <summary>
            Base register or <see cref="F:Z0.Asm.IceRegister.None"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.Index">
            <summary>
            Index register or <see cref="F:Z0.Asm.IceRegister.None"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.Scale">
            <summary>
            Index register scale (1, 2, 4, or 8)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.Displacement">
            <summary>
            Memory displacement
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.DisplSize">
            <summary>
            0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemoryOperand.IsBroadcast">
            <summary>
            true if it's broadcasted memory (EVEX instructions)
            </summary>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,Z0.Asm.IceRegister,System.Int32,System.Int32,System.Int32,System.Boolean,Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,Z0.Asm.IceRegister,System.Int32,System.Boolean,Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32,System.Int32,System.Boolean,Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32,System.Int32,System.Int32,System.Boolean,Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32,System.Boolean,Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="displacement">Memory displacement</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,Z0.Asm.IceRegister,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,Z0.Asm.IceRegister,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte"/>), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
            <param name="displacement">Memory displacement</param>
        </member>
        <member name="M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.IceRegister)">
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.IceRegister.None"/></param>
        </member>
        <member name="T:Z0.Asm.UsedMemory">
            <summary>
            A memory location used by an instruction
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Formatted">
            <summary>
            Captures the result of the ToString() method at the time of replication
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Segment">
            <summary>
            Effective segment register
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Base">
            <summary>
            The base register, if any
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Index">
            <summary>
            The index register, if any
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Scale">
            <summary>
            Index scale (1, 2, 4 or 8)
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Displacement">
            <summary>
            Displacement
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.MemorySize">
            <summary>
            Size of location
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedMemory.Access">
            <summary>
            Memory access
            </summary>
        </member>
        <member name="T:Z0.Asm.UsedRegister">
            <summary>
            A register used by an instruction
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedRegister.Register">
            <summary>
            Register
            </summary>
        </member>
        <member name="F:Z0.Asm.UsedRegister.Access">
            <summary>
            Register access
            </summary>
        </member>
        <member name="M:Z0.Asm.UsedRegister.#ctor(Z0.Asm.IceRegister,Z0.Asm.OpAccess)">
            <summary>
            Constructor
            </summary>
            <param name="reg">Register</param>
            <param name="access">Register access</param>
        </member>
        <member name="M:Z0.Asm.UsedRegister.ToString">
            <summary>
            ToString()
            </summary>
        </member>
        <member name="T:Z0.Asm.ApiBlockAsm">
            <summary>
            Encapsulates a contiguous instruction sequence along with the captured bits
            </summary>
        </member>
        <member name="F:Z0.Asm.ApiBlockAsm.Encoded">
            <summary>
            Encoded assembly
            </summary>
        </member>
        <member name="F:Z0.Asm.ApiBlockAsm.Decoded">
            <summary>
            The decoded instructions
            </summary>
        </member>
        <member name="F:Z0.Asm.ApiBlockAsm.TermCode">
            <summary>
            The reason capture was terminated
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiBlockAsm.Item(System.Int32)">
            <summary>
            Queries/Manipulates an index-identified instruction
            </summary>
        </member>
        <member name="T:Z0.Asm.ApiHostRoutines">
            <summary>
            Collects sequences of instructions from host-defined members
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.Uri">
            <summary>
            The defining host
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.BaseAddress">
            <summary>
            The base address of the first member, where members are ordered by their individual base addresses
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.Routines">
            <summary>
            The decoded instructions
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.InstructionCount">
            <summary>
            The total instruction count
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.Length">
            <summary>
            The member instruction content length
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiHostRoutines.Item(System.Int32)">
            <summary>
            Indexes into the member instruction content
            </summary>
        </member>
        <member name="T:Z0.Asm.ApiInstruction">
            <summary>
            Describes an instruction within the context of the defining api member
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiInstruction.Size">
            <summary>
            The encoded byte count
            </summary>
        </member>
        <member name="T:Z0.Asm.ApiPartRoutines">
            <summary>
            Collects sequences instructions from part-defined api hosts
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiPartRoutines.Part">
            <summary>
            The defining part
            </summary>
        </member>
        <member name="F:Z0.Asm.ApiPartRoutines.Data">
            <summary>
            The decoded instructions
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiPartRoutines.HostCount">
            <summary>
            The number of host routine sets
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiPartRoutines.RoutineCount">
            <summary>
            The total routine count
            </summary>
        </member>
        <member name="P:Z0.Asm.ApiPartRoutines.InstructionCount">
            <summary>
            The total instruction count
            </summary>
        </member>
        <member name="T:Z0.Asm.ApiRoutineObsolete">
            <summary>
            Specifies the asm routine determined by an api member
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmFxList">
            <summary>
            Defines a contiguous *based* instruction sequence
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmFxSummary">
            <summary>
            Describes an assembly instruction
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmFxSummary.Encoded">
            <summary>
            The encoded bytes
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmFxSummary.Offset">
            <summary>
            The zero-based offset of the function, relative to the base address
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmFxSummary.Formatted">
            <summary>
            The instruction content, suitable for display
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmFxSummary.Spec">
            <summary>
            The instruction string paired with the op code
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmFxSummary.Operands">
            <summary>
            Describes the instruction operands
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmInstructions">
            <summary>
            Defines an *unbased* sequence of instructions
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmMemberRoutine.Member">
            <summary>
            The defining member
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmMemberRoutine.Encoded">
            <summary>
            The x86 encoded content
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmMemberRoutine.Routine">
            <summary>
            The assembly routine
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmMemberRoutine.Asm">
            <summary>
            The formatted assembly instructions
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmOperandInfo">
            <summary>
            Describes an operand in the context of an assembly instruction
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.Index">
            <summary>
            The 0-based operand position
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.Kind">
            <summary>
            Classifies the operand
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.ImmInfo">
            <summary>
            Operand immediate info, if applicable
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.Memory">
            <summary>
            Operand memory info, if applicable
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.Register">
            <summary>
            Operand register info, if applicable
            </summary>
        </member>
        <member name="F:Z0.Asm.AsmOperandInfo.Branch">
            <summary>
            Instruction branching info, if applicable
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmRoutine">
            <summary>
            Describes the assembly encoding of a member api
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.Uri">
            <summary>
            The defining operation uri
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.OpId">
            <summary>
            The function identifier
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.OpSig">
            <summary>
            The source member signature
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.Code">
            <summary>
            The function encoding
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.Instructions">
            <summary>
            The encoded instructions
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.TermCode">
            <summary>
            Specifies the reason for capture termination
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.MetaUri">
            <summary>
            The operation metadata uri
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.BaseAddress">
            <summary>
            The head of the address range
            </summary>
        </member>
        <member name="P:Z0.Asm.AsmRoutine.InstructionCount">
            <summary>
            The number of encoded instructions
            </summary>
        </member>
        <member name="T:Z0.Asm.MemorySize">
            <summary>
            Size of a memory reference
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Unknown">
            <summary>
            Unknown size or the instruction doesn't reference the memory (eg. <c>lea</c>)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt8">
            <summary>
            Memory location contains a <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt16">
            <summary>
            Memory location contains a <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt32">
            <summary>
            Memory location contains a <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt52">
            <summary>
            Memory location contains a 52-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt64">
            <summary>
            Memory location contains a <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt128">
            <summary>
            Memory location contains a uint128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt256">
            <summary>
            Memory location contains a uint256
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.UInt512">
            <summary>
            Memory location contains a uint512
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int8">
            <summary>
            Memory location contains a <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int16">
            <summary>
            Memory location contains a <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int32">
            <summary>
            Memory location contains a <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int64">
            <summary>
            Memory location contains a <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int128">
            <summary>
            Memory location contains a int128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int256">
            <summary>
            Memory location contains a int256
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Int512">
            <summary>
            Memory location contains a int512
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.SegPtr16">
            <summary>
            Memory location contains a seg:ptr pair, <see cref="T:System.UInt16"/> (offset) + <see cref="T:System.UInt16"/> (segment/selector)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.SegPtr32">
            <summary>
            Memory location contains a seg:ptr pair, <see cref="T:System.UInt32"/> (offset) + <see cref="T:System.UInt16"/> (segment/selector)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.SegPtr64">
            <summary>
            Memory location contains a seg:ptr pair, <see cref="T:System.UInt64"/> (offset) + <see cref="T:System.UInt16"/> (segment/selector)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.WordOffset">
            <summary>
            Memory location contains a 16-bit offset (jmp/call word ptr [mem])
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.DwordOffset">
            <summary>
            Memory location contains a 32-bit offset (jmp/call dword ptr [mem])
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.QwordOffset">
            <summary>
            Memory location contains a 64-bit offset (jmp/call qword ptr [mem])
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Bound16_WordWord">
            <summary>
            Memory location contains two <see cref="T:System.UInt16"/>s (16-bit bound)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Bound32_DwordDword">
            <summary>
            Memory location contains two <see cref="T:System.UInt32"/>s (32-bit bound)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Bnd32">
            <summary>
            32-bit bndmov, 2 x uint32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Bnd64">
            <summary>
            64-bit bndmov, 2 x uint64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Fword6">
            <summary>
            Memory location contains a 16-bit limit and a 32-bit address (eg. lgdtw, lgdtd)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Fword10">
            <summary>
            Memory location contains a 16-bit limit and a 64-bit address (eg. lgdtq)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Float16">
            <summary>
            Memory location contains an 16-bit floating point value
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Float32">
            <summary>
            Memory location contains a <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Float64">
            <summary>
            Memory location contains a <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Float80">
            <summary>
            Memory location contains an 80-bit floating point value
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Float128">
            <summary>
            Memory location contains a float128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.BFloat16">
            <summary>
            Memory location contains a bfloat16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.FpuEnv14">
            <summary>
            Memory location contains a 14-byte FPU environment (16-bit fldenv/fstenv)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.FpuEnv28">
            <summary>
            Memory location contains a 28-byte FPU environment (32/64-bit fldenv/fstenv)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.FpuState94">
            <summary>
            Memory location contains a 94-byte FPU environment (16-bit fsave/frstor)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.FpuState108">
            <summary>
            Memory location contains a 108-byte FPU environment (32/64-bit fsave/frstor)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Fxsave_512Byte">
            <summary>
            Memory location contains 512-bytes of fxsave/fxrstor data
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Fxsave64_512Byte">
            <summary>
            Memory location contains 512-bytes of fxsave64/fxrstor64 data
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Xsave">
            <summary>
            32-bit XSAVE area
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Xsave64">
            <summary>
            64-bit XSAVE area
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Bcd">
            <summary>
            Memory location contains a 10-byte bcd value (fbld/fbstp)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed16_UInt8">
            <summary>
            16 bit location: 2 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed16_Int8">
            <summary>
            16 bit location: 2 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed32_UInt8">
            <summary>
            32 bit location: 4 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed32_Int8">
            <summary>
            32 bit location: 4 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed32_UInt16">
            <summary>
            32 bit location: 2 x uint16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed32_Int16">
            <summary>
            32 bit location: 2 x int16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed32_BFloat16">
            <summary>
            32 bit location: 2 x bfloat16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_UInt8">
            <summary>
            64-bit location: 8 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_Int8">
            <summary>
            64-bit location: 8 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_UInt16">
            <summary>
            64-bit location: 4 x uint16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_Int16">
            <summary>
            64-bit location: 4 x int16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_UInt32">
            <summary>
            64-bit location: 2 x uint32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_Int32">
            <summary>
            64-bit location: 2 x int32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_Float16">
            <summary>
            64-bit location: 4 x float16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed64_Float32">
            <summary>
            64-bit location: 2 x float32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_UInt8">
            <summary>
            128 bit location: 16 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Int8">
            <summary>
            128 bit location: 16 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_UInt16">
            <summary>
            128 bit location: 8 x uint16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Int16">
            <summary>
            128 bit location: 8 x int16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_UInt32">
            <summary>
            128 bit location: 4 x uint32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Int32">
            <summary>
            128 bit location: 4 x int32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_UInt52">
            <summary>
            128 bit location: 2 x uint52
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_UInt64">
            <summary>
            128 bit location: 2 x uint64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Int64">
            <summary>
            128 bit location: 2 x int64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Float16">
            <summary>
            128 bit location: 8 x float16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Float32">
            <summary>
            128 bit location: 4 x float32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_Float64">
            <summary>
            128 bit location: 2 x float64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed128_2xBFloat16">
            <summary>
            128 bit location: 4 x (2 x bfloat16)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt8">
            <summary>
            256 bit location: 32 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Int8">
            <summary>
            256 bit location: 32 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt16">
            <summary>
            256 bit location: 16 x uint16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Int16">
            <summary>
            256 bit location: 16 x int16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt32">
            <summary>
            256 bit location: 8 x uint32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Int32">
            <summary>
            256 bit location: 8 x int32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt52">
            <summary>
            256 bit location: 4 x uint52
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt64">
            <summary>
            256 bit location: 4 x uint64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Int64">
            <summary>
            256 bit location: 4 x int64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_UInt128">
            <summary>
            256 bit location: 2 x uint128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Int128">
            <summary>
            256 bit location: 2 x int128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Float16">
            <summary>
            256 bit location: 16 x float16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Float32">
            <summary>
            256 bit location: 8 x float32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Float64">
            <summary>
            256 bit location: 4 x float64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_Float128">
            <summary>
            256 bit location: 2 x float128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed256_2xBFloat16">
            <summary>
            256 bit location: 8 x (2 x bfloat16)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt8">
            <summary>
            512 bit location: 64 x uint8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Int8">
            <summary>
            512 bit location: 64 x int8
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt16">
            <summary>
            512 bit location: 32 x uint16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Int16">
            <summary>
            512 bit location: 32 x int16
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt32">
            <summary>
            512 bit location: 16 x uint32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Int32">
            <summary>
            512 bit location: 16 x int32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt52">
            <summary>
            512 bit location: 8 x uint52
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt64">
            <summary>
            512 bit location: 8 x uint64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Int64">
            <summary>
            512 bit location: 8 x int64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_UInt128">
            <summary>
            256 bit location: 4 x uint128
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Float32">
            <summary>
            512 bit location: 16 x float32
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_Float64">
            <summary>
            512 bit location: 8 x float64
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Packed512_2xBFloat16">
            <summary>
            512 bit location: 16 x (2 x bfloat16)
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast64_UInt32">
            <summary>
            Broadcast uint32 to 64 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast64_Int32">
            <summary>
            Broadcast int32 to 64 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast64_Float32">
            <summary>
            Broadcast float32 to 64 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_UInt32">
            <summary>
            Broadcast uint32 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_Int32">
            <summary>
            Broadcast int32 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_UInt52">
            <summary>
            Broadcast uint52 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_UInt64">
            <summary>
            Broadcast uint64 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_Int64">
            <summary>
            Broadcast int64 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_Float32">
            <summary>
            Broadcast float32 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_Float64">
            <summary>
            Broadcast float64 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_UInt32">
            <summary>
            Broadcast uint32 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_Int32">
            <summary>
            Broadcast int32 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_UInt52">
            <summary>
            Broadcast uint52 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_UInt64">
            <summary>
            Broadcast uint64 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_Int64">
            <summary>
            Broadcast int64 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_Float32">
            <summary>
            Broadcast float32 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_Float64">
            <summary>
            Broadcast float64 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_UInt32">
            <summary>
            Broadcast uint32 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_Int32">
            <summary>
            Broadcast int32 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_UInt52">
            <summary>
            Broadcast uint52 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_UInt64">
            <summary>
            Broadcast uint64 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_Int64">
            <summary>
            Broadcast int64 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_Float32">
            <summary>
            Broadcast float32 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_Float64">
            <summary>
            Broadcast float64 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_2xInt16">
            <summary>
            Broadcast 2 x int16 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_2xInt16">
            <summary>
            Broadcast 2 x int16 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_2xInt16">
            <summary>
            Broadcast 2 x int16 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_2xUInt32">
            <summary>
            Broadcast 2 x uint32 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_2xUInt32">
            <summary>
            Broadcast 2 x uint32 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_2xUInt32">
            <summary>
            Broadcast 2 x uint32 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_2xInt32">
            <summary>
            Broadcast 2 x int32 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_2xInt32">
            <summary>
            Broadcast 2 x int32 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_2xInt32">
            <summary>
            Broadcast 2 x int32 to 512 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast128_2xBFloat16">
            <summary>
            Broadcast 2 x bfloat16 to 128 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast256_2xBFloat16">
            <summary>
            Broadcast 2 x bfloat16 to 256 bits
            </summary>
        </member>
        <member name="F:Z0.Asm.MemorySize.Broadcast512_2xBFloat16">
            <summary>
            Broadcast 2 x bfloat16 to 512 bits
            </summary>
        </member>
        <member name="T:Z0.Asm.AsmMnemonicTrigger">
            <summary>
            Fires when an instruction mnemonic matches a specified mnemonic
            </summary>
        </member>
        <member name="T:Z0.ApiDataTypeRoutine">
            <summary>
            Describes a <see cref='T:Z0.ApiDataType'/> member operation
            </summary>
        </member>
        <member name="F:Z0.ApiDataTypeRoutine.DataType">
            <summary>
            The defining type
            </summary>
        </member>
        <member name="F:Z0.ApiDataTypeRoutine.Member">
            <summary>
            The defining method
            </summary>
        </member>
        <member name="F:Z0.ApiDataTypeRoutine.Routine">
            <summary>
            The asm content derived from the defining method
            </summary>
        </member>
        <member name="T:Z0.MemInfo">
            <summary>
            Describes a block of memory the context of an asm instruction operand
            </summary>
        </member>
        <member name="F:Z0.FarCallCounts.TargetsFar">
            <summary>
            The distinct count of far-call target addresses
            </summary>
        </member>
        <member name="F:Z0.FarCallCounts.HostedCount">
            <summary>
            The distinct count of host-defined addresses
            </summary>
        </member>
        <member name="F:Z0.FarCallCounts.HostedReceivers">
            <summary>
            The distinct count of host-defined addresses that are targets of a far-call
            </summary>
        </member>
        <member name="F:Z0.FarCallCounts.UnhostedReceivers">
            <summary>
            The distinct count of far-call target addresses that are not provided by a howt
            </summary>
        </member>
    </members>
</doc>
