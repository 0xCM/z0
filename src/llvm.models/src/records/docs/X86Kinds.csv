| Type         | Identifier     | Name           | Description                                                                                                                                                                                                                                                               |
| FormKind     | Pseudo         | Pseudo         | No encoding/disassembling information is present. These should be removed/replaced with other instructions before we reach the encoding phase of codegen.RawFrm         - Instruction has no modrm byte. Operands are fixed registers. There may be an immediate present. |
| FormKind     | RawFrm         | RawFrm         | This form is for instructions that don't have any operands, so they are just a fixed opcode value, like 'leave'.
| FormKind     | AddRegFrm      | AddRegFrm      | Instruction encodes a register in bits 2:0 of the opcode. No modrm byte. Opcode should be a multiple of 8 for such an instruction.                                                                                                                                        |
| FormKind     | RawFrmMemOffs  | RawFrmMemOffs  | Instruction encodes a fixed constant address in the instruction without modrm byte. Basically opcodes 0xA0-0xA3                                                                                                                                                           |
| FormKind     | RawFrmSrc      | RawFrmSrc      | Instruction uses SI/ESI/RSI as a source memory address. LODS and OUTS.                                                                                                                                                                                                    |
| FormKind     | RawFrmDst      | RawFrmDst      | Instruction uses DI/EDI/RDI as a destinatino memory address. Input in AL/AX/EAX/RAX for SCAS/STOS. Or DX for INS.                                                                                                                                                         |
| FormKind     | RawFrmDstSrc   | RawFrmDstSrc   | Instruction uses SI/ESI/RSI as a source memory address and DI/EDI/RDI as a destination memory address. MOVS and CMPS instructions.                                                                                                                                        |
| FormKind     | RawFrmImm8     | RawFrmImm8     | Rare instruction that has two immediates. The first is 8-bits the second one is controlled by ImmT field.                                                                                                                                                                 |
| FormKind     | RawFrmImm16    | RawFrmImm16    | Rare instruction that has two immediates. The first is 16-bits the second one is controlled by ImmT field.                                                                                                                                                                |
| FormKind     | MRMDestMem     | MRMDestMem     | modrm.mod!=0x3, modrm[2:0] and optional sib byte and displacement encode destination memory address. vex.vvvv is used encodes the next register, modrm[5:3] encodes destination register.                                                                                 |
| FormKind     | MRMSrcMem      | MRMSrcMem      | modrm.mod!=0x3, modrm[5:3] encodes destination register. if vex.vvvv is used it encodes the next register, modrm[2:0] encodes second or third source register                                                                                                             |
| FormKind     | MRMSrcMem4VOp3 | MRMSrcMem4VOp3 | like MRMSrcMem, but vex.vvvv and memory operand are swapped. Rarely used.                                                                                                                                                                                                 |
| FormKind     | MRMSrcMemOp4   | MRMSrcMemOp4   | like MRMSrcMem, but a second source register is encoded in bits [7:4] of an immediate. Memory is the 4th operand. Rarely used.                                                                                                                                            |
| FormKind     | MRMXm          | MRMXm          | modrm.mod==0x3, with a value of 0 in modrm[5:3]. modrm[2:0] and optional sib byte and displacement encode memory address. This is almost the same as MRM0m, but the disassembler ignores modrm[5:3]                                                                       |
| FormKind     | MRM0m_MRM7m    | MRM0m-MRM7m    | modrm.mod!=0x3, with a fixed value(0-7) in modrm[5:3]. modrm[2:0] and optional sib byte and displacement encode memory address.                                                                                                                                           |
| FormKind     | MRMDestReg     | MRMDestReg     | modrm.mod==0x3, modrm[2:0] encodes destination register. if vex.vvvv is used encodes the next register, mrm[5:3] encodes the second or third register.                                                                                                                    |
| FormKind     | MRMSrcReg      | MRMSrcReg      | modrm.mod==0x3, modrm[5:3] encodes destination register. if vex.vvvv is used encodes the next register, mrm[2:0] encodes the second or third register.                                                                                                                    |
| FormKind     | MRMSrcReg4VOp3 | MRMSrcReg4VOp3 | like MRMSrcReg, but vex.vvvv and memory operand are swapped. Rarely used                                                                                                                                                                                                  |
| FormKind     | MRMSrcRegOp4   | MRMSrcRegOp4   | like MRMSrcReg, but a second source register is encoded in bits [7:4] of an immediate. modrm[2:0] encodes the 4th operand. Rarely used                                                                                                                                    |
| FormKind     | MRMXr          | MRMXr          | modrm.mod==0x3, with a value of 0 in modrm[5:3]. modrm[2:0] encodes a register. This is almost the same as MRM0r, but the disassembler ignores modrm[5:3]                                                                                                                 |
| FormKind     | MRM0r_MRM7r    | MRM0r-MRM7r    | modrm.mod==0x3, with a fixed value(0-7) in modrm[5:3]. modrm[2:0] encode a register                                                                                                                                                                                       |
| FormKind     | MRMC0_MRMFF    | MRMC0-MRM_FF   | Instruction encodes with a fixed value in the range 0xC0-0xFF in the modrm byte. e.g. VMCALL, MONITOR. No known instructions use a fixed value in 0x00-0xBF range.                                                                                                        |
| ImmType      | None           | NoImm          |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm8           | Imm8           |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm8PCRel      | Imm8PCRel      |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm8Reg        | Imm8Reg        | 8-bits with a register encoded in bits 7:4                                                                                                                                                                                                                                |
| ImmType      | Imm16          | Imm16          |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm16PCRel     | Imm16PCRel     |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm32          | Imm32          | 32-bit immediate                                                                                                                                                                                                                                                          |
| ImmType      | Imm32PCRel     | Imm32PCRel     |                                                                                                                                                                                                                                                                           |
| ImmType      | Imm32S         | Imm32S         | 32-bit immediate that is sign extended to 64-bits.                                                                                                                                                                                                                        |
| ImmType      | Imm64          | Imm64          |                                                                                                                                                                                                                                                                           |
| OpsizeKind   | OpSizeFixed    | OpSizeFixed    | Operand size isn't mode dependent                                                                                                                                                                                                                                         |
| OpsizeKind   | OpSize16       | OpSize16       | 0x66 prefix required in 32-bit mode                                                                                                                                                                                                                                       |
| OpsizeKind   | OpSize32       | OpSize32       | 0x66 prefix required in 16-bit mode                                                                                                                                                                                                                                       |
| OpsizeKind   | OpSizeIgnored  | OpSizeIgnored  | 0x66 prefix should be ignored if present.                                                                                                                                                                                                                                 |
| AdsizeKind   | AdSizeX        | AdSizeX        | Address size prefix determined from memory operand registers encoded in modrm byte                                                                                                                                                                                        |
| AdsizeKind   | AdSize16       | AdSize16       | Need a 0x67 prefix in 32-bit mode                                                                                                                                                                                                                                         |
| AdsizeKind   | AdSize32       | AdSize32       | Need a 0x67 prefix in 16-bit mode or 64-bit mode                                                                                                                                                                                                                          |
| AdsizeKind   | AdSize64       | AdSize64       | Marks the 64-bit version of AdSize16/32 instructions.                                                                                                                                                                                                                     |
| OpPrefixKind | None           | NoPrfx         | No prefix                                                                                                                                                                                                                                                                 |
| OpPrefixKind | PS             | PS             | Doesn't encode with a prefix, but 0x66/0xf2/0xf3 prefix are different instructions to the disassembler. Sets VEX.PP=0 for VEX encoding.                                                                                                                                   |
| OpPrefixKind | X66            | PD             | Always uses a 0x66 prefix. VEX.PP=1 for VEX encoding.                                                                                                                                                                                                                     |
| OpPrefixKind | XF3            | XS             | Always uses a 0xF3 prefix. VEX.PP=2 for VEX encoding.                                                                                                                                                                                                                     |
| OpPrefixKind | XF2            | XD             | Always uses a 0xF2 prefix. VEX.PP=3 for VEX encoding.                                                                                                                                                                                                                     |
| OpMapKind    | OB             | OB             | One byte opcode. Not used by any VEX encoded instructions.                                                                                                                                                                                                                |
| OpMapKind    | TB             | TB             | Two byte opcode, first byte is 0x0F. VEX.mmmmm=0x1 for VEX encoding.                                                                                                                                                                                                      |
| OpMapKind    | T8             | T8             | Three byte opcode, first bytes are 0x0F 0x38. VEX.mmmmm=0x2 for VEX encoding.                                                                                                                                                                                             |
| OpMapKind    | TA             | TA             | Three byte opcode, first bytes are 0x0F 0x3A. VEX.mmmmm=0x3 for VEX encoding.                                                                                                                                                                                             |
| OpMapKind    | XOP8           | XOP8           | Used by AMD xop encoding. XOP.mmmmm=0x8                                                                                                                                                                                                                                   |
| OpMapKind    | XOP9           | XOP9           | Used by AMD xop encoding. XOP.mmmmm=0x9                                                                                                                                                                                                                                   |
| OpMapKind    | XOPA           | XOPA           | Used by AMD xop encoding. XOP.mmmmm=0xA                                                                                                                                                                                                                                   |
| OpMapKind    | ThreeDNow      | ThreeDNow      | 3DNow opcode map. First two bytes are 0x0F 0x0F. Opcode placed at the end of the instruction after modrm.                                                                                                                                                                 |
| EncodingKind | Normal         | EncNormal      | Oldest encoding system using opcodes and various prefix bytes.                                                                                                                                                                                                            |
| EncodingKind | Vex            | EncVEX         | VEX encoding introduced with AVX. First byte is 0xC4 or 0xC5. Various values encoded in bit fields of next two or three bytes before opcode and modrm.                                                                                                                    |
| EncodingKind | Xop            | EncXOP         | AMD XOP encoding. Similar to VEX. First byte is 0x8F.                                                                                                                                                                                                                     |
| EncodingKind | Evex           | EncEVEX        | EVEX encoding instroduced with AVX512. First byte is 0x62. Various values encoded in bit fields of next 3 bytes before before opcode and modrm.                                                                                                                           |
