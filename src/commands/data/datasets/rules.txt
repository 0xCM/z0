xed-addressing-modes-new.txt/MODRM()::
--------------------------------------------------------------------------------------------------------
mode64 eamode64   MODRM64alt32() MEMDISP() |
mode64 eamode32   MODRM64alt32() MEMDISP() |
mode32 eamode32   MODRM32()      MEMDISP() |
mode32 eamode16   MODRM16()      MEMDISP() |
mode16 eamode32   MODRM32()      MEMDISP() |
mode16 eamode16   MODRM16()      MEMDISP() |

xed-addressing-modes-new.txt/MODRM64alt32()::
--------------------------------------------------------------------------------------------------------
REXB=0    MOD=0b00 RM=0b000    |  BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b000    |  BASE0=Ar8()  SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b001    |  BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b001    |  BASE0=Ar9()  SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b010    |  BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b010    |  BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b011    |  BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b011    |  BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b100   SIB()  |
REXB=1    MOD=0b00 RM=0b100   SIB()  |
REXB=0    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG() enc
REXB=1    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b110    |  BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b110    |  BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=0    MOD=0b00 RM=0b111    |  BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1    MOD=0b00 RM=0b111    |  BASE0=Ar15() SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=Ar8()  SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=Ar9()  SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8
REXB=1    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8
REXB=0    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=ArBP() SEG0=FINAL_SSEG()
REXB=1    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=Ar13() SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=0    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=Ar15() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=Ar8() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=Ar9() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32
REXB=1     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32
REXB=0     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=ArBP() SEG0=FINAL_SSEG()
REXB=1     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=Ar13() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=0     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=Ar15() SEG0=FINAL_DSEG()

xed-addressing-modes-new.txt/MODRM32()::
--------------------------------------------------------------------------------------------------------
MOD=0b00 RM=0b000    |  BASE0=XED_REG_EAX SEG0=FINAL_DSEG()
MOD=0b00 RM=0b001    |  BASE0=XED_REG_ECX SEG0=FINAL_DSEG()
MOD=0b00 RM=0b010    |  BASE0=XED_REG_EDX SEG0=FINAL_DSEG()
MOD=0b00 RM=0b011    |  BASE0=XED_REG_EBX SEG0=FINAL_DSEG()
MOD=0b00 RM=0b100   SIB()  |
MOD=0b00 RM=0b101   | NEED_MEMDISP=32    SEG0=FINAL_DSEG()
MOD=0b00 RM=0b110    |  BASE0=XED_REG_ESI SEG0=FINAL_DSEG()
MOD=0b00 RM=0b111    |  BASE0=XED_REG_EDI SEG0=FINAL_DSEG()
MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=XED_REG_EAX SEG0=FINAL_DSEG()
MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=XED_REG_ECX SEG0=FINAL_DSEG()
MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=XED_REG_EDX SEG0=FINAL_DSEG()
MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=XED_REG_EBX SEG0=FINAL_DSEG()
MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8
MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=XED_REG_EBP SEG0=FINAL_SSEG()
MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=XED_REG_ESI SEG0=FINAL_DSEG()
MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=XED_REG_EDI SEG0=FINAL_DSEG()
MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=XED_REG_EAX SEG0=FINAL_DSEG()
MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=XED_REG_ECX SEG0=FINAL_DSEG()
MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=XED_REG_EDX SEG0=FINAL_DSEG()
MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=XED_REG_EBX SEG0=FINAL_DSEG()
MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32
MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=XED_REG_EBP SEG0=FINAL_SSEG()
MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=XED_REG_ESI SEG0=FINAL_DSEG()
MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=XED_REG_EDI SEG0=FINAL_DSEG()

xed-addressing-modes-new.txt/MODRM16()::
--------------------------------------------------------------------------------------------------------
MOD=0b00 RM=0b000    |  BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b00 RM=0b001    |  BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b00 RM=0b010    |  BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b00 RM=0b011    |  BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b00 RM=0b100    |  BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b00 RM=0b101    |  BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b00 RM=0b110    | NEED_MEMDISP=16   BASE0=XED_REG_INVALID  SEG0=FINAL_DSEG()  INDEX=XED_REG_INVALID
MOD=0b00 RM=0b111    |  BASE0=XED_REG_BX SEG0=FINAL_DSEG()  INDEX=XED_REG_INVALID
MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b01 RM=0b100   | NEED_MEMDISP=8   BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_INVALID
MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b10 RM=0b000   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b10 RM=0b001   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b10 RM=0b010   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1
MOD=0b10 RM=0b011   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1
MOD=0b10 RM=0b100   | NEED_MEMDISP=16   BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b10 RM=0b101   | NEED_MEMDISP=16   BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID
MOD=0b10 RM=0b110   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_INVALID
MOD=0b10 RM=0b111   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID

xed-addressing-modes-new.txt/SIB()::
--------------------------------------------------------------------------------------------------------
REXX=0      SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID  SCALE=1  enc
REXX=1      SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=1
REXX=0      SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=1
REXX=1      SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=1
REXX=0      SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID  SCALE=1
REXX=1      SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=2
REXX=0      SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=2
REXX=1      SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=2
REXX=0      SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID  SCALE=1
REXX=1      SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=4
REXX=0      SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=4
REXX=1      SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=4
REXX=0      SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID  SCALE=1
REXX=1      SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=8
REXX=0      SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=8
REXX=1      SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=8

xed-addressing-modes-new.txt/SIB_BASE0()::
--------------------------------------------------------------------------------------------------------
REXB=0    SIBBASE=0b000     |   BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=1    SIBBASE=0b000     |   BASE0=Ar8()  SEG0=FINAL_DSEG()
REXB=0    SIBBASE=0b001     |   BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=1    SIBBASE=0b001     |   BASE0=Ar9()  SEG0=FINAL_DSEG()
REXB=0    SIBBASE=0b010     |   BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=1    SIBBASE=0b010     |   BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=0    SIBBASE=0b011     |   BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=1    SIBBASE=0b011     |   BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=0    SIBBASE=0b100     |   BASE0=ArSP() SEG0=FINAL_SSEG()
REXB=1    SIBBASE=0b100     |   BASE0=Ar12() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG() enc
REXB=0 SIBBASE=0b101  MOD=0b01      | BASE0=ArBP() SEG0=FINAL_SSEG() DISP_WIDTH=8
REXB=0 SIBBASE=0b101  MOD=0b10      | BASE0=ArBP() SEG0=FINAL_SSEG() DISP_WIDTH=32
REXB=1 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0b101  MOD=0b01      | BASE0=Ar13() SEG0=FINAL_DSEG() DISP_WIDTH=8
REXB=1 SIBBASE=0b101  MOD=0b10      | BASE0=Ar13() SEG0=FINAL_DSEG() DISP_WIDTH=32
REXB=0 SIBBASE=0b110     |   BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0b110     |   BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=0b111     |   BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0b111     |   BASE0=Ar15() SEG0=FINAL_DSEG()

xed-addressing-modes-new.txt/OVERRIDE_SEG0()::
--------------------------------------------------------------------------------------------------------
mode16 |
mode32 |
mode64 |

xed-addressing-modes-new.txt/OVERRIDE_SEG1()::
--------------------------------------------------------------------------------------------------------
mode16 |
mode32 |
mode64 |

xed-eASZ.txt/ASZ_NONTERM()::
--------------------------------------------------------------------------------------------------------
mode16 no67_prefix  | eamode16
mode16   67_prefix  | eamode32
mode32 no67_prefix  | eamode32
mode32   67_prefix  | eamode16
mode64 no67_prefix  | eamode64
mode64   67_prefix  | eamode32

xed-eOSZ.txt/OSZ_NONTERM()::
--------------------------------------------------------------------------------------------------------
mode16 no66_prefix | EOSZ=1
mode16   66_prefix | EOSZ=2
mode32   66_prefix | EOSZ=1
mode32 no66_prefix | EOSZ=2
mode64   66_prefix REXW=0 | EOSZ=1
mode64 no66_prefix REXW=0 | EOSZ=2
mode64   66_prefix REXW=1 | EOSZ=3
mode64 no66_prefix REXW=1 | EOSZ=3

xed-eOSZ.txt/DF64()::
--------------------------------------------------------------------------------------------------------
mode16                     |
mode32                     |
mode64   66_prefix REXW=0  | EOSZ=1 df64
mode64 no66_prefix REXW=0  | EOSZ=3 df64
mode64   66_prefix REXW=1  | EOSZ=3 df64
mode64 no66_prefix REXW=1  | EOSZ=3 df64

xed-eOSZ.txt/REFINING66()::
--------------------------------------------------------------------------------------------------------
mode16        | EOSZ=1 no66_prefix
mode32        | EOSZ=2 no66_prefix
mode64 REXW=0 | EOSZ=2 no66_prefix
mode64 REXW=1 | EOSZ=3 no66_prefix

xed-eOSZ.txt/IGNORE66()::
--------------------------------------------------------------------------------------------------------
mode16         | EOSZ=1 no66_prefix
mode32         | EOSZ=2 no66_prefix
mode64 REXW=0  | EOSZ=2 no66_prefix
mode64 REXW=1  | EOSZ=3 no66_prefix

xed-eOSZ.txt/IMMUNE66()::
--------------------------------------------------------------------------------------------------------
mode16          | EOSZ=2 no66_prefix
mode32          | EOSZ=2 no66_prefix
mode64 REXW=0   | EOSZ=2 no66_prefix
mode64 REXW=1   | EOSZ=3 no66_prefix

xed-eOSZ.txt/CR_WIDTH()::
--------------------------------------------------------------------------------------------------------
mode16  | EOSZ=2 DF32=1 no66_prefix
mode32  | EOSZ=2 DF32=1 no66_prefix
mode64  | EOSZ=3 DF64=1 no66_prefix

xed-eOSZ.txt/IMMUNE66_LOOP64()::
--------------------------------------------------------------------------------------------------------
mode16  |
mode32  |
mode64  | EOSZ=3 no66_prefix

xed-eOSZ.txt/IMMUNE_REXW()::
--------------------------------------------------------------------------------------------------------
mode16                   |
mode32                   |
mode64 no66_prefix       | EOSZ=2
mode64 66_prefix REXW=1  | EOSZ=2
mode64 66_prefix REXW=0  | EOSZ=1

xed-eOSZ.txt/FORCE64()::
--------------------------------------------------------------------------------------------------------
mode64    | EOSZ=3 no66_prefix
otherwise |

xed-gpr8-dec-reg-table.txt/GPR8_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_AL
REXR=0 REG=0x1  | OUTREG=XED_REG_CL
REXR=0 REG=0x2  | OUTREG=XED_REG_DL
REXR=0 REG=0x3  | OUTREG=XED_REG_BL
REXR=0 REG=0x4  REX=0   | OUTREG=XED_REG_AH
REXR=0 REG=0x5  REX=0   | OUTREG=XED_REG_CH
REXR=0 REG=0x6  REX=0   | OUTREG=XED_REG_DH
REXR=0 REG=0x7  REX=0   | OUTREG=XED_REG_BH
REXR=0 REG=0x4  REX=1   | OUTREG=XED_REG_SPL
REXR=0 REG=0x5  REX=1   | OUTREG=XED_REG_BPL
REXR=0 REG=0x6  REX=1   | OUTREG=XED_REG_SIL
REXR=0 REG=0x7  REX=1   | OUTREG=XED_REG_DIL
REXR=1 REG=0x0  | OUTREG=XED_REG_R8B
REXR=1 REG=0x1  | OUTREG=XED_REG_R9B
REXR=1 REG=0x2  | OUTREG=XED_REG_R10B
REXR=1 REG=0x3  | OUTREG=XED_REG_R11B
REXR=1 REG=0x4  | OUTREG=XED_REG_R12B
REXR=1 REG=0x5  | OUTREG=XED_REG_R13B
REXR=1 REG=0x6  | OUTREG=XED_REG_R14B
REXR=1 REG=0x7  | OUTREG=XED_REG_R15B

xed-gpr8-dec-reg-table.txt/GPR8_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_AL
REXB=0 RM=0x1  | OUTREG=XED_REG_CL
REXB=0 RM=0x2  | OUTREG=XED_REG_DL
REXB=0 RM=0x3  | OUTREG=XED_REG_BL
REXB=0 RM=0x4  REX=0  | OUTREG=XED_REG_AH
REXB=0 RM=0x5  REX=0  | OUTREG=XED_REG_CH
REXB=0 RM=0x6  REX=0  | OUTREG=XED_REG_DH
REXB=0 RM=0x7  REX=0  | OUTREG=XED_REG_BH
REXB=0 RM=0x4  REX=1  | OUTREG=XED_REG_SPL
REXB=0 RM=0x5  REX=1  | OUTREG=XED_REG_BPL
REXB=0 RM=0x6  REX=1  | OUTREG=XED_REG_SIL
REXB=0 RM=0x7  REX=1  | OUTREG=XED_REG_DIL
REXB=1 RM=0x0  | OUTREG=XED_REG_R8B
REXB=1 RM=0x1  | OUTREG=XED_REG_R9B
REXB=1 RM=0x2  | OUTREG=XED_REG_R10B
REXB=1 RM=0x3  | OUTREG=XED_REG_R11B
REXB=1 RM=0x4  | OUTREG=XED_REG_R12B
REXB=1 RM=0x5  | OUTREG=XED_REG_R13B
REXB=1 RM=0x6  | OUTREG=XED_REG_R14B
REXB=1 RM=0x7  | OUTREG=XED_REG_R15B

xed-gpr8-dec-reg-table.txt/GPR8_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 SRM=0x0  | OUTREG=XED_REG_AL
REXB=0 SRM=0x1  | OUTREG=XED_REG_CL
REXB=0 SRM=0x2  | OUTREG=XED_REG_DL
REXB=0 SRM=0x3  | OUTREG=XED_REG_BL
REXB=0 SRM=0x4  REX=0  | OUTREG=XED_REG_AH
REXB=0 SRM=0x5  REX=0  | OUTREG=XED_REG_CH
REXB=0 SRM=0x6  REX=0  | OUTREG=XED_REG_DH
REXB=0 SRM=0x7  REX=0  | OUTREG=XED_REG_BH
REXB=0 SRM=0x4  REX=1  | OUTREG=XED_REG_SPL
REXB=0 SRM=0x5  REX=1  | OUTREG=XED_REG_BPL
REXB=0 SRM=0x6  REX=1  | OUTREG=XED_REG_SIL
REXB=0 SRM=0x7  REX=1  | OUTREG=XED_REG_DIL
REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B
REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B
REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B
REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B
REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B
REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B
REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B
REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B

xed-gpr8-enc-reg-table.txt/GPR8_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_AL -> REG=0x0
OUTREG=XED_REG_CL -> REG=0x1
OUTREG=XED_REG_DL -> REG=0x2
OUTREG=XED_REG_BL -> REG=0x3
OUTREG=XED_REG_AH -> REG=0x4  NOREX=1
OUTREG=XED_REG_CH -> REG=0x5  NOREX=1
OUTREG=XED_REG_DH -> REG=0x6  NOREX=1
OUTREG=XED_REG_BH -> REG=0x7  NOREX=1
OUTREG=XED_REG_SPL ->  REG=0x4  NEEDREX=1
OUTREG=XED_REG_BPL ->  REG=0x5  NEEDREX=1
OUTREG=XED_REG_SIL ->  REG=0x6  NEEDREX=1
OUTREG=XED_REG_DIL ->  REG=0x7  NEEDREX=1
OUTREG=XED_REG_R8B -> REXR=1 REG=0x0
OUTREG=XED_REG_R9B -> REXR=1 REG=0x1
OUTREG=XED_REG_R10B -> REXR=1 REG=0x2
OUTREG=XED_REG_R11B -> REXR=1 REG=0x3
OUTREG=XED_REG_R12B -> REXR=1 REG=0x4
OUTREG=XED_REG_R13B -> REXR=1 REG=0x5
OUTREG=XED_REG_R14B -> REXR=1 REG=0x6
OUTREG=XED_REG_R15B -> REXR=1 REG=0x7

xed-gpr8-enc-reg-table.txt/GPR8_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_AL -> RM=0x0
OUTREG=XED_REG_CL -> RM=0x1
OUTREG=XED_REG_DL -> RM=0x2
OUTREG=XED_REG_BL -> RM=0x3
OUTREG=XED_REG_AH -> RM=0x4  NOREX=1
OUTREG=XED_REG_CH -> RM=0x5  NOREX=1
OUTREG=XED_REG_DH -> RM=0x6  NOREX=1
OUTREG=XED_REG_BH -> RM=0x7  NOREX=1
OUTREG=XED_REG_SPL -> RM=0x4  NEEDREX=1
OUTREG=XED_REG_BPL -> RM=0x5  NEEDREX=1
OUTREG=XED_REG_SIL -> RM=0x6  NEEDREX=1
OUTREG=XED_REG_DIL -> RM=0x7  NEEDREX=1
OUTREG=XED_REG_R8B -> REXB=1 RM=0x0
OUTREG=XED_REG_R9B -> REXB=1 RM=0x1
OUTREG=XED_REG_R10B -> REXB=1 RM=0x2
OUTREG=XED_REG_R11B -> REXB=1 RM=0x3
OUTREG=XED_REG_R12B -> REXB=1 RM=0x4
OUTREG=XED_REG_R13B -> REXB=1 RM=0x5
OUTREG=XED_REG_R14B -> REXB=1 RM=0x6
OUTREG=XED_REG_R15B -> REXB=1 RM=0x7

xed-gpr8-enc-reg-table.txt/GPR8_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_AL -> SRM=0x0
OUTREG=XED_REG_CL -> SRM=0x1
OUTREG=XED_REG_DL -> SRM=0x2
OUTREG=XED_REG_BL -> SRM=0x3
OUTREG=XED_REG_AH -> SRM=0x4  NOREX=1
OUTREG=XED_REG_CH -> SRM=0x5  NOREX=1
OUTREG=XED_REG_DH -> SRM=0x6  NOREX=1
OUTREG=XED_REG_BH -> SRM=0x7  NOREX=1
OUTREG=XED_REG_SPL -> SRM=0x4  NEEDREX=1
OUTREG=XED_REG_BPL -> SRM=0x5  NEEDREX=1
OUTREG=XED_REG_SIL -> SRM=0x6  NEEDREX=1
OUTREG=XED_REG_DIL -> SRM=0x7  NEEDREX=1
OUTREG=XED_REG_R8B -> REXB=1 SRM=0x0
OUTREG=XED_REG_R9B -> REXB=1 SRM=0x1
OUTREG=XED_REG_R10B -> REXB=1 SRM=0x2
OUTREG=XED_REG_R11B -> REXB=1 SRM=0x3
OUTREG=XED_REG_R12B -> REXB=1 SRM=0x4
OUTREG=XED_REG_R13B -> REXB=1 SRM=0x5
OUTREG=XED_REG_R14B -> REXB=1 SRM=0x6
OUTREG=XED_REG_R15B -> REXB=1 SRM=0x7

xed-immediates.txt/ONE()::
--------------------------------------------------------------------------------------------------------
mode16  | IMM_WIDTH=8 UIMM0=1
mode32  | IMM_WIDTH=8 UIMM0=1
mode64  | IMM_WIDTH=8 UIMM0=1

xed-immediates.txt/UIMMv()::
--------------------------------------------------------------------------------------------------------
EOSZ=1 UIMM0[i/16] | IMM_WIDTH=16
EOSZ=2 UIMM0[i/32] | IMM_WIDTH=32
EOSZ=3 UIMM0[i/64] | IMM_WIDTH=64

xed-immediates.txt/SIMMz()::
--------------------------------------------------------------------------------------------------------
EOSZ=1 UIMM0[i/16] | IMM_WIDTH=16 IMM0SIGNED=1
EOSZ=2 UIMM0[i/32] | IMM_WIDTH=32 IMM0SIGNED=1
EOSZ=3 UIMM0[i/32] | IMM_WIDTH=32 IMM0SIGNED=1

xed-immediates.txt/SIMM8()::
--------------------------------------------------------------------------------------------------------
UIMM0[i/8] | IMM_WIDTH=8 IMM0SIGNED=1

xed-immediates.txt/UIMM8()::
--------------------------------------------------------------------------------------------------------
UIMM0[i/8] | IMM_WIDTH=8

xed-immediates.txt/UIMM8_1()::
--------------------------------------------------------------------------------------------------------
UIMM1[i/8] | true

xed-immediates.txt/UIMM16()::
--------------------------------------------------------------------------------------------------------
UIMM0[i/16] | IMM_WIDTH=16

xed-immediates.txt/UIMM32()::
--------------------------------------------------------------------------------------------------------
UIMM0[i/32]  | IMM_WIDTH=32

xed-immediates.txt/BRDISP8()::
--------------------------------------------------------------------------------------------------------
DISP[d/8]  |BRDISP_WIDTH=8

xed-immediates.txt/BRDISP32()::
--------------------------------------------------------------------------------------------------------
DISP[d/32] |  BRDISP_WIDTH=32

xed-immediates.txt/BRDISPz()::
--------------------------------------------------------------------------------------------------------
EOSZ=1 DISP[d/16]  | BRDISP_WIDTH=16
EOSZ=2 DISP[d/32]  | BRDISP_WIDTH=32
EOSZ=3 DISP[d/32]  | BRDISP_WIDTH=32

xed-immediates.txt/MEMDISPv()::
--------------------------------------------------------------------------------------------------------
EASZ=1 DISP[a/16]  | DISP_WIDTH=16
EASZ=2 DISP[a/32]  | DISP_WIDTH=32
EASZ=3 DISP[a/64]  | DISP_WIDTH=64

xed-immediates.txt/MEMDISP32()::
--------------------------------------------------------------------------------------------------------
DISP[a/32] | DISP_WIDTH=32

xed-immediates.txt/MEMDISP16()::
--------------------------------------------------------------------------------------------------------
DISP[a/16] | DISP_WIDTH=16

xed-immediates.txt/MEMDISP8()::
--------------------------------------------------------------------------------------------------------
DISP[a/8]  | DISP_WIDTH=8

xed-immediates.txt/MEMDISP()::
--------------------------------------------------------------------------------------------------------
NEED_MEMDISP=0               | DISP_WIDTH=0
NEED_MEMDISP=8   DISP[a/8]   | DISP_WIDTH=8
NEED_MEMDISP=16  DISP[a/16]  | DISP_WIDTH=16
NEED_MEMDISP=32  DISP[a/32]  | DISP_WIDTH=32

xed-modrm-encode.txt/SEGMENT_DEFAULT_ENCODE()::
--------------------------------------------------------------------------------------------------------
BASE0=rIPa() -> nothing # no segment for RIP/EIP
BASE0=ArSP() -> default_ss # default to SS
BASE0=ArBP() -> default_ss # default to SS
BASE0=@      -> default_ds # default to DS -- baseless
BASE0=ArAX() -> default_ds # everything else defaults to DS
BASE0=ArCX() -> default_ds
BASE0=ArDX() -> default_ds
BASE0=ArBX() -> default_ds
BASE0=ArSI() -> default_ds
BASE0=ArDI() -> default_ds
BASE0=Ar8()  -> default_ds
BASE0=Ar9()  -> default_ds
BASE0=Ar10() -> default_ds
BASE0=Ar11() -> default_ds
BASE0=Ar12() -> default_ds
BASE0=Ar13() -> default_ds
BASE0=Ar14() -> default_ds
BASE0=Ar15() -> default_ds

xed-modrm-encode.txt/SEGMENT_ENCODE()::
--------------------------------------------------------------------------------------------------------
default_ss SEG0=@          -> no_seg_prefix # was "nothing" 2007-0x08-0x14 # assume this is what the user wanted
default_ss SEG0=XED_REG_CS -> cs_prefix
default_ss SEG0=XED_REG_DS -> ds_prefix
default_ss SEG0=XED_REG_SS -> no_seg_prefix # was "nothing" 2007-0x08-0x14   # matches default
default_ss SEG0=XED_REG_ES -> es_prefix
default_ss SEG0=XED_REG_FS -> fs_prefix
default_ss SEG0=XED_REG_GS -> gs_prefix
default_ds SEG0=@          -> no_seg_prefix # was "nothing" 2007-0x08-0x14  # assume this is what the user wanted
default_ds SEG0=XED_REG_CS -> cs_prefix
default_ds SEG0=XED_REG_DS -> no_seg_prefix # was "nothing" 2007-0x08-0x14  # matches default
default_ds SEG0=XED_REG_SS -> ss_prefix
default_ds SEG0=XED_REG_ES -> es_prefix
default_ds SEG0=XED_REG_FS -> fs_prefix
default_ds SEG0=XED_REG_GS -> gs_prefix
otherwise                  -> no_seg_prefix # was "nothing" 2007-0x08-0x14

xed-modrm-encode.txt/SIB_REQUIRED_ENCODE()::
--------------------------------------------------------------------------------------------------------
eamode32 INDEX=GPR32e()  -> SIB=1
eamode64 INDEX=GPR64e()  -> SIB=1
eamode64 BASE0=@ DISP_WIDTH=32 ->  SIB=1
eamode32 mode64 BASE0=@ DISP_WIDTH=32 ->  SIB=1
eamode32 mode16 -> nothing
eamode32 mode32 -> nothing
eanot16 BASE0=ArSP()  -> SIB=1
eanot16 BASE0=Ar12()  -> SIB=1
otherwise -> nothing # FIXME: could set SIB=0

xed-modrm-encode.txt/SIBBASE_ENCODE()::
--------------------------------------------------------------------------------------------------------
SIB=0     -> nothing
SIB=1     -> SIBBASE_ENCODE_SIB1()

xed-modrm-encode.txt/SIBBASE_ENCODE_SIB1()::
--------------------------------------------------------------------------------------------------------
BASE0=ArAX()  -> SIBBASE=0 REXB=0
BASE0=Ar8()   -> SIBBASE=0 REXB=1
BASE0=ArCX()  -> SIBBASE=1 REXB=0
BASE0=Ar9()   -> SIBBASE=1 REXB=1
BASE0=ArDX()  -> SIBBASE=2 REXB=0
BASE0=Ar10()  -> SIBBASE=2 REXB=1
BASE0=ArBX()  -> SIBBASE=3 REXB=0
BASE0=Ar11()  -> SIBBASE=3 REXB=1
BASE0=ArSP()  -> SIBBASE=4 REXB=0
BASE0=Ar12()  -> SIBBASE=4 REXB=1
BASE0=@      -> DISP_WIDTH_32() SIBBASE=5 REXB=0 # MOD=0
BASE0=ArBP() -> DISP_WIDTH_0_8_32() SIBBASE=5 REXB=0 # MOD=1 # ARG MODIFICATION LATER IN MOD RULE
BASE0=Ar13() -> DISP_WIDTH_0_8_32() SIBBASE=5 REXB=1 # MOD=1 # ARG MODIFICATION LATER IN MOD RULE
BASE0=ArSI() -> SIBBASE=6 REXB=0
BASE0=Ar14() -> SIBBASE=6 REXB=1
BASE0=ArDI() -> SIBBASE=7 REXB=0
BASE0=Ar15() -> SIBBASE=7 REXB=1
otherwise    -> error             # BASE0 was some other register

xed-modrm-encode.txt/SIBINDEX_ENCODE()::
--------------------------------------------------------------------------------------------------------
SIB=0 -> nothing
SIB=1 -> SIBINDEX_ENCODE_SIB1()

xed-modrm-encode.txt/SIBINDEX_ENCODE_SIB1()::
--------------------------------------------------------------------------------------------------------
INDEX=ArAX() -> SIBINDEX=0 REXX=0
INDEX=Ar8()  -> SIBINDEX=0 REXX=1
INDEX=ArCX() -> SIBINDEX=1 REXX=0
INDEX=Ar9()  -> SIBINDEX=1 REXX=1
INDEX=ArDX() -> SIBINDEX=2 REXX=0
INDEX=Ar10() -> SIBINDEX=2 REXX=1
INDEX=ArBX() -> SIBINDEX=3 REXX=0
INDEX=Ar11() -> SIBINDEX=3 REXX=1
INDEX=@      -> SIBINDEX=4 REXX=0 # the "no index" option
INDEX=Ar12() -> SIBINDEX=4 REXX=1
INDEX=ArBP() -> SIBINDEX=5 REXX=0
INDEX=Ar13() -> SIBINDEX=5 REXX=1
INDEX=ArSI() -> SIBINDEX=6 REXX=0
INDEX=Ar14() -> SIBINDEX=6 REXX=1
INDEX=ArDI() -> SIBINDEX=7 REXX=0
INDEX=Ar15() -> SIBINDEX=7 REXX=1
otherwise    -> error             # INDEX was some other register

xed-modrm-encode.txt/SIBSCALE_ENCODE()::
--------------------------------------------------------------------------------------------------------
SIB=0         -> nothing
SIB=1 SCALE=0 -> SIBSCALE=0 # this allows for default unset scales
SIB=1 SCALE=1 -> SIBSCALE=0
SIB=1 SCALE=2 -> SIBSCALE=1
SIB=1 SCALE=4 -> SIBSCALE=2
SIB=1 SCALE=8 -> SIBSCALE=3
otherwise    -> error             # SCALE was some other value

xed-modrm-encode.txt/MODRM_MOD_ENCODE()::
--------------------------------------------------------------------------------------------------------
eamode16 DISP_WIDTH=0   -> MODRM_MOD_EA16_DISP0()
eamode16 DISP_WIDTH=8   -> MODRM_MOD_EA16_DISP8()
eamode16 DISP_WIDTH=16  -> MODRM_MOD_EA16_DISP16()
eamode16 DISP_WIDTH=32  -> ERROR()
eamode16 DISP_WIDTH=64  -> ERROR()
eamode32 DISP_WIDTH=0   -> MODRM_MOD_EA32_DISP0()
eamode32 DISP_WIDTH=8   -> MODRM_MOD_EA32_DISP8()
eamode32 DISP_WIDTH=16  -> ERROR()
eamode32 DISP_WIDTH=32  -> MODRM_MOD_EA32_DISP32()
eamode32 DISP_WIDTH=64  -> ERROR()
eamode64 DISP_WIDTH=0   -> MODRM_MOD_EA64_DISP0()
eamode64 DISP_WIDTH=8   -> MODRM_MOD_EA64_DISP8()
eamode64 DISP_WIDTH=16  -> ERROR()
eamode64 DISP_WIDTH=32  -> MODRM_MOD_EA64_DISP32()
eamode64 DISP_WIDTH=64  -> ERROR()

xed-modrm-encode.txt/MODRM_MOD_EA16_DISP0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_BX INDEX=@  -> MOD=0
BASE0=XED_REG_SI INDEX=@  -> MOD=0
BASE0=XED_REG_DI INDEX=@  -> MOD=0
BASE0=XED_REG_BP INDEX=@  -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
BASE0=XED_REG_BP INDEX=XED_REG_SI -> MOD=0
BASE0=XED_REG_BP INDEX=XED_REG_DI -> MOD=0
BASE0=XED_REG_BX INDEX=XED_REG_SI -> MOD=0
BASE0=XED_REG_BX INDEX=XED_REG_DI -> MOD=0

xed-modrm-encode.txt/MODRM_MOD_EA16_DISP8()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_BX INDEX=@  -> MOD=1
BASE0=XED_REG_SI INDEX=@  -> MOD=1
BASE0=XED_REG_DI INDEX=@  -> MOD=1
BASE0=XED_REG_BP INDEX=@  -> MOD=1
BASE0=XED_REG_BP INDEX=XED_REG_SI -> MOD=1
BASE0=XED_REG_BP INDEX=XED_REG_DI -> MOD=1
BASE0=XED_REG_BX INDEX=XED_REG_SI -> MOD=1
BASE0=XED_REG_BX INDEX=XED_REG_DI -> MOD=1

xed-modrm-encode.txt/MODRM_MOD_EA16_DISP16()::
--------------------------------------------------------------------------------------------------------
BASE0=@          INDEX=@   -> MOD=0
BASE0=XED_REG_BX INDEX=@  -> MOD=2
BASE0=XED_REG_SI INDEX=@  -> MOD=2
BASE0=XED_REG_DI INDEX=@  -> MOD=2
BASE0=XED_REG_BP INDEX=@  -> MOD=2
BASE0=XED_REG_BP INDEX=XED_REG_SI -> MOD=2
BASE0=XED_REG_BP INDEX=XED_REG_DI -> MOD=2
BASE0=XED_REG_BX INDEX=XED_REG_SI -> MOD=2
BASE0=XED_REG_BX INDEX=XED_REG_DI -> MOD=2

xed-modrm-encode.txt/MODRM_MOD_EA32_DISP0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_EBP  mode32  -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
BASE0=XED_REG_EBP  mode64  -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
BASE0=XED_REG_R13D mode64  -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
BASE0=XED_REG_EAX mode32       -> MOD=0
BASE0=XED_REG_EBX mode32       -> MOD=0
BASE0=XED_REG_ECX mode32       -> MOD=0
BASE0=XED_REG_EDX mode32       -> MOD=0
BASE0=XED_REG_ESI mode32       -> MOD=0
BASE0=XED_REG_EDI mode32       -> MOD=0
BASE0=XED_REG_ESP mode32       -> MOD=0 # our choice to use MOD=0 (w/sib)
BASE0=XED_REG_EAX mode64       -> MOD=0
BASE0=XED_REG_EBX mode64       -> MOD=0
BASE0=XED_REG_ECX mode64       -> MOD=0
BASE0=XED_REG_EDX mode64       -> MOD=0
BASE0=XED_REG_ESI mode64       -> MOD=0
BASE0=XED_REG_EDI mode64       -> MOD=0
BASE0=XED_REG_ESP mode64       -> MOD=0 # our choice to use MOD=0 (w/sib)
BASE0=XED_REG_R8D   mode64     -> MOD=0
BASE0=XED_REG_R9D   mode64     -> MOD=0
BASE0=XED_REG_R10D  mode64     -> MOD=0
BASE0=XED_REG_R11D  mode64     -> MOD=0
BASE0=XED_REG_R12D  mode64     -> MOD=0 # our choice to use MOD=0 (w/sib)
BASE0=XED_REG_R14D  mode64     -> MOD=0
BASE0=XED_REG_R15D  mode64     -> MOD=0

xed-modrm-encode.txt/MODRM_MOD_EA32_DISP8()::
--------------------------------------------------------------------------------------------------------
otherwise                      -> MOD=1  # might use SIB

xed-modrm-encode.txt/MODRM_MOD_EA32_DISP32()::
--------------------------------------------------------------------------------------------------------
BASE0=@                    -> MOD=0 #no base (handles SIB=1 case)
BASE0=GPR32e()             -> MOD=2 #some base, not RIP, might use SIB
BASE0=rIPa() mode64        -> MOD=0

xed-modrm-encode.txt/MODRM_MOD_EA64_DISP0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_EIP       -> MOD=0 DISP_WIDTH=32 DISP=0    # base eip
BASE0=XED_REG_RIP       -> MOD=0 DISP_WIDTH=32 DISP=0    # base rip
BASE0=XED_REG_RBP       -> MOD=1 DISP_WIDTH=8 DISP=0     # ARG MODIFICATION
BASE0=XED_REG_R13       -> MOD=1 DISP_WIDTH=8 DISP=0     # ARG MODIFICATION
BASE0=XED_REG_RAX       -> MOD=0
BASE0=XED_REG_RBX       -> MOD=0
BASE0=XED_REG_RCX       -> MOD=0
BASE0=XED_REG_RDX       -> MOD=0
BASE0=XED_REG_RSI       -> MOD=0
BASE0=XED_REG_RDI       -> MOD=0
BASE0=XED_REG_RSP       -> MOD=0
BASE0=XED_REG_R8        -> MOD=0
BASE0=XED_REG_R9        -> MOD=0
BASE0=XED_REG_R10       -> MOD=0
BASE0=XED_REG_R11       -> MOD=0
BASE0=XED_REG_R12       -> MOD=0
BASE0=XED_REG_R14       -> MOD=0
BASE0=XED_REG_R15       -> MOD=0

xed-modrm-encode.txt/MODRM_MOD_EA64_DISP8()::
--------------------------------------------------------------------------------------------------------
BASE0=GPR64e()             -> MOD=1

xed-modrm-encode.txt/MODRM_MOD_EA64_DISP32()::
--------------------------------------------------------------------------------------------------------
BASE0=@              -> MOD=0 #no base, SIB=1 required (provided elsewhere)
BASE0=XED_REG_EIP    -> MOD=0 #base eip
BASE0=XED_REG_RIP    -> MOD=0 #base rip
BASE0=XED_REG_RAX    -> MOD=2
BASE0=XED_REG_RBX    -> MOD=2
BASE0=XED_REG_RCX    -> MOD=2
BASE0=XED_REG_RDX    -> MOD=2
BASE0=XED_REG_RSI    -> MOD=2
BASE0=XED_REG_RDI    -> MOD=2
BASE0=XED_REG_RSP    -> MOD=2 # SIB=1 required (and is provided elsewhere)
BASE0=XED_REG_RBP    -> MOD=2
BASE0=XED_REG_R8     -> MOD=2
BASE0=XED_REG_R9     -> MOD=2
BASE0=XED_REG_R10    -> MOD=2
BASE0=XED_REG_R11    -> MOD=2
BASE0=XED_REG_R12    -> MOD=2 # SIB=1 required (and is provided elsewhere)
BASE0=XED_REG_R13    -> MOD=2
BASE0=XED_REG_R14    -> MOD=2
BASE0=XED_REG_R15    -> MOD=2

xed-modrm-encode.txt/MODRM_RM_ENCODE()::
--------------------------------------------------------------------------------------------------------
eamode16  SIB=0 -> MODRM_RM_ENCODE_EA16_SIB0()
eamode32  SIB=0 -> MODRM_RM_ENCODE_EA32_SIB0()
eamode64  SIB=0 -> MODRM_RM_ENCODE_EA64_SIB0()
eanot16   SIB=1 -> MODRM_RM_ENCODE_EANOT16_SIB1()

xed-modrm-encode.txt/MODRM_RM_ENCODE_EA16_SIB0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_BX INDEX=XED_REG_SI  -> RM=0
BASE0=XED_REG_BX INDEX=XED_REG_DI  -> RM=1
BASE0=XED_REG_BP INDEX=XED_REG_SI  -> RM=2
BASE0=XED_REG_BP INDEX=XED_REG_DI  -> RM=3
BASE0=XED_REG_SI INDEX=@           -> RM=4
BASE0=XED_REG_DI INDEX=@           -> RM=5
BASE0=@          INDEX=@           ->  DISP_WIDTH_16() RM=6
BASE0=XED_REG_BP INDEX=@           -> DISP_WIDTH_0_8_16() RM=6
BASE0=XED_REG_BX INDEX=@           -> RM=7

xed-modrm-encode.txt/MODRM_RM_ENCODE_EA64_SIB0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_RAX -> RM=0 REXB=0
BASE0=XED_REG_R8  -> RM=0 REXB=1
BASE0=XED_REG_RCX -> RM=1 REXB=0
BASE0=XED_REG_R9  -> RM=1 REXB=1
BASE0=XED_REG_RDX -> RM=2 REXB=0
BASE0=XED_REG_R10 -> RM=2 REXB=1
BASE0=XED_REG_RBX -> RM=3 REXB=0
BASE0=XED_REG_R11 -> RM=3 REXB=1
BASE0=XED_REG_RSI -> RM=6 REXB=0
BASE0=XED_REG_R14 -> RM=6 REXB=1
BASE0=XED_REG_RDI -> RM=7 REXB=0
BASE0=XED_REG_R15 -> RM=7 REXB=1
BASE0=@      -> DISP_WIDTH_32() RM=5 # not setting REXB FIXME?
BASE0=XED_REG_RBP -> DISP_WIDTH_0_8_32() RM=5  REXB=0
BASE0=XED_REG_RIP -> RM=5 # not setting REXB FIXME?
BASE0=XED_REG_EIP -> RM=5 # not setting REXB FIXME?
BASE0=XED_REG_R13 -> DISP_WIDTH_0_8_32() RM=5  REXB=1

xed-modrm-encode.txt/MODRM_RM_ENCODE_EA32_SIB0()::
--------------------------------------------------------------------------------------------------------
BASE0=XED_REG_EAX -> RM=0 REXB=0
BASE0=XED_REG_R8D  -> RM=0 REXB=1
BASE0=XED_REG_ECX -> RM=1 REXB=0
BASE0=XED_REG_R9D  -> RM=1 REXB=1
BASE0=XED_REG_EDX -> RM=2 REXB=0
BASE0=XED_REG_R10D -> RM=2 REXB=1
BASE0=XED_REG_EBX -> RM=3 REXB=0
BASE0=XED_REG_R11D -> RM=3 REXB=1
BASE0=XED_REG_ESI -> RM=6 REXB=0
BASE0=XED_REG_R14D -> RM=6 REXB=1
BASE0=XED_REG_EDI -> RM=7 REXB=0
BASE0=XED_REG_R15D -> RM=7 REXB=1
BASE0=@      -> DISP_WIDTH_32() RM=5 # not setting REXB FIXME?
BASE0=XED_REG_EBP -> DISP_WIDTH_0_8_32() RM=5  REXB=0
BASE0=XED_REG_R13D -> DISP_WIDTH_0_8_32() RM=5  REXB=1
BASE0=XED_REG_RIP mode64 -> RM=5
BASE0=XED_REG_EIP mode64 -> RM=5

xed-modrm-encode.txt/MODRM_RM_ENCODE_EANOT16_SIB1()::
--------------------------------------------------------------------------------------------------------
otherwise -> RM=4 # SIB will specify the REXB etc.

xed-modrm-encode.txt/SIB_NT()::
--------------------------------------------------------------------------------------------------------
SIB=1 SIBBASE[bbb] SIBSCALE[ss] SIBINDEX[iii] -> ss_iii_bbb
SIB=0                                         -> nothing

xed-modrm-encode.txt/DISP_NT()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=8   DISP[d/8]   -> d/8
DISP_WIDTH=16  DISP[d/16]  -> d/16
DISP_WIDTH=32  DISP[d/32]  -> d/32
DISP_WIDTH=64  DISP[d/64]  -> d/64
otherwise                  -> nothing

xed-modrm-encode.txt/ERROR()::
--------------------------------------------------------------------------------------------------------
otherwise -> ERROR=XED_ERROR_GENERAL_ERROR

xed-modrm-encode.txt/DISP_WIDTH_0()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=0 -> nothing

xed-modrm-encode.txt/DISP_WIDTH_8()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=8 -> nothing

xed-modrm-encode.txt/DISP_WIDTH_16()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=16 -> nothing

xed-modrm-encode.txt/DISP_WIDTH_32()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=32 -> nothing

xed-modrm-encode.txt/DISP_WIDTH_0_8_16()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=0 -> nothing
DISP_WIDTH=8 -> nothing
DISP_WIDTH=16 -> nothing

xed-modrm-encode.txt/DISP_WIDTH_0_8_32()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=0 -> nothing
DISP_WIDTH=8 -> nothing
DISP_WIDTH=32 -> nothing

xed-prefixes-encode.txt/FIXUP_EOSZ_ENC()::
--------------------------------------------------------------------------------------------------------
mode16 EOSZ=0 -> EOSZ=1
mode32 EOSZ=0 -> EOSZ=2
mode64 EOSZ=0 -> EOSZ=2
otherwise -> nothing

xed-prefixes-encode.txt/FIXUP_EASZ_ENC()::
--------------------------------------------------------------------------------------------------------
mode16 EASZ=0 -> EASZ=1
mode32 EASZ=0 -> EASZ=2
mode64 EASZ=0 -> EASZ=3
otherwise -> nothing

xed-prefixes-encode.txt/FIXUP_SMODE_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 SMODE=0 -> SMODE=2
mode64 SMODE=1 -> error
otherwise -> nothing

xed-prefixes-encode.txt/REMOVE_SEGMENT()::
--------------------------------------------------------------------------------------------------------
AGEN=0  -> nothing
AGEN=1  -> REMOVE_SEGMENT_AGEN1()

xed-prefixes-encode.txt/REMOVE_SEGMENT_AGEN1()::
--------------------------------------------------------------------------------------------------------
SEG0=@      -> nothing
SEG0=SEGe() -> error

xed-prefixes-encode.txt/OVERRIDE_SEG0()::
--------------------------------------------------------------------------------------------------------
SEG0=@            -> SEG_OVD=0
SEG0=XED_REG_DS   -> SEG_OVD=0
SEG0=XED_REG_CS   -> SEG_OVD=1
SEG0=XED_REG_ES   -> SEG_OVD=3
SEG0=XED_REG_FS   -> SEG_OVD=4
SEG0=XED_REG_GS   -> SEG_OVD=5
SEG0=XED_REG_SS   -> SEG_OVD=6

xed-prefixes-encode.txt/OVERRIDE_SEG1()::
--------------------------------------------------------------------------------------------------------
SEG1=@           -> SEG_OVD=0
SEG1=XED_REG_DS  -> SEG_OVD=0
SEG1=XED_REG_CS  -> SEG_OVD=1
SEG1=XED_REG_ES  -> SEG_OVD=3
SEG1=XED_REG_FS  -> SEG_OVD=4
SEG1=XED_REG_GS  -> SEG_OVD=5
SEG1=XED_REG_SS  -> SEG_OVD=6

xed-prefixes-encode.txt/REX_PREFIX_ENC()::
--------------------------------------------------------------------------------------------------------
mode64   NOREX=0  NEEDREX=1 REXW[w] REXB[b] REXX[x] REXR[r] -> 0b0100 wrxb
mode64   NOREX=0  REX=1     REXW[w] REXB[b] REXX[x] REXR[r] -> 0b0100 wrxb
mode64   NOREX=0            REXW[w]=1 REXB[b] REXX[x] REXR[r] -> 0b0100 wrxb
mode64   NOREX=0            REXW[w] REXB[b]=1 REXX[x] REXR[r] -> 0b0100 wrxb
mode64   NOREX=0            REXW[w] REXB[b] REXX[x]=1 REXR[r] -> 0b0100 wrxb
mode64   NOREX=0            REXW[w] REXB[b] REXX[x] REXR[r]=1 -> 0b0100 wrxb
mode64   NOREX=1  NEEDREX=1  -> error
mode64   NOREX=1  REX=1      -> error
mode64   NOREX=1  REXW=1     -> error
mode64   NOREX=1  REXB=1     -> error
mode64   NOREX=1  REXX=1     -> error
mode64   NOREX=1  REXR=1     -> error
mode64            NEEDREX=0 REX=0 REXW=0 REXB=0 REXX=0 REXR=0 -> nothing
mode32          REX=0 REXW=0    REXB=0    REXX=0    REXR=0       -> nothing
mode16          REX=0 REXW=0    REXB=0    REXX=0    REXR=0       -> nothing
otherwise                                                        -> error

xed-prefixes-encode.txt/PREFIX_ENC()::
--------------------------------------------------------------------------------------------------------
REP=2 -> 0xf2 no_return
REP=3 -> 0xf3 no_return
66_prefix                  -> 0x66 no_return
67_prefix                  -> 0x67 no_return
lock_prefix                -> 0xf0 no_return
fs_prefix                  -> 0x64 no_return
gs_prefix                  -> 0x65 no_return
mode64 HINT=3              -> 0x2e no_return
mode64 HINT=4              -> 0x3e no_return
not64 cs_prefix            -> 0x2e no_return
not64 HINT=3               -> 0x2e no_return
not64 ds_prefix            -> 0x3e no_return
not64 HINT=4               -> 0x3e no_return
not64 es_prefix            -> 0x26 no_return
not64 ss_prefix            -> 0x36 no_return
otherwise                  -> nothing

xed-prefixes-encode.txt/DF64()::
--------------------------------------------------------------------------------------------------------
mode16 -> nothing
mode32 -> nothing
mode64 -> DF64=1 ### EOSZ=3 -- removed EOSZ=3 because it broke encoding pop 16b dx in 64b mode.

xed-prefixes-encode.txt/OSZ_NONTERM_ENC()::
--------------------------------------------------------------------------------------------------------
VEXVALID=0 mode16 EOSZ=1        -> nothing
VEXVALID=0 mode16 EOSZ=2 DF32=1 -> nothing
VEXVALID=0 mode16 EOSZ=2 DF32=0      -> 66_prefix
VEXVALID=0 mode32 EOSZ=1  -> 66_prefix
VEXVALID=0 mode32 EOSZ=2        -> nothing
VEXVALID=0 mode64 EOSZ=1  -> 66_prefix
VEXVALID=0 mode64 EOSZ=2 DF64=1 -> error
VEXVALID=0 mode64 EOSZ=2 DF64=0 -> nothing
VEXVALID=0 mode64 EOSZ=3 DF64=1 -> nothing
VEXVALID=0 mode64 EOSZ=3 DF64=0 -> REXW=1
otherwise -> nothing

xed-prefixes-encode.txt/REFINING66()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing # norep works too

xed-prefixes-encode.txt/IGNORE66()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

xed-prefixes-encode.txt/IMMUNE66()::
--------------------------------------------------------------------------------------------------------
mode16        -> EOSZ=2 DF32=1
otherwise     -> nothing

xed-prefixes-encode.txt/IMMUNE66_LOOP64()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

xed-prefixes-encode.txt/IMMUNE_REXW()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

xed-prefixes-encode.txt/CR_WIDTH()::
--------------------------------------------------------------------------------------------------------
mode16 -> DF32=1 EOSZ=2
mode32 -> nothing
mode64 -> DF64=1 EOSZ=3

xed-prefixes-encode.txt/FORCE64()::
--------------------------------------------------------------------------------------------------------
otherwise -> DF64=1 EOSZ=3

xed-prefixes-encode.txt/BRANCH_HINT()::
--------------------------------------------------------------------------------------------------------
otherwise  -> nothing

xed-prefixes.txt/REMOVE_SEGMENT()::
--------------------------------------------------------------------------------------------------------
mode16 | SEG0=XED_REG_INVALID
mode32 | SEG0=XED_REG_INVALID
mode64 | SEG0=XED_REG_INVALID

xed-prefixes.txt/PREFIXES()::
--------------------------------------------------------------------------------------------------------
mode64  0b0100 wrxb  |  XED_RESET REX=1 REXW=w REXR=r REXX=x REXB=b
mode64  0xf2 MODE_FIRST_PREFIX=0        |  XED_RESET reset_rex f2_prefix refining_f2
mode64  0xf3 MODE_FIRST_PREFIX=0        |  XED_RESET reset_rex f3_prefix refining_f3
mode64  0xf2 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET reset_rex f2_prefix refining_f2
mode64  0xf3 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET reset_rex f3_prefix refining_f3
mode64  0xf2 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET reset_rex
mode64  0xf3 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET reset_rex
mode64  0x66  |  XED_RESET 66_prefix   PREFIX66=1 reset_rex
mode64  0x67  |  XED_RESET 67_prefix              reset_rex
mode64  0xf0  |  XED_RESET lock_prefix            reset_rex
mode64  0x2e  |  XED_RESET HINT=1  reset_rex
mode64  0x3e  |  XED_RESET HINT=2  reset_rex
mode64  0x26  |  XED_RESET                 reset_rex
mode64  0x64  |  XED_RESET fs_prefix       reset_rex
mode64  0x65  |  XED_RESET gs_prefix       reset_rex
mode64  0x36  |  XED_RESET                 reset_rex
mode32  0xf2 MODE_FIRST_PREFIX=0        |  XED_RESET  f2_prefix refining_f2
mode32  0xf3 MODE_FIRST_PREFIX=0        |  XED_RESET  f3_prefix refining_f3
mode32  0xf2 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET  f2_prefix refining_f2
mode32  0xf3 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET  f3_prefix refining_f3
mode32  0xf2 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET
mode32  0xf3 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET
mode32  0x66  |  XED_RESET 66_prefix PREFIX66=1
mode32  0x67  |  XED_RESET 67_prefix
mode32  0xf0  |  XED_RESET lock_prefix
mode32  0x2e  |  XED_RESET cs_prefix HINT=1
mode32  0x3e  |  XED_RESET ds_prefix HINT=2
mode32  0x26  |  XED_RESET es_prefix
mode32  0x64  |  XED_RESET fs_prefix
mode32  0x65  |  XED_RESET gs_prefix
mode32  0x36  |  XED_RESET ss_prefix
mode16  0xf2 MODE_FIRST_PREFIX=0        |  XED_RESET  f2_prefix refining_f2
mode16  0xf3 MODE_FIRST_PREFIX=0        |  XED_RESET  f3_prefix refining_f3
mode16  0xf2 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET  f2_prefix refining_f2
mode16  0xf3 MODE_FIRST_PREFIX=1 REP=0  |  XED_RESET  f3_prefix refining_f3
mode16  0xf2 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET
mode16  0xf3 MODE_FIRST_PREFIX=1 REP!=0 |  XED_RESET
mode16  0x66  |  XED_RESET 66_prefix   PREFIX66=1
mode16  0x67  |  XED_RESET 67_prefix
mode16  0xf0  |  XED_RESET lock_prefix
mode16  0x2e  |  XED_RESET cs_prefix HINT=1
mode16  0x3e  |  XED_RESET ds_prefix HINT=2
mode16  0x26  |  XED_RESET es_prefix
mode16  0x64  |  XED_RESET fs_prefix
mode16  0x65  |  XED_RESET gs_prefix
mode16  0x36  |  XED_RESET ss_prefix
otherwise   |

xed-prefixes.txt/BRANCH_HINT()::
--------------------------------------------------------------------------------------------------------
HINT=0    |
HINT=1    | HINT=3
HINT=2    | HINT=4

xed-reg-tables-xmm.txt/XMM_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_R_32()
mode32 | OUTREG=XMM_R_32()
mode64 | OUTREG=XMM_R_64()

xed-reg-tables-xmm.txt/XMM_R_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0x0  | OUTREG=XED_REG_XMM0
REG=0x1  | OUTREG=XED_REG_XMM1
REG=0x2  | OUTREG=XED_REG_XMM2
REG=0x3  | OUTREG=XED_REG_XMM3
REG=0x4  | OUTREG=XED_REG_XMM4
REG=0x5  | OUTREG=XED_REG_XMM5
REG=0x6  | OUTREG=XED_REG_XMM6
REG=0x7  | OUTREG=XED_REG_XMM7

xed-reg-tables-xmm.txt/XMM_R_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_XMM0
REXR=0 REG=0x1  | OUTREG=XED_REG_XMM1
REXR=0 REG=0x2  | OUTREG=XED_REG_XMM2
REXR=0 REG=0x3  | OUTREG=XED_REG_XMM3
REXR=0 REG=0x4  | OUTREG=XED_REG_XMM4
REXR=0 REG=0x5  | OUTREG=XED_REG_XMM5
REXR=0 REG=0x6  | OUTREG=XED_REG_XMM6
REXR=0 REG=0x7  | OUTREG=XED_REG_XMM7
REXR=1 REG=0x0  | OUTREG=XED_REG_XMM8
REXR=1 REG=0x1  | OUTREG=XED_REG_XMM9
REXR=1 REG=0x2  | OUTREG=XED_REG_XMM10
REXR=1 REG=0x3  | OUTREG=XED_REG_XMM11
REXR=1 REG=0x4  | OUTREG=XED_REG_XMM12
REXR=1 REG=0x5  | OUTREG=XED_REG_XMM13
REXR=1 REG=0x6  | OUTREG=XED_REG_XMM14
REXR=1 REG=0x7  | OUTREG=XED_REG_XMM15

xed-reg-tables-xmm.txt/XMM_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_B_32()
mode32 | OUTREG=XMM_B_32()
mode64 | OUTREG=XMM_B_64()

xed-reg-tables-xmm.txt/XMM_B_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0x0  | OUTREG=XED_REG_XMM0
RM=0x1  | OUTREG=XED_REG_XMM1
RM=0x2  | OUTREG=XED_REG_XMM2
RM=0x3  | OUTREG=XED_REG_XMM3
RM=0x4  | OUTREG=XED_REG_XMM4
RM=0x5  | OUTREG=XED_REG_XMM5
RM=0x6  | OUTREG=XED_REG_XMM6
RM=0x7  | OUTREG=XED_REG_XMM7

xed-reg-tables-xmm.txt/XMM_B_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_XMM0
REXB=0 RM=0x1  | OUTREG=XED_REG_XMM1
REXB=0 RM=0x2  | OUTREG=XED_REG_XMM2
REXB=0 RM=0x3  | OUTREG=XED_REG_XMM3
REXB=0 RM=0x4  | OUTREG=XED_REG_XMM4
REXB=0 RM=0x5  | OUTREG=XED_REG_XMM5
REXB=0 RM=0x6  | OUTREG=XED_REG_XMM6
REXB=0 RM=0x7  | OUTREG=XED_REG_XMM7
REXB=1 RM=0x0  | OUTREG=XED_REG_XMM8
REXB=1 RM=0x1  | OUTREG=XED_REG_XMM9
REXB=1 RM=0x2  | OUTREG=XED_REG_XMM10
REXB=1 RM=0x3  | OUTREG=XED_REG_XMM11
REXB=1 RM=0x4  | OUTREG=XED_REG_XMM12
REXB=1 RM=0x5  | OUTREG=XED_REG_XMM13
REXB=1 RM=0x6  | OUTREG=XED_REG_XMM14
REXB=1 RM=0x7  | OUTREG=XED_REG_XMM15

xed-reg-tables.txt/ArAX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_AX
EASZ=2 | OUTREG=XED_REG_EAX
EASZ=3 | OUTREG=XED_REG_RAX

xed-reg-tables.txt/ArBX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_BX
EASZ=2 | OUTREG=XED_REG_EBX
EASZ=3 | OUTREG=XED_REG_RBX

xed-reg-tables.txt/ArCX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_CX
EASZ=2 | OUTREG=XED_REG_ECX
EASZ=3 | OUTREG=XED_REG_RCX

xed-reg-tables.txt/ArDX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_DX
EASZ=2 | OUTREG=XED_REG_EDX
EASZ=3 | OUTREG=XED_REG_RDX

xed-reg-tables.txt/ArSI()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_SI
EASZ=2 | OUTREG=XED_REG_ESI
EASZ=3 | OUTREG=XED_REG_RSI

xed-reg-tables.txt/ArDI()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_DI
EASZ=2 | OUTREG=XED_REG_EDI
EASZ=3 | OUTREG=XED_REG_RDI

xed-reg-tables.txt/ArSP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_SP
EASZ=2 | OUTREG=XED_REG_ESP
EASZ=3 | OUTREG=XED_REG_RSP

xed-reg-tables.txt/ArBP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_BP
EASZ=2 | OUTREG=XED_REG_EBP
EASZ=3 | OUTREG=XED_REG_RBP

xed-reg-tables.txt/SrSP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
smode16 | OUTREG=XED_REG_SP
smode32 | OUTREG=XED_REG_ESP
smode64 | OUTREG=XED_REG_RSP

xed-reg-tables.txt/SrBP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
smode16 | OUTREG=XED_REG_BP
smode32 | OUTREG=XED_REG_EBP
smode64 | OUTREG=XED_REG_RBP

xed-reg-tables.txt/Ar8()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R8W
EASZ=2 | OUTREG=XED_REG_R8D
EASZ=3 | OUTREG=XED_REG_R8

xed-reg-tables.txt/Ar9()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R9W
EASZ=2 | OUTREG=XED_REG_R9D
EASZ=3 | OUTREG=XED_REG_R9

xed-reg-tables.txt/Ar10()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R10W
EASZ=2 | OUTREG=XED_REG_R10D
EASZ=3 | OUTREG=XED_REG_R10

xed-reg-tables.txt/Ar11()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R11W
EASZ=2 | OUTREG=XED_REG_R11D
EASZ=3 | OUTREG=XED_REG_R11

xed-reg-tables.txt/Ar12()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R12W
EASZ=2 | OUTREG=XED_REG_R12D
EASZ=3 | OUTREG=XED_REG_R12

xed-reg-tables.txt/Ar13()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R13W
EASZ=2 | OUTREG=XED_REG_R13D
EASZ=3 | OUTREG=XED_REG_R13

xed-reg-tables.txt/Ar14()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R14W
EASZ=2 | OUTREG=XED_REG_R14D
EASZ=3 | OUTREG=XED_REG_R14

xed-reg-tables.txt/Ar15()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=1 | OUTREG=XED_REG_R15W
EASZ=2 | OUTREG=XED_REG_R15D
EASZ=3 | OUTREG=XED_REG_R15

xed-reg-tables.txt/rIP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_EIP
mode32 | OUTREG=XED_REG_EIP
mode64 | OUTREG=XED_REG_RIP

xed-reg-tables.txt/rIPa()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EASZ=2 | OUTREG=XED_REG_EIP
EASZ=3 | OUTREG=XED_REG_RIP

xed-reg-tables.txt/OeAX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_AX
EOSZ=2 | OUTREG=XED_REG_EAX
EOSZ=3 | OUTREG=XED_REG_EAX

xed-reg-tables.txt/OrAX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_AX
EOSZ=2 | OUTREG=XED_REG_EAX
EOSZ=3 | OUTREG=XED_REG_RAX

xed-reg-tables.txt/OrDX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_DX
EOSZ=2 | OUTREG=XED_REG_EDX
EOSZ=3 | OUTREG=XED_REG_RDX

xed-reg-tables.txt/OrCX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_CX
EOSZ=2 | OUTREG=XED_REG_ECX
EOSZ=3 | OUTREG=XED_REG_RCX

xed-reg-tables.txt/OrBX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_BX
EOSZ=2 | OUTREG=XED_REG_EBX
EOSZ=3 | OUTREG=XED_REG_RBX

xed-reg-tables.txt/OrSP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_SP
EOSZ=2 | OUTREG=XED_REG_ESP
EOSZ=3 | OUTREG=XED_REG_RSP

xed-reg-tables.txt/OrBP()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=XED_REG_BP
EOSZ=2 | OUTREG=XED_REG_EBP
EOSZ=3 | OUTREG=XED_REG_RBP

xed-reg-tables.txt/rFLAGS()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_FLAGS
mode32 | OUTREG=XED_REG_EFLAGS
mode64 | OUTREG=XED_REG_RFLAGS

xed-reg-tables.txt/MMX_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0x0  | OUTREG=XED_REG_MMX0
REG=0x1  | OUTREG=XED_REG_MMX1
REG=0x2  | OUTREG=XED_REG_MMX2
REG=0x3  | OUTREG=XED_REG_MMX3
REG=0x4  | OUTREG=XED_REG_MMX4
REG=0x5  | OUTREG=XED_REG_MMX5
REG=0x6  | OUTREG=XED_REG_MMX6
REG=0x7  | OUTREG=XED_REG_MMX7

xed-reg-tables.txt/MMX_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0x0  | OUTREG=XED_REG_MMX0
RM=0x1  | OUTREG=XED_REG_MMX1
RM=0x2  | OUTREG=XED_REG_MMX2
RM=0x3  | OUTREG=XED_REG_MMX3
RM=0x4  | OUTREG=XED_REG_MMX4
RM=0x5  | OUTREG=XED_REG_MMX5
RM=0x6  | OUTREG=XED_REG_MMX6
RM=0x7  | OUTREG=XED_REG_MMX7

xed-reg-tables.txt/GPRv_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR64_R()
EOSZ=2 | OUTREG=GPR32_R()
EOSZ=1 | OUTREG=GPR16_R()

xed-reg-tables.txt/GPRv_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR64_SB()
EOSZ=2 | OUTREG=GPR32_SB()
EOSZ=1 | OUTREG=GPR16_SB()

xed-reg-tables.txt/GPRz_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR32_R()
EOSZ=2 | OUTREG=GPR32_R()
EOSZ=1 | OUTREG=GPR16_R()

xed-reg-tables.txt/GPRv_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR64_B()
EOSZ=2 | OUTREG=GPR32_B()
EOSZ=1 | OUTREG=GPR16_B()

xed-reg-tables.txt/GPRz_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR32_B()
EOSZ=2 | OUTREG=GPR32_B()
EOSZ=1 | OUTREG=GPR16_B()

xed-reg-tables.txt/GPRy_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR64_B()
EOSZ=2 | OUTREG=GPR32_B()
EOSZ=1 | OUTREG=GPR32_B()

xed-reg-tables.txt/GPRy_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=3 | OUTREG=GPR64_R()
EOSZ=2 | OUTREG=GPR32_R()
EOSZ=1 | OUTREG=GPR32_R()

xed-reg-tables.txt/GPR64_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_RAX
REXR=0 REG=0x1  | OUTREG=XED_REG_RCX
REXR=0 REG=0x2  | OUTREG=XED_REG_RDX
REXR=0 REG=0x3  | OUTREG=XED_REG_RBX
REXR=0 REG=0x4  | OUTREG=XED_REG_RSP
REXR=0 REG=0x5  | OUTREG=XED_REG_RBP
REXR=0 REG=0x6  | OUTREG=XED_REG_RSI
REXR=0 REG=0x7  | OUTREG=XED_REG_RDI
REXR=1 REG=0x0  | OUTREG=XED_REG_R8
REXR=1 REG=0x1  | OUTREG=XED_REG_R9
REXR=1 REG=0x2  | OUTREG=XED_REG_R10
REXR=1 REG=0x3  | OUTREG=XED_REG_R11
REXR=1 REG=0x4  | OUTREG=XED_REG_R12
REXR=1 REG=0x5  | OUTREG=XED_REG_R13
REXR=1 REG=0x6  | OUTREG=XED_REG_R14
REXR=1 REG=0x7  | OUTREG=XED_REG_R15

xed-reg-tables.txt/GPR64_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_RAX
REXB=0 RM=0x1  | OUTREG=XED_REG_RCX
REXB=0 RM=0x2  | OUTREG=XED_REG_RDX
REXB=0 RM=0x3  | OUTREG=XED_REG_RBX
REXB=0 RM=0x4  | OUTREG=XED_REG_RSP
REXB=0 RM=0x5  | OUTREG=XED_REG_RBP
REXB=0 RM=0x6  | OUTREG=XED_REG_RSI
REXB=0 RM=0x7  | OUTREG=XED_REG_RDI
REXB=1 RM=0x0  | OUTREG=XED_REG_R8
REXB=1 RM=0x1  | OUTREG=XED_REG_R9
REXB=1 RM=0x2  | OUTREG=XED_REG_R10
REXB=1 RM=0x3  | OUTREG=XED_REG_R11
REXB=1 RM=0x4  | OUTREG=XED_REG_R12
REXB=1 RM=0x5  | OUTREG=XED_REG_R13
REXB=1 RM=0x6  | OUTREG=XED_REG_R14
REXB=1 RM=0x7  | OUTREG=XED_REG_R15

xed-reg-tables.txt/GPR64_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 SRM=0x0  | OUTREG=XED_REG_RAX
REXB=0 SRM=0x1  | OUTREG=XED_REG_RCX
REXB=0 SRM=0x2  | OUTREG=XED_REG_RDX
REXB=0 SRM=0x3  | OUTREG=XED_REG_RBX
REXB=0 SRM=0x4  | OUTREG=XED_REG_RSP
REXB=0 SRM=0x5  | OUTREG=XED_REG_RBP
REXB=0 SRM=0x6  | OUTREG=XED_REG_RSI
REXB=0 SRM=0x7  | OUTREG=XED_REG_RDI
REXB=1 SRM=0x0  | OUTREG=XED_REG_R8
REXB=1 SRM=0x1  | OUTREG=XED_REG_R9
REXB=1 SRM=0x2  | OUTREG=XED_REG_R10
REXB=1 SRM=0x3  | OUTREG=XED_REG_R11
REXB=1 SRM=0x4  | OUTREG=XED_REG_R12
REXB=1 SRM=0x5  | OUTREG=XED_REG_R13
REXB=1 SRM=0x6  | OUTREG=XED_REG_R14
REXB=1 SRM=0x7  | OUTREG=XED_REG_R15

xed-reg-tables.txt/GPR64_X()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 SIBINDEX=0x0  | OUTREG=XED_REG_RAX
REXX=0 SIBINDEX=0x1  | OUTREG=XED_REG_RCX
REXX=0 SIBINDEX=0x2  | OUTREG=XED_REG_RDX
REXX=0 SIBINDEX=0x3  | OUTREG=XED_REG_RBX
REXX=0 SIBINDEX=0x4  | OUTREG=XED_REG_INVALID
REXX=0 SIBINDEX=0x5  | OUTREG=XED_REG_RBP
REXX=0 SIBINDEX=0x6  | OUTREG=XED_REG_RSI
REXX=0 SIBINDEX=0x7  | OUTREG=XED_REG_RDI
REXX=1 SIBINDEX=0x0  | OUTREG=XED_REG_R8
REXX=1 SIBINDEX=0x1  | OUTREG=XED_REG_R9
REXX=1 SIBINDEX=0x2  | OUTREG=XED_REG_R10
REXX=1 SIBINDEX=0x3  | OUTREG=XED_REG_R11
REXX=1 SIBINDEX=0x4  | OUTREG=XED_REG_R12
REXX=1 SIBINDEX=0x5  | OUTREG=XED_REG_R13
REXX=1 SIBINDEX=0x6  | OUTREG=XED_REG_R14
REXX=1 SIBINDEX=0x7  | OUTREG=XED_REG_R15

xed-reg-tables.txt/GPR32_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_EAX
REXR=0 REG=0x1  | OUTREG=XED_REG_ECX
REXR=0 REG=0x2  | OUTREG=XED_REG_EDX
REXR=0 REG=0x3  | OUTREG=XED_REG_EBX
REXR=0 REG=0x4  | OUTREG=XED_REG_ESP
REXR=0 REG=0x5  | OUTREG=XED_REG_EBP
REXR=0 REG=0x6  | OUTREG=XED_REG_ESI
REXR=0 REG=0x7  | OUTREG=XED_REG_EDI
REXR=1 REG=0x0  | OUTREG=XED_REG_R8D
REXR=1 REG=0x1  | OUTREG=XED_REG_R9D
REXR=1 REG=0x2  | OUTREG=XED_REG_R10D
REXR=1 REG=0x3  | OUTREG=XED_REG_R11D
REXR=1 REG=0x4  | OUTREG=XED_REG_R12D
REXR=1 REG=0x5  | OUTREG=XED_REG_R13D
REXR=1 REG=0x6  | OUTREG=XED_REG_R14D
REXR=1 REG=0x7  | OUTREG=XED_REG_R15D

xed-reg-tables.txt/GPR32_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_EAX
REXB=0 RM=0x1  | OUTREG=XED_REG_ECX
REXB=0 RM=0x2  | OUTREG=XED_REG_EDX
REXB=0 RM=0x3  | OUTREG=XED_REG_EBX
REXB=0 RM=0x4  | OUTREG=XED_REG_ESP
REXB=0 RM=0x5  | OUTREG=XED_REG_EBP
REXB=0 RM=0x6  | OUTREG=XED_REG_ESI
REXB=0 RM=0x7  | OUTREG=XED_REG_EDI
REXB=1 RM=0x0  | OUTREG=XED_REG_R8D
REXB=1 RM=0x1  | OUTREG=XED_REG_R9D
REXB=1 RM=0x2  | OUTREG=XED_REG_R10D
REXB=1 RM=0x3  | OUTREG=XED_REG_R11D
REXB=1 RM=0x4  | OUTREG=XED_REG_R12D
REXB=1 RM=0x5  | OUTREG=XED_REG_R13D
REXB=1 RM=0x6  | OUTREG=XED_REG_R14D
REXB=1 RM=0x7  | OUTREG=XED_REG_R15D

xed-reg-tables.txt/GPR32_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 SRM=0x0  | OUTREG=XED_REG_EAX
REXB=0 SRM=0x1  | OUTREG=XED_REG_ECX
REXB=0 SRM=0x2  | OUTREG=XED_REG_EDX
REXB=0 SRM=0x3  | OUTREG=XED_REG_EBX
REXB=0 SRM=0x4  | OUTREG=XED_REG_ESP
REXB=0 SRM=0x5  | OUTREG=XED_REG_EBP
REXB=0 SRM=0x6  | OUTREG=XED_REG_ESI
REXB=0 SRM=0x7  | OUTREG=XED_REG_EDI
REXB=1 SRM=0x0  | OUTREG=XED_REG_R8D
REXB=1 SRM=0x1  | OUTREG=XED_REG_R9D
REXB=1 SRM=0x2  | OUTREG=XED_REG_R10D
REXB=1 SRM=0x3  | OUTREG=XED_REG_R11D
REXB=1 SRM=0x4  | OUTREG=XED_REG_R12D
REXB=1 SRM=0x5  | OUTREG=XED_REG_R13D
REXB=1 SRM=0x6  | OUTREG=XED_REG_R14D
REXB=1 SRM=0x7  | OUTREG=XED_REG_R15D

xed-reg-tables.txt/GPR32_X()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 SIBINDEX=0x0  | OUTREG=XED_REG_EAX
REXX=0 SIBINDEX=0x1  | OUTREG=XED_REG_ECX
REXX=0 SIBINDEX=0x2  | OUTREG=XED_REG_EDX
REXX=0 SIBINDEX=0x3  | OUTREG=XED_REG_EBX
REXX=0 SIBINDEX=0x4  | OUTREG=XED_REG_INVALID
REXX=0 SIBINDEX=0x5  | OUTREG=XED_REG_EBP
REXX=0 SIBINDEX=0x6  | OUTREG=XED_REG_ESI
REXX=0 SIBINDEX=0x7  | OUTREG=XED_REG_EDI
REXX=1 SIBINDEX=0x0  | OUTREG=XED_REG_R8D
REXX=1 SIBINDEX=0x1  | OUTREG=XED_REG_R9D
REXX=1 SIBINDEX=0x2  | OUTREG=XED_REG_R10D
REXX=1 SIBINDEX=0x3  | OUTREG=XED_REG_R11D
REXX=1 SIBINDEX=0x4  | OUTREG=XED_REG_R12D
REXX=1 SIBINDEX=0x5  | OUTREG=XED_REG_R13D
REXX=1 SIBINDEX=0x6  | OUTREG=XED_REG_R14D
REXX=1 SIBINDEX=0x7  | OUTREG=XED_REG_R15D

xed-reg-tables.txt/GPR16_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_AX
REXR=0 REG=0x1  | OUTREG=XED_REG_CX
REXR=0 REG=0x2  | OUTREG=XED_REG_DX
REXR=0 REG=0x3  | OUTREG=XED_REG_BX
REXR=0 REG=0x4  | OUTREG=XED_REG_SP
REXR=0 REG=0x5  | OUTREG=XED_REG_BP
REXR=0 REG=0x6  | OUTREG=XED_REG_SI
REXR=0 REG=0x7  | OUTREG=XED_REG_DI
REXR=1 REG=0x0  | OUTREG=XED_REG_R8W
REXR=1 REG=0x1  | OUTREG=XED_REG_R9W
REXR=1 REG=0x2  | OUTREG=XED_REG_R10W
REXR=1 REG=0x3  | OUTREG=XED_REG_R11W
REXR=1 REG=0x4  | OUTREG=XED_REG_R12W
REXR=1 REG=0x5  | OUTREG=XED_REG_R13W
REXR=1 REG=0x6  | OUTREG=XED_REG_R14W
REXR=1 REG=0x7  | OUTREG=XED_REG_R15W

xed-reg-tables.txt/GPR16_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_AX
REXB=0 RM=0x1  | OUTREG=XED_REG_CX
REXB=0 RM=0x2  | OUTREG=XED_REG_DX
REXB=0 RM=0x3  | OUTREG=XED_REG_BX
REXB=0 RM=0x4  | OUTREG=XED_REG_SP
REXB=0 RM=0x5  | OUTREG=XED_REG_BP
REXB=0 RM=0x6  | OUTREG=XED_REG_SI
REXB=0 RM=0x7  | OUTREG=XED_REG_DI
REXB=1 RM=0x0  | OUTREG=XED_REG_R8W
REXB=1 RM=0x1  | OUTREG=XED_REG_R9W
REXB=1 RM=0x2  | OUTREG=XED_REG_R10W
REXB=1 RM=0x3  | OUTREG=XED_REG_R11W
REXB=1 RM=0x4  | OUTREG=XED_REG_R12W
REXB=1 RM=0x5  | OUTREG=XED_REG_R13W
REXB=1 RM=0x6  | OUTREG=XED_REG_R14W
REXB=1 RM=0x7  | OUTREG=XED_REG_R15W

xed-reg-tables.txt/GPR16_SB()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 SRM=0x0  | OUTREG=XED_REG_AX
REXB=0 SRM=0x1  | OUTREG=XED_REG_CX
REXB=0 SRM=0x2  | OUTREG=XED_REG_DX
REXB=0 SRM=0x3  | OUTREG=XED_REG_BX
REXB=0 SRM=0x4  | OUTREG=XED_REG_SP
REXB=0 SRM=0x5  | OUTREG=XED_REG_BP
REXB=0 SRM=0x6  | OUTREG=XED_REG_SI
REXB=0 SRM=0x7  | OUTREG=XED_REG_DI
REXB=1 SRM=0x0  | OUTREG=XED_REG_R8W
REXB=1 SRM=0x1  | OUTREG=XED_REG_R9W
REXB=1 SRM=0x2  | OUTREG=XED_REG_R10W
REXB=1 SRM=0x3  | OUTREG=XED_REG_R11W
REXB=1 SRM=0x4  | OUTREG=XED_REG_R12W
REXB=1 SRM=0x5  | OUTREG=XED_REG_R13W
REXB=1 SRM=0x6  | OUTREG=XED_REG_R14W
REXB=1 SRM=0x7  | OUTREG=XED_REG_R15W

xed-reg-tables.txt/CR_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_CR0
REXR=0 REG=0x1  | OUTREG=XED_REG_ERROR  enc
REXR=0 REG=0x2  | OUTREG=XED_REG_CR2
REXR=0 REG=0x3  | OUTREG=XED_REG_CR3
REXR=0 REG=0x4  | OUTREG=XED_REG_CR4
REXR=0 REG=0x5  | OUTREG=XED_REG_ERROR
REXR=0 REG=0x6  | OUTREG=XED_REG_ERROR
REXR=0 REG=0x7  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x0  | OUTREG=XED_REG_CR8
REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR

xed-reg-tables.txt/CR_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_CR0
REXB=0 RM=0x1  | OUTREG=XED_REG_ERROR   enc
REXB=0 RM=0x2  | OUTREG=XED_REG_CR2
REXB=0 RM=0x3  | OUTREG=XED_REG_CR3
REXB=0 RM=0x4  | OUTREG=XED_REG_CR4
REXB=0 RM=0x5  | OUTREG=XED_REG_ERROR
REXB=0 RM=0x6  | OUTREG=XED_REG_ERROR
REXB=0 RM=0x7  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x0  | OUTREG=XED_REG_CR8
REXB=1 RM=0x1  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x2  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x3  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x4  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x5  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x6  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x7  | OUTREG=XED_REG_ERROR

xed-reg-tables.txt/DR_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_DR0
REXR=0 REG=0x1  | OUTREG=XED_REG_DR1
REXR=0 REG=0x2  | OUTREG=XED_REG_DR2
REXR=0 REG=0x3  | OUTREG=XED_REG_DR3
REXR=0 REG=0x4  | OUTREG=XED_REG_DR4
REXR=0 REG=0x5  | OUTREG=XED_REG_DR5
REXR=0 REG=0x6  | OUTREG=XED_REG_DR6
REXR=0 REG=0x7  | OUTREG=XED_REG_DR7
REXR=1 REG=0x0  | OUTREG=XED_REG_ERROR enc
REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR

xed-reg-tables.txt/X87()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0x0  | OUTREG=XED_REG_ST0
RM=0x1  | OUTREG=XED_REG_ST1
RM=0x2  | OUTREG=XED_REG_ST2
RM=0x3  | OUTREG=XED_REG_ST3
RM=0x4  | OUTREG=XED_REG_ST4
RM=0x5  | OUTREG=XED_REG_ST5
RM=0x6  | OUTREG=XED_REG_ST6
RM=0x7  | OUTREG=XED_REG_ST7

xed-reg-tables.txt/SEG()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0x0  | OUTREG=XED_REG_ES
REG=0x1  | OUTREG=XED_REG_CS
REG=0x2  | OUTREG=XED_REG_SS
REG=0x3  | OUTREG=XED_REG_DS
REG=0x4  | OUTREG=XED_REG_FS
REG=0x5  | OUTREG=XED_REG_GS
REG=0x6  | OUTREG=XED_REG_ERROR     enc
REG=0x7  | OUTREG=XED_REG_ERROR

xed-reg-tables.txt/SEG_MOV()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0x0  | OUTREG=XED_REG_ES
REG=0x1  | OUTREG=XED_REG_ERROR
REG=0x2  | OUTREG=XED_REG_SS
REG=0x3  | OUTREG=XED_REG_DS
REG=0x4  | OUTREG=XED_REG_FS
REG=0x5  | OUTREG=XED_REG_GS
REG=0x6  | OUTREG=XED_REG_ERROR     enc
REG=0x7  | OUTREG=XED_REG_ERROR

xed-reg-tables.txt/FINAL_DSEG()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=FINAL_DSEG_NOT64()
mode32 | OUTREG=FINAL_DSEG_NOT64()
mode64 | OUTREG=FINAL_DSEG_MODE64()

xed-reg-tables.txt/FINAL_DSEG_NOT64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=1 enc # default data seg
SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=1 # explicit ds seg
SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT0=0
SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=0

xed-reg-tables.txt/FINAL_DSEG_MODE64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1  enc
SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT0=0
SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT0=0
SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1

xed-reg-tables.txt/FINAL_DSEG1()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=FINAL_DSEG1_NOT64()
mode32 | OUTREG=FINAL_DSEG1_NOT64()
mode64 | OUTREG=FINAL_DSEG1_MODE64()

xed-reg-tables.txt/FINAL_DSEG1_NOT64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT1=1 enc # default data seg
SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT1=0
SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT1=1 # explicit ds seg
SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT1=0
SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT1=0
SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT1=0
SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT1=0

xed-reg-tables.txt/FINAL_DSEG1_MODE64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1  enc
SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1
SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1
SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1
SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT1=0
SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT1=0
SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1

xed-reg-tables.txt/FINAL_ESEG()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT0=1
mode32 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT0=1
mode64 | OUTREG=XED_REG_INVALID   USING_DEFAULT_SEGMENT0=1

xed-reg-tables.txt/FINAL_ESEG1()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT1=1
mode32 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT1=1
mode64 | OUTREG=XED_REG_INVALID   USING_DEFAULT_SEGMENT1=1

xed-reg-tables.txt/FINAL_SSEG1()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT1=1
mode32 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT1=1
mode64 | OUTREG=XED_REG_INVALID  USING_DEFAULT_SEGMENT1=1

xed-reg-tables.txt/FINAL_SSEG0()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT0=1
mode32 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT0=1
mode64 | OUTREG=XED_REG_INVALID  USING_DEFAULT_SEGMENT0=1

xed-reg-tables.txt/FINAL_SSEG()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=FINAL_SSEG_NOT64()
mode32 | OUTREG=FINAL_SSEG_NOT64()
mode64 | OUTREG=FINAL_SSEG_MODE64()

xed-reg-tables.txt/FINAL_SSEG_NOT64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=1     enc # default stack seg
SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT0=0
SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT0=0
SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=1 # explicit ss seg

xed-reg-tables.txt/FINAL_SSEG_MODE64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1  enc
SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1
SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT0=0
SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT0=0
SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1

xed-regs-enc.txt/SEGe()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_DS -> nothing
OUTREG=XED_REG_CS -> nothing
OUTREG=XED_REG_ES -> nothing
OUTREG=XED_REG_FS -> nothing
OUTREG=XED_REG_GS -> nothing
OUTREG=XED_REG_SS -> nothing

xed-regs-enc.txt/GPR16e()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_AX -> nothing
OUTREG=XED_REG_BX -> nothing
OUTREG=XED_REG_CX -> nothing
OUTREG=XED_REG_DX -> nothing
OUTREG=XED_REG_SP -> nothing
OUTREG=XED_REG_BP -> nothing
OUTREG=XED_REG_SI -> nothing
OUTREG=XED_REG_DI -> nothing

xed-regs-enc.txt/GPR32e()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode32 OUTREG=GPR32e_m32() -> nothing
mode64 OUTREG=GPR32e_m64() -> nothing

xed-regs-enc.txt/GPR32e_m32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_EAX -> nothing
OUTREG=XED_REG_EBX -> nothing
OUTREG=XED_REG_ECX -> nothing
OUTREG=XED_REG_EDX -> nothing
OUTREG=XED_REG_ESP -> nothing
OUTREG=XED_REG_EBP -> nothing
OUTREG=XED_REG_ESI -> nothing
OUTREG=XED_REG_EDI -> nothing

xed-regs-enc.txt/GPR32e_m64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_EAX -> nothing
OUTREG=XED_REG_EBX -> nothing
OUTREG=XED_REG_ECX -> nothing
OUTREG=XED_REG_EDX -> nothing
OUTREG=XED_REG_ESP -> nothing
OUTREG=XED_REG_EBP -> nothing
OUTREG=XED_REG_ESI -> nothing
OUTREG=XED_REG_EDI -> nothing
OUTREG=XED_REG_R8D -> nothing
OUTREG=XED_REG_R9D -> nothing
OUTREG=XED_REG_R10D -> nothing
OUTREG=XED_REG_R11D -> nothing
OUTREG=XED_REG_R12D -> nothing
OUTREG=XED_REG_R13D -> nothing
OUTREG=XED_REG_R14D -> nothing
OUTREG=XED_REG_R15D -> nothing

xed-regs-enc.txt/GPR64e()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
OUTREG=XED_REG_RAX -> nothing
OUTREG=XED_REG_RBX -> nothing
OUTREG=XED_REG_RCX -> nothing
OUTREG=XED_REG_RDX -> nothing
OUTREG=XED_REG_RSP -> nothing
OUTREG=XED_REG_RBP -> nothing
OUTREG=XED_REG_RSI -> nothing
OUTREG=XED_REG_RDI -> nothing
OUTREG=XED_REG_R8 -> nothing
OUTREG=XED_REG_R9 -> nothing
OUTREG=XED_REG_R10 -> nothing
OUTREG=XED_REG_R11 -> nothing
OUTREG=XED_REG_R12 -> nothing
OUTREG=XED_REG_R13 -> nothing
OUTREG=XED_REG_R14 -> nothing
OUTREG=XED_REG_R15 -> nothing

xed-spine.txt/ISA()::
--------------------------------------------------------------------------------------------------------
PREFIXES() OSZ_NONTERM() ASZ_NONTERM() INSTRUCTIONS() |

amd-xop-dec.txt/AVX_SPLITTER()::
--------------------------------------------------------------------------------------------------------
VEXVALID=3 XOP_INSTRUCTIONS() |

amd-xop-dec.txt/EVEX_SPLITTER()::
--------------------------------------------------------------------------------------------------------
VEXVALID=3 XOP_INSTRUCTIONS() |

amd-xop-enc.txt/VEXED_REX()::
--------------------------------------------------------------------------------------------------------
VEXVALID=3 -> XOP_ENC()

amd-xop-enc.txt/XOP_TYPE_ENC()::
--------------------------------------------------------------------------------------------------------
XMAP8       -> 0x8F
XMAP9       -> 0x8F
XMAPA       -> 0x8F
otherwise   -> error

amd-xop-enc.txt/XOP_MAP_ENC()::
--------------------------------------------------------------------------------------------------------
XMAP8  REXW[w] -> 0b0_1000 w
XMAP9  REXW[w] -> 0b0_1001 w
XMAPA  REXW[w] -> 0b0_1010 w
otherwise      -> error

amd-xop-enc.txt/XOP_REXXB_ENC()::
--------------------------------------------------------------------------------------------------------
mode64  REXX=0 REXB=0  -> 0b11
mode64  REXX=1 REXB=0  -> 0b01
mode64  REXX=0 REXB=1  -> 0b10
mode64  REXX=1 REXB=1  -> 0b00
not64   REXX=0 REXB=0  -> 0b11
not64   REXX=1 REXB=0  -> error
not64   REXX=0 REXB=1  -> error
not64   REXX=1 REXB=1  -> error
otherwise              -> nothing

avx-imm-enc.txt/SE_IMM8()::
--------------------------------------------------------------------------------------------------------
true ESRC[ssss] UIMM0[dddd] ->  ssss_dddd

avx-imm.txt/SE_IMM8()::
--------------------------------------------------------------------------------------------------------
UIMM0[ssss_uuuu] | IMM_WIDTH=8 ESRC=ssss

avx-isa-supp.txt/AVX_SPLITTER()::
--------------------------------------------------------------------------------------------------------
VEXVALID=0 INSTRUCTIONS()      |
VEXVALID=1 AVX_INSTRUCTIONS() |

avx-reg-table.txt/XMM_SE()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_SE32()
mode32 | OUTREG=XMM_SE32()
mode64 | OUTREG=XMM_SE64()

avx-reg-table.txt/XMM_SE64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
ESRC=0x0 | OUTREG=XED_REG_XMM0
ESRC=0x1 | OUTREG=XED_REG_XMM1
ESRC=0x2 | OUTREG=XED_REG_XMM2
ESRC=0x3 | OUTREG=XED_REG_XMM3
ESRC=0x4 | OUTREG=XED_REG_XMM4
ESRC=0x5 | OUTREG=XED_REG_XMM5
ESRC=0x6 | OUTREG=XED_REG_XMM6
ESRC=0x7 | OUTREG=XED_REG_XMM7
ESRC=0x8 | OUTREG=XED_REG_XMM8
ESRC=0x9 | OUTREG=XED_REG_XMM9
ESRC=0xA | OUTREG=XED_REG_XMM10
ESRC=0xB | OUTREG=XED_REG_XMM11
ESRC=0xC | OUTREG=XED_REG_XMM12
ESRC=0xD | OUTREG=XED_REG_XMM13
ESRC=0xE | OUTREG=XED_REG_XMM14
ESRC=0xF | OUTREG=XED_REG_XMM15

avx-reg-table.txt/XMM_SE32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
ESRC=0 | OUTREG=XED_REG_XMM0    enc
ESRC=1 | OUTREG=XED_REG_XMM1    enc
ESRC=2 | OUTREG=XED_REG_XMM2    enc
ESRC=3 | OUTREG=XED_REG_XMM3    enc
ESRC=4 | OUTREG=XED_REG_XMM4    enc
ESRC=5 | OUTREG=XED_REG_XMM5    enc
ESRC=6 | OUTREG=XED_REG_XMM6    enc
ESRC=7 | OUTREG=XED_REG_XMM7    enc
ESRC=0x8 | OUTREG=XED_REG_XMM0
ESRC=0x9 | OUTREG=XED_REG_XMM1
ESRC=0xA | OUTREG=XED_REG_XMM2
ESRC=0xB | OUTREG=XED_REG_XMM3
ESRC=0xC | OUTREG=XED_REG_XMM4
ESRC=0xD | OUTREG=XED_REG_XMM5
ESRC=0xE | OUTREG=XED_REG_XMM6
ESRC=0xF | OUTREG=XED_REG_XMM7

avx-reg-table.txt/YMM_SE()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_SE32()
mode32 | OUTREG=YMM_SE32()
mode64 | OUTREG=YMM_SE64()

avx-reg-table.txt/YMM_SE64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
ESRC=0x0 | OUTREG=XED_REG_YMM0
ESRC=0x1 | OUTREG=XED_REG_YMM1
ESRC=0x2 | OUTREG=XED_REG_YMM2
ESRC=0x3 | OUTREG=XED_REG_YMM3
ESRC=0x4 | OUTREG=XED_REG_YMM4
ESRC=0x5 | OUTREG=XED_REG_YMM5
ESRC=0x6 | OUTREG=XED_REG_YMM6
ESRC=0x7 | OUTREG=XED_REG_YMM7
ESRC=0x8 | OUTREG=XED_REG_YMM8
ESRC=0x9 | OUTREG=XED_REG_YMM9
ESRC=0xA | OUTREG=XED_REG_YMM10
ESRC=0xB | OUTREG=XED_REG_YMM11
ESRC=0xC | OUTREG=XED_REG_YMM12
ESRC=0xD | OUTREG=XED_REG_YMM13
ESRC=0xE | OUTREG=XED_REG_YMM14
ESRC=0xF | OUTREG=XED_REG_YMM15

avx-reg-table.txt/YMM_SE32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
ESRC=0 | OUTREG=XED_REG_YMM0        enc
ESRC=1 | OUTREG=XED_REG_YMM1        enc
ESRC=2 | OUTREG=XED_REG_YMM2        enc
ESRC=3 | OUTREG=XED_REG_YMM3        enc
ESRC=4 | OUTREG=XED_REG_YMM4        enc
ESRC=5 | OUTREG=XED_REG_YMM5        enc
ESRC=6 | OUTREG=XED_REG_YMM6        enc
ESRC=7 | OUTREG=XED_REG_YMM7        enc
ESRC=0x8 | OUTREG=XED_REG_YMM0
ESRC=0x9 | OUTREG=XED_REG_YMM1
ESRC=0xA | OUTREG=XED_REG_YMM2
ESRC=0xB | OUTREG=XED_REG_YMM3
ESRC=0xC | OUTREG=XED_REG_YMM4
ESRC=0xD | OUTREG=XED_REG_YMM5
ESRC=0xE | OUTREG=XED_REG_YMM6
ESRC=0xF | OUTREG=XED_REG_YMM7

avx-reg-table.txt/XMM_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_N_32():
mode32 | OUTREG=XMM_N_32():
mode64 | OUTREG=XMM_N_64():

avx-reg-table.txt/XMM_N_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7 | OUTREG=XED_REG_XMM0
VEXDEST210=6 | OUTREG=XED_REG_XMM1
VEXDEST210=5 | OUTREG=XED_REG_XMM2
VEXDEST210=4 | OUTREG=XED_REG_XMM3
VEXDEST210=3 | OUTREG=XED_REG_XMM4
VEXDEST210=2 | OUTREG=XED_REG_XMM5
VEXDEST210=1 | OUTREG=XED_REG_XMM6
VEXDEST210=0 | OUTREG=XED_REG_XMM7

avx-reg-table.txt/XMM_N_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM0
VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM1
VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM2
VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM3
VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM4
VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM5
VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM6
VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM7
VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM8
VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM9
VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM10
VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM11
VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM12
VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM13
VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM14
VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM15

avx-reg-table.txt/YMM_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_N_32():
mode32 | OUTREG=YMM_N_32():
mode64 | OUTREG=YMM_N_64():

avx-reg-table.txt/YMM_N_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7 | OUTREG=XED_REG_YMM0
VEXDEST210=6 | OUTREG=XED_REG_YMM1
VEXDEST210=5 | OUTREG=XED_REG_YMM2
VEXDEST210=4 | OUTREG=XED_REG_YMM3
VEXDEST210=3 | OUTREG=XED_REG_YMM4
VEXDEST210=2 | OUTREG=XED_REG_YMM5
VEXDEST210=1 | OUTREG=XED_REG_YMM6
VEXDEST210=0 | OUTREG=XED_REG_YMM7

avx-reg-table.txt/YMM_N_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM0
VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM1
VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM2
VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM3
VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM4
VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM5
VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM6
VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM7
VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM8
VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM9
VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM10
VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM11
VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM12
VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM13
VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM14
VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM15

avx-reg-table.txt/YMM_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_R_32():
mode32 | OUTREG=YMM_R_32():
mode64 | OUTREG=YMM_R_64():

avx-reg-table.txt/YMM_R_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0  | OUTREG=XED_REG_YMM0
REG=1  | OUTREG=XED_REG_YMM1
REG=2  | OUTREG=XED_REG_YMM2
REG=3  | OUTREG=XED_REG_YMM3
REG=4  | OUTREG=XED_REG_YMM4
REG=5  | OUTREG=XED_REG_YMM5
REG=6  | OUTREG=XED_REG_YMM6
REG=7  | OUTREG=XED_REG_YMM7

avx-reg-table.txt/YMM_R_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0  | OUTREG=XED_REG_YMM0
REXR=0 REG=1  | OUTREG=XED_REG_YMM1
REXR=0 REG=2  | OUTREG=XED_REG_YMM2
REXR=0 REG=3  | OUTREG=XED_REG_YMM3
REXR=0 REG=4  | OUTREG=XED_REG_YMM4
REXR=0 REG=5  | OUTREG=XED_REG_YMM5
REXR=0 REG=6  | OUTREG=XED_REG_YMM6
REXR=0 REG=7  | OUTREG=XED_REG_YMM7
REXR=1 REG=0  | OUTREG=XED_REG_YMM8
REXR=1 REG=1  | OUTREG=XED_REG_YMM9
REXR=1 REG=2  | OUTREG=XED_REG_YMM10
REXR=1 REG=3  | OUTREG=XED_REG_YMM11
REXR=1 REG=4  | OUTREG=XED_REG_YMM12
REXR=1 REG=5  | OUTREG=XED_REG_YMM13
REXR=1 REG=6  | OUTREG=XED_REG_YMM14
REXR=1 REG=7  | OUTREG=XED_REG_YMM15

avx-reg-table.txt/YMM_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_B_32():
mode32 | OUTREG=YMM_B_32():
mode64 | OUTREG=YMM_B_64():

avx-reg-table.txt/YMM_B_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0  | OUTREG=XED_REG_YMM0
RM=1  | OUTREG=XED_REG_YMM1
RM=2  | OUTREG=XED_REG_YMM2
RM=3  | OUTREG=XED_REG_YMM3
RM=4  | OUTREG=XED_REG_YMM4
RM=5  | OUTREG=XED_REG_YMM5
RM=6  | OUTREG=XED_REG_YMM6
RM=7  | OUTREG=XED_REG_YMM7

avx-reg-table.txt/YMM_B_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0  | OUTREG=XED_REG_YMM0
REXB=0 RM=1  | OUTREG=XED_REG_YMM1
REXB=0 RM=2  | OUTREG=XED_REG_YMM2
REXB=0 RM=3  | OUTREG=XED_REG_YMM3
REXB=0 RM=4  | OUTREG=XED_REG_YMM4
REXB=0 RM=5  | OUTREG=XED_REG_YMM5
REXB=0 RM=6  | OUTREG=XED_REG_YMM6
REXB=0 RM=7  | OUTREG=XED_REG_YMM7
REXB=1 RM=0  | OUTREG=XED_REG_YMM8
REXB=1 RM=1  | OUTREG=XED_REG_YMM9
REXB=1 RM=2  | OUTREG=XED_REG_YMM10
REXB=1 RM=3  | OUTREG=XED_REG_YMM11
REXB=1 RM=4  | OUTREG=XED_REG_YMM12
REXB=1 RM=5  | OUTREG=XED_REG_YMM13
REXB=1 RM=6  | OUTREG=XED_REG_YMM14
REXB=1 RM=7  | OUTREG=XED_REG_YMM15

avx-spine.txt/ISA()::
--------------------------------------------------------------------------------------------------------
PREFIXES() OSZ_NONTERM() ASZ_NONTERM() AVX_SPLITTER() |

avx-vex-enc.txt/VEXED_REX()::
--------------------------------------------------------------------------------------------------------
VEXVALID=0 -> REX_PREFIX_ENC()
VEXVALID=1 -> NEWVEX_ENC()
SEQUENCE NEWVEX_ENC_BIND
VEX_TYPE_ENC_BIND
VEX_REXR_ENC_BIND
VEX_REXXB_ENC_BIND
VEX_MAP_ENC_BIND
VEX_REG_ENC_BIND
VEX_ESCVL_ENC_BIND
SEQUENCE  NEWVEX_ENC_EMIT
VEX_TYPE_ENC_EMIT
VEX_REXR_ENC_EMIT
VEX_REXXB_ENC_EMIT
VEX_MAP_ENC_EMIT
VEX_REG_ENC_EMIT
VEX_ESCVL_ENC_EMIT

avx-vex-enc.txt/VEX_TYPE_ENC()::
--------------------------------------------------------------------------------------------------------
REXX=1      -> 0xC4 VEX_C4=1
REXB=1      -> 0xC4 VEX_C4=1
MAP=0       -> 0xC4 VEX_C4=1
MAP=2       -> 0xC4 VEX_C4=1
MAP=3       -> 0xC4 VEX_C4=1
REXW=1      -> 0xC4 VEX_C4=1
otherwise   -> 0xC5 VEX_C4=0

avx-vex-enc.txt/VEX_REXR_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXR=1 -> 0b0
mode64 REXR=0 -> 0b1
not64 REXR=1 -> error
not64 REXR=0 -> 0b1

avx-vex-enc.txt/VEX_REXXB_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 VEX_C4=1  REXX=0 REXB=0  -> 0b11
mode64 VEX_C4=1  REXX=1 REXB=0  -> 0b01
mode64 VEX_C4=1  REXX=0 REXB=1  -> 0b10
mode64 VEX_C4=1  REXX=1 REXB=1  -> 0b00
not64 VEX_C4=1  REXX=0 REXB=0  -> 0b11
not64 VEX_C4=1  REXX=1 REXB=0  -> error
not64 VEX_C4=1  REXX=0 REXB=1  -> error
not64 VEX_C4=1  REXX=1 REXB=1  -> error
otherwise                       -> nothing

avx-vex-enc.txt/VEX_MAP_ENC()::
--------------------------------------------------------------------------------------------------------
VEX_C4=1  MAP=0 REXW[w] -> 0b0_0000 w
VEX_C4=1  MAP=1 REXW[w] -> 0b0_0001 w
VEX_C4=1  MAP=2 REXW[w] -> 0b0_0010 w
VEX_C4=1  MAP=3 REXW[w] -> 0b0_0011 w
otherwise               -> nothing

avx-vex-enc.txt/VEX_REG_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 VEXDEST3[u]  VEXDEST210[ddd] -> u_ddd
not64  VEXDEST3[u]  VEXDEST210[ddd] -> 1_ddd

avx-vex-enc.txt/VEX_ESCVL_ENC()::
--------------------------------------------------------------------------------------------------------
VL128 VNP -> 0b000
VL128 V66 -> 0b001
VL128 VF3 -> 0b010
VL128 VF2 -> 0b011
VL256 VNP -> 0b100
VL256 V66 -> 0b101
VL256 VF3 -> 0b110
VL256 VF2 -> 0b111

avx512-addressing-dec.txt/UISA_VMODRM_ZMM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00  UISA_VSIB_ZMM()             |
MOD=0b01  UISA_VSIB_ZMM() MEMDISP8()  |
MOD=0b10  UISA_VSIB_ZMM() MEMDISP32() |

avx512-addressing-dec.txt/UISA_VMODRM_YMM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00  UISA_VSIB_YMM()             |
MOD=0b01  UISA_VSIB_YMM() MEMDISP8()  |
MOD=0b10  UISA_VSIB_YMM() MEMDISP32() |

avx512-addressing-dec.txt/UISA_VMODRM_XMM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00  UISA_VSIB_XMM()             |
MOD=0b01  UISA_VSIB_XMM() MEMDISP8()  |
MOD=0b10  UISA_VSIB_XMM() MEMDISP32() |

avx512-addressing-dec.txt/UISA_VSIB_ZMM()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=8

avx512-addressing-dec.txt/UISA_VSIB_YMM()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=8

avx512-addressing-dec.txt/UISA_VSIB_XMM()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=8

avx512-addressing-dec.txt/UISA_VSIB_INDEX_ZMM()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM0
VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM1
VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM2
VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM3
VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM4
VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM5
VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM6
VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM7
VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM8
VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM9
VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM10
VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM11
VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM12
VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM13
VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM14
VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM15
VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM16
VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM17
VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM18
VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM19
VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM20
VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM21
VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM22
VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM23
VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM24
VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM25
VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM26
VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM27
VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM28
VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM29
VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM30
VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM31

avx512-addressing-dec.txt/UISA_VSIB_INDEX_YMM()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM0
VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM1
VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM2
VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM3
VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM4
VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM5
VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM6
VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM7
VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM8
VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM9
VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM10
VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM11
VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM12
VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM13
VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM14
VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM15
VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM16
VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM17
VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM18
VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM19
VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM20
VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM21
VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM22
VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM23
VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM24
VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM25
VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM26
VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM27
VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM28
VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM29
VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM30
VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM31

avx512-addressing-dec.txt/UISA_VSIB_INDEX_XMM()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM0
VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM1
VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM2
VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM3
VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM4
VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM5
VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM6
VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM7
VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM8
VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM9
VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM10
VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM11
VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM12
VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM13
VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM14
VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM15
VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM16
VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM17
VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM18
VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM19
VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM20
VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM21
VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM22
VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM23
VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM24
VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM25
VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM26
VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM27
VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM28
VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM29
VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM30
VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM31

avx512-addressing-dec.txt/UISA_VSIB_BASE()::
--------------------------------------------------------------------------------------------------------
REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=0 SIBBASE=5 MOD!=0 | BASE0=ArBP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()

avx512-addressing-enc.txt/UISA_ENC_INDEX_ZMM()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_ZMM0   -> VEXDEST4=0 REXX=0 SIBINDEX=0
INDEX=XED_REG_ZMM1   -> VEXDEST4=0 REXX=0 SIBINDEX=1
INDEX=XED_REG_ZMM2   -> VEXDEST4=0 REXX=0 SIBINDEX=2
INDEX=XED_REG_ZMM3   -> VEXDEST4=0 REXX=0 SIBINDEX=3
INDEX=XED_REG_ZMM4   -> VEXDEST4=0 REXX=0 SIBINDEX=4
INDEX=XED_REG_ZMM5   -> VEXDEST4=0 REXX=0 SIBINDEX=5
INDEX=XED_REG_ZMM6   -> VEXDEST4=0 REXX=0 SIBINDEX=6
INDEX=XED_REG_ZMM7   -> VEXDEST4=0 REXX=0 SIBINDEX=7
INDEX=XED_REG_ZMM8   -> VEXDEST4=0 REXX=1 SIBINDEX=0
INDEX=XED_REG_ZMM9   -> VEXDEST4=0 REXX=1 SIBINDEX=1
INDEX=XED_REG_ZMM10  -> VEXDEST4=0 REXX=1 SIBINDEX=2
INDEX=XED_REG_ZMM11  -> VEXDEST4=0 REXX=1 SIBINDEX=3
INDEX=XED_REG_ZMM12  -> VEXDEST4=0 REXX=1 SIBINDEX=4
INDEX=XED_REG_ZMM13  -> VEXDEST4=0 REXX=1 SIBINDEX=5
INDEX=XED_REG_ZMM14  -> VEXDEST4=0 REXX=1 SIBINDEX=6
INDEX=XED_REG_ZMM15  -> VEXDEST4=0 REXX=1 SIBINDEX=7
INDEX=XED_REG_ZMM16  -> VEXDEST4=1 REXX=0 SIBINDEX=0
INDEX=XED_REG_ZMM17  -> VEXDEST4=1 REXX=0 SIBINDEX=1
INDEX=XED_REG_ZMM18  -> VEXDEST4=1 REXX=0 SIBINDEX=2
INDEX=XED_REG_ZMM19  -> VEXDEST4=1 REXX=0 SIBINDEX=3
INDEX=XED_REG_ZMM20  -> VEXDEST4=1 REXX=0 SIBINDEX=4
INDEX=XED_REG_ZMM21  -> VEXDEST4=1 REXX=0 SIBINDEX=5
INDEX=XED_REG_ZMM22  -> VEXDEST4=1 REXX=0 SIBINDEX=6
INDEX=XED_REG_ZMM23  -> VEXDEST4=1 REXX=0 SIBINDEX=7
INDEX=XED_REG_ZMM24  -> VEXDEST4=1 REXX=1 SIBINDEX=0
INDEX=XED_REG_ZMM25  -> VEXDEST4=1 REXX=1 SIBINDEX=1
INDEX=XED_REG_ZMM26  -> VEXDEST4=1 REXX=1 SIBINDEX=2
INDEX=XED_REG_ZMM27  -> VEXDEST4=1 REXX=1 SIBINDEX=3
INDEX=XED_REG_ZMM28  -> VEXDEST4=1 REXX=1 SIBINDEX=4
INDEX=XED_REG_ZMM29  -> VEXDEST4=1 REXX=1 SIBINDEX=5
INDEX=XED_REG_ZMM30  -> VEXDEST4=1 REXX=1 SIBINDEX=6
INDEX=XED_REG_ZMM31  -> VEXDEST4=1 REXX=1 SIBINDEX=7

avx512-addressing-enc.txt/UISA_ENC_INDEX_YMM()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_YMM0   -> VEXDEST4=0 REXX=0 SIBINDEX=0
INDEX=XED_REG_YMM1   -> VEXDEST4=0 REXX=0 SIBINDEX=1
INDEX=XED_REG_YMM2   -> VEXDEST4=0 REXX=0 SIBINDEX=2
INDEX=XED_REG_YMM3   -> VEXDEST4=0 REXX=0 SIBINDEX=3
INDEX=XED_REG_YMM4   -> VEXDEST4=0 REXX=0 SIBINDEX=4
INDEX=XED_REG_YMM5   -> VEXDEST4=0 REXX=0 SIBINDEX=5
INDEX=XED_REG_YMM6   -> VEXDEST4=0 REXX=0 SIBINDEX=6
INDEX=XED_REG_YMM7   -> VEXDEST4=0 REXX=0 SIBINDEX=7
INDEX=XED_REG_YMM8   -> VEXDEST4=0 REXX=1 SIBINDEX=0
INDEX=XED_REG_YMM9   -> VEXDEST4=0 REXX=1 SIBINDEX=1
INDEX=XED_REG_YMM10  -> VEXDEST4=0 REXX=1 SIBINDEX=2
INDEX=XED_REG_YMM11  -> VEXDEST4=0 REXX=1 SIBINDEX=3
INDEX=XED_REG_YMM12  -> VEXDEST4=0 REXX=1 SIBINDEX=4
INDEX=XED_REG_YMM13  -> VEXDEST4=0 REXX=1 SIBINDEX=5
INDEX=XED_REG_YMM14  -> VEXDEST4=0 REXX=1 SIBINDEX=6
INDEX=XED_REG_YMM15  -> VEXDEST4=0 REXX=1 SIBINDEX=7
INDEX=XED_REG_YMM16  -> VEXDEST4=1 REXX=0 SIBINDEX=0
INDEX=XED_REG_YMM17  -> VEXDEST4=1 REXX=0 SIBINDEX=1
INDEX=XED_REG_YMM18  -> VEXDEST4=1 REXX=0 SIBINDEX=2
INDEX=XED_REG_YMM19  -> VEXDEST4=1 REXX=0 SIBINDEX=3
INDEX=XED_REG_YMM20  -> VEXDEST4=1 REXX=0 SIBINDEX=4
INDEX=XED_REG_YMM21  -> VEXDEST4=1 REXX=0 SIBINDEX=5
INDEX=XED_REG_YMM22  -> VEXDEST4=1 REXX=0 SIBINDEX=6
INDEX=XED_REG_YMM23  -> VEXDEST4=1 REXX=0 SIBINDEX=7
INDEX=XED_REG_YMM24  -> VEXDEST4=1 REXX=1 SIBINDEX=0
INDEX=XED_REG_YMM25  -> VEXDEST4=1 REXX=1 SIBINDEX=1
INDEX=XED_REG_YMM26  -> VEXDEST4=1 REXX=1 SIBINDEX=2
INDEX=XED_REG_YMM27  -> VEXDEST4=1 REXX=1 SIBINDEX=3
INDEX=XED_REG_YMM28  -> VEXDEST4=1 REXX=1 SIBINDEX=4
INDEX=XED_REG_YMM29  -> VEXDEST4=1 REXX=1 SIBINDEX=5
INDEX=XED_REG_YMM30  -> VEXDEST4=1 REXX=1 SIBINDEX=6
INDEX=XED_REG_YMM31  -> VEXDEST4=1 REXX=1 SIBINDEX=7

avx512-addressing-enc.txt/UISA_ENC_INDEX_XMM()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_XMM0   -> VEXDEST4=0 REXX=0 SIBINDEX=0
INDEX=XED_REG_XMM1   -> VEXDEST4=0 REXX=0 SIBINDEX=1
INDEX=XED_REG_XMM2   -> VEXDEST4=0 REXX=0 SIBINDEX=2
INDEX=XED_REG_XMM3   -> VEXDEST4=0 REXX=0 SIBINDEX=3
INDEX=XED_REG_XMM4   -> VEXDEST4=0 REXX=0 SIBINDEX=4
INDEX=XED_REG_XMM5   -> VEXDEST4=0 REXX=0 SIBINDEX=5
INDEX=XED_REG_XMM6   -> VEXDEST4=0 REXX=0 SIBINDEX=6
INDEX=XED_REG_XMM7   -> VEXDEST4=0 REXX=0 SIBINDEX=7
INDEX=XED_REG_XMM8   -> VEXDEST4=0 REXX=1 SIBINDEX=0
INDEX=XED_REG_XMM9   -> VEXDEST4=0 REXX=1 SIBINDEX=1
INDEX=XED_REG_XMM10  -> VEXDEST4=0 REXX=1 SIBINDEX=2
INDEX=XED_REG_XMM11  -> VEXDEST4=0 REXX=1 SIBINDEX=3
INDEX=XED_REG_XMM12  -> VEXDEST4=0 REXX=1 SIBINDEX=4
INDEX=XED_REG_XMM13  -> VEXDEST4=0 REXX=1 SIBINDEX=5
INDEX=XED_REG_XMM14  -> VEXDEST4=0 REXX=1 SIBINDEX=6
INDEX=XED_REG_XMM15  -> VEXDEST4=0 REXX=1 SIBINDEX=7
INDEX=XED_REG_XMM16  -> VEXDEST4=1 REXX=0 SIBINDEX=0
INDEX=XED_REG_XMM17  -> VEXDEST4=1 REXX=0 SIBINDEX=1
INDEX=XED_REG_XMM18  -> VEXDEST4=1 REXX=0 SIBINDEX=2
INDEX=XED_REG_XMM19  -> VEXDEST4=1 REXX=0 SIBINDEX=3
INDEX=XED_REG_XMM20  -> VEXDEST4=1 REXX=0 SIBINDEX=4
INDEX=XED_REG_XMM21  -> VEXDEST4=1 REXX=0 SIBINDEX=5
INDEX=XED_REG_XMM22  -> VEXDEST4=1 REXX=0 SIBINDEX=6
INDEX=XED_REG_XMM23  -> VEXDEST4=1 REXX=0 SIBINDEX=7
INDEX=XED_REG_XMM24  -> VEXDEST4=1 REXX=1 SIBINDEX=0
INDEX=XED_REG_XMM25  -> VEXDEST4=1 REXX=1 SIBINDEX=1
INDEX=XED_REG_XMM26  -> VEXDEST4=1 REXX=1 SIBINDEX=2
INDEX=XED_REG_XMM27  -> VEXDEST4=1 REXX=1 SIBINDEX=3
INDEX=XED_REG_XMM28  -> VEXDEST4=1 REXX=1 SIBINDEX=4
INDEX=XED_REG_XMM29  -> VEXDEST4=1 REXX=1 SIBINDEX=5
INDEX=XED_REG_XMM30  -> VEXDEST4=1 REXX=1 SIBINDEX=6
INDEX=XED_REG_XMM31  -> VEXDEST4=1 REXX=1 SIBINDEX=7

avx512-disp8-enc.txt/ESIZE_128_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_64_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_32_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_16_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_8_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_4_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_2_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/ESIZE_1_BITS()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_MOVDDUP()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_FULLMEM()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_HALFMEM()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_QUARTERMEM()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_EIGHTHMEM()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_READER_BYTE()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_READER_WORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_LDOP_D()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_LDOP_Q()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_STORE_BYTE()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_STORE_WORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE1_BYTE()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE1_WORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_SCALAR()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE1_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_READER()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_READER_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_LDOP()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_STORE()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GPR_WRITER_STORE_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_MEM128()::
--------------------------------------------------------------------------------------------------------
BCAST!=0    -> error
otherwise   -> BCRC=0

avx512-disp8-enc.txt/NELEM_TUPLE1()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_GSCAT()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE2()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE4()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_TUPLE8()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/NELEM_FULL()::
--------------------------------------------------------------------------------------------------------
BCAST!=0    -> BCRC=1
otherwise   -> BCRC=0

avx512-disp8-enc.txt/NELEM_HALF()::
--------------------------------------------------------------------------------------------------------
BCAST!=0    -> BCRC=1
otherwise   -> BCRC=0

avx512-disp8-enc.txt/FIX_ROUND_LEN512()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8-enc.txt/FIX_ROUND_LEN128()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

avx512-disp8.txt/ESIZE_128_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=128

avx512-disp8.txt/ESIZE_64_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=64

avx512-disp8.txt/ESIZE_32_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=32

avx512-disp8.txt/ESIZE_16_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=16

avx512-disp8.txt/ESIZE_8_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=8

avx512-disp8.txt/ESIZE_4_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=4

avx512-disp8.txt/ESIZE_2_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=2

avx512-disp8.txt/ESIZE_1_BITS()::
--------------------------------------------------------------------------------------------------------
REX=0 | ELEMENT_SIZE=1

avx512-disp8.txt/NELEM_MOVDDUP()::
--------------------------------------------------------------------------------------------------------
ELEMENT_SIZE=64  VL128  | NELEM=1
ELEMENT_SIZE=64  VL256  | NELEM=4
ELEMENT_SIZE=64  VL512  | NELEM=8

avx512-disp8.txt/NELEM_FULLMEM()::
--------------------------------------------------------------------------------------------------------
ELEMENT_SIZE=1     VL512  | NELEM=512
ELEMENT_SIZE=2     VL512  | NELEM=256
ELEMENT_SIZE=4     VL512  | NELEM=128
ELEMENT_SIZE=8     VL512  | NELEM=64
ELEMENT_SIZE=16  VL512  | NELEM=32
ELEMENT_SIZE=32  VL512  | NELEM=16
ELEMENT_SIZE=64  VL512  | NELEM=8
ELEMENT_SIZE=128 VL512  | NELEM=4
ELEMENT_SIZE=256 VL512  | NELEM=2
ELEMENT_SIZE=512 VL512  | NELEM=1
ELEMENT_SIZE=1     VL256  | NELEM=256
ELEMENT_SIZE=2     VL256  | NELEM=128
ELEMENT_SIZE=4     VL256  | NELEM=64
ELEMENT_SIZE=8     VL256  | NELEM=32
ELEMENT_SIZE=16  VL256  | NELEM=16
ELEMENT_SIZE=32  VL256  | NELEM=8
ELEMENT_SIZE=64  VL256  | NELEM=4
ELEMENT_SIZE=128 VL256  | NELEM=2
ELEMENT_SIZE=256 VL256  | NELEM=1
ELEMENT_SIZE=512 VL256  | error
ELEMENT_SIZE=1     VL128  | NELEM=128
ELEMENT_SIZE=2     VL128  | NELEM=64
ELEMENT_SIZE=4     VL128  | NELEM=32
ELEMENT_SIZE=8     VL128  | NELEM=16
ELEMENT_SIZE=16  VL128  | NELEM=8
ELEMENT_SIZE=32  VL128  | NELEM=4
ELEMENT_SIZE=64  VL128  | NELEM=2
ELEMENT_SIZE=128 VL128  | NELEM=1
ELEMENT_SIZE=256 VL128  | error
ELEMENT_SIZE=512 VL128  | error

avx512-disp8.txt/NELEM_HALFMEM()::
--------------------------------------------------------------------------------------------------------
ELEMENT_SIZE=1     VL512 | NELEM=256
ELEMENT_SIZE=2     VL512 | NELEM=128
ELEMENT_SIZE=4     VL512 | NELEM=64
ELEMENT_SIZE=8     VL512 | NELEM=32
ELEMENT_SIZE=16  VL512 | NELEM=16
ELEMENT_SIZE=32  VL512 | NELEM=8
ELEMENT_SIZE=64  VL512 | NELEM=4
ELEMENT_SIZE=128 VL512 | NELEM=2
ELEMENT_SIZE=256 VL512 | NELEM=1
ELEMENT_SIZE=512 VL512 | error
ELEMENT_SIZE=1     VL256 | NELEM=128
ELEMENT_SIZE=2     VL256 | NELEM=64
ELEMENT_SIZE=4     VL256 | NELEM=32
ELEMENT_SIZE=8     VL256 | NELEM=16
ELEMENT_SIZE=16  VL256 | NELEM=8
ELEMENT_SIZE=32  VL256 | NELEM=4
ELEMENT_SIZE=64  VL256 | NELEM=2
ELEMENT_SIZE=128 VL256 | NELEM=1
ELEMENT_SIZE=256 VL256 | error
ELEMENT_SIZE=512 VL256 | error
ELEMENT_SIZE=1     VL128 | NELEM=64
ELEMENT_SIZE=2     VL128 | NELEM=32
ELEMENT_SIZE=4     VL128 | NELEM=16
ELEMENT_SIZE=8     VL128 | NELEM=8
ELEMENT_SIZE=16  VL128 | NELEM=4
ELEMENT_SIZE=32  VL128 | NELEM=2
ELEMENT_SIZE=64  VL128 | NELEM=1
ELEMENT_SIZE=128 VL128 | error
ELEMENT_SIZE=256 VL128 | error
ELEMENT_SIZE=512 VL128 | error

avx512-disp8.txt/NELEM_QUARTERMEM()::
--------------------------------------------------------------------------------------------------------
ELEMENT_SIZE=1     VL512 | NELEM=128
ELEMENT_SIZE=2     VL512 | NELEM=64
ELEMENT_SIZE=4     VL512 | NELEM=32
ELEMENT_SIZE=8     VL512 | NELEM=16
ELEMENT_SIZE=16  VL512 | NELEM=8
ELEMENT_SIZE=32  VL512 | NELEM=4
ELEMENT_SIZE=64  VL512 | NELEM=2
ELEMENT_SIZE=128 VL512 | NELEM=1
ELEMENT_SIZE=256 VL512 | error
ELEMENT_SIZE=512 VL512 | error
ELEMENT_SIZE=1     VL256 | NELEM=64
ELEMENT_SIZE=2     VL256 | NELEM=32
ELEMENT_SIZE=4     VL256 | NELEM=16
ELEMENT_SIZE=8     VL256 | NELEM=8
ELEMENT_SIZE=16  VL256 | NELEM=4
ELEMENT_SIZE=32  VL256 | NELEM=2
ELEMENT_SIZE=64  VL256 | NELEM=1
ELEMENT_SIZE=128 VL256 | error
ELEMENT_SIZE=256 VL256 | error
ELEMENT_SIZE=512 VL256 | error
ELEMENT_SIZE=1     VL128 | NELEM=32
ELEMENT_SIZE=2     VL128 | NELEM=16
ELEMENT_SIZE=4     VL128 | NELEM=8
ELEMENT_SIZE=8     VL128 | NELEM=4
ELEMENT_SIZE=16  VL128 | NELEM=2
ELEMENT_SIZE=32  VL128 | NELEM=1
ELEMENT_SIZE=64  VL128 | error
ELEMENT_SIZE=128 VL128 | error
ELEMENT_SIZE=256 VL128 | error
ELEMENT_SIZE=512 VL128 | error

avx512-disp8.txt/NELEM_EIGHTHMEM()::
--------------------------------------------------------------------------------------------------------
ELEMENT_SIZE=1     VL512 | NELEM=64
ELEMENT_SIZE=2     VL512 | NELEM=32
ELEMENT_SIZE=4     VL512 | NELEM=16
ELEMENT_SIZE=8     VL512 | NELEM=8
ELEMENT_SIZE=16  VL512 | NELEM=4
ELEMENT_SIZE=32  VL512 | NELEM=2
ELEMENT_SIZE=64  VL512 | NELEM=1
ELEMENT_SIZE=128 VL512 | error
ELEMENT_SIZE=256 VL512 | error
ELEMENT_SIZE=512 VL512 | error
ELEMENT_SIZE=1     VL256 | NELEM=32
ELEMENT_SIZE=2     VL256 | NELEM=16
ELEMENT_SIZE=4     VL256 | NELEM=8
ELEMENT_SIZE=8     VL256 | NELEM=4
ELEMENT_SIZE=16  VL256 | NELEM=2
ELEMENT_SIZE=32  VL256 | NELEM=1
ELEMENT_SIZE=64  VL256 | error
ELEMENT_SIZE=128 VL256 | error
ELEMENT_SIZE=256 VL256 | error
ELEMENT_SIZE=512 VL256 | error
ELEMENT_SIZE=1     VL128 | NELEM=16
ELEMENT_SIZE=2     VL128 | NELEM=8
ELEMENT_SIZE=4     VL128 | NELEM=4
ELEMENT_SIZE=8     VL128 | NELEM=2
ELEMENT_SIZE=16  VL128 | NELEM=1
ELEMENT_SIZE=32  VL128 | error
ELEMENT_SIZE=64  VL128 | error
ELEMENT_SIZE=128 VL128 | error
ELEMENT_SIZE=256 VL128 | error
ELEMENT_SIZE=512 VL128 | error

avx512-disp8.txt/NELEM_GPR_READER_BYTE()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_READER_WORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_LDOP_D()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_LDOP_Q()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_STORE_BYTE()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_STORE_WORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_TUPLE1_BYTE()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_TUPLE1_WORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_SCALAR()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_TUPLE1_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_READER()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_READER_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_LDOP()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_STORE()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GPR_WRITER_STORE_SUBDWORD()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_TUPLE1()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_GSCAT()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=1
VL256  | NELEM=1
VL512  | NELEM=1

avx512-disp8.txt/NELEM_TUPLE2()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=2
VL256  | NELEM=2
VL512  | NELEM=2

avx512-disp8.txt/NELEM_TUPLE4()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=4
VL256  | NELEM=4
VL512  | NELEM=4

avx512-disp8.txt/NELEM_TUPLE8()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=8
VL256  | NELEM=8
VL512  | NELEM=8

avx512-disp8.txt/NELEM_MEM128()::
--------------------------------------------------------------------------------------------------------
BCRC=0b0  | ELEMENT_SIZE=64 NELEM=2
BCRC=0b1  | error

avx512-disp8.txt/NELEM_FULL()::
--------------------------------------------------------------------------------------------------------
BCRC=0b0  ELEMENT_SIZE=16 VL512 | NELEM=32
BCRC=0b1  ELEMENT_SIZE=16 VL512 | NELEM=1  EMX_BROADCAST_1TO32_16
BCRC=0b0  ELEMENT_SIZE=32 VL512 | NELEM=16
BCRC=0b1  ELEMENT_SIZE=32 VL512 | NELEM=1  EMX_BROADCAST_1TO16_32
BCRC=0b0  ELEMENT_SIZE=64 VL512 | NELEM=8
BCRC=0b1  ELEMENT_SIZE=64 VL512 | NELEM=1  EMX_BROADCAST_1TO8_64
BCRC=0b0  ELEMENT_SIZE=16 VL256 | NELEM=16
BCRC=0b1  ELEMENT_SIZE=16 VL256 | NELEM=1  EMX_BROADCAST_1TO16_16
BCRC=0b0  ELEMENT_SIZE=32 VL256 | NELEM=8
BCRC=0b1  ELEMENT_SIZE=32 VL256 | NELEM=1  EMX_BROADCAST_1TO8_32
BCRC=0b0  ELEMENT_SIZE=64 VL256 | NELEM=4
BCRC=0b1  ELEMENT_SIZE=64 VL256 | NELEM=1  EMX_BROADCAST_1TO4_64
BCRC=0b0  ELEMENT_SIZE=16 VL128 | NELEM=8
BCRC=0b1  ELEMENT_SIZE=16 VL128 | NELEM=1  EMX_BROADCAST_1TO8_16
BCRC=0b0  ELEMENT_SIZE=32 VL128 | NELEM=4
BCRC=0b1  ELEMENT_SIZE=32 VL128 | NELEM=1  EMX_BROADCAST_1TO4_32
BCRC=0b0  ELEMENT_SIZE=64 VL128 | NELEM=2
BCRC=0b1  ELEMENT_SIZE=64 VL128 | NELEM=1  EMX_BROADCAST_1TO2_64

avx512-disp8.txt/NELEM_HALF()::
--------------------------------------------------------------------------------------------------------
BCRC=0b0  ELEMENT_SIZE=32 VL512 | NELEM=8
BCRC=0b1  ELEMENT_SIZE=32 VL512 | NELEM=1    EMX_BROADCAST_1TO8_32
BCRC=0b0  ELEMENT_SIZE=32 VL256 | NELEM=4
BCRC=0b1  ELEMENT_SIZE=32 VL256 | NELEM=1    EMX_BROADCAST_1TO4_32
BCRC=0b0  ELEMENT_SIZE=32 VL128 | NELEM=2
BCRC=0b1  ELEMENT_SIZE=32 VL128 | NELEM=1    EMX_BROADCAST_1TO2_32

avx512-disp8.txt/FIX_ROUND_LEN512()::
--------------------------------------------------------------------------------------------------------
mode16 | VL512
mode32 | VL512
mode64 | VL512

avx512-disp8.txt/FIX_ROUND_LEN128()::
--------------------------------------------------------------------------------------------------------
mode16 | VL128
mode32 | VL128
mode64 | VL128

avx512-evex-dec.txt/AVX512_ROUND()::
--------------------------------------------------------------------------------------------------------
LLRC=0b00 | ROUNDC=1 SAE=1
LLRC=0b01 | ROUNDC=2 SAE=1
LLRC=0b10 | ROUNDC=3 SAE=1
LLRC=0b11 | ROUNDC=4 SAE=1

avx512-evex-dec.txt/SAE()::
--------------------------------------------------------------------------------------------------------
BCRC=1 | SAE=1
BCRC=0 | error

avx512-evex-enc.txt/VEXED_REX()::
--------------------------------------------------------------------------------------------------------
VEXVALID=2 -> EVEX_ENC()
SEQUENCE EVEX_ENC_BIND
EVEX_62_REXR_ENC_BIND
EVEX_REXX_ENC_BIND
EVEX_REXB_ENC_BIND
EVEX_REXRR_ENC_BIND
EVEX_MAP_ENC_BIND
EVEX_REXW_VVVV_ENC_BIND
EVEX_UPP_ENC_BIND
EVEX_LL_ENC_BIND
AVX512_EVEX_BYTE3_ENC_BIND
SEQUENCE EVEX_ENC_EMIT
EVEX_62_REXR_ENC_EMIT
EVEX_REXX_ENC_EMIT
EVEX_REXB_ENC_EMIT
EVEX_REXRR_ENC_EMIT
EVEX_MAP_ENC_EMIT
EVEX_REXW_VVVV_ENC_EMIT
EVEX_UPP_ENC_EMIT
EVEX_LL_ENC_EMIT
AVX512_EVEX_BYTE3_ENC_EMIT

avx512-evex-enc.txt/EVEX_62_REXR_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXR=1 -> 0x62 0b0
mode64 REXR=0 -> 0x62 0b1
mode32 REXR=1 -> error
mode32 REXR=0 -> 0x62 0b1

avx512-evex-enc.txt/EVEX_REXX_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXX=1 -> 0b0
mode64 REXX=0 -> 0b1
mode32 REXX=1 -> error
mode32 REXX=0 -> 0b1

avx512-evex-enc.txt/EVEX_REXB_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXB=1 -> 0b0
mode64 REXB=0 -> 0b1
mode32 REXB=1 -> error
mode32 REXB=0 -> 0b1

avx512-evex-enc.txt/EVEX_REXRR_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXRR=1 -> 0b0
mode64 REXRR=0 -> 0b1
mode32 REXRR=1 -> error
mode32 REXRR=0 -> 0b1

avx512-evex-enc.txt/EVEX_MAP_ENC()::
--------------------------------------------------------------------------------------------------------
MAP=0  -> 0b0000
MAP=1  -> 0b0001
MAP=2  -> 0b0010
MAP=3  -> 0b0011

avx512-evex-enc.txt/EVEX_REXW_VVVV_ENC()::
--------------------------------------------------------------------------------------------------------
true REXW[w] VEXDEST3[u] VEXDEST210[ddd] -> w u_ddd

avx512-evex-enc.txt/EVEX_UPP_ENC()::
--------------------------------------------------------------------------------------------------------
VNP -> 0b100
V66 -> 0b101
VF3 -> 0b110
VF2 -> 0b111

avx512-evex-enc.txt/EVEX_LL_ENC()::
--------------------------------------------------------------------------------------------------------
ROUNDC=0 SAE=0 VL128 -> LLRC=0
ROUNDC=0 SAE=0 VL256 -> LLRC=1
ROUNDC=0 SAE=0 VL512 -> LLRC=2
ROUNDC=0 SAE=1 VL128 -> LLRC=0 BCRC=1 # sae only, no rounding
ROUNDC=1 SAE=1 VL128 -> LLRC=0 BCRC=1 # rounding only supported with sae
ROUNDC=2 SAE=1 VL128 -> LLRC=1 BCRC=1 # rounding only supported with sae
ROUNDC=3 SAE=1 VL128 -> LLRC=2 BCRC=1 # rounding only supported with sae
ROUNDC=4 SAE=1 VL128 -> LLRC=3 BCRC=1 # rounding only supported with sae
ROUNDC=0 SAE=1 VL512 -> LLRC=0 BCRC=1 # sae only, no rounding
ROUNDC=1 SAE=1 VL512 -> LLRC=0 BCRC=1 # rounding only supported with sae
ROUNDC=2 SAE=1 VL512 -> LLRC=1 BCRC=1 # rounding only supported with sae
ROUNDC=3 SAE=1 VL512 -> LLRC=2 BCRC=1 # rounding only supported with sae
ROUNDC=4 SAE=1 VL512 -> LLRC=3 BCRC=1 # rounding only supported with sae

avx512-evex-enc.txt/AVX512_EVEX_BYTE3_ENC()::
--------------------------------------------------------------------------------------------------------
ZEROING[z] LLRC[nn] BCRC[b] VEXDEST4=0 MASK[aaa] -> z_nn_b 0b1 aaa
ZEROING[z] LLRC[nn] BCRC[b] VEXDEST4=1 MASK[aaa] -> z_nn_b 0b0 aaa
SEQUENCE NEWVEX3_ENC_BIND
VEX_TYPE_ENC_BIND
VEX_REXR_ENC_BIND
VEX_REXXB_ENC_BIND
VEX_MAP_ENC_BIND
VEX_REG_ENC_BIND
VEX_ESCVL_ENC_BIND
SEQUENCE  NEWVEX3_ENC_EMIT
VEX_TYPE_ENC_EMIT
VEX_REXR_ENC_EMIT
VEX_REXXB_ENC_EMIT
VEX_MAP_ENC_EMIT
VEX_REG_ENC_EMIT
VEX_ESCVL_ENC_EMIT

avx512-evex-enc.txt/AVX512_ROUND()::
--------------------------------------------------------------------------------------------------------
ROUNDC=1 -> LLRC=0 BCRC=1
ROUNDC=2 -> LLRC=1 BCRC=1
ROUNDC=3 -> LLRC=2 BCRC=1
ROUNDC=4 -> LLRC=3 BCRC=1

avx512-evex-enc.txt/SAE()::
--------------------------------------------------------------------------------------------------------
SAE=1 -> BCRC=1
SAE=0 -> BCRC=0

avx512-reg-table-mask.txt/MASK1()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
MASK=0x0  | OUTREG=XED_REG_K0
MASK=0x1  | OUTREG=XED_REG_K1
MASK=0x2  | OUTREG=XED_REG_K2
MASK=0x3  | OUTREG=XED_REG_K3
MASK=0x4  | OUTREG=XED_REG_K4
MASK=0x5  | OUTREG=XED_REG_K5
MASK=0x6  | OUTREG=XED_REG_K6
MASK=0x7  | OUTREG=XED_REG_K7

avx512-reg-table-mask.txt/MASKNOT0()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
MASK=0x0  | OUTREG=XED_REG_ERROR
MASK=0x1  | OUTREG=XED_REG_K1
MASK=0x2  | OUTREG=XED_REG_K2
MASK=0x3  | OUTREG=XED_REG_K3
MASK=0x4  | OUTREG=XED_REG_K4
MASK=0x5  | OUTREG=XED_REG_K5
MASK=0x6  | OUTREG=XED_REG_K6
MASK=0x7  | OUTREG=XED_REG_K7

avx512-reg-table-mask.txt/MASK_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXRR=0 REXR=0 REG=0x0 | OUTREG=XED_REG_K0
REXRR=0 REXR=0 REG=0x1 | OUTREG=XED_REG_K1
REXRR=0 REXR=0 REG=0x2 | OUTREG=XED_REG_K2
REXRR=0 REXR=0 REG=0x3 | OUTREG=XED_REG_K3
REXRR=0 REXR=0 REG=0x4 | OUTREG=XED_REG_K4
REXRR=0 REXR=0 REG=0x5 | OUTREG=XED_REG_K5
REXRR=0 REXR=0 REG=0x6 | OUTREG=XED_REG_K6
REXRR=0 REXR=0 REG=0x7 | OUTREG=XED_REG_K7

avx512-reg-table-mask.txt/MASK_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0x0 | OUTREG=XED_REG_K0
RM=0x1 | OUTREG=XED_REG_K1
RM=0x2 | OUTREG=XED_REG_K2
RM=0x3 | OUTREG=XED_REG_K3
RM=0x4 | OUTREG=XED_REG_K4
RM=0x5 | OUTREG=XED_REG_K5
RM=0x6 | OUTREG=XED_REG_K6
RM=0x7 | OUTREG=XED_REG_K7

avx512-reg-table-mask.txt/MASK_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode64  | OUTREG=MASK_N64()
mode32  | OUTREG=MASK_N32()
mode16  | OUTREG=MASK_N32()

avx512-reg-table-mask.txt/MASK_N64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=0x0 | OUTREG=XED_REG_K7
VEXDEST3=1 VEXDEST210=0x1 | OUTREG=XED_REG_K6
VEXDEST3=1 VEXDEST210=0x2 | OUTREG=XED_REG_K5
VEXDEST3=1 VEXDEST210=0x3 | OUTREG=XED_REG_K4
VEXDEST3=1 VEXDEST210=0x4 | OUTREG=XED_REG_K3
VEXDEST3=1 VEXDEST210=0x5 | OUTREG=XED_REG_K2
VEXDEST3=1 VEXDEST210=0x6 | OUTREG=XED_REG_K1
VEXDEST3=1 VEXDEST210=0x7 | OUTREG=XED_REG_K0

avx512-reg-table-mask.txt/MASK_N32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=0x0 | OUTREG=XED_REG_K7
VEXDEST210=0x1 | OUTREG=XED_REG_K6
VEXDEST210=0x2 | OUTREG=XED_REG_K5
VEXDEST210=0x3 | OUTREG=XED_REG_K4
VEXDEST210=0x4 | OUTREG=XED_REG_K3
VEXDEST210=0x5 | OUTREG=XED_REG_K2
VEXDEST210=0x6 | OUTREG=XED_REG_K1
VEXDEST210=0x7 | OUTREG=XED_REG_K0

avx512-reg-tables-b3.txt/XMM_B3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_B3_32()
mode32 | OUTREG=XMM_B3_32()
mode64 | OUTREG=XMM_B3_64()

avx512-reg-tables-b3.txt/XMM_B3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0 | OUTREG=XED_REG_XMM0
RM=1 | OUTREG=XED_REG_XMM1
RM=2 | OUTREG=XED_REG_XMM2
RM=3 | OUTREG=XED_REG_XMM3
RM=4 | OUTREG=XED_REG_XMM4
RM=5 | OUTREG=XED_REG_XMM5
RM=6 | OUTREG=XED_REG_XMM6
RM=7 | OUTREG=XED_REG_XMM7

avx512-reg-tables-b3.txt/XMM_B3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_XMM0
REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_XMM1
REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_XMM2
REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_XMM3
REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_XMM4
REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_XMM5
REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_XMM6
REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_XMM7
REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_XMM8
REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_XMM9
REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_XMM10
REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_XMM11
REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_XMM12
REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_XMM13
REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_XMM14
REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_XMM15
REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_XMM16
REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_XMM17
REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_XMM18
REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_XMM19
REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_XMM20
REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_XMM21
REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_XMM22
REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_XMM23
REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_XMM24
REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_XMM25
REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_XMM26
REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_XMM27
REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_XMM28
REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_XMM29
REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_XMM30
REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_XMM31

avx512-reg-tables-b3.txt/YMM_B3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_B3_32()
mode32 | OUTREG=YMM_B3_32()
mode64 | OUTREG=YMM_B3_64()

avx512-reg-tables-b3.txt/YMM_B3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0 | OUTREG=XED_REG_YMM0
RM=1 | OUTREG=XED_REG_YMM1
RM=2 | OUTREG=XED_REG_YMM2
RM=3 | OUTREG=XED_REG_YMM3
RM=4 | OUTREG=XED_REG_YMM4
RM=5 | OUTREG=XED_REG_YMM5
RM=6 | OUTREG=XED_REG_YMM6
RM=7 | OUTREG=XED_REG_YMM7

avx512-reg-tables-b3.txt/YMM_B3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_YMM0
REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_YMM1
REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_YMM2
REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_YMM3
REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_YMM4
REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_YMM5
REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_YMM6
REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_YMM7
REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_YMM8
REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_YMM9
REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_YMM10
REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_YMM11
REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_YMM12
REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_YMM13
REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_YMM14
REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_YMM15
REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_YMM16
REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_YMM17
REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_YMM18
REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_YMM19
REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_YMM20
REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_YMM21
REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_YMM22
REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_YMM23
REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_YMM24
REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_YMM25
REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_YMM26
REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_YMM27
REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_YMM28
REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_YMM29
REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_YMM30
REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_YMM31

avx512-reg-tables-b3.txt/ZMM_B3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=ZMM_B3_32()
mode32 | OUTREG=ZMM_B3_32()
mode64 | OUTREG=ZMM_B3_64()

avx512-reg-tables-b3.txt/ZMM_B3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0 | OUTREG=XED_REG_ZMM0
RM=1 | OUTREG=XED_REG_ZMM1
RM=2 | OUTREG=XED_REG_ZMM2
RM=3 | OUTREG=XED_REG_ZMM3
RM=4 | OUTREG=XED_REG_ZMM4
RM=5 | OUTREG=XED_REG_ZMM5
RM=6 | OUTREG=XED_REG_ZMM6
RM=7 | OUTREG=XED_REG_ZMM7

avx512-reg-tables-b3.txt/ZMM_B3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_ZMM0
REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_ZMM1
REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_ZMM2
REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_ZMM3
REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_ZMM4
REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_ZMM5
REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_ZMM6
REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_ZMM7
REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_ZMM8
REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_ZMM9
REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_ZMM10
REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_ZMM11
REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_ZMM12
REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_ZMM13
REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_ZMM14
REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_ZMM15
REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_ZMM16
REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_ZMM17
REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_ZMM18
REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_ZMM19
REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_ZMM20
REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_ZMM21
REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_ZMM22
REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_ZMM23
REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_ZMM24
REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_ZMM25
REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_ZMM26
REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_ZMM27
REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_ZMM28
REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_ZMM29
REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_ZMM30
REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_ZMM31

avx512-reg-tables-n3.txt/XMM_N3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_N3_32()
mode32 | OUTREG=XMM_N3_32()
mode64 | OUTREG=XMM_N3_64()

avx512-reg-tables-n3.txt/XMM_N3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7 | OUTREG=XED_REG_XMM0
VEXDEST210=6 | OUTREG=XED_REG_XMM1
VEXDEST210=5 | OUTREG=XED_REG_XMM2
VEXDEST210=4 | OUTREG=XED_REG_XMM3
VEXDEST210=3 | OUTREG=XED_REG_XMM4
VEXDEST210=2 | OUTREG=XED_REG_XMM5
VEXDEST210=1 | OUTREG=XED_REG_XMM6
VEXDEST210=0 | OUTREG=XED_REG_XMM7

avx512-reg-tables-n3.txt/XMM_N3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM0
VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM1
VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM2
VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM3
VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM4
VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM5
VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM6
VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM7
VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM8
VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM9
VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM10
VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM11
VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM12
VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM13
VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM14
VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM15
VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM16
VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM17
VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM18
VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM19
VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM20
VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM21
VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM22
VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM23
VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM24
VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM25
VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM26
VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM27
VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM28
VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM29
VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM30
VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM31

avx512-reg-tables-n3.txt/YMM_N3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_N3_32()
mode32 | OUTREG=YMM_N3_32()
mode64 | OUTREG=YMM_N3_64()

avx512-reg-tables-n3.txt/YMM_N3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7 | OUTREG=XED_REG_YMM0
VEXDEST210=6 | OUTREG=XED_REG_YMM1
VEXDEST210=5 | OUTREG=XED_REG_YMM2
VEXDEST210=4 | OUTREG=XED_REG_YMM3
VEXDEST210=3 | OUTREG=XED_REG_YMM4
VEXDEST210=2 | OUTREG=XED_REG_YMM5
VEXDEST210=1 | OUTREG=XED_REG_YMM6
VEXDEST210=0 | OUTREG=XED_REG_YMM7

avx512-reg-tables-n3.txt/YMM_N3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM0
VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM1
VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM2
VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM3
VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM4
VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM5
VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM6
VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM7
VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM8
VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM9
VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM10
VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM11
VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM12
VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM13
VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM14
VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM15
VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM16
VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM17
VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM18
VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM19
VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM20
VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM21
VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM22
VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM23
VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM24
VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM25
VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM26
VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM27
VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM28
VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM29
VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM30
VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM31

avx512-reg-tables-n3.txt/ZMM_N3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=ZMM_N3_32()
mode32 | OUTREG=ZMM_N3_32()
mode64 | OUTREG=ZMM_N3_64()

avx512-reg-tables-n3.txt/ZMM_N3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7 | OUTREG=XED_REG_ZMM0
VEXDEST210=6 | OUTREG=XED_REG_ZMM1
VEXDEST210=5 | OUTREG=XED_REG_ZMM2
VEXDEST210=4 | OUTREG=XED_REG_ZMM3
VEXDEST210=3 | OUTREG=XED_REG_ZMM4
VEXDEST210=2 | OUTREG=XED_REG_ZMM5
VEXDEST210=1 | OUTREG=XED_REG_ZMM6
VEXDEST210=0 | OUTREG=XED_REG_ZMM7

avx512-reg-tables-n3.txt/ZMM_N3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM0
VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM1
VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM2
VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM3
VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM4
VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM5
VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM6
VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM7
VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM8
VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM9
VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM10
VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM11
VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM12
VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM13
VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM14
VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM15
VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM16
VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM17
VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM18
VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM19
VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM20
VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM21
VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM22
VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM23
VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM24
VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM25
VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM26
VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM27
VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM28
VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM29
VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM30
VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM31

avx512-reg-tables-r3.txt/XMM_R3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=XMM_R3_32()
mode32 | OUTREG=XMM_R3_32()
mode64 | OUTREG=XMM_R3_64()

avx512-reg-tables-r3.txt/XMM_R3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0 | OUTREG=XED_REG_XMM0
REG=1 | OUTREG=XED_REG_XMM1
REG=2 | OUTREG=XED_REG_XMM2
REG=3 | OUTREG=XED_REG_XMM3
REG=4 | OUTREG=XED_REG_XMM4
REG=5 | OUTREG=XED_REG_XMM5
REG=6 | OUTREG=XED_REG_XMM6
REG=7 | OUTREG=XED_REG_XMM7

avx512-reg-tables-r3.txt/XMM_R3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXRR=0 REXR=0 REG=0 | OUTREG=XED_REG_XMM0
REXRR=0 REXR=0 REG=1 | OUTREG=XED_REG_XMM1
REXRR=0 REXR=0 REG=2 | OUTREG=XED_REG_XMM2
REXRR=0 REXR=0 REG=3 | OUTREG=XED_REG_XMM3
REXRR=0 REXR=0 REG=4 | OUTREG=XED_REG_XMM4
REXRR=0 REXR=0 REG=5 | OUTREG=XED_REG_XMM5
REXRR=0 REXR=0 REG=6 | OUTREG=XED_REG_XMM6
REXRR=0 REXR=0 REG=7 | OUTREG=XED_REG_XMM7
REXRR=0 REXR=1 REG=0 | OUTREG=XED_REG_XMM8
REXRR=0 REXR=1 REG=1 | OUTREG=XED_REG_XMM9
REXRR=0 REXR=1 REG=2 | OUTREG=XED_REG_XMM10
REXRR=0 REXR=1 REG=3 | OUTREG=XED_REG_XMM11
REXRR=0 REXR=1 REG=4 | OUTREG=XED_REG_XMM12
REXRR=0 REXR=1 REG=5 | OUTREG=XED_REG_XMM13
REXRR=0 REXR=1 REG=6 | OUTREG=XED_REG_XMM14
REXRR=0 REXR=1 REG=7 | OUTREG=XED_REG_XMM15
REXRR=1 REXR=0 REG=0 | OUTREG=XED_REG_XMM16
REXRR=1 REXR=0 REG=1 | OUTREG=XED_REG_XMM17
REXRR=1 REXR=0 REG=2 | OUTREG=XED_REG_XMM18
REXRR=1 REXR=0 REG=3 | OUTREG=XED_REG_XMM19
REXRR=1 REXR=0 REG=4 | OUTREG=XED_REG_XMM20
REXRR=1 REXR=0 REG=5 | OUTREG=XED_REG_XMM21
REXRR=1 REXR=0 REG=6 | OUTREG=XED_REG_XMM22
REXRR=1 REXR=0 REG=7 | OUTREG=XED_REG_XMM23
REXRR=1 REXR=1 REG=0 | OUTREG=XED_REG_XMM24
REXRR=1 REXR=1 REG=1 | OUTREG=XED_REG_XMM25
REXRR=1 REXR=1 REG=2 | OUTREG=XED_REG_XMM26
REXRR=1 REXR=1 REG=3 | OUTREG=XED_REG_XMM27
REXRR=1 REXR=1 REG=4 | OUTREG=XED_REG_XMM28
REXRR=1 REXR=1 REG=5 | OUTREG=XED_REG_XMM29
REXRR=1 REXR=1 REG=6 | OUTREG=XED_REG_XMM30
REXRR=1 REXR=1 REG=7 | OUTREG=XED_REG_XMM31

avx512-reg-tables-r3.txt/YMM_R3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=YMM_R3_32()
mode32 | OUTREG=YMM_R3_32()
mode64 | OUTREG=YMM_R3_64()

avx512-reg-tables-r3.txt/YMM_R3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0 | OUTREG=XED_REG_YMM0
REG=1 | OUTREG=XED_REG_YMM1
REG=2 | OUTREG=XED_REG_YMM2
REG=3 | OUTREG=XED_REG_YMM3
REG=4 | OUTREG=XED_REG_YMM4
REG=5 | OUTREG=XED_REG_YMM5
REG=6 | OUTREG=XED_REG_YMM6
REG=7 | OUTREG=XED_REG_YMM7

avx512-reg-tables-r3.txt/YMM_R3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXRR=0 REXR=0 REG=0 | OUTREG=XED_REG_YMM0
REXRR=0 REXR=0 REG=1 | OUTREG=XED_REG_YMM1
REXRR=0 REXR=0 REG=2 | OUTREG=XED_REG_YMM2
REXRR=0 REXR=0 REG=3 | OUTREG=XED_REG_YMM3
REXRR=0 REXR=0 REG=4 | OUTREG=XED_REG_YMM4
REXRR=0 REXR=0 REG=5 | OUTREG=XED_REG_YMM5
REXRR=0 REXR=0 REG=6 | OUTREG=XED_REG_YMM6
REXRR=0 REXR=0 REG=7 | OUTREG=XED_REG_YMM7
REXRR=0 REXR=1 REG=0 | OUTREG=XED_REG_YMM8
REXRR=0 REXR=1 REG=1 | OUTREG=XED_REG_YMM9
REXRR=0 REXR=1 REG=2 | OUTREG=XED_REG_YMM10
REXRR=0 REXR=1 REG=3 | OUTREG=XED_REG_YMM11
REXRR=0 REXR=1 REG=4 | OUTREG=XED_REG_YMM12
REXRR=0 REXR=1 REG=5 | OUTREG=XED_REG_YMM13
REXRR=0 REXR=1 REG=6 | OUTREG=XED_REG_YMM14
REXRR=0 REXR=1 REG=7 | OUTREG=XED_REG_YMM15
REXRR=1 REXR=0 REG=0 | OUTREG=XED_REG_YMM16
REXRR=1 REXR=0 REG=1 | OUTREG=XED_REG_YMM17
REXRR=1 REXR=0 REG=2 | OUTREG=XED_REG_YMM18
REXRR=1 REXR=0 REG=3 | OUTREG=XED_REG_YMM19
REXRR=1 REXR=0 REG=4 | OUTREG=XED_REG_YMM20
REXRR=1 REXR=0 REG=5 | OUTREG=XED_REG_YMM21
REXRR=1 REXR=0 REG=6 | OUTREG=XED_REG_YMM22
REXRR=1 REXR=0 REG=7 | OUTREG=XED_REG_YMM23
REXRR=1 REXR=1 REG=0 | OUTREG=XED_REG_YMM24
REXRR=1 REXR=1 REG=1 | OUTREG=XED_REG_YMM25
REXRR=1 REXR=1 REG=2 | OUTREG=XED_REG_YMM26
REXRR=1 REXR=1 REG=3 | OUTREG=XED_REG_YMM27
REXRR=1 REXR=1 REG=4 | OUTREG=XED_REG_YMM28
REXRR=1 REXR=1 REG=5 | OUTREG=XED_REG_YMM29
REXRR=1 REXR=1 REG=6 | OUTREG=XED_REG_YMM30
REXRR=1 REXR=1 REG=7 | OUTREG=XED_REG_YMM31

avx512-reg-tables-r3.txt/ZMM_R3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=ZMM_R3_32()
mode32 | OUTREG=ZMM_R3_32()
mode64 | OUTREG=ZMM_R3_64()

avx512-reg-tables-r3.txt/ZMM_R3_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0 | OUTREG=XED_REG_ZMM0
REG=1 | OUTREG=XED_REG_ZMM1
REG=2 | OUTREG=XED_REG_ZMM2
REG=3 | OUTREG=XED_REG_ZMM3
REG=4 | OUTREG=XED_REG_ZMM4
REG=5 | OUTREG=XED_REG_ZMM5
REG=6 | OUTREG=XED_REG_ZMM6
REG=7 | OUTREG=XED_REG_ZMM7

avx512-reg-tables-r3.txt/ZMM_R3_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXRR=0 REXR=0 REG=0 | OUTREG=XED_REG_ZMM0
REXRR=0 REXR=0 REG=1 | OUTREG=XED_REG_ZMM1
REXRR=0 REXR=0 REG=2 | OUTREG=XED_REG_ZMM2
REXRR=0 REXR=0 REG=3 | OUTREG=XED_REG_ZMM3
REXRR=0 REXR=0 REG=4 | OUTREG=XED_REG_ZMM4
REXRR=0 REXR=0 REG=5 | OUTREG=XED_REG_ZMM5
REXRR=0 REXR=0 REG=6 | OUTREG=XED_REG_ZMM6
REXRR=0 REXR=0 REG=7 | OUTREG=XED_REG_ZMM7
REXRR=0 REXR=1 REG=0 | OUTREG=XED_REG_ZMM8
REXRR=0 REXR=1 REG=1 | OUTREG=XED_REG_ZMM9
REXRR=0 REXR=1 REG=2 | OUTREG=XED_REG_ZMM10
REXRR=0 REXR=1 REG=3 | OUTREG=XED_REG_ZMM11
REXRR=0 REXR=1 REG=4 | OUTREG=XED_REG_ZMM12
REXRR=0 REXR=1 REG=5 | OUTREG=XED_REG_ZMM13
REXRR=0 REXR=1 REG=6 | OUTREG=XED_REG_ZMM14
REXRR=0 REXR=1 REG=7 | OUTREG=XED_REG_ZMM15
REXRR=1 REXR=0 REG=0 | OUTREG=XED_REG_ZMM16
REXRR=1 REXR=0 REG=1 | OUTREG=XED_REG_ZMM17
REXRR=1 REXR=0 REG=2 | OUTREG=XED_REG_ZMM18
REXRR=1 REXR=0 REG=3 | OUTREG=XED_REG_ZMM19
REXRR=1 REXR=0 REG=4 | OUTREG=XED_REG_ZMM20
REXRR=1 REXR=0 REG=5 | OUTREG=XED_REG_ZMM21
REXRR=1 REXR=0 REG=6 | OUTREG=XED_REG_ZMM22
REXRR=1 REXR=0 REG=7 | OUTREG=XED_REG_ZMM23
REXRR=1 REXR=1 REG=0 | OUTREG=XED_REG_ZMM24
REXRR=1 REXR=1 REG=1 | OUTREG=XED_REG_ZMM25
REXRR=1 REXR=1 REG=2 | OUTREG=XED_REG_ZMM26
REXRR=1 REXR=1 REG=3 | OUTREG=XED_REG_ZMM27
REXRR=1 REXR=1 REG=4 | OUTREG=XED_REG_ZMM28
REXRR=1 REXR=1 REG=5 | OUTREG=XED_REG_ZMM29
REXRR=1 REXR=1 REG=6 | OUTREG=XED_REG_ZMM30
REXRR=1 REXR=1 REG=7 | OUTREG=XED_REG_ZMM31

vsib-addressing-dec.txt/VMODRM_YMM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00  VSIB_YMM()             |
MOD=0b01  VSIB_YMM() MEMDISP8()  |
MOD=0b10  VSIB_YMM() MEMDISP32() |

vsib-addressing-dec.txt/VMODRM_XMM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00  VSIB_XMM()             |
MOD=0b01  VSIB_XMM() MEMDISP8()  |
MOD=0b10  VSIB_XMM() MEMDISP32() |

vsib-addressing-dec.txt/VSIB_YMM()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=8

vsib-addressing-dec.txt/VSIB_XMM()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=8

vsib-addressing-dec.txt/VSIB_INDEX_YMM()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM0
REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM1
REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM2
REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM3
REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM4
REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM5
REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM6
REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM7
REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM8
REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM9
REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM10
REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM11
REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM12
REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM13
REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM14
REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM15

vsib-addressing-dec.txt/VSIB_INDEX_XMM()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM0
REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM1
REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM2
REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM3
REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM4
REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM5
REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM6
REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM7
REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM8
REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM9
REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM10
REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM11
REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM12
REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM13
REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM14
REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM15

vsib-addressing-dec.txt/VSIB_BASE()::
--------------------------------------------------------------------------------------------------------
REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=0 SIBBASE=5 MOD!=0             | BASE0=ArBP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()

vsib-addressing-enc.txt/VMODRM_MOD_ENCODE()::
--------------------------------------------------------------------------------------------------------
eamode32 DISP_WIDTH=0 BASE0=ArBP()       -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
eamode32 DISP_WIDTH=0 BASE0=Ar13()       -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
eamode64 DISP_WIDTH=0 BASE0=ArBP()       -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
eamode64 DISP_WIDTH=0 BASE0=Ar13()       -> MOD=1 DISP_WIDTH=8 DISP=0    # ARG MODIFICATION
eamode32 DISP_WIDTH=0 BASE0=ArAX()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArBX()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArCX()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArDX()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArSI()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArDI()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=ArSP()       -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar8()   mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar9()   mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar10()  mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar11()  mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar12()  mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar14()  mode64     -> MOD=0
eamode32 DISP_WIDTH=0 BASE0=Ar15()  mode64     -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArAX()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArBX()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArCX()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArDX()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArSI()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArDI()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=ArSP()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar8()        -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar9()        -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar10()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar11()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar12()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar14()       -> MOD=0
eamode64 DISP_WIDTH=0 BASE0=Ar15()       -> MOD=0
eamode32 DISP_WIDTH=8                            -> MOD=1
eamode64 DISP_WIDTH=8 BASE0=GPR64e()            -> MOD=1
eamode32 DISP_WIDTH=32 BASE0=@        -> MOD=0 #no base
eamode32 DISP_WIDTH=32 BASE0=GPR32e() -> MOD=2 #some base, not RIP
eamode64 DISP_WIDTH=32 BASE0=@        -> MOD=0 #no base
eamode64 DISP_WIDTH=32 BASE0=ArAX()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArBX()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArCX()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArDX()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArSI()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArDI()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArSP()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=ArBP()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar8()        -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar9()        -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar10()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar11()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar12()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar13()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar14()       -> MOD=2
eamode64 DISP_WIDTH=32 BASE0=Ar15()       -> MOD=2
otherwise -> error

vsib-addressing-enc.txt/VSIB_ENC_BASE()::
--------------------------------------------------------------------------------------------------------
BASE0=ArAX() -> REXB=0 SIBBASE=0
BASE0=ArCX() -> REXB=0 SIBBASE=1
BASE0=ArDX() -> REXB=0 SIBBASE=2
BASE0=ArBX() -> REXB=0 SIBBASE=3
BASE0=ArSP() -> REXB=0 SIBBASE=4
BASE0=@      -> DISP_WIDTH_32() REXB=0 SIBBASE=5
BASE0=ArBP() -> DISP_WIDTH_8_32() REXB=0 SIBBASE=5
BASE0=Ar13() -> DISP_WIDTH_8_32() REXB=1 SIBBASE=5
BASE0=ArSI()  ->    REXB=0 SIBBASE=6
BASE0=ArDI()  ->    REXB=0 SIBBASE=7
BASE0=Ar8()   ->    REXB=1 SIBBASE=0
BASE0=Ar9()   ->    REXB=1 SIBBASE=1
BASE0=Ar10()  ->    REXB=1 SIBBASE=2
BASE0=Ar11()  ->    REXB=1 SIBBASE=3
BASE0=Ar12()  ->    REXB=1 SIBBASE=4
BASE0=Ar14() ->    REXB=1 SIBBASE=6
BASE0=Ar15() ->    REXB=1 SIBBASE=7
otherwise    ->    error

vsib-addressing-enc.txt/VSIB_ENC_SCALE()::
--------------------------------------------------------------------------------------------------------
SCALE=0 -> SIBSCALE=0
SCALE=1 -> SIBSCALE=0
SCALE=2 -> SIBSCALE=1
SCALE=4 -> SIBSCALE=2
SCALE=8 -> SIBSCALE=3
otherwise -> error

vsib-addressing-enc.txt/VSIB_ENC()::
--------------------------------------------------------------------------------------------------------
true SIBBASE[bbb] SIBINDEX[iii] SIBSCALE[ss] -> ss_iii_bbb

vsib-addressing-enc.txt/VSIB_ENC_INDEX_XMM()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_XMM0   -> REXX=0 SIBINDEX=0
INDEX=XED_REG_XMM1   -> REXX=0 SIBINDEX=1
INDEX=XED_REG_XMM2   -> REXX=0 SIBINDEX=2
INDEX=XED_REG_XMM3   -> REXX=0 SIBINDEX=3
INDEX=XED_REG_XMM4   -> REXX=0 SIBINDEX=4
INDEX=XED_REG_XMM5   -> REXX=0 SIBINDEX=5
INDEX=XED_REG_XMM6   -> REXX=0 SIBINDEX=6
INDEX=XED_REG_XMM7   -> REXX=0 SIBINDEX=7
INDEX=XED_REG_XMM8   -> REXX=1 SIBINDEX=0
INDEX=XED_REG_XMM9   -> REXX=1 SIBINDEX=1
INDEX=XED_REG_XMM10  -> REXX=1 SIBINDEX=2
INDEX=XED_REG_XMM11  -> REXX=1 SIBINDEX=3
INDEX=XED_REG_XMM12  -> REXX=1 SIBINDEX=4
INDEX=XED_REG_XMM13  -> REXX=1 SIBINDEX=5
INDEX=XED_REG_XMM14  -> REXX=1 SIBINDEX=6
INDEX=XED_REG_XMM15  -> REXX=1 SIBINDEX=7

vsib-addressing-enc.txt/VSIB_ENC_INDEX_YMM()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_YMM0   -> REXX=0 SIBINDEX=0
INDEX=XED_REG_YMM1   -> REXX=0 SIBINDEX=1
INDEX=XED_REG_YMM2   -> REXX=0 SIBINDEX=2
INDEX=XED_REG_YMM3   -> REXX=0 SIBINDEX=3
INDEX=XED_REG_YMM4   -> REXX=0 SIBINDEX=4
INDEX=XED_REG_YMM5   -> REXX=0 SIBINDEX=5
INDEX=XED_REG_YMM6   -> REXX=0 SIBINDEX=6
INDEX=XED_REG_YMM7   -> REXX=0 SIBINDEX=7
INDEX=XED_REG_YMM8   -> REXX=1 SIBINDEX=0
INDEX=XED_REG_YMM9   -> REXX=1 SIBINDEX=1
INDEX=XED_REG_YMM10  -> REXX=1 SIBINDEX=2
INDEX=XED_REG_YMM11  -> REXX=1 SIBINDEX=3
INDEX=XED_REG_YMM12  -> REXX=1 SIBINDEX=4
INDEX=XED_REG_YMM13  -> REXX=1 SIBINDEX=5
INDEX=XED_REG_YMM14  -> REXX=1 SIBINDEX=6
INDEX=XED_REG_YMM15  -> REXX=1 SIBINDEX=7

vsib-addressing-enc.txt/DISP_WIDTH_8_32()::
--------------------------------------------------------------------------------------------------------
DISP_WIDTH=8 -> nothing
DISP_WIDTH=32 -> nothing

hsw-reg-table.txt/VGPRy_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
EOSZ=1 | OUTREG=VGPR32_N()
EOSZ=2 | OUTREG=VGPR32_N()
EOSZ=3 | OUTREG=VGPR64_N()

hsw-reg-table.txt/VGPR32_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=VGPR32_N_32()
mode32 | OUTREG=VGPR32_N_32()
mode64 | OUTREG=VGPR32_N_64()

hsw-reg-table.txt/VGPR32_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=VGPR32_B_32()
mode32 | OUTREG=VGPR32_B_32()
mode64 | OUTREG=VGPR32_B_64()

hsw-reg-table.txt/VGPR32_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
mode16 | OUTREG=VGPR32_R_32()
mode32 | OUTREG=VGPR32_R_32()
mode64 | OUTREG=VGPR32_R_64()

hsw-reg-table.txt/VGPR32_N_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST210=7   | OUTREG=XED_REG_EAX
VEXDEST210=6   | OUTREG=XED_REG_ECX
VEXDEST210=5   | OUTREG=XED_REG_EDX
VEXDEST210=4   | OUTREG=XED_REG_EBX
VEXDEST210=3   | OUTREG=XED_REG_ESP
VEXDEST210=2   | OUTREG=XED_REG_EBP
VEXDEST210=1   | OUTREG=XED_REG_ESI
VEXDEST210=0   | OUTREG=XED_REG_EDI

hsw-reg-table.txt/VGPR32_N_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_EAX
VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_ECX
VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_EDX
VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_EBX
VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_ESP
VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_EBP
VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_ESI
VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_EDI
VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8D
VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9D
VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10D
VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11D
VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12D
VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13D
VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14D
VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15D

hsw-reg-table.txt/VGPR64_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=7  | OUTREG=XED_REG_RAX
VEXDEST3=1 VEXDEST210=6  | OUTREG=XED_REG_RCX
VEXDEST3=1 VEXDEST210=5  | OUTREG=XED_REG_RDX
VEXDEST3=1 VEXDEST210=4  | OUTREG=XED_REG_RBX
VEXDEST3=1 VEXDEST210=3  | OUTREG=XED_REG_RSP
VEXDEST3=1 VEXDEST210=2  | OUTREG=XED_REG_RBP
VEXDEST3=1 VEXDEST210=1  | OUTREG=XED_REG_RSI
VEXDEST3=1 VEXDEST210=0  | OUTREG=XED_REG_RDI
VEXDEST3=0 VEXDEST210=7  | OUTREG=XED_REG_R8
VEXDEST3=0 VEXDEST210=6  | OUTREG=XED_REG_R9
VEXDEST3=0 VEXDEST210=5  | OUTREG=XED_REG_R10
VEXDEST3=0 VEXDEST210=4  | OUTREG=XED_REG_R11
VEXDEST3=0 VEXDEST210=3  | OUTREG=XED_REG_R12
VEXDEST3=0 VEXDEST210=2  | OUTREG=XED_REG_R13
VEXDEST3=0 VEXDEST210=1  | OUTREG=XED_REG_R14
VEXDEST3=0 VEXDEST210=0  | OUTREG=XED_REG_R15

hsw-reg-table.txt/VGPR32_R_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0   | OUTREG=XED_REG_EAX
REG=1   | OUTREG=XED_REG_ECX
REG=2   | OUTREG=XED_REG_EDX
REG=3   | OUTREG=XED_REG_EBX
REG=4   | OUTREG=XED_REG_ESP
REG=5   | OUTREG=XED_REG_EBP
REG=6   | OUTREG=XED_REG_ESI
REG=7   | OUTREG=XED_REG_EDI

hsw-reg-table.txt/VGPR32_R_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0  | OUTREG=XED_REG_EAX
REXR=0 REG=1  | OUTREG=XED_REG_ECX
REXR=0 REG=2  | OUTREG=XED_REG_EDX
REXR=0 REG=3  | OUTREG=XED_REG_EBX
REXR=0 REG=4  | OUTREG=XED_REG_ESP
REXR=0 REG=5  | OUTREG=XED_REG_EBP
REXR=0 REG=6  | OUTREG=XED_REG_ESI
REXR=0 REG=7  | OUTREG=XED_REG_EDI
REXR=1 REG=0  | OUTREG=XED_REG_R8D
REXR=1 REG=1  | OUTREG=XED_REG_R9D
REXR=1 REG=2  | OUTREG=XED_REG_R10D
REXR=1 REG=3  | OUTREG=XED_REG_R11D
REXR=1 REG=4  | OUTREG=XED_REG_R12D
REXR=1 REG=5  | OUTREG=XED_REG_R13D
REXR=1 REG=6  | OUTREG=XED_REG_R14D
REXR=1 REG=7  | OUTREG=XED_REG_R15D

hsw-reg-table.txt/VGPR64_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0  | OUTREG=XED_REG_RAX
REXR=0 REG=1  | OUTREG=XED_REG_RCX
REXR=0 REG=2  | OUTREG=XED_REG_RDX
REXR=0 REG=3  | OUTREG=XED_REG_RBX
REXR=0 REG=4  | OUTREG=XED_REG_RSP
REXR=0 REG=5  | OUTREG=XED_REG_RBP
REXR=0 REG=6  | OUTREG=XED_REG_RSI
REXR=0 REG=7  | OUTREG=XED_REG_RDI
REXR=1 REG=0  | OUTREG=XED_REG_R8
REXR=1 REG=1  | OUTREG=XED_REG_R9
REXR=1 REG=2  | OUTREG=XED_REG_R10
REXR=1 REG=3  | OUTREG=XED_REG_R11
REXR=1 REG=4  | OUTREG=XED_REG_R12
REXR=1 REG=5  | OUTREG=XED_REG_R13
REXR=1 REG=6  | OUTREG=XED_REG_R14
REXR=1 REG=7  | OUTREG=XED_REG_R15

hsw-reg-table.txt/VGPR32_B_32()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0   | OUTREG=XED_REG_EAX
RM=1   | OUTREG=XED_REG_ECX
RM=2   | OUTREG=XED_REG_EDX
RM=3   | OUTREG=XED_REG_EBX
RM=4   | OUTREG=XED_REG_ESP
RM=5   | OUTREG=XED_REG_EBP
RM=6   | OUTREG=XED_REG_ESI
RM=7   | OUTREG=XED_REG_EDI

hsw-reg-table.txt/VGPR32_B_64()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0  | OUTREG=XED_REG_EAX
REXB=0 RM=1  | OUTREG=XED_REG_ECX
REXB=0 RM=2  | OUTREG=XED_REG_EDX
REXB=0 RM=3  | OUTREG=XED_REG_EBX
REXB=0 RM=4  | OUTREG=XED_REG_ESP
REXB=0 RM=5  | OUTREG=XED_REG_EBP
REXB=0 RM=6  | OUTREG=XED_REG_ESI
REXB=0 RM=7  | OUTREG=XED_REG_EDI
REXB=1 RM=0  | OUTREG=XED_REG_R8D
REXB=1 RM=1  | OUTREG=XED_REG_R9D
REXB=1 RM=2  | OUTREG=XED_REG_R10D
REXB=1 RM=3  | OUTREG=XED_REG_R11D
REXB=1 RM=4  | OUTREG=XED_REG_R12D
REXB=1 RM=5  | OUTREG=XED_REG_R13D
REXB=1 RM=6  | OUTREG=XED_REG_R14D
REXB=1 RM=7  | OUTREG=XED_REG_R15D

hsw-reg-table.txt/VGPR64_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0  | OUTREG=XED_REG_RAX
REXB=0 RM=1  | OUTREG=XED_REG_RCX
REXB=0 RM=2  | OUTREG=XED_REG_RDX
REXB=0 RM=3  | OUTREG=XED_REG_RBX
REXB=0 RM=4  | OUTREG=XED_REG_RSP
REXB=0 RM=5  | OUTREG=XED_REG_RBP
REXB=0 RM=6  | OUTREG=XED_REG_RSI
REXB=0 RM=7  | OUTREG=XED_REG_RDI
REXB=1 RM=0  | OUTREG=XED_REG_R8
REXB=1 RM=1  | OUTREG=XED_REG_R9
REXB=1 RM=2  | OUTREG=XED_REG_R10
REXB=1 RM=3  | OUTREG=XED_REG_R11
REXB=1 RM=4  | OUTREG=XED_REG_R12
REXB=1 RM=5  | OUTREG=XED_REG_R13
REXB=1 RM=6  | OUTREG=XED_REG_R14
REXB=1 RM=7  | OUTREG=XED_REG_R15

knc-evex-dec.txt/EVEX_SPLITTER()::
--------------------------------------------------------------------------------------------------------
VEXVALID=4 KNC_EVEX_INSTRUCTIONS() |

knc-evex-enc.txt/VEXED_REX()::
--------------------------------------------------------------------------------------------------------
VEXVALID=4 -> KNC_EVEX_ENC()
SEQUENCE KNC_EVEX_ENC_BIND
	 # R,X,B R map (byte 1)
	 # W, vvvv, L, pp  (byte 2)
	 # NR, sss, V', kkk ( byte 3)
	 EVEX_62_REXR_ENC_BIND
	 EVEX_REXX_ENC_BIND
	 EVEX_REXB_ENC_BIND
	 EVEX_REXRR_ENC_BIND
	 EVEX_MAP_ENC_BIND
	 EVEX_REXW_VVVV_ENC_BIND
	 EVEX_ESCVL_ENC_BIND
	 EVEX_BYTE3_ENC_BIND
SEQUENCE KNC_EVEX_ENC_EMIT
	 EVEX_62_REXR_ENC_EMIT
	 EVEX_REXX_ENC_EMIT
	 EVEX_REXB_ENC_EMIT
	 EVEX_REXRR_ENC_EMIT
	 EVEX_MAP_ENC_EMIT
	 EVEX_REXW_VVVV_ENC_EMIT
	 EVEX_ESCVL_ENC_EMIT
	 EVEX_BYTE3_ENC_EMIT

knc-evex-enc.txt/EVEX_62_REXR_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXR=1 -> 0x62 0b0
mode64 REXR=0 -> 0x62 0b1
mode32 REXR=1 -> error
mode32 REXR=0 -> 0x62 0b1

knc-evex-enc.txt/EVEX_REXX_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXX=1 -> 0b0
mode64 REXX=0 -> 0b1
mode32 REXX=1 -> error
mode32 REXX=0 -> 0b1

knc-evex-enc.txt/EVEX_REXB_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXB=1 -> 0b0
mode64 REXB=0 -> 0b1
mode32 REXB=1 -> error
mode32 REXB=0 -> 0b1

knc-evex-enc.txt/EVEX_REXRR_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXRR=1 -> 0b0
mode64 REXRR=0 -> 0b1
mode32 REXRR=1 -> error
mode32 REXRR=0 -> 0b1

knc-evex-enc.txt/EVEX_MAP_ENC()::
--------------------------------------------------------------------------------------------------------
MAP=0  -> 0b0000
MAP=1  -> 0b0001
MAP=2  -> 0b0010
MAP=3  -> 0b0011

knc-evex-enc.txt/EVEX_REXW_VVVV_ENC()::
--------------------------------------------------------------------------------------------------------
mode64 REXW[w] VEXDEST3[u]   VEXDEST210[ddd] -> w u_ddd
mode32 REXW[w] VEXDEST3[u]=1 VEXDEST210[ddd] -> w u_ddd
mode32 REXW[w] VEXDEST3[u]=0 VEXDEST210[ddd] -> error

knc-evex-enc.txt/EVEX_ESCVL_ENC()::
--------------------------------------------------------------------------------------------------------
VNP -> 0b000
V66 -> 0b001
VF3 -> 0b010
VF2 -> 0b011

knc-evex-enc.txt/EVEX_BYTE3_ENC()::
--------------------------------------------------------------------------------------------------------
NR[n] SWIZ[sss] VEXDEST4=0 MASK[kkk] -> n_sss 1_ kkk
NR[n] SWIZ[sss] VEXDEST4=1 MASK[kkk] -> n_sss 0_ kkk

lrb2-addressing-dec.txt/KNC_VMODRM()::
--------------------------------------------------------------------------------------------------------
MOD=0b00 KNC_VSIB()             |
MOD=0b01 KNC_VSIB() MEMDISP8()  |
MOD=0b10 KNC_VSIB() MEMDISP32() |

lrb2-addressing-dec.txt/KNC_VSIB()::
--------------------------------------------------------------------------------------------------------
SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] KNC_VSIB_BASE()  | INDEX=KNC_VSIB_INDEX()  SCALE=1
SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] KNC_VSIB_BASE()  | INDEX=KNC_VSIB_INDEX()  SCALE=2
SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] KNC_VSIB_BASE()  | INDEX=KNC_VSIB_INDEX()  SCALE=4
SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] KNC_VSIB_BASE()  | INDEX=KNC_VSIB_INDEX()  SCALE=8

lrb2-addressing-dec.txt/KNC_VSIB_INDEX()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM0
VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM1
VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM2
VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM3
VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM4
VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM5
VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM6
VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM7
VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM8
VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM9
VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM10
VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM11
VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM12
VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM13
VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM14
VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM15
VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM16
VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM17
VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM18
VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM19
VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM20
VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM21
VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM22
VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM23
VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM24
VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM25
VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM26
VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM27
VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM28
VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM29
VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM30
VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM31

lrb2-addressing-dec.txt/KNC_VSIB_BASE()::
--------------------------------------------------------------------------------------------------------
REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=0 SIBBASE=5 MOD!=0 | BASE0=ArBP() SEG0=FINAL_SSEG()
REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()
REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()
REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()
REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()

lrb2-addressing-enc.txt/KNC_ENC_INDEX()::
--------------------------------------------------------------------------------------------------------
INDEX=XED_REG_ZMM0   -> VEXDEST4=0 REXX=0 SIBINDEX=0
INDEX=XED_REG_ZMM1   -> VEXDEST4=0 REXX=0 SIBINDEX=1
INDEX=XED_REG_ZMM2   -> VEXDEST4=0 REXX=0 SIBINDEX=2
INDEX=XED_REG_ZMM3   -> VEXDEST4=0 REXX=0 SIBINDEX=3
INDEX=XED_REG_ZMM4   -> VEXDEST4=0 REXX=0 SIBINDEX=4
INDEX=XED_REG_ZMM5   -> VEXDEST4=0 REXX=0 SIBINDEX=5
INDEX=XED_REG_ZMM6   -> VEXDEST4=0 REXX=0 SIBINDEX=6
INDEX=XED_REG_ZMM7   -> VEXDEST4=0 REXX=0 SIBINDEX=7
INDEX=XED_REG_ZMM8   -> VEXDEST4=0 REXX=1 SIBINDEX=0
INDEX=XED_REG_ZMM9   -> VEXDEST4=0 REXX=1 SIBINDEX=1
INDEX=XED_REG_ZMM10  -> VEXDEST4=0 REXX=1 SIBINDEX=2
INDEX=XED_REG_ZMM11  -> VEXDEST4=0 REXX=1 SIBINDEX=3
INDEX=XED_REG_ZMM12  -> VEXDEST4=0 REXX=1 SIBINDEX=4
INDEX=XED_REG_ZMM13  -> VEXDEST4=0 REXX=1 SIBINDEX=5
INDEX=XED_REG_ZMM14  -> VEXDEST4=0 REXX=1 SIBINDEX=6
INDEX=XED_REG_ZMM15  -> VEXDEST4=0 REXX=1 SIBINDEX=7
INDEX=XED_REG_ZMM16  -> VEXDEST4=1 REXX=0 SIBINDEX=0
INDEX=XED_REG_ZMM17  -> VEXDEST4=1 REXX=0 SIBINDEX=1
INDEX=XED_REG_ZMM18  -> VEXDEST4=1 REXX=0 SIBINDEX=2
INDEX=XED_REG_ZMM19  -> VEXDEST4=1 REXX=0 SIBINDEX=3
INDEX=XED_REG_ZMM20  -> VEXDEST4=1 REXX=0 SIBINDEX=4
INDEX=XED_REG_ZMM21  -> VEXDEST4=1 REXX=0 SIBINDEX=5
INDEX=XED_REG_ZMM22  -> VEXDEST4=1 REXX=0 SIBINDEX=6
INDEX=XED_REG_ZMM23  -> VEXDEST4=1 REXX=0 SIBINDEX=7
INDEX=XED_REG_ZMM24  -> VEXDEST4=1 REXX=1 SIBINDEX=0
INDEX=XED_REG_ZMM25  -> VEXDEST4=1 REXX=1 SIBINDEX=1
INDEX=XED_REG_ZMM26  -> VEXDEST4=1 REXX=1 SIBINDEX=2
INDEX=XED_REG_ZMM27  -> VEXDEST4=1 REXX=1 SIBINDEX=3
INDEX=XED_REG_ZMM28  -> VEXDEST4=1 REXX=1 SIBINDEX=4
INDEX=XED_REG_ZMM29  -> VEXDEST4=1 REXX=1 SIBINDEX=5
INDEX=XED_REG_ZMM30  -> VEXDEST4=1 REXX=1 SIBINDEX=6
INDEX=XED_REG_ZMM31  -> VEXDEST4=1 REXX=1 SIBINDEX=7

lrb2-converts.txt/NOSWIZD()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/NOSWIZF32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/NOSWIZQ()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8 TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_FLT64()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8 TYPE=XED_OPERAND_ELEMENT_TYPE_DOUBLE
SWIZ=0b001 | CONVERT=1 ELEMENT_SIZE=64 NELEM=1 TYPE=XED_OPERAND_ELEMENT_TYPE_DOUBLE
SWIZ=0b010 | CONVERT=2 ELEMENT_SIZE=64 NELEM=4 TYPE=XED_OPERAND_ELEMENT_TYPE_DOUBLE
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_FLT64_LOAD()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8   TYPE=XED_OPERAND_ELEMENT_TYPE_DOUBLE
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_FLT32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | CONVERT=9 ELEMENT_SIZE=32 NELEM=1      TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4      TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b011 | CONVERT=3 ELEMENT_SIZE=16 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_FLOAT16
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8  NELEM=16     TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=5 ELEMENT_SIZE=8  NELEM=16     TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/UPCONVERT_FLT32_LIMITED()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | error
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4      TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_FLT32_HALF()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=8     TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | CONVERT=9 ELEMENT_SIZE=32 NELEM=1   TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4   TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_FLT32_LOAD()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | CONVERT=3 ELEMENT_SIZE=16 NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_FLOAT16
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8    NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=8 ELEMENT_SIZE=8    NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/UPCONVERT_INT64()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | CONVERT=1 ELEMENT_SIZE=64 NELEM=1   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b010 | CONVERT=2 ELEMENT_SIZE=64 NELEM=4   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_INT64_LOAD()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_INT32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | CONVERT=9 ELEMENT_SIZE=32 NELEM=1    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b011 | error
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8  NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=5 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/UPCONVERT_INT32_LIMITED()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16 TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | error
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_INT32_HALF()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0    ELEMENT_SIZE=32 NELEM=8  TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | CONVERT=9 ELEMENT_SIZE=32 NELEM=1  TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b010 | CONVERT=10 ELEMENT_SIZE=32 NELEM=4  TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/UPCONVERT_INT32_LOAD()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=5 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/DNCONVERT_FLT32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_SINGLE
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | CONVERT=3 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_FLOAT16
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=5 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/DNCONVERT_INT32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=32 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | CONVERT=4 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b101 | CONVERT=5 ELEMENT_SIZE=8  NELEM=16    TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b110 | CONVERT=6 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_UINT
SWIZ=0b111 | CONVERT=7 ELEMENT_SIZE=16 NELEM=16  TYPE=XED_OPERAND_ELEMENT_TYPE_INT

lrb2-converts.txt/DNCONVERT_INT64()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8   TYPE=XED_OPERAND_ELEMENT_TYPE_INT
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/DNCONVERT_FLT64()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | CONVERT=0 ELEMENT_SIZE=64 NELEM=8   TYPE=XED_OPERAND_ELEMENT_TYPE_DOUBLE
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/REG_SWIZZLE64()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | REGSWIZ=0 SWIZZLE_SIZE=8 NELEM=4
SWIZ=0b001 | REGSWIZ=1 SWIZZLE_SIZE=8 NELEM=4
SWIZ=0b010 | REGSWIZ=2 SWIZZLE_SIZE=8 NELEM=4
SWIZ=0b011 | REGSWIZ=3 SWIZZLE_SIZE=8 NELEM=4
SWIZ=0b100 | REGSWIZ=4 SWIZZLE_SIZE=8 NELEM=1
SWIZ=0b101 | REGSWIZ=5 SWIZZLE_SIZE=8 NELEM=1
SWIZ=0b110 | REGSWIZ=6 SWIZZLE_SIZE=8 NELEM=1
SWIZ=0b111 | REGSWIZ=7 SWIZZLE_SIZE=8 NELEM=1

lrb2-converts.txt/REG_SWIZZLE32()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | REGSWIZ=0 SWIZZLE_SIZE=7 NELEM=4
SWIZ=0b001 | REGSWIZ=1 SWIZZLE_SIZE=7 NELEM=4
SWIZ=0b010 | REGSWIZ=2 SWIZZLE_SIZE=7 NELEM=4
SWIZ=0b011 | REGSWIZ=3 SWIZZLE_SIZE=7 NELEM=4
SWIZ=0b100 | REGSWIZ=4 SWIZZLE_SIZE=7 NELEM=1
SWIZ=0b101 | REGSWIZ=5 SWIZZLE_SIZE=7 NELEM=1
SWIZ=0b110 | REGSWIZ=6 SWIZZLE_SIZE=7 NELEM=1
SWIZ=0b111 | REGSWIZ=7 SWIZZLE_SIZE=7 NELEM=1

lrb2-converts.txt/KNC_SAE()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | SAE=0
SWIZ=0b001 | SAE=0
SWIZ=0b010 | SAE=0
SWIZ=0b011 | SAE=0
SWIZ=0b100 | SAE=1
SWIZ=0b101 | SAE=1
SWIZ=0b110 | SAE=1
SWIZ=0b111 | SAE=1

lrb2-converts.txt/NOSAE()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 |
SWIZ=0b001 |
SWIZ=0b010 |
SWIZ=0b011 |
SWIZ=0b100 | error
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-converts.txt/ROUND()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 | ROUNDC=1
SWIZ=0b001 | ROUNDC=2
SWIZ=0b010 | ROUNDC=3
SWIZ=0b011 | ROUNDC=4
SWIZ=0b100 | ROUNDC=1
SWIZ=0b101 | ROUNDC=2
SWIZ=0b110 | ROUNDC=3
SWIZ=0b111 | ROUNDC=4

lrb2-converts.txt/NOROUND()::
--------------------------------------------------------------------------------------------------------
SWIZ=0b000 |
SWIZ=0b001 | error
SWIZ=0b010 | error
SWIZ=0b011 | error
SWIZ=0b100 |
SWIZ=0b101 | error
SWIZ=0b110 | error
SWIZ=0b111 | error

lrb2-evex-reg-tables.txt/ZMM_N3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM0
VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM1
VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM2
VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM3
VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM4
VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM5
VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM6
VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM7
VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM8
VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM9
VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM10
VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM11
VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM12
VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM13
VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM14
VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM15
VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM16
VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM17
VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM18
VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM19
VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM20
VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM21
VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM22
VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM23
VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM24
VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM25
VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM26
VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM27
VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM28
VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM29
VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM30
VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM31

lrb2-evex-reg-tables.txt/ZMM_R3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXRR=0 REXR=0 REG=0 | OUTREG=XED_REG_ZMM0
REXRR=0 REXR=0 REG=1 | OUTREG=XED_REG_ZMM1
REXRR=0 REXR=0 REG=2 | OUTREG=XED_REG_ZMM2
REXRR=0 REXR=0 REG=3 | OUTREG=XED_REG_ZMM3
REXRR=0 REXR=0 REG=4 | OUTREG=XED_REG_ZMM4
REXRR=0 REXR=0 REG=5 | OUTREG=XED_REG_ZMM5
REXRR=0 REXR=0 REG=6 | OUTREG=XED_REG_ZMM6
REXRR=0 REXR=0 REG=7 | OUTREG=XED_REG_ZMM7
REXRR=0 REXR=1 REG=0 | OUTREG=XED_REG_ZMM8
REXRR=0 REXR=1 REG=1 | OUTREG=XED_REG_ZMM9
REXRR=0 REXR=1 REG=2 | OUTREG=XED_REG_ZMM10
REXRR=0 REXR=1 REG=3 | OUTREG=XED_REG_ZMM11
REXRR=0 REXR=1 REG=4 | OUTREG=XED_REG_ZMM12
REXRR=0 REXR=1 REG=5 | OUTREG=XED_REG_ZMM13
REXRR=0 REXR=1 REG=6 | OUTREG=XED_REG_ZMM14
REXRR=0 REXR=1 REG=7 | OUTREG=XED_REG_ZMM15
REXRR=1 REXR=0 REG=0 | OUTREG=XED_REG_ZMM16
REXRR=1 REXR=0 REG=1 | OUTREG=XED_REG_ZMM17
REXRR=1 REXR=0 REG=2 | OUTREG=XED_REG_ZMM18
REXRR=1 REXR=0 REG=3 | OUTREG=XED_REG_ZMM19
REXRR=1 REXR=0 REG=4 | OUTREG=XED_REG_ZMM20
REXRR=1 REXR=0 REG=5 | OUTREG=XED_REG_ZMM21
REXRR=1 REXR=0 REG=6 | OUTREG=XED_REG_ZMM22
REXRR=1 REXR=0 REG=7 | OUTREG=XED_REG_ZMM23
REXRR=1 REXR=1 REG=0 | OUTREG=XED_REG_ZMM24
REXRR=1 REXR=1 REG=1 | OUTREG=XED_REG_ZMM25
REXRR=1 REXR=1 REG=2 | OUTREG=XED_REG_ZMM26
REXRR=1 REXR=1 REG=3 | OUTREG=XED_REG_ZMM27
REXRR=1 REXR=1 REG=4 | OUTREG=XED_REG_ZMM28
REXRR=1 REXR=1 REG=5 | OUTREG=XED_REG_ZMM29
REXRR=1 REXR=1 REG=6 | OUTREG=XED_REG_ZMM30
REXRR=1 REXR=1 REG=7 | OUTREG=XED_REG_ZMM31

lrb2-evex-reg-tables.txt/ZMM_B3()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_ZMM0
REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_ZMM1
REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_ZMM2
REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_ZMM3
REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_ZMM4
REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_ZMM5
REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_ZMM6
REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_ZMM7
REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_ZMM8
REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_ZMM9
REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_ZMM10
REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_ZMM11
REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_ZMM12
REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_ZMM13
REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_ZMM14
REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_ZMM15
REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_ZMM16
REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_ZMM17
REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_ZMM18
REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_ZMM19
REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_ZMM20
REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_ZMM21
REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_ZMM22
REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_ZMM23
REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_ZMM24
REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_ZMM25
REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_ZMM26
REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_ZMM27
REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_ZMM28
REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_ZMM29
REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_ZMM30
REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_ZMM31

lrb2-evex-reg-tables.txt/MASK1()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
MASK=0x0  | OUTREG=XED_REG_K0
MASK=0x1  | OUTREG=XED_REG_K1
MASK=0x2  | OUTREG=XED_REG_K2
MASK=0x3  | OUTREG=XED_REG_K3
MASK=0x4  | OUTREG=XED_REG_K4
MASK=0x5  | OUTREG=XED_REG_K5
MASK=0x6  | OUTREG=XED_REG_K6
MASK=0x7  | OUTREG=XED_REG_K7

lrb2-evex-reg-tables.txt/MASK_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REG=0x0 | OUTREG=XED_REG_K0
REG=0x1 | OUTREG=XED_REG_K1
REG=0x2 | OUTREG=XED_REG_K2
REG=0x3 | OUTREG=XED_REG_K3
REG=0x4 | OUTREG=XED_REG_K4
REG=0x5 | OUTREG=XED_REG_K5
REG=0x6 | OUTREG=XED_REG_K6
REG=0x7 | OUTREG=XED_REG_K7

lrb2-evex-reg-tables.txt/MASK_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
RM=0x0 | OUTREG=XED_REG_K0
RM=0x1 | OUTREG=XED_REG_K1
RM=0x2 | OUTREG=XED_REG_K2
RM=0x3 | OUTREG=XED_REG_K3
RM=0x4 | OUTREG=XED_REG_K4
RM=0x5 | OUTREG=XED_REG_K5
RM=0x6 | OUTREG=XED_REG_K6
RM=0x7 | OUTREG=XED_REG_K7

lrb2-evex-reg-tables.txt/MASK_N()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
VEXDEST3=1 VEXDEST210=0x0 | OUTREG=XED_REG_K7
VEXDEST3=1 VEXDEST210=0x1 | OUTREG=XED_REG_K6
VEXDEST3=1 VEXDEST210=0x2 | OUTREG=XED_REG_K5
VEXDEST3=1 VEXDEST210=0x3 | OUTREG=XED_REG_K4
VEXDEST3=1 VEXDEST210=0x4 | OUTREG=XED_REG_K3
VEXDEST3=1 VEXDEST210=0x5 | OUTREG=XED_REG_K2
VEXDEST3=1 VEXDEST210=0x6 | OUTREG=XED_REG_K1
VEXDEST3=1 VEXDEST210=0x7 | OUTREG=XED_REG_K0

uisa-spine.txt/ISA()::
--------------------------------------------------------------------------------------------------------
PREFIXES() OSZ_NONTERM() ASZ_NONTERM() EVEX_SPLITTER() |

uisa-splitter.txt/EVEX_SPLITTER()::
--------------------------------------------------------------------------------------------------------
VEXVALID=0      INSTRUCTIONS() |
VEXVALID=1  AVX_INSTRUCTIONS() |
VEXVALID=2 EVEX_INSTRUCTIONS() |

knm-disp8-enc.txt/NELEM_TUPLE1_4X()::
--------------------------------------------------------------------------------------------------------
otherwise -> nothing

knm-disp8.txt/NELEM_TUPLE1_4X()::
--------------------------------------------------------------------------------------------------------
VL128  | NELEM=4
VL256  | NELEM=4
VL512  | NELEM=4

asize-reg-table.xed.txt/A_GPR_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=ArAX()
REXR=0 REG=0x1  | OUTREG=ArCX()
REXR=0 REG=0x2  | OUTREG=ArDX()
REXR=0 REG=0x3  | OUTREG=ArBX()
REXR=0 REG=0x4  | OUTREG=ArSP()
REXR=0 REG=0x5  | OUTREG=ArBP()
REXR=0 REG=0x6  | OUTREG=ArSI()
REXR=0 REG=0x7  | OUTREG=ArDI()
REXR=1 REG=0x0  | OUTREG=Ar8()
REXR=1 REG=0x1  | OUTREG=Ar9()
REXR=1 REG=0x2  | OUTREG=Ar10()
REXR=1 REG=0x3  | OUTREG=Ar11()
REXR=1 REG=0x4  | OUTREG=Ar12()
REXR=1 REG=0x5  | OUTREG=Ar13()
REXR=1 REG=0x6  | OUTREG=Ar14()
REXR=1 REG=0x7  | OUTREG=Ar15()

mpx-reg-check-enc.txt/BND_R_CHECK()::
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  -> nothing
REXR=0 REG=0x1  -> nothing
REXR=0 REG=0x2  -> nothing
REXR=0 REG=0x3  -> nothing
REXR=0 REG=0x4  -> error
REXR=0 REG=0x5  -> error
REXR=0 REG=0x6  -> error
REXR=0 REG=0x7  -> error
REXR=1 REG=0x0  -> error
REXR=1 REG=0x1  -> error
REXR=1 REG=0x2  -> error
REXR=1 REG=0x3  -> error
REXR=1 REG=0x4  -> error
REXR=1 REG=0x5  -> error
REXR=1 REG=0x6  -> error
REXR=1 REG=0x7  -> error

mpx-reg-check-enc.txt/BND_B_CHECK()::
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  -> nothing
REXB=0 RM=0x1  -> nothing
REXB=0 RM=0x2  -> nothing
REXB=0 RM=0x3  -> nothing
REXB=0 RM=0x4  -> error
REXB=0 RM=0x5  -> error
REXB=0 RM=0x6  -> error
REXB=0 RM=0x7  -> error
REXB=1 RM=0x0  -> error
REXB=1 RM=0x1  -> error
REXB=1 RM=0x2  -> error
REXB=1 RM=0x3  -> error
REXB=1 RM=0x4  -> error
REXB=1 RM=0x5  -> error
REXB=1 RM=0x6  -> error
REXB=1 RM=0x7  -> error

mpx-reg-check.txt/BND_R_CHECK()::
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  |
REXR=0 REG=0x1  |
REXR=0 REG=0x2  |
REXR=0 REG=0x3  |
REXR=0 REG=0x4  | error
REXR=0 REG=0x5  | error
REXR=0 REG=0x6  | error
REXR=0 REG=0x7  | error
REXR=1 REG=0x0  | error
REXR=1 REG=0x1  | error
REXR=1 REG=0x2  | error
REXR=1 REG=0x3  | error
REXR=1 REG=0x4  | error
REXR=1 REG=0x5  | error
REXR=1 REG=0x6  | error
REXR=1 REG=0x7  | error

mpx-reg-check.txt/BND_B_CHECK()::
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  |
REXB=0 RM=0x1  |
REXB=0 RM=0x2  |
REXB=0 RM=0x3  |
REXB=0 RM=0x4  | error
REXB=0 RM=0x5  | error
REXB=0 RM=0x6  | error
REXB=0 RM=0x7  | error
REXB=1 RM=0x0  | error
REXB=1 RM=0x1  | error
REXB=1 RM=0x2  | error
REXB=1 RM=0x3  | error
REXB=1 RM=0x4  | error
REXB=1 RM=0x5  | error
REXB=1 RM=0x6  | error
REXB=1 RM=0x7  | error

mpx-reg-tables.txt/BND_R()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXR=0 REG=0x0  | OUTREG=XED_REG_BND0
REXR=0 REG=0x1  | OUTREG=XED_REG_BND1
REXR=0 REG=0x2  | OUTREG=XED_REG_BND2
REXR=0 REG=0x3  | OUTREG=XED_REG_BND3
REXR=0 REG=0x4  | OUTREG=XED_REG_ERROR  enc
REXR=0 REG=0x5  | OUTREG=XED_REG_ERROR
REXR=0 REG=0x6  | OUTREG=XED_REG_ERROR
REXR=0 REG=0x7  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x0  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR
REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR

mpx-reg-tables.txt/BND_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=XED_REG_BND0
REXB=0 RM=0x1  | OUTREG=XED_REG_BND1
REXB=0 RM=0x2  | OUTREG=XED_REG_BND2
REXB=0 RM=0x3  | OUTREG=XED_REG_BND3
REXB=0 RM=0x4  | OUTREG=XED_REG_ERROR   enc
REXB=0 RM=0x5  | OUTREG=XED_REG_ERROR
REXB=0 RM=0x6  | OUTREG=XED_REG_ERROR
REXB=0 RM=0x7  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x0  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x1  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x2  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x3  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x4  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x5  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x6  | OUTREG=XED_REG_ERROR
REXB=1 RM=0x7  | OUTREG=XED_REG_ERROR

asize-rm-table.xed.txt/A_GPR_B()::xed_reg_enum_t
--------------------------------------------------------------------------------------------------------
REXB=0 RM=0x0  | OUTREG=ArAX()
REXB=0 RM=0x1  | OUTREG=ArCX()
REXB=0 RM=0x2  | OUTREG=ArDX()
REXB=0 RM=0x3  | OUTREG=ArBX()
REXB=0 RM=0x4  | OUTREG=ArSP()
REXB=0 RM=0x5  | OUTREG=ArBP()
REXB=0 RM=0x6  | OUTREG=ArSI()
REXB=0 RM=0x7  | OUTREG=ArDI()
REXB=1 RM=0x0  | OUTREG=Ar8()
REXB=1 RM=0x1  | OUTREG=Ar9()
REXB=1 RM=0x2  | OUTREG=Ar10()
REXB=1 RM=0x3  | OUTREG=Ar11()
REXB=1 RM=0x4  | OUTREG=Ar12()
REXB=1 RM=0x5  | OUTREG=Ar13()
REXB=1 RM=0x6  | OUTREG=Ar14()
REXB=1 RM=0x7  | OUTREG=Ar15()
