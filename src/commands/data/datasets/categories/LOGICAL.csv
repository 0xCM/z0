Class               | Category      | Extension     | IsaSet        | BaseCode    | Mod       | Reg       | Pattern                                                                                             | Operands
 | AND                  | LOGICAL        | BASE           | I86            | 80           | mm         | 0b100      | 0x80 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() UIMM8() nolock_prefix                                 | MEM0:rw:b IMM0:r:b
 | AND                  | LOGICAL        | BASE           | I86            | 80           | 0b11       | 0b100      | 0x80 MOD[0b11] MOD=3 REG[0b100] RM[nnn] UIMM8()                                                      | REG0=GPR8_B():rw IMM0:r:b
 | AND                  | LOGICAL        | BASE           | I86            | 81           | mm         | 0b100      | 0x81 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() SIMMz() nolock_prefix                                 | MEM0:rw:v IMM0:r:z
 | AND                  | LOGICAL        | BASE           | I86            | 81           | 0b11       | 0b100      | 0x81 MOD[0b11] MOD=3 REG[0b100] RM[nnn] SIMMz()                                                      | REG0=GPRv_B():rw IMM0:r:z
 | AND                  | LOGICAL        | BASE           | I86            | 82           | mm         | 0b100      | 0x82 MOD[mm] MOD!=3 REG[0b100] RM[nnn] not64 MODRM() UIMM8() nolock_prefix                           | MEM0:rw:b IMM0:r:b
 | AND                  | LOGICAL        | BASE           | I86            | 82           | 0b11       | 0b100      | 0x82 MOD[0b11] MOD=3 REG[0b100] RM[nnn] not64 UIMM8()                                                | REG0=GPR8_B():rw IMM0:r:b
 | AND                  | LOGICAL        | BASE           | I86            | 83           | mm         | 0b100      | 0x83 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() SIMM8() nolock_prefix                                 | MEM0:rw:v IMM0:r:b:i8
 | AND                  | LOGICAL        | BASE           | I86            | 83           | 0b11       | 0b100      | 0x83 MOD[0b11] MOD=3 REG[0b100] RM[nnn] SIMM8()                                                      | REG0=GPRv_B():rw IMM0:r:b:i8
 | AND                  | LOGICAL        | BASE           | I86            | 20           | mm         | rrr        | 0x20 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:b REG0=GPR8_R():r
 | AND                  | LOGICAL        | BASE           | I86            | 20           | 0b11       | rrr        | 0x20 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_B():rw REG1=GPR8_R():r
 | AND                  | LOGICAL        | BASE           | I86            | 21           | mm         | rrr        | 0x21 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:v REG0=GPRv_R():r
 | AND                  | LOGICAL        | BASE           | I86            | 21           | 0b11       | rrr        | 0x21 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_B():rw REG1=GPRv_R():r
 | AND                  | LOGICAL        | BASE           | I86            | 22           | 0b11       | rrr        | 0x22 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_R():rw REG1=GPR8_B():r
 | AND                  | LOGICAL        | BASE           | I86            | 22           | mm         | rrr        | 0x22 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPR8_R():rw MEM0:r:b
 | AND                  | LOGICAL        | BASE           | I86            | 23           | 0b11       | rrr        | 0x23 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_R():rw REG1=GPRv_B():r
 | AND                  | LOGICAL        | BASE           | I86            | 23           | mm         | rrr        | 0x23 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPRv_R():rw MEM0:r:v
 | AND                  | LOGICAL        | BASE           | I86            | 24           |            |            | 0x24 SIMM8()                                                                                         | REG0=XED_REG_AL:rw:IMPL IMM0:r:b:i8
 | AND                  | LOGICAL        | BASE           | I86            | 25           |            |            | 0x25 SIMMz()                                                                                         | REG0=OrAX():rw:IMPL IMM0:r:z
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 80           | mm         | 0b100      | 0x80 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() UIMM8() lock_prefix                                   | MEM0:rw:b IMM0:r:b
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 81           | mm         | 0b100      | 0x81 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() SIMMz() lock_prefix                                   | MEM0:rw:v IMM0:r:z
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 82           | mm         | 0b100      | 0x82 MOD[mm] MOD!=3 REG[0b100] RM[nnn] not64 MODRM() UIMM8() lock_prefix                             | MEM0:rw:b IMM0:r:b
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 83           | mm         | 0b100      | 0x83 MOD[mm] MOD!=3 REG[0b100] RM[nnn] MODRM() SIMM8() lock_prefix                                   | MEM0:rw:v IMM0:r:b:i8
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 20           | mm         | rrr        | 0x20 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:b REG0=GPR8_R():r
 | AND_LOCK             | LOGICAL        | BASE           | I86            | 21           | mm         | rrr        | 0x21 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:v REG0=GPRv_R():r
 | NOT                  | LOGICAL        | BASE           | I86            | f6           | mm         | 0b010      | 0xF6 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM() nolock_prefix                                         | MEM0:rw:b
 | NOT                  | LOGICAL        | BASE           | I86            | f6           | 0b11       | 0b010      | 0xF6 MOD[0b11] MOD=3 REG[0b010] RM[nnn]                                                              | REG0=GPR8_B():rw
 | NOT                  | LOGICAL        | BASE           | I86            | f7           | mm         | 0b010      | 0xF7 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM() nolock_prefix                                         | MEM0:rw:v
 | NOT                  | LOGICAL        | BASE           | I86            | f7           | 0b11       | 0b010      | 0xF7 MOD[0b11] MOD=3 REG[0b010] RM[nnn]                                                              | REG0=GPRv_B():rw
 | NOT_LOCK             | LOGICAL        | BASE           | I86            | f6           | mm         | 0b010      | 0xF6 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM() lock_prefix                                           | MEM0:rw:b
 | NOT_LOCK             | LOGICAL        | BASE           | I86            | f7           | mm         | 0b010      | 0xF7 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM() lock_prefix                                           | MEM0:rw:v
 | OR                   | LOGICAL        | BASE           | I86            | 80           | mm         | 0b001      | 0x80 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMM8() nolock_prefix                                 | MEM0:rw:b IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 80           | 0b11       | 0b001      | 0x80 MOD[0b11] MOD=3 REG[0b001] RM[nnn] SIMM8()                                                      | REG0=GPR8_B():rw IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 81           | mm         | 0b001      | 0x81 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMMz() nolock_prefix                                 | MEM0:rw:v IMM0:r:z
 | OR                   | LOGICAL        | BASE           | I86            | 81           | 0b11       | 0b001      | 0x81 MOD[0b11] MOD=3 REG[0b001] RM[nnn] SIMMz()                                                      | REG0=GPRv_B():rw IMM0:r:z
 | OR                   | LOGICAL        | BASE           | I86            | 82           | mm         | 0b001      | 0x82 MOD[mm] MOD!=3 REG[0b001] RM[nnn] not64 MODRM() SIMM8() nolock_prefix                           | MEM0:rw:b IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 82           | 0b11       | 0b001      | 0x82 MOD[0b11] MOD=3 REG[0b001] RM[nnn] not64 SIMM8()                                                | REG0=GPR8_B():rw IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 83           | mm         | 0b001      | 0x83 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMM8() nolock_prefix                                 | MEM0:rw:v IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 83           | 0b11       | 0b001      | 0x83 MOD[0b11] MOD=3 REG[0b001] RM[nnn] SIMM8()                                                      | REG0=GPRv_B():rw IMM0:r:b:i8
 | OR                   | LOGICAL        | BASE           | I86            | 08           | mm         | rrr        | 0x08 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:b REG0=GPR8_R():r
 | OR                   | LOGICAL        | BASE           | I86            | 08           | 0b11       | rrr        | 0x08 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_B():rw REG1=GPR8_R():r
 | OR                   | LOGICAL        | BASE           | I86            | 09           | mm         | rrr        | 0x09 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:v REG0=GPRv_R():r
 | OR                   | LOGICAL        | BASE           | I86            | 09           | 0b11       | rrr        | 0x09 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_B():rw REG1=GPRv_R():r
 | OR                   | LOGICAL        | BASE           | I86            | 0a           | mm         | rrr        | 0x0A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPR8_R():rw MEM0:r:b
 | OR                   | LOGICAL        | BASE           | I86            | 0a           | 0b11       | rrr        | 0x0A MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_R():rw REG1=GPR8_B():r
 | OR                   | LOGICAL        | BASE           | I86            | 0b           | mm         | rrr        | 0x0B MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPRv_R():rw MEM0:r:v
 | OR                   | LOGICAL        | BASE           | I86            | 0b           | 0b11       | rrr        | 0x0B MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_R():rw REG1=GPRv_B():r
 | OR                   | LOGICAL        | BASE           | I86            | 0c           |            |            | 0x0C UIMM8()                                                                                         | REG0=XED_REG_AL:rw:IMPL IMM0:r:b
 | OR                   | LOGICAL        | BASE           | I86            | 0d           |            |            | 0x0D SIMMz()                                                                                         | REG0=OrAX():rw:IMPL IMM0:r:z
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 80           | mm         | 0b001      | 0x80 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMM8() lock_prefix                                   | MEM0:rw:b IMM0:r:b:i8
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 81           | mm         | 0b001      | 0x81 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMMz() lock_prefix                                   | MEM0:rw:v IMM0:r:z
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 82           | mm         | 0b001      | 0x82 MOD[mm] MOD!=3 REG[0b001] RM[nnn] not64 MODRM() SIMM8() lock_prefix                             | MEM0:rw:b IMM0:r:b:i8
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 83           | mm         | 0b001      | 0x83 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMM8() lock_prefix                                   | MEM0:rw:v IMM0:r:b:i8
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 08           | mm         | rrr        | 0x08 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:b REG0=GPR8_R():r
 | OR_LOCK              | LOGICAL        | BASE           | I86            | 09           | mm         | rrr        | 0x09 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:v REG0=GPRv_R():r
 | PAND                 | LOGICAL        | MMX            | PENTIUMMMX     | 0f db        | mm         | rrr        | 0x0F 0xDB no_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()                                | REG0=MMX_R():rw:q MEM0:r:q
 | PAND                 | LOGICAL        | MMX            | PENTIUMMMX     | 0f db        | 0b11       | rrr        | 0x0F 0xDB no_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                        | REG0=MMX_R():rw:q REG1=MMX_B():r:q
 | PAND                 | LOGICAL        | SSE2           |                | 0f db        | mm         | rrr        | 0x0F 0xDB osz_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  REFINING66() MODRM()                  | REG0=XMM_R():rw:dq MEM0:r:dq
 | PAND                 | LOGICAL        | SSE2           |                | 0f db        | 0b11       | rrr        | 0x0F 0xDB osz_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]  REFINING66()                         | REG0=XMM_R():rw:dq REG1=XMM_B():r:dq
 | PANDN                | LOGICAL        | MMX            | PENTIUMMMX     | 0f df        | mm         | rrr        | 0x0F 0xDF no_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()                                | REG0=MMX_R():rw:q MEM0:r:q
 | PANDN                | LOGICAL        | MMX            | PENTIUMMMX     | 0f df        | 0b11       | rrr        | 0x0F 0xDF no_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                        | REG0=MMX_R():rw:q REG1=MMX_B():r:q
 | PANDN                | LOGICAL        | SSE2           |                | 0f df        | mm         | rrr        | 0x0F 0xDF osz_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  REFINING66() MODRM()                  | REG0=XMM_R():rw:dq MEM0:r:dq
 | PANDN                | LOGICAL        | SSE2           |                | 0f df        | 0b11       | rrr        | 0x0F 0xDF osz_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]  REFINING66()                         | REG0=XMM_R():rw:dq REG1=XMM_B():r:dq
 | POR                  | LOGICAL        | MMX            | PENTIUMMMX     | 0f eb        | mm         | rrr        | 0x0F 0xEB no_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()                                | REG0=MMX_R():rw:q MEM0:r:q
 | POR                  | LOGICAL        | MMX            | PENTIUMMMX     | 0f eb        | 0b11       | rrr        | 0x0F 0xEB no_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                        | REG0=MMX_R():rw:q REG1=MMX_B():r:q
 | POR                  | LOGICAL        | SSE2           |                | 0f eb        | mm         | rrr        | 0x0F 0xEB osz_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  REFINING66() MODRM()                  | REG0=XMM_R():rw:dq MEM0:r:dq
 | POR                  | LOGICAL        | SSE2           |                | 0f eb        | 0b11       | rrr        | 0x0F 0xEB osz_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]  REFINING66()                         | REG0=XMM_R():rw:dq REG1=XMM_B():r:dq
 | PTEST                | LOGICAL        | SSE4           |                | 0f 38 17     | mm         | rrr        | 0x0F 0x38 0x17 osz_refining_prefix REFINING66() MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()              | REG0=XMM_R():r:dq   MEM0:r:dq
 | PTEST                | LOGICAL        | SSE4           |                | 0f 38 17     | 0b11       | rrr        | 0x0F 0x38 0x17 osz_refining_prefix REFINING66() MOD[0b11] MOD=3 REG[rrr] RM[nnn]                     | REG0=XMM_R():r:dq   REG1=XMM_B():r:dq
 | PXOR                 | LOGICAL        | MMX            | PENTIUMMMX     | 0f ef        | mm         | rrr        | 0x0F 0xEF no_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()                                | REG0=MMX_R():rw:q MEM0:r:q
 | PXOR                 | LOGICAL        | MMX            | PENTIUMMMX     | 0f ef        | 0b11       | rrr        | 0x0F 0xEF no_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                        | REG0=MMX_R():rw:q REG1=MMX_B():r:q
 | PXOR                 | LOGICAL        | SSE2           |                | 0f ef        | mm         | rrr        | 0x0F 0xEF osz_refining_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn]  REFINING66() MODRM()                  | REG0=XMM_R():rw:dq MEM0:r:dq
 | PXOR                 | LOGICAL        | SSE2           |                | 0f ef        | 0b11       | rrr        | 0x0F 0xEF osz_refining_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]  REFINING66()                         | REG0=XMM_R():rw:dq REG1=XMM_B():r:dq
 | TEST                 | LOGICAL        | BASE           | I86            | f6           | mm         | 0b000      | 0xF6 MOD[mm] MOD!=3 REG[0b000] RM[nnn] MODRM() SIMM8()                                               | MEM0:r:b IMM0:r:b:i8
 | TEST                 | LOGICAL        | BASE           | I86            | f6           | mm         | 0b001      | 0xF6 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMM8()                                               | MEM0:r:b IMM0:r:b:i8
 | TEST                 | LOGICAL        | BASE           | I86            | f6           | 0b11       | 0b000      | 0xF6 MOD[0b11] MOD=3 REG[0b000] RM[nnn] SIMM8()                                                      | REG0=GPR8_B():r IMM0:r:b:i8
 | TEST                 | LOGICAL        | BASE           | I86            | f6           | 0b11       | 0b001      | 0xF6 MOD[0b11] MOD=3 REG[0b001] RM[nnn] SIMM8()                                                      | REG0=GPR8_B():r IMM0:r:b:i8
 | TEST                 | LOGICAL        | BASE           | I86            | f7           | mm         | 0b000      | 0xF7 MOD[mm] MOD!=3 REG[0b000] RM[nnn] MODRM() SIMMz()                                               | MEM0:r:v IMM0:r:z
 | TEST                 | LOGICAL        | BASE           | I86            | f7           | mm         | 0b001      | 0xF7 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM() SIMMz()                                               | MEM0:r:v IMM0:r:z
 | TEST                 | LOGICAL        | BASE           | I86            | f7           | 0b11       | 0b000      | 0xF7 MOD[0b11] MOD=3 REG[0b000] RM[nnn] SIMMz()                                                      | REG0=GPRv_B():r IMM0:r:z
 | TEST                 | LOGICAL        | BASE           | I86            | f7           | 0b11       | 0b001      | 0xF7 MOD[0b11] MOD=3 REG[0b001] RM[nnn] SIMMz()                                                      | REG0=GPRv_B():r IMM0:r:z
 | TEST                 | LOGICAL        | BASE           | I86            | 84           | mm         | rrr        | 0x84 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | MEM0:r:b REG0=GPR8_R():r
 | TEST                 | LOGICAL        | BASE           | I86            | 84           | 0b11       | rrr        | 0x84 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_B():r REG1=GPR8_R():r
 | TEST                 | LOGICAL        | BASE           | I86            | 85           | mm         | rrr        | 0x85 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | MEM0:r:v REG0=GPRv_R():r
 | TEST                 | LOGICAL        | BASE           | I86            | 85           | 0b11       | rrr        | 0x85 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_B():r REG1=GPRv_R():r
 | TEST                 | LOGICAL        | BASE           | I86            | a8           |            |            | 0xA8 SIMM8()                                                                                         | REG0=XED_REG_AL:r:IMPL IMM0:r:b:i8
 | TEST                 | LOGICAL        | BASE           | I86            | a9           |            |            | 0xA9 SIMMz()                                                                                         | REG0=OrAX():r:IMPL IMM0:r:z
 | VPAND                | LOGICAL        | AVX            |                | db           | mm         | rrr        | VV1 0xDB  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                      | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 MEM0:r:dq:u128
 | VPAND                | LOGICAL        | AVX            |                | db           | 0b11       | rrr        | VV1 0xDB  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                             | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 REG2=XMM_B():r:dq:u128
 | VPAND                | LOGICAL        | AVX2           |                | db           | mm         | rrr        | VV1 0xDB  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                     | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 MEM0:r:qq:u256
 | VPAND                | LOGICAL        | AVX2           |                | db           | 0b11       | rrr        | VV1 0xDB   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                            | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 REG2=YMM_B():r:qq:u256
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_128    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0                                  | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_128    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_256    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0                                  | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_256    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_512    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0                                  | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPANDD               | LOGICAL        | AVX512EVEX     | AVX512F_512    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDN               | LOGICAL        | AVX            |                | df           | mm         | rrr        | VV1 0xDF  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                      | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 MEM0:r:dq:u128
 | VPANDN               | LOGICAL        | AVX            |                | df           | 0b11       | rrr        | VV1 0xDF  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                             | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 REG2=XMM_B():r:dq:u128
 | VPANDN               | LOGICAL        | AVX2           |                | df           | mm         | rrr        | VV1 0xDF  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                     | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 MEM0:r:qq:u256
 | VPANDN               | LOGICAL        | AVX2           |                | df           | 0b11       | rrr        | VV1 0xDF   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                            | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 REG2=YMM_B():r:qq:u256
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_128    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0                                  | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_128    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_256    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0                                  | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_256    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_512    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0                                  | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPANDND              | LOGICAL        | AVX512EVEX     | AVX512F_512    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_128    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1                                  | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_128    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_256    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1                                  | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_256    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_512    | df           | 0b11       | rrr        | EVV 0xDF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1                                  | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPANDNQ              | LOGICAL        | AVX512EVEX     | AVX512F_512    | df           | mm         | rrr        | EVV 0xDF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_128    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1                                  | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_128    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_256    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1                                  | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_256    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_512    | db           | 0b11       | rrr        | EVV 0xDB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1                                  | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPANDQ               | LOGICAL        | AVX512EVEX     | AVX512F_512    | db           | mm         | rrr        | EVV 0xDB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPOR                 | LOGICAL        | AVX            |                | eb           | mm         | rrr        | VV1 0xEB  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                      | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 MEM0:r:dq:u128
 | VPOR                 | LOGICAL        | AVX            |                | eb           | 0b11       | rrr        | VV1 0xEB  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                             | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 REG2=XMM_B():r:dq:u128
 | VPOR                 | LOGICAL        | AVX2           |                | eb           | mm         | rrr        | VV1 0xEB  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                     | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 MEM0:r:qq:u256
 | VPOR                 | LOGICAL        | AVX2           |                | eb           | 0b11       | rrr        | VV1 0xEB   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                            | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 REG2=YMM_B():r:qq:u256
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_128    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0                                  | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_128    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_256    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0                                  | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_256    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_512    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0                                  | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPORD                | LOGICAL        | AVX512EVEX     | AVX512F_512    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_128    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1                                  | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_128    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_256    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1                                  | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_256    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_512    | eb           | 0b11       | rrr        | EVV 0xEB V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1                                  | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPORQ                | LOGICAL        | AVX512EVEX     | AVX512F_512    | eb           | mm         | rrr        | EVV 0xEB V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_128    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0   UIMM8()                      | REG0=XMM_R3():rw:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32 IMM0:r:b
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_128    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0   UIMM8()  ESIZE_32_BITS() NELEM_FULL() | REG0=XMM_R3():rw:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR IMM0:r:b
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_256    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0   UIMM8()                      | REG0=YMM_R3():rw:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32 IMM0:r:b
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_256    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0   UIMM8()  ESIZE_32_BITS() NELEM_FULL() | REG0=YMM_R3():rw:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR IMM0:r:b
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_512    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0   UIMM8()                      | REG0=ZMM_R3():rw:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32 IMM0:r:b
 | VPTERNLOGD           | LOGICAL        | AVX512EVEX     | AVX512F_512    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0   UIMM8()  ESIZE_32_BITS() NELEM_FULL() | REG0=ZMM_R3():rw:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_128    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1   UIMM8()                      | REG0=XMM_R3():rw:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64 IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_128    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1   UIMM8()  ESIZE_64_BITS() NELEM_FULL() | REG0=XMM_R3():rw:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_256    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1   UIMM8()                      | REG0=YMM_R3():rw:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64 IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_256    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1   UIMM8()  ESIZE_64_BITS() NELEM_FULL() | REG0=YMM_R3():rw:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_512    | 25           | 0b11       | rrr        | EVV 0x25 V66 V0F3A MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1   UIMM8()                      | REG0=ZMM_R3():rw:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64 IMM0:r:b
 | VPTERNLOGQ           | LOGICAL        | AVX512EVEX     | AVX512F_512    | 25           | mm         | rrr        | EVV 0x25 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1   UIMM8()  ESIZE_64_BITS() NELEM_FULL() | REG0=ZMM_R3():rw:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR IMM0:r:b
 | VPTEST               | LOGICAL        | AVX            |                | 17           | mm         | rrr        | VV1 0x17  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                              | REG0=XMM_R():r:dq MEM0:r:dq
 | VPTEST               | LOGICAL        | AVX            |                | 17           | 0b11       | rrr        | VV1 0x17  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                     | REG0=XMM_R():r:dq REG1=XMM_B():r:dq
 | VPTEST               | LOGICAL        | AVX            |                | 17           | mm         | rrr        | VV1 0x17  VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                              | REG0=YMM_R():r:qq MEM0:r:qq
 | VPTEST               | LOGICAL        | AVX            |                | 17           | 0b11       | rrr        | VV1 0x17  VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                     | REG0=YMM_R():r:qq REG1=YMM_B():r:qq
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u8 REG3=XMM_B3():r:dq:u8
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL128  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u8 MEM0:r:dq:u8
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u8 REG3=YMM_B3():r:qq:u8
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL256  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u8 MEM0:r:qq:u8
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu8 REG3=ZMM_B3():r:zu8
 | VPTESTMB             | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL512  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu8 MEM0:r:zd:u8
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPTESTMD             | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | 0b11       | rrr        | EVV 0x27 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPTESTMQ             | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | mm         | rrr        | EVV 0x27 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u16 REG3=XMM_B3():r:dq:u16
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL128  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u16 MEM0:r:dq:u16
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u16 REG3=YMM_B3():r:qq:u16
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL256  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u16 MEM0:r:qq:u16
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | 0b11       | rrr        | EVV 0x26 V66 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu16 REG3=ZMM_B3():r:zu16
 | VPTESTMW             | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | mm         | rrr        | EVV 0x26 V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL512  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu16 MEM0:r:zd:u16
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u8 REG3=XMM_B3():r:dq:u8
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL128  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u8 MEM0:r:dq:u8
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u8 REG3=YMM_B3():r:qq:u8
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL256  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u8 MEM0:r:qq:u8
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu8 REG3=ZMM_B3():r:zu8
 | VPTESTNMB            | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL512  W0    ZEROING=0  ESIZE_8_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu8 MEM0:r:zd:u8
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPTESTNMD            | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ZEROING=0  ESIZE_32_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_128    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_256    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | 0b11       | rrr        | EVV 0x27 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPTESTNMQ            | LOGICAL        | AVX512EVEX     | AVX512F_512    | 27           | mm         | rrr        | EVV 0x27 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ZEROING=0  ESIZE_64_BITS() NELEM_FULL() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u16 REG3=XMM_B3():r:dq:u16
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_128   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL128  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=XMM_N3():r:dq:u16 MEM0:r:dq:u16
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u16 REG3=YMM_B3():r:qq:u16
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_256   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL256  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=YMM_N3():r:qq:u16 MEM0:r:qq:u16
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | 0b11       | rrr        | EVV 0x26 VF3 V0F38 MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1    ZEROING=0                   | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu16 REG3=ZMM_B3():r:zu16
 | VPTESTNMW            | LOGICAL        | AVX512EVEX     | AVX512BW_512   | 26           | mm         | rrr        | EVV 0x26 VF3 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] BCRC=0 MODRM()  VL512  W1    ZEROING=0  ESIZE_16_BITS() NELEM_FULLMEM() | REG0=MASK_R():w:mskw REG1=MASK1():r:mskw REG2=ZMM_N3():r:zu16 MEM0:r:zd:u16
 | VPXOR                | LOGICAL        | AVX            |                | ef           | mm         | rrr        | VV1 0xEF  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                      | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 MEM0:r:dq:u128
 | VPXOR                | LOGICAL        | AVX            |                | ef           | 0b11       | rrr        | VV1 0xEF  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                             | REG0=XMM_R():w:dq:u128 REG1=XMM_N():r:dq:u128 REG2=XMM_B():r:dq:u128
 | VPXOR                | LOGICAL        | AVX2           |                | ef           | mm         | rrr        | VV1 0xEF  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                     | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 MEM0:r:qq:u256
 | VPXOR                | LOGICAL        | AVX2           |                | ef           | 0b11       | rrr        | VV1 0xEF   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                            | REG0=YMM_R():w:qq:u256 REG1=YMM_N():r:qq:u256 REG2=YMM_B():r:qq:u256
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_128    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W0                                  | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 REG3=XMM_B3():r:dq:u32
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_128    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_256    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W0                                  | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 REG3=YMM_B3():r:qq:u32
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_256    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_512    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W0                                  | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 REG3=ZMM_B3():r:zu32
 | VPXORD               | LOGICAL        | AVX512EVEX     | AVX512F_512    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W0    ESIZE_32_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu32 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu32 MEM0:r:vv:u32:TXT=BCASTSTR
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_128    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL128  W1                                  | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 REG3=XMM_B3():r:dq:u64
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_128    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=XMM_R3():w:dq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=XMM_N3():r:dq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_256    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL256  W1                                  | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 REG3=YMM_B3():r:qq:u64
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_256    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=YMM_R3():w:qq:u64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=YMM_N3():r:qq:u64 MEM0:r:vv:u64:TXT=BCASTSTR
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_512    | ef           | 0b11       | rrr        | EVV 0xEF V66 V0F MOD[0b11] MOD=3 BCRC=0 REG[rrr] RM[nnn]  VL512  W1                                  | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 REG3=ZMM_B3():r:zu64
 | VPXORQ               | LOGICAL        | AVX512EVEX     | AVX512F_512    | ef           | mm         | rrr        | EVV 0xEF V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL512  W1    ESIZE_64_BITS() NELEM_FULL() | REG0=ZMM_R3():w:zu64 REG1=MASK1():r:mskw:TXT=ZEROSTR REG2=ZMM_N3():r:zu64 MEM0:r:vv:u64:TXT=BCASTSTR
 | XOR                  | LOGICAL        | BASE           | I86            | 80           | mm         | 0b110      | 0x80 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() UIMM8() nolock_prefix                                 | MEM0:rw:b IMM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 80           | 0b11       | 0b110      | 0x80 MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()                                                      | REG0=GPR8_B():rw IMM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 81           | mm         | 0b110      | 0x81 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() SIMMz() nolock_prefix                                 | MEM0:rw:v IMM0:r:z
 | XOR                  | LOGICAL        | BASE           | I86            | 81           | 0b11       | 0b110      | 0x81 MOD[0b11] MOD=3 REG[0b110] RM[nnn] SIMMz()                                                      | REG0=GPRv_B():rw IMM0:r:z
 | XOR                  | LOGICAL        | BASE           | I86            | 82           | mm         | 0b110      | 0x82 MOD[mm] MOD!=3 REG[0b110] RM[nnn] not64 MODRM() UIMM8() nolock_prefix                           | MEM0:rw:b IMM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 82           | 0b11       | 0b110      | 0x82 MOD[0b11] MOD=3 REG[0b110] RM[nnn] not64 UIMM8()                                                | REG0=GPR8_B():rw IMM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 83           | mm         | 0b110      | 0x83 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() SIMM8() nolock_prefix                                 | MEM0:rw:v IMM0:r:b:i8
 | XOR                  | LOGICAL        | BASE           | I86            | 83           | 0b11       | 0b110      | 0x83 MOD[0b11] MOD=3 REG[0b110] RM[nnn] SIMM8()                                                      | REG0=GPRv_B():rw IMM0:r:b:i8
 | XOR                  | LOGICAL        | BASE           | I86            | 30           | mm         | rrr        | 0x30 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:b REG0=GPR8_R():r
 | XOR                  | LOGICAL        | BASE           | I86            | 30           | 0b11       | rrr        | 0x30 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_B():rw REG1=GPR8_R():r
 | XOR                  | LOGICAL        | BASE           | I86            | 31           | mm         | rrr        | 0x31 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() nolock_prefix                                           | MEM0:rw:v REG0=GPRv_R():r
 | XOR                  | LOGICAL        | BASE           | I86            | 31           | 0b11       | rrr        | 0x31 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_B():rw REG1=GPRv_R():r
 | XOR                  | LOGICAL        | BASE           | I86            | 32           | 0b11       | rrr        | 0x32 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPR8_R():rw REG1=GPR8_B():r
 | XOR                  | LOGICAL        | BASE           | I86            | 32           | mm         | rrr        | 0x32 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPR8_R():rw MEM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 33           | 0b11       | rrr        | 0x33 MOD[0b11] MOD=3 REG[rrr] RM[nnn]                                                                | REG0=GPRv_R():rw REG1=GPRv_B():r
 | XOR                  | LOGICAL        | BASE           | I86            | 33           | mm         | rrr        | 0x33 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()                                                         | REG0=GPRv_R():rw MEM0:r:v
 | XOR                  | LOGICAL        | BASE           | I86            | 34           |            |            | 0x34 UIMM8()                                                                                         | REG0=XED_REG_AL:rw:IMPL IMM0:r:b
 | XOR                  | LOGICAL        | BASE           | I86            | 35           |            |            | 0x35 SIMMz()                                                                                         | REG0=OrAX():rw:IMPL IMM0:r:z
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 80           | mm         | 0b110      | 0x80 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() UIMM8() lock_prefix                                   | MEM0:rw:b IMM0:r:b
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 81           | mm         | 0b110      | 0x81 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() SIMMz() lock_prefix                                   | MEM0:rw:v IMM0:r:z
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 82           | mm         | 0b110      | 0x82 MOD[mm] MOD!=3 REG[0b110] RM[nnn] not64 MODRM() UIMM8() lock_prefix                             | MEM0:rw:b IMM0:r:b
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 83           | mm         | 0b110      | 0x83 MOD[mm] MOD!=3 REG[0b110] RM[nnn] MODRM() SIMM8() lock_prefix                                   | MEM0:rw:v IMM0:r:b:i8
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 30           | mm         | rrr        | 0x30 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:b REG0=GPR8_R():r
 | XOR_LOCK             | LOGICAL        | BASE           | I86            | 31           | mm         | rrr        | 0x31 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() lock_prefix                                             | MEM0:rw:v REG0=GPRv_R():r
 | XTEST                | LOGICAL        | RTM            |                | 0f 01        | 0b11       | 0b010      | 0x0F 0x01 MOD[0b11] MOD=3 REG[0b010] RM[0b110]  no_refining_prefix                                   | 
