# Algorithm Syntax

| Syntax                | Meaning                                                                                                              |
| (* ... *)             | Comment                                                                                                              |
| IF, THEN, ELSE and FI | IF statement declaration/enclosure                                                                                   |
| DO and OD             | DO statement declaration/enclosure                                                                                   |
| CASE... OF            | Case statement declaration/branches                                                                                  |
| RegisterName          | Register Content                                                                                                     |
| [RegisterName]        | Content of address specified in register                                                                             |
|                       | ES:[DI] indicates the contents of the location whose ES segment relative address is in register DI.                  |
|                       | [SI] indicates the contents of the address contained in register SI relative to the SI register’s                    |
|                       | default segment (DS) or the overridden segment.                                                                      |
| (E)AB                 | Parentheses around the “E” in a general-purpose register name, such as (E)SI, indicates that the offset is read      |
|                       | from the SI register if the address-size attribute is 16, from the ESI register if the address-size attribute is 32. |
|                       | Parentheses around the “R” in a general-purpose register name, (R)SI, in the presence of a 64-bit register           |
|                       | definition such as (R)SI, indicates that the offset is read from the 64-bit RSI register if the address-size         |
|                       | attribute is 64                                                                                                      |
| [MemoryOperand]       | Brackets are used for memory operands where they mean that the contents of the memory location is a                  |
|                       | segment-relative offset. For example, [SRC] indicates that the content of the source operand is a segment-           |
|                       | relative offset.                                                                                                     |
| A ← B                 | The value of B is assigned to A.                                                                                     |
| = (equal)             | Compares two values for equality; A = B is TRUE if the value of A is equal to B; otherwise it is FALSE.              |
| ≠ (not equal)         | Compares two values for inequality                                                                                   |
| > (greater than)      |                                                                                                                      |
| < (less than)         |                                                                                                                      |
| ≥ (greater or equal)  |                                                                                                                      |
| ≤ (less or equal)     |                                                                                                                      |
| « COUNT               | The destination operand should be shifted left by the number of bits indicated by the count operand.                 |
| » COUNT               | The destination operand should be shifted  right by the number of bits indicated by the count operand.               |

# Algorithm Identifiers

| Identifier    | Meaning
| OperandSize   | The OperandSize identifier represents the operand-size attribute of the instruction (16, 32 or 64-bits)
| AddressSize   | The AddressSize identifier represents the address-size attribute (16, 32 or 64-bits)
| StackAddrSize | Represents the stack address-size attribute associated with the instruction (16, 32 or 64-bits)
|               | See “Address-Size Attribute for Stack” in Chapter 6, “Procedure Calls, Interrupts, and Exceptions,” of the 
|               | Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1.
| SRC           | Represents the source operand
| DEST          | Represents the destination operand
| MAXVL         | The maximum vector register width pertaining to the instruction. This is not the vector-length encoding in the
|               | instruction's encoding but is instead determined by the current value of XCR0. Future processors may define new 
|               | bits in XCR0 whose setting may imply other values for MAXVL.
|               | 
           
# MAXVL

| XCR0 Component                     | MAXVL |
| XCR0.SSE                           | 128   |
| XCR0.AVX                           | 256   |
| XCR0.{ZMM_Hi256, Hi16_ZMM, OPMASK} | 512   |

# FUNCTIONS

| Name                             | Description                                                                                                        |
| ZeroExtend(value)                | Returns a value zero-extended to the operand-size attribute of the instruction. For                                |
|                                  | example, if the operand-size attribute is 32, zero extending a byte value of –10 converts the byte from F6H to     |
|                                  | a doubleword value of 000000F6H. If the value passed to the ZeroExtend function and the operand-size               |
|                                  | attribute are the same size, ZeroExtend returns the value unaltered.                                               |
| SignExtend(value)                | Returns a value sign-extended to the operand-size attribute of the instruction. For                                |
|                                  | example, if the operand-size attribute is 32, sign extending a byte containing the value –10 converts the byte     |
|                                  | from F6H to a doubleword value of FFFFFFF6H. If the value passed to the SignExtend function and the operand-       |
|                                  | size attribute are the same size, SignExtend returns the value unaltered.                                          |
| SaturateSignedWordToSignedByte   | Converts a signed 16-bit value to a signed 8-bit value. If the signed                                              |
|                                  | 16-bit value is less than –128, it is represented by the saturated value -128 (80H); if it is greater than 127, it |
|                                  | is represented by the saturated value 127 (7FH).                                                                   |
| SaturateSignedDwordToSignedWord  | Converts a signed 32-bit value to a signed 16-bit value. If the                                                    |
|                                  | signed 32-bit value is less than –32768, it is represented by the saturated value –32768 (8000H); if it is greater |
|                                  | than 32767, it is represented by the saturated value 32767 (7FFFH).                                                |
| SaturateSignedWordToUnsignedByte | Converts a signed 16-bit value to an unsigned 8-bit value. If the                                                  |
|                                  | signed 16-bit value is less than zero, it is represented by the saturated value zero (00H); if it is greater than  |
|                                  | 255, it is represented by the saturated value 255 (FFH).                                                           |
| SaturateToSignedByte             | Represents the result of an operation as a signed 8-bit value. If the result is less                               |
|                                  | than –128, it is represented by the saturated value –128 (80H); if it is greater than 127, it is represented by    |
|                                  | the saturated value 127 (7FH).                                                                                     |
| SaturateToSignedWord             | Represents the result of an operation as a signed 16-bit value. If the result is less                              |
|                                  | than –32768, it is represented by the saturated value –32768 (8000H); if it is greater than 32767, it is           |
|                                  | represented by the saturated value 32767 (7FFFH).                                                                  |
| SaturateToUnsignedByte           | Represents the result of an operation as a signed 8-bit value. If the result is less                               |
|                                  | than zero it is represented by the saturated value zero (00H); if it is greater than 255, it is represented by the |
|                                  | saturated value 255 (FFH).                                                                                         |
| SaturateToUnsignedWord           | Represents the result of an operation as a signed 16-bit value. If the result is                                   |
|                                  | less than zero it is represented by the saturated value zero (00H); if it is greater than 65535, it is represented |
|                                  | by the saturated value 65535 (FFFFH).                                                                              |
| LowOrderWord(DEST * SRC)         | Multiplies a word operand by a word operand and stores the least significant                                       |
|                                  | word of the doubleword result in the destination operand.                                                          |
| HighOrderWord(DEST * SRC)        | Multiplies a word operand by a word operand and stores the most                                                    |
|                                  | significant word of the doubleword result in the destination operand.                                              |
| Push(value)                      | Pushes a value onto the stack. The number of bytes pushed is determined by the operand-size                        |
|                                  | attribute of the instruction. See the “Operation” subsection of the “PUSH—Push Word, Doubleword or                 |
|                                  | Quadword Onto the Stack” section in Chapter 4 of the Intel® 64 and IA-32 Architectures Software Developer’s        |
|                                  | Manual, Volume 2B.                                                                                                 |
| Pop()                            | removes the value from the top of the stack and returns it. The statement EAX ← Pop(); assigns to                  |
|                                  | EAX the 32-bit value from the top of the stack. Pop will return either a word, a doubleword or a quadword          |
|                                  | depending on the operand-size attribute. See the “Operation” subsection in the “POP—Pop a Value from the           |
|                                  | Stack” section of Chapter 4 of the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 2B.       |
| PopRegisterStack                 | Marks the FPU ST(0) register as empty and increments the FPU register stack pointer                                |
|                                  | (TOP) by 1.                                                                                                        |
| Switch-Tasks                     | Performs a task switch.                                                                                            |
| Bit(BitBase, BitOffset)          | Returns the value of a bit within a bit string. The bit string is a sequence of bits in                            |
|                                  | memory or a register. Bits are numbered from low-order to high-order within registers and within memory            |
|                                  | bytes. If the BitBase is a register, the BitOffset can be in the range 0 to [15, 31, 63] depending on the mode     |
|                                  | and register size. Bit[RAX, 21] function example:
|                                  | [63                         31          21              0]
|                                  |                                         ^^^^^^^^^^^^^^^^^  
|                                  | If BitBase is a memory address, the BitOffset has different ranges depending on the operand size, see #3.2
|                                  | The addressed bit is numbered (Offset MOD 8) within the byte at address (BitBase + (BitOffset DIV 8)) where DIV is 
|                                  | signed division with rounding towards negative infinity and MOD returns a positive number


# Table 3.2: Range of Bit Positions Specified by Bit Offset Operands

| Operand Size | Immediate BitOffset | Register BitOffset |
| 16           | 0 to 15             | − 2^15 to 2^15 − 1 |
| 32           | 0 to 31             | − 2^31 to 2^31 − 1 |
| 64           | 0 to 63             | − 2^63 to 2^63 − 1 |

