<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.bitstrings</name>
    </assembly>
    <members>
        <member name="M:Z0.XTend.FormatBlockedBits``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32,System.Nullable{System.UInt32})">
            <summary>
            Block-formats the vector, e.g. [01010101 01010101 ... 01010101] where by default the size of each block is the bit-width of a component
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="M:Z0.XTend.FormatBlockedBits``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32,System.Nullable{System.UInt32})">
            <summary>
            Block-formats the vector, e.g. [01010101 01010101 ... 01010101] where default the size of each block is the bit-width of a component
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="M:Z0.XTend.FormatBits``1(System.Runtime.Intrinsics.Vector128{``0},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Int32})">
            <summary>
            Formats vector bits
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The underlying primal type</typeparam>
        </member>
        <member name="M:Z0.XTend.FormatBits``1(System.Runtime.Intrinsics.Vector256{``0},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Int32})">
            <summary>
            Formats vector bits
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The underlying primal type</typeparam>
        </member>
        <member name="T:Z0.BitString">
            <summary>
            Represents a sequence of bits
            </summary>
        </member>
        <member name="M:Z0.BitString.bitchars``1(``0,System.Span{System.Char},System.Int32)">
            <summary>
            Constructs a sequence of n characters {ci} := [c_n-1,..., c_0]
            over the domain {'0','1'} according to whether the bit in the i'th
            position of the source is respecively disabled/enabled
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        </member>
        <member name="M:Z0.BitString.bitchars``1(``0@)">
            <summary>
            Constructs a sequence of n characters {ci} := [c_n-1,..., c_0]
            over the domain {'0','1'} according to whether the bit in the i'th
            position of the source is respecively disabled/enabled
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        </member>
        <member name="M:Z0.BitString.bitchars``1(System.ReadOnlySpan{``0},System.Nullable{System.Int32})">
            <summary>
            Converts a span of primal values to a span of characters, each of which represent a bit
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        </member>
        <member name="M:Z0.BitString.normalize(System.String)">
            <summary>
            Removes characters related to formating/presentation that do not impact the value of the bitstring literal;
            leading zeroes, however, are considered part of the literal and are not removed
            </summary>
            <param name="src">The bit source</param>
        </member>
        <member name="M:Z0.BitString.assemble(System.String[])">
            <summary>
            Assembles a bistring given parts ordered from lo to hi
            </summary>
            <param name="parts">The source parts</param>
        </member>
        <member name="M:Z0.BitString.replicate``1(``0,System.Int32)">
            <summary>
            Constructs a bitstring from a pattern replicated a specified number of times
            </summary>
            <param name="src">The source pattern</param>
            <param name="reps">The number of times to repeat the pattern</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitString.map``1(Z0.BitString,System.Func{Z0.Bit32,``0},System.Span{``0})">
            <summary>
            Projects a bitstring onto a caller-allocated span via a supplied transformation
            </summary>
            <param name="f">The transformation</param>
            <typeparam name="T">The span element type</typeparam>
        </member>
        <member name="P:Z0.BitString.Item(System.Int32)">
            <summary>
            Queries/manipulates bit at specified index
            </summary>
        </member>
        <member name="P:Z0.BitString.Item(System.Int32,System.Int32)">
            <summary>
            Extracts a substring determined by start/end indices
            </summary>
        </member>
        <member name="P:Z0.BitString.Item(System.Range)">
            <summary>
            Extracts a substring determined by a range
            </summary>
        </member>
        <member name="P:Z0.BitString.BitSeq">
            <summary>
            The (unpacked) sequence of bits represented by the bitstring
            </summary>
        </member>
        <member name="M:Z0.BitString.TakeScalar``1">
            <summary>
            Renders a segment as a packed primal value
            </summary>
            <typeparam name="T">The primal type</typeparam>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeScalar``1(System.Int32)">
            <summary>
            Renders a segment as a packed primal value
            </summary>
            <typeparam name="T">The primal type</typeparam>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt8(System.Int32)">
            <summary>
            Renders a bitstring segment as a packed byte value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt8">
            <summary>
            Renders a bitstring segment as a packed byte value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt16(System.Int32)">
            <summary>
            Renders a bitstring segment as a packed ushort value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt16">
            <summary>
            Renders a bitstring segment as a packed ushort value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt32(System.Int32)">
            <summary>
            Renders a bitstring segment as a packed uint value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt32">
            <summary>
            Renders a bitstring segment as a packed uint value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.TakeUInt64(System.Int32)">
            <summary>
            Renders a bitstring segment as a packed ulong value
            </summary>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.Pack">
            <summary>
            Packs a section of the represented bits into a bytespan
            </summary>
            <param name="offset">The position of the first bit</param>
            <param name="minlen">The the minimum length of the produced span</param>
        </member>
        <member name="M:Z0.BitString.Nlz">
            <summary>
            Counts the number of leading zero bits
            </summary>
        </member>
        <member name="M:Z0.BitString.Ntz">
            <summary>
            Counts the number of trailing zero bits
            </summary>
        </member>
        <member name="M:Z0.BitString.Sll(System.Int32)">
            <summary>
            Shifts the bits leftwards by a specifed offset in a manner that mimics the canonical scalar left-shift
            </summary>
            <param name="offset">The number of bits to shift</param>
        </member>
        <member name="M:Z0.BitString.PopCount">
            <summary>
            Counts the number of enabled bits
            </summary>
        </member>
        <member name="M:Z0.BitString.Replicate">
            <summary>
            Creates a replica of the bitstring
            </summary>
        </member>
        <member name="M:Z0.BitString.Replicate(System.Int32)">
            <summary>
            Copies n replicas to a new bitstring
            </summary>
            <param name="n">Then number of times to replicate the bistring in the target</param>
        </member>
        <member name="M:Z0.BitString.Concat(Z0.BitString)">
            <summary>
            Forms a new bitstring by concatenation
            </summary>
            <param name="tail">The trailing bits</param>
        </member>
        <member name="M:Z0.BitString.Concat(Z0.BitString,Z0.BitString)">
            <summary>
            Forms a new bitstring by concatenation
            </summary>
            <param name="tail">The trailing bits</param>
        </member>
        <member name="M:Z0.BitString.Concat(Z0.BitString,Z0.BitString,Z0.BitString)">
            <summary>
            Forms a new bitstring by concatenation
            </summary>
            <param name="tail">The trailing bits</param>
        </member>
        <member name="M:Z0.BitString.Truncate(System.Int32)">
            <summary>
            Returns a new bitstring of length no greater than a specified maximum
            </summary>
            <param name="maxlen">The maximum length</param>
        </member>
        <member name="M:Z0.BitString.Pad(System.UInt32)">
            <summary>
            Returns a new bitstring of length no less than a specified minimum
            </summary>
            <param name="minlen">The minimum length</param>
        </member>
        <member name="M:Z0.BitString.ToBits">
            <summary>
            Renders the content as a span of bits
            </summary>
        </member>
        <member name="M:Z0.BitString.ToNatBits``1(``0)">
            <summary>
            Renders the content as a natural block of bits
            </summary>
        </member>
        <member name="M:Z0.BitString.ToPackedBytes">
            <summary>
            Packs the bitsequence into a bytespan
            </summary>
        </member>
        <member name="M:Z0.BitString.EqualsTrace(Z0.BitString,System.Action{System.String})">
            <summary>
            Determines whether this bitstring represents the same value as another, ignoring
            leading zeroes
            </summary>
            <param name="rhs">The bitstring with which the comparison will be made</param>
        </member>
        <member name="M:Z0.BitString.Equals(Z0.BitString)">
            <summary>
            Determines whether this bitstring represents the same value as another, ignoring
            leading zeroes
            </summary>
            <param name="rhs">The bitstring with which the comparison will be made</param>
        </member>
        <member name="M:Z0.BitString.Partition(System.Int32)">
            <summary>
            Partitions the bitstring into blocks of a specified maximum width
            </summary>
            <param name="width">The maximum block width</param>
        </member>
        <member name="M:Z0.BitString.Format(System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Int32})">
            <summary>
            Formats bitstring content
            </summary>
            <param name="tlz">Indicates whether leading zero bits should be eliminated from the result</param>
            <param name="specifier">True if the canonical 0b specifier is to precede bitstring content, false if to omit the speicifier</param>
            <param name="blockWidth">If unspecified, no blocking will be applied; otherwise, indicates the width of the block partitions</param>
            <param name="blocksep">If unspecified, when block formatting, indicates the default block delimiter (An ASCII space) will be used;
            if specified, when block formatting, indicates the block delimiter to place between the block partitions</param>
        </member>
        <member name="M:Z0.BitString.Format">
            <summary>
            Formats bitstring using default parameter values
            </summary>
        </member>
        <member name="M:Z0.BitString.Scalar``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Packs a section of bits into a scalar
            </summary>
            <typeparam name="T">The primal type</typeparam>
            <param name="offset">The index of the first bit </param>
        </member>
        <member name="M:Z0.BitString.enable(System.Byte,System.Int32)">
            <summary>
            Enables a specified source bit
            </summary>
            <param name="src">The source value to manipulate</param>
            <param name="pos">The position of the bit to enable</param>
        </member>
        <member name="P:Z0.BitString.Empty">
            <summary>
            Defines the canonical emtpy bitstring of 0 length
            </summary>
        </member>
        <member name="M:Z0.BitString.alloc(System.Int32)">
            <summary>
            Allocates a bitstring with a specified length
            </summary>
            <param name="len">The length of the bitstring</param>
        </member>
        <member name="M:Z0.BitString.load(System.Byte[])">
            <summary>
            Loads a bitstring from a bitseq
            </summary>
            <param name="bitseq">An array containing only 0's and 1's </param>
        </member>
        <member name="M:Z0.BitString.load(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a bitstring from bitseq
            </summary>
            <param name="src">The bit source</param>
        </member>
        <member name="M:Z0.BitString.load``1(System.Runtime.Intrinsics.Vector128{``0},System.Nullable{System.Int32})">
            <summary>
            Populates a bitstring from a 128-bit cpu vector
            </summary>
            <param name="src">The source vector</param>
            <param name="maxbits">The maximum number of bits to extract from the source</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.BitString.load``1(System.Runtime.Intrinsics.Vector256{``0},System.Nullable{System.Int32})">
            <summary>
            Populates a bitstring from a 256-bit cpu vector
            </summary>
            <param name="src">The source vector</param>
            <param name="maxbits">The maximum number of bits to extract</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.BitString.load``1(Z0.Vector512{``0},System.Nullable{System.Int32})">
            <summary>
            Populates a bitstring from a 256-bit cpu vector
            </summary>
            <param name="src">The source vector</param>
            <param name="maxbits">The maximum number of bits to extract</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.BitString.load(System.ReadOnlySpan{Z0.Bit32})">
            <summary>
            Constructs a bitstring from a span of bits
            </summary>
            <param name="src">The bit source</param>
        </member>
        <member name="M:Z0.BitString.scalar``1(``0,System.Nullable{System.Int32})">
            <summary>
            Constructs a bitstring from primal value
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitString.scalar``1(``0,System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Constructs a bitstring from primal value, using caller-supplied storage instead of allocation
            </summary>
            <param name="src">The source value</param>
            <param name="storage">The caller-supplied storage</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitString.enum``1(``0,System.Nullable{System.Int32})">
            <summary>
            Converts an enumeration value to a bitstring
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The enumeration type</typeparam>
        </member>
        <member name="M:Z0.BitString.scalars``1(System.ReadOnlySpan{``0},System.Nullable{System.Int32})">
            <summary>
            Constructs a bitstring from span of scalar values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The primal type</typeparam>
            <param name="maxbits">The maximum number of bits to extract from the source</param>
        </member>
        <member name="M:Z0.BitString.scalars``1(System.Span{``0},System.Nullable{System.Int32})">
            <summary>
            Constructs a bitstring from span of scalar values
            </summary>
            <param name="src">The source span</param>
            <param name="maxbits">The maximum number of bits to extract from the source</param>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="M:Z0.BitString.pow2(System.Int32)">
            <summary>
            Constructs a bitstring from a power of 2
            </summary>
            <param name="exp">The value of the expoonent</param>
        </member>
        <member name="M:Z0.BitString.scalar``1(Z0.BitString,System.Int32)">
            <summary>
            Extracts a scalar value from a bitstring
            </summary>
            <param name="src">The source bitstring</param>
            <param name="offset">The bit position at which to begin extraction</param>
            <typeparam name="T">The scalar type</typeparam>
        </member>
        <member name="M:Z0.BitString.parse(System.String)">
            <summary>
            Constructs a bitstring from text
            </summary>
            <param name="src">The bit source</param>
        </member>
        <member name="M:Z0.BitString.not(Z0.BitString)">
            <summary>
            Computes the bitwise complement of the source operand
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitString.and(Z0.BitString,Z0.BitString)">
            <summary>
            Computes the bitwise and between the operands
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
        </member>
        <member name="M:Z0.BitString.or(Z0.BitString,Z0.BitString)">
            <summary>
            Computes the bitwise or between the operands
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
        </member>
        <member name="M:Z0.BitString.xor(Z0.BitString,Z0.BitString)">
            <summary>
            Computes the bitwise xor between the operands
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
        </member>
        <member name="M:Z0.BitString.srl(Z0.BitString,System.Int32)">
            <summary>
            Applies a logical right-shift to the source
            </summary>
            <param name="src">The source bitstring</param>
            <param name="shift">The shift offset</param>
        </member>
        <member name="M:Z0.BitString.sll(Z0.BitString,System.Int32)">
            <summary>
            Applies a logical left-shift to the source
            </summary>
            <param name="src">The source bitstring</param>
            <param name="shift">The shift offset</param>
        </member>
        <member name="M:Z0.BitString.even(Z0.BitString)">
            <summary>
            Extracts the even bits from the source
            </summary>
        </member>
        <member name="M:Z0.BitString.odd(Z0.BitString)">
            <summary>
            Extracts the odd bits from the source
            </summary>
        </member>
        <member name="M:Z0.BitString.transpose(Z0.BitString,System.Int32,System.Int32)">
            <summary>
            Considers the source bitstring as a row-major encoding of an mxn matrix and computes
            the transposition maxtrix of dimension nxm similary encoded as a bitstring
            </summary>
            <param name="src">The source bits</param>
            <param name="m">The source row count</param>
            <param name="n">The source column count</param>
        </member>
        <member name="M:Z0.BitString.inject(Z0.BitString,Z0.BitString,System.Int32,System.Int32)">
            <summary>
            Overwrites selected target bits with lower bits from the source
            </summary>
            <param name="src">The source</param>
            <param name="dst">The target</param>
            <param name="start">The target index at which to begin</param>
            <param name="len">The number of bits to overwrite</param>
        </member>
        <member name="M:Z0.BitString.intersperse(Z0.BitString,Z0.BitString)">
            <summary>
            Intersperses the source bitstring with content from another
            </summary>
            <param name="src">The source bitstring</param>
            <param name="value">The interspersal value</param>
        </member>
        <member name="M:Z0.BitString.clear(Z0.BitString,System.Int32,System.Int32)">
            <summary>
            Clears a contiguous sequence of bits between two indices
            </summary>
            <param name="src">The source bistring</param>
            <param name="i0">The index of the first bit to clear</param>
            <param name="i1">The index of the last bit to clear</param>
        </member>
        <member name="M:Z0.BitString.rotl(Z0.BitString,System.UInt32)">
            <summary>
            Rotates the bits leftwards by a specified offset
            </summary>
            <param name="offset">The magnitude of the rotation</param>
        </member>
        <member name="M:Z0.BitStringNatX.Transpose``2(Z0.BitString,``0,``1)">
            <summary>
            Pretends the source bitstring is an mxn matrix and computes the transposition matrix of dimension nxm encoded as a bitstring
            </summary>
            <param name="src">The source bits</param>
            <param name="m">The source row count</param>
            <param name="n">The source column count</param>
        </member>
        <member name="M:Z0.RandomBitStrings.BitString(Z0.IPolyrand,System.Int32)">
            <summary>
            Produces a bitstring with a specified length
            </summary>
            <param name="random">The random source</param>
            <param name="len">The bitstring length</param>
        </member>
        <member name="M:Z0.RandomBitStrings.BitString(Z0.IPolyrand,System.Int32,System.Int32)">
            <summary>
            Produces a bitstring with randomized length
            </summary>
            <param name="random">The random source</param>
            <param name="minlen">The minimum length of the bitstring</param>
            <param name="maxlen">The maximum length of the bitstring</param>
        </member>
        <member name="M:Z0.RandomBitStrings.BitString(Z0.IPolyrand,Z0.Interval{System.Int32})">
            <summary>
            Produces a bitstring with randomized length
            </summary>
            <param name="random">The random source</param>
            <param name="minlen">The minimum length of the bitstring</param>
            <param name="maxlen">The maximum length of the bitstring</param>
        </member>
        <member name="M:Z0.RandomBitStrings.BitString``1(Z0.IPolyrand,``0)">
            <summary>
            Produces a random bitstring with a specified natural length
            </summary>
            <param name="random">The random source</param>
            <param name="len">The bitstring length</param>
        </member>
        <member name="M:Z0.RandomBitStrings.BitStrings(Z0.IPolyrand,System.Int32,System.Int32)">
            <summary>
            Produces a random sequence of bitstrings with randomized length
            </summary>
            <param name="random">The random source</param>
            <param name="minlen">The minimum length of the bitstring</param>
            <param name="maxlen">The maximum length of the bitstring</param>
        </member>
        <member name="M:Z0.BitStore.storeseq``1(``0)">
            <summary>
            Constructs a bitsequence via the bitstore and populates an allocated target with the result
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitStore.storeseq``1(``0,System.Span{System.Byte},System.Int32)">
            <summary>
            Constructs a bitsequence via the bitstore and populates a caller-supplied target with the result
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitStore.bitchars(System.Byte)">
            <summary>
            Constructs a sequence of 8 characters {ci} := [c7,...c0] over the domain {'0','1'} according to whether the
            bit in the i'th position of the source is respectively disabled/enabled
            </summary>
            <param name="value">The source value</param>
        </member>
        <member name="M:Z0.BitStore.select(System.Byte)">
            <summary>
            Selects an identified bit sequence
            </summary>
            <param name="index">A value from 0 - 255 indicating the byte of interest</param>
        </member>
        <member name="M:Z0.BitStore.select(System.Int32,System.Int32)">
            <summary>
            Selects unpacked bits from a block of 8*256 bytes, where each byte represents 1 bit
            </summary>
            <param name="offset">The bit offset index</param>
            <param name="length">The number of bits to select</param>
        </member>
        <member name="M:Z0.BitStore.bitseq``1(``0)">
            <summary>
            Constructs a span of bytes where each byte, ordered from lo to hi,
            represents a single bit in the source value
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitStream``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Transforms an primal enumerator into a bitstream
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitStream``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforms an primal source stream into a bitstream
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The primal type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.SByte,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Byte,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Int16,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.UInt16,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Int32,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Int64,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Single,System.Nullable{System.Int32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Double,System.Nullable{System.UInt32})">
            <summary>
            Converts the source value to a bitstring
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.Span{Z0.Bit32})">
            <summary>
            Converts a span of bits to a to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString(System.ReadOnlySpan{Z0.Bit32})">
            <summary>
            Converts a readonly span of bits to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(System.Span{``0},System.Nullable{System.Int32})">
            <summary>
            Converts span content to a to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(Z0.SpanBlock64{``0},System.Nullable{System.Int32})">
            <summary>
            Converts blocked content to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(Z0.SpanBlock128{``0},System.Nullable{System.Int32})">
            <summary>
            Converts blocked content to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(Z0.SpanBlock256{``0},System.Nullable{System.Int32})">
            <summary>
            Converts datablock content to a bitstring
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(System.Runtime.Intrinsics.Vector128{``0},System.Nullable{System.Int32})">
            <summary>
            Converts an 128-bit intrinsic vector representation to a bitstring
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The underlying primal type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(System.Runtime.Intrinsics.Vector256{``0},System.Nullable{System.Int32})">
            <summary>
            Converts an 256-bit vector representation to a bitstring
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The underlying primal type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(Z0.Vector512{``0},System.Nullable{System.Int32})">
            <summary>
            Converts a 512-bit vector representation to a bitstring
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The underlying primal type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.ToBitString``1(``0,System.Nullable{System.Int32})">
            <summary>
            Converts an enumeration value to a bitstring
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The enumeration type</typeparam>
        </member>
        <member name="M:Z0.BitStringX.Reverse(Z0.BitString)">
            <summary>
            Reverses the order of the source bits
            </summary>
            <param name="src">The source bits</param>
        </member>
        <member name="M:Z0.BitStringX.Even(Z0.BitString)">
            <summary>
            Extracts the even bits
            </summary>
        </member>
        <member name="M:Z0.BitStringX.Odd(Z0.BitString)">
            <summary>
            Extracts the odd bits
            </summary>
        </member>
        <member name="M:Z0.BitStringX.RotL(Z0.BitString,System.UInt32)">
            <summary>
            Rotates the bits leftwards by a specified offset
            </summary>
            <param name="offset">The magnitude of the rotation</param>
        </member>
    </members>
</doc>
