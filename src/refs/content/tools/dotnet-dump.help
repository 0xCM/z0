Usage:
  dotnet-dump [options] [command]

Options:
  --version    Display version information

Commands:
  collect                Capture dumps from a process
  analyze <dump_path>    Starts an interactive shell with debugging commands to explore a dump
  ps                     Lists the dotnet processes that dumps can be collected

collect:
  Capture dumps from a process

Usage:
  dotnet-dump collect [options]

Options:
  -p, --process-id <pid>             The process id to collect a memory dump.
  -o, --output <output_dump_path>    The path where collected dumps should be written. Defaults to '.\dump_YYYYMMDD_HHMMSS.dmp' on Windows and
                                     './core_YYYYMMDD_HHMMSS' on Linux where YYYYMMDD is Year/Month/Day and HHMMSS is Hour/Minute/Second. Otherwise, it is the
                                     full path and file name of the dump.
  --diag                             Enable dump collection diagnostic logging.
  --type <Full|Heap|Mini>            The dump type determines the kinds of information that are collected from the process. There are several types: full - The
                                     largest dump containing all memory including the module images. heap - A large and relatively comprehensive dump containing
                                     module lists, thread lists, all stacks, exception information, handle information, and all memory except for mapped images.
                                     mini - A small dump containing module lists, thread lists, exception information and all stacks. If not specified 'full' is
                                     the default.
  -n, --name <name>                  The name of the process to collect a memory dump.

analyze:
  Starts an interactive shell with debugging commands to explore a dump

Usage:
  dotnet-dump analyze [options] <dump_path>

Arguments:
  <dump_path>    Name of the dump file to analyze.

Options:
  -c, --command <command>    Run the command on start.

