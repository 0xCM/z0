<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.numeric</name>
    </assembly>
    <members>
        <member name="M:Z0.XTend.Connect``2(Z0.Vertex{``0,``1},Z0.Vertex{``0,``1})">
            <summary>
            Produces an edge that connects a source vertex to a target vertex
            </summary>
            <param name="src">The source vertex</param>
            <param name="dst">The target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="T">The vertex payload type</typeparam>
        </member>
        <member name="M:Z0.XTend.Connect``1(Z0.Vertex{``0},Z0.Vertex{``0})">
            <summary>
            Produces an edge that connects a source vertex to a target vertex
            </summary>
            <param name="src">The source vertex</param>
            <param name="dst">The target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.XTend.Format``1(Z0.Graph{``0},System.String)">
            <summary>
            Renders a graph using basic graphviz format
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="label">An optional label for the graph</param>
            <typeparam name="V">The verex index type</typeparam>
        </member>
        <member name="M:Z0.XTend.Incoming``1(Z0.Graph{``0},``0)">
            <summary>
            Finds the edges in a graph that target an identified vertex
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="target">The index of the target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.XTend.Outgoing``1(Z0.Graph{``0},``0)">
            <summary>
            Finds the edges in a graph that emit from an identified vertex
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="target">The index of the target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="F:Z0.Edge`3.Kind">
            <summary>
            The classifier
            </summary>
        </member>
        <member name="F:Z0.Edge`3.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="F:Z0.Edge`3.Target">
            <summary>
            The target
            </summary>
        </member>
        <member name="M:Z0.Edge`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Z0.Edge{`0,`1,`2}">
            <summary>
            Constructs an edge from a 3-tuple
            </summary>
            <param name="src">The source index</param>
            <param name="dst">The target index</param>
            <param name="weight">The weight</param>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="W">The weight type</typeparam>
        </member>
        <member name="F:Z0.Edge`2.Source">
            <summary>
            The index of the source vertex
            </summary>
        </member>
        <member name="F:Z0.Edge`2.Target">
            <summary>
            The index of the target vertex
            </summary>
        </member>
        <member name="M:Z0.Edge`2.op_Implicit(System.ValueTuple{`0,`1})~Z0.Edge{`0,`1}">
            <summary>
            Constructs an edge from a 3-tuple
            </summary>
            <param name="src">The source index</param>
            <param name="dst">The target index</param>
            <param name="weight">The weight</param>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="W">The weight type</typeparam>
        </member>
        <member name="T:Z0.Edge`1">
            <summary>
            Defines an unweighted edge, parameterized by the vertex index type
            </summary>
            <typeparam name="T">The vertex index type</typeparam>
        </member>
        <member name="F:Z0.Edge`1.Source">
            <summary>
            The index of the source vertex
            </summary>
        </member>
        <member name="F:Z0.Edge`1.Target">
            <summary>
            The index of the target vertex
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Z0.Graph`1" -->
        <member name="M:Z0.Graph`1.Sources(`0)">
            <summary>
            Retrieves the indices of a targets' source vertices
            </summary>
            <param name="source">The source vertex</param>
        </member>
        <member name="M:Z0.Graph`1.Targets(`0)">
            <summary>
            Retrieves the indices of a sources' target vertices
            </summary>
            <param name="source">The source vertex</param>
        </member>
        <member name="M:Z0.Graph`1.Vertex(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="M:Z0.Graph`1.Edge(System.Int32)">
            <summary>
            Looks up an edge based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="P:Z0.Graph`1.Item(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="P:Z0.Graph`1.EdgeCount">
            <summary>
            Specifies the edges declared by the graph
            </summary>
        </member>
        <member name="P:Z0.Graph`1.VertexCount">
            <summary>
            Specifies the number of vertices declared by the graph
            </summary>
        </member>
        <member name="M:Z0.Graph`1.InDegree(`0)">
            <summary>
            Computes the in-degree of a vertex; i.e. the count of incoming vertices
            </summary>
            <param name="target">The target vector</param>
        </member>
        <member name="M:Z0.Graph`1.OutDegree(`0)">
            <summary>
            Computes the out-degree of a vertex; i.e. the count of outgoing vertices
            </summary>
            <param name="source">The source vector</param>
        </member>
        <member name="M:Z0.Graph`1.IsIsolated(`0)">
            <summary>
            Determines whether a vertex is disconnected from the graph
            </summary>
            <param name="vertex">The vertext to test</param>
        </member>
        <member name="M:Z0.Graph`1.IsSink(`0)">
            <summary>
            Determines whether the vertex is a sink, i.e. has no outgoing edges
            </summary>
            <param name="vertex">The vertex to test</param>
            <remarks>An isolated node in this context is not considered to be a
            sink (or source) so "degenerate" sinks are excluded
            </remarks>
        </member>
        <member name="M:Z0.Graph`1.IsSource(`0)">
            <summary>
            Determines whether the vertex is a source, i.e. has only outgoing edges
            </summary>
            <param name="vertex">The vertex to test</param>
            <remarks>An isolated node in this context is not considered to be a
            sink (or source) so "degenerate" sources are excluded
            </remarks>
        </member>
        <member name="M:Z0.Graph`1.Traverse(`0,System.Action{`0},`0)">
            <summary>
            Traverses the graph until a sink is reached, a cycle is  detected,
            or an optionally-specified vertex is reached
            </summary>
            <param name="v0">The start vertex</param>
            <param name="traversed">The traversal action</param>
            <param name="vEnd">An optional endpoint</param>
        </member>
        <member name="M:Z0.Graph`1.Path(`0,`0)">
            <summary>
            Computes the path from a source vertex to a sink, a specified endpoint or when a cycle is detected
            </summary>
            <param name="v0">The start vertex</param>
            <param name="vEnd">An optional endpoint</param>
        </member>
        <member name="T:Z0.Graph`2">
            <summary>
            Defines a graph in which data may be associated with each node
            </summary>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="T">The node payload type</typeparam>
        </member>
        <member name="P:Z0.Graph`2.EdgeCount">
            <summary>
            Specifies the edges declared by the graph
            </summary>
        </member>
        <member name="P:Z0.Graph`2.VertexCount">
            <summary>
            Specifies the number of vertices declared by the graph
            </summary>
        </member>
        <member name="M:Z0.Graph`2.Vertex(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="M:Z0.Graph`2.Edge(System.Int32)">
            <summary>
            Looks up an edge based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="P:Z0.Graph`2.Item(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="P:Z0.Graph`3.EdgeCount">
            <summary>
            Specifies the edges declared by the graph
            </summary>
        </member>
        <member name="P:Z0.Graph`3.VertexCount">
            <summary>
            Specifies the number of vertices declared by the graph
            </summary>
        </member>
        <member name="M:Z0.Graph`3.Vertex(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="M:Z0.Graph`3.Edge(System.Int32)">
            <summary>
            Looks up an edge based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="P:Z0.Graph`3.Item(`0)">
            <summary>
            Looks up a vertex based on its index
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="F:Z0.NodeIndex`1.SourceIndex">
            <summary>
            Correlates sources with their targets
            </summary>
        </member>
        <member name="F:Z0.NodeIndex`1.TargetIndex">
            <summary>
            Correlates targets with their sources
            </summary>
        </member>
        <member name="M:Z0.NodeIndex`1.Sources(`0)">
            <summary>
            Retrieves the indices of a targets' source vertices 
            </summary>
            <param name="source">The source vertex</param>
        </member>
        <member name="M:Z0.NodeIndex`1.Targets(`0)">
            <summary>
            Retrieves the indices of a sources' target vertices
            </summary>
            <param name="source">The source vertex</param>
        </member>
        <member name="T:Z0.Vertex`1">
            <summary>
            Defines a vertex within a graph
            </summary>
        </member>
        <member name="F:Z0.Vertex`1.Index">
            <summary>
            The index of the vertex that uniquely identifies it within a graph
            </summary>
        </member>
        <member name="T:Z0.Vertex`2">
            <summary>
            Defines a vertex to which data may be attached
            </summary>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="T">The payload type</typeparam>
        </member>
        <member name="F:Z0.Vertex`2.Index">
            <summary>
            The index of the vertex that uniquely identifies it within a graph
            </summary>
        </member>
        <member name="F:Z0.Vertex`2.Data">
            <summary>
            The vertex payload
            </summary>
        </member>
        <member name="M:Z0.Vertex`2.op_Implicit(Z0.Vertex{`0,`1}@)~Z0.Vertex{`0}">
            <summary>
            Sheds the associated data to form a payload-free vertex
            </summary>
            <param name="src">The source vertex</param>
        </member>
        <member name="T:Z0.Graph">
            <summary>
            Defines the primary API surface for manipulated graphs and related elements
            </summary>
        </member>
        <member name="M:Z0.Graph.edge``2(``0,``1)">
            <summary>
            Defines a weighted edge from an index-identified source to an index identified target
            </summary>
            <param name="src">The source index</param>
            <param name="dst">The target index</param>
            <typeparam name="S">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.define``2(System.Span{Z0.Vertex{``0,``1}},System.Collections.Generic.IEnumerable{Z0.Edge{``0}})">
            <summary>
            Creates a graph from supplied vertices and edges and assumes the vertices are already appropriately sorted
            </summary>
            <param name="vertices">The vertices in the graph</param>
            <param name="edges">The edges that connect the vertices</param>
        </member>
        <member name="M:Z0.Graph.define``1(System.Span{Z0.Vertex{``0}},System.Collections.Generic.IEnumerable{Z0.Edge{``0}})">
            <summary>
            Creates a graph from supplied vertices and edges
            </summary>
            <param name="vertices">The vertices in the graph</param>
            <param name="edges">The edges that connect the vertices</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.edge``1(``0,``0)">
            <summary>
            Defines an edge from an index-identified source to an index identified target
            </summary>
            <param name="source">The source index</param>
            <param name="target">The target index</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.connect``2(Z0.Vertex{``0,``1}@,Z0.Vertex{``0,``1}@)">
            <summary>
            Connects a source vertex to a target vertex
            </summary>
            <param name="source">The source vertex</param>
            <param name="target">The target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="T">The vertex payload type</typeparam>
        </member>
        <member name="M:Z0.Graph.connect``1(Z0.Vertex{``0}@,Z0.Vertex{``0}@)">
            <summary>
            Connects a source vertex to a target vertex
            </summary>
            <param name="source">The source vertex</param>
            <param name="target">The target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.vertex``1(``0)">
            <summary>
            Creates a vertex without payload
            </summary>
            <param name="index">The index of the vertex that servies as a
            unique identifier within the context of a graph</param>
            <typeparam name="V">The index type</typeparam>
        </member>
        <member name="M:Z0.Graph.vertices``1(System.Int32)">
            <summary>
            Defines a vertex sequence with a specified length
            </summary>
            <param name="count">The number of virtices in the sequence</param>
            <typeparam name="V">The index type</typeparam>
        </member>
        <member name="M:Z0.Graph.vertices``2(``0,``1[])">
            <summary>
            Defines a vertex with payload for each source item
            </summary>
            <param name="s0">The first index assigned</param>
            <param name="data">The vertex payloads</param>
            <typeparam name="V">The index type</typeparam>
        </member>
        <member name="M:Z0.Graph.vertex``2(``0,``1)">
            <summary>
            Creates a vertex with payload
            </summary>
            <param name="index">The index of the vertex that servies as a
            unique identifier within the context of a graph</param>
            <typeparam name="V">The index type</typeparam>
            <typeparam name="V">The payload type</typeparam>
        </member>
        <member name="M:Z0.Graph.incoming``1(Z0.Graph{``0},``0)">
            <summary>
            Finds the edges in a graph that target an identified vertex
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="target">The index of the target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.outgoing``1(Z0.Graph{``0},``0)">
            <summary>
            Finds the edges in a graph that emit from an identified vertex
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="target">The index of the target vertex</param>
            <typeparam name="V">The vertex index type</typeparam>
        </member>
        <member name="M:Z0.Graph.format``1(Z0.Graph{``0},System.String)">
            <summary>
            Renders a graph using basic graphviz format
            </summary>
            <param name="graph">The declaring graph</param>
            <param name="label">An optional label for the graph</param>
            <typeparam name="V">The verex index type</typeparam>
        </member>
        <member name="T:Z0.IMixedPath`2">
            <summary>
            Characterizes a path between heterogeneous nodes
            </summary>
            <typeparam name="A">The source node type</typeparam>
            <typeparam name="B">The target node type</typeparam>
        </member>
    </members>
</doc>
