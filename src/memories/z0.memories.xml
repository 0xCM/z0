<?xml version="1.0"?>
<doc>
    <assembly>
        <name>z0.memories</name>
    </assembly>
    <members>
        <member name="F:Z0.Memories.One8u">
            <summary>
            One, presented as an 8-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero16i">
            <summary>
            Zero, presented as a 16-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero16u">
            <summary>
            Zero, presented as a 16-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero32i">
            <summary>
            Zero, presented as a 32-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero32u">
            <summary>
            Zero, presented as a 32-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero64i">
            <summary>
            Zero, presented as a 64-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.Zero64u">
            <summary>
            Zero, presented as a 64-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z8i">
            <summary>
            The zero-value for an 8-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z8">
            <summary>
            The zero-value for an 8-bit usigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z16i">
            <summary>
            The zero-value for a 16-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z16">
            <summary>
            The zero-value for a 16-bit unsigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z32i">
            <summary>
            The zero-value for a 32-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z32">
            <summary>
            The zero-value for a 32-bit usigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z64i">
            <summary>
            The zero-value for a 64-bit signed integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z64">
            <summary>
            The zero-value for a 64-bit usigned integer
            </summary>
        </member>
        <member name="F:Z0.Memories.z32f">
            <summary>
            The zero-value for a 32-bit float
            </summary>
        </member>
        <member name="F:Z0.Memories.z64f">
            <summary>
            The zero-value for a 64-bit float
            </summary>
        </member>
        <member name="F:Z0.Memories.Max8u">
            <summary>
            The largest representable value v where v:uint8
            </summary>
        </member>
        <member name="F:Z0.Memories.Max16u">
            <summary>
            The largest representable value v where v:uint16
            </summary>
        </member>
        <member name="F:Z0.Memories.Max24u">
            <summary>
            The largest representable value v where v:uint24
            </summary>
        </member>
        <member name="F:Z0.Memories.Max32u">
            <summary>
            The largest representable value v where v:uint32
            </summary>
        </member>
        <member name="F:Z0.Memories.Max40u">
            <summary>
            The largest representable value v where v:uint40
            </summary>
        </member>
        <member name="F:Z0.Memories.Max48u">
            <summary>
            The largest representable value v where v:uint48
            </summary>
        </member>
        <member name="F:Z0.Memories.Max56u">
            <summary>
            The largest representable value v where v:uint56
            </summary>
        </member>
        <member name="F:Z0.Memories.Max64u">
            <summary>
            The largest representable value v where v:uint64
            </summary>
        </member>
        <member name="M:Z0.Memories.convert``2(``0)">
            <summary>
            If possible, applies the conversion S -> T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.Memories.convert``1(System.Int32,``0)">
            <summary>
            If possible, applies the conversion int -> T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        </member>
        <member name="M:Z0.Memories.edit``1(``0@)">
            <summary>
            Presents a readonly reference as reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        </member>
        <member name="M:Z0.Memories.first``1(System.Span{``0})">
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Memories.head``1(System.Span{``0},System.Int32)">
            <summary>
            Returns a reference to the head of a span, offset by a specified amount
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Memories.head``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        </member>
        <member name="M:Z0.Memories.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
            Iterates over the supplied items, invoking a receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Z0.Memories.maxval``1">
            <summary>
            Returns the maximum value supported by a parametrically-identified primal type
            </summary>
            <typeparam name="T">The primal source type</typeparam>
        </member>
        <member name="M:Z0.Memories.nat32i``1(``0)">
            <summary>
            Retrieves the value of a type natural represented as a signed integer
            </summary>
            <typeparam name="N">The nat type</typeparam>
        </member>
        <member name="M:Z0.Memories.none``1">
            <summary>
            Defines a non-valued option
            </summary>
            <typeparam name="T">The value type, if the value existed</typeparam>
        </member>
        <member name="M:Z0.Memories.denullify(System.String)">
            <summary>
            If the test string is null, returns the empty string; otherwise, returns the test string
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        </member>
        <member name="M:Z0.Memories.option``1(``0)">
            <summary>
            Defines an option for a reference type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
            </summary>
            <param name="src">A source value, or null</param>
            <typeparam name="T">The enclosed type</typeparam>
        </member>
        <member name="M:Z0.Memories.option``1(System.Nullable{``0})">
            <summary>
            Defines an option for a nullable value type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
            </summary>
            <param name="src">A source value, or null</param>
            <typeparam name="T">The enclosed type</typeparam>
        </member>
        <member name="M:Z0.Memories.ptr``1(``0@)">
            <summary>
            Presents generic reference as a generic pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        </member>
        <member name="M:Z0.Memories.ptr``1(``0@,System.Int32)">
            <summary>
            Presents generic reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        </member>
        <member name="M:Z0.Memories.seek``1(``0@,System.Int32)">
            <summary>
            Adds an offset to a reference, measured relative to the reference type
            </summary>
            <param name="src">The source reference</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Memories.seq``1(``0[])">
            <summary>
            Constructs a enumerable from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Memories.sfunc``1">
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        </member>
        <member name="M:Z0.Memories.sfunc``2(``0,``1)">
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        </member>
        <member name="M:Z0.Memories.sfunc``3(``0,``1,``2)">
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        </member>
        <member name="M:Z0.Memories.skip``1(``0@,System.Int32)">
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the resulting element
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.Memories.skip``1(System.Span{``0},System.Int32)">
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Z0.Memories.skip``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        </member>
        <member name="M:Z0.Memories.some``1(``0)">
            <summary>
            Defines a valued option
            </summary>
            <param name="value">The value</param>
            <typeparam name="T">The type of the extant value</typeparam>
        </member>
        <member name="M:Z0.Memories.Try``1(System.Func{``0},System.Action{System.Exception})">
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None and invokes an error handler if supplied
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="f">The function to evaluate</param>
        </member>
        <member name="M:Z0.Memories.Try(System.Action,System.Action{System.Exception})">
            <summary>
            Invokes an action within a try block and, upon error, calls
            the handler if specified. If no handler is specified, the exception
            message is emitted to stderr
            </summary>
            <param name="f">The action to invoke</param>
            <param name="onerror">The error handler to call, if specified</param>
        </member>
        <member name="M:Z0.Memories.value``1(``0)">
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        </member>
        <member name="M:Z0.Memories.val8u``1(``0)">
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extracts an index-identified component from the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell``2(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extracts a T-indexed component from a vector obtained by converting the S-vector to a T-vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Sets an index-identified component to a specified value
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <param name="value">The new component value</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extracts an index-identified component from the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Sets an index-identified component to a specified value
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <param name="value">The new component value</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector128{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector256{``0})">
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcount``2(``0,``1)">
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcount``1(Z0.N128,``0)">
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcount``1(Z0.N256,``0)">
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vcount``1(Z0.N512,``0)">
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
            <summary>
            __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.SByte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
            <summary>
             __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)PINSRB xmm, reg/m8, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Int16,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
            <summary>
            __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
            <summary>
            __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N0)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[0] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N1)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[1] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N2)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[2] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N3)">
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[3] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Int64,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
            <summary>
            __m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64,imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt64,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
            <summary>
            _mm_insert_epi64:
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in an index-identified lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="laneidx">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N0,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the first in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N0,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N1,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N0,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N1,System.Byte)">
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        </member>
        <member name="M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively
            identifing low or hi</param>
        </member>
        <member name="M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively
            identifing low or hi</param>
        </member>
        <member name="M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively
            identifing low or hi</param>
        </member>
        <member name="M:Z0.Memories.width``1">
            <summary>
            Computes the type width of a prametrically-identified type
            </summary>
            <typeparam name="T">The source type</typeparam>
        </member>
        <member name="M:Z0.Memories.yn(System.Boolean)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(Z0.Bit32)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.Byte)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.SByte)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.Int16)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.UInt16)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.Int32)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.UInt32)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.Int64)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn(System.UInt64)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
        <member name="M:Z0.Memories.yn``1(``0)">
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        </member>
    </members>
</doc>
