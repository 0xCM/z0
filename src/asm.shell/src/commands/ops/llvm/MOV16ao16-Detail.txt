# Detail
MOV16ao16  |X86InstrInfo.td:1697|
  Superclasses: (InstructionEncoding) (Instruction) (X86Inst) Ii16 OpSize16 AdSize16
  Fields:
    int Size = 0  |Target.td:503|
    string DecoderNamespace = ""  |Target.td:431|
    list<Predicate> Predicates = []  |Target.td:499|
    string DecoderMethod = ""  |Target.td:436|
    bit hasCompleteDecoder = 1  |Target.td:460|
    string Namespace = "X86"  |X86InstrFormats.td:273|
    dag OutOperandList = (outs)  |X86InstrFormats.td:280|
    dag InOperandList = (ins offset16_16:$src)  |X86InstrFormats.td:281|
    string AsmString = "mov{w}	{$src, %ax|ax, $src}"  |X86InstrFormats.td:282|
    EncodingByHwMode EncodingInfos = ?  |Target.td:485|
    list<dag> Pattern = []  |X86InstrFormats.td:419|
    list<Register> Uses = []  |Target.td:494|
    list<Register> Defs = [AX]  |X86InstrInfo.td:1696|
    int CodeSize = 3  |X86InstrFormats.td:420|
    int AddedComplexity = 0  |Target.td:510|
    bit isPreISelOpcode = 0  |Target.td:514|
    bit isReturn = 0  |Target.td:518|
    bit isBranch = 0  |Target.td:519|
    bit isEHScopeReturn = 0  |Target.td:520|
    bit isIndirectBranch = 0  |Target.td:521|
    bit isCompare = 0  |Target.td:522|
    bit isMoveImm = 0  |Target.td:523|
    bit isMoveReg = 0  |Target.td:524|
    bit isBitcast = 0  |Target.td:525|
    bit isSelect = 0  |Target.td:526|
    bit isBarrier = 0  |Target.td:527|
    bit isCall = 0  |Target.td:528|
    bit isAdd = 0  |Target.td:529|
    bit isTrap = 0  |Target.td:530|
    bit canFoldAsLoad = 0  |Target.td:531|
    bit mayLoad = 1  |X86InstrInfo.td:1675|
    bit mayStore = ?  |Target.td:533|
    bit mayRaiseFPException = 0  |Target.td:534|
    bit isConvertibleToThreeAddress = 0  |Target.td:535|
    bit isCommutable = 0  |Target.td:536|
    bit isTerminator = 0  |Target.td:537|
    bit isReMaterializable = 0  |Target.td:538|
    bit isPredicable = 0  |Target.td:539|
    bit isUnpredicable = 0  |Target.td:542|
    bit hasDelaySlot = 0  |Target.td:544|
    bit usesCustomInserter = 0  |Target.td:545|
    bit hasPostISelHook = 0  |Target.td:546|
    bit hasCtrlDep = 0  |Target.td:547|
    bit isNotDuplicable = 0  |Target.td:548|
    bit isConvergent = 0  |Target.td:549|
    bit isAuthenticated = 0  |Target.td:550|
    bit isAsCheapAsAMove = 0  |Target.td:551|
    bit hasExtraSrcRegAllocReq = 0  |Target.td:552|
    bit hasExtraDefRegAllocReq = 0  |Target.td:553|
    bit isRegSequence = 0  |Target.td:554|
    bit isPseudo = 0  |Target.td:557|
    bit isExtractSubreg = 0  |Target.td:560|
    bit isInsertSubreg = 0  |Target.td:563|
    bit variadicOpsAreDefs = 0  |Target.td:566|
    bit hasSideEffects = 0  |X86InstrInfo.td:1670|
    bit isCodeGenOnly = 0  |X86InstrFormats.td:285|
    bit isAsmParserOnly = 0  |Target.td:592|
    bit hasNoSchedulingInfo = 0  |Target.td:597|
    InstrItinClass Itinerary = NoItinerary  |Target.td:599|
    list<SchedReadWrite> SchedRW = [WriteALU]  |X86InstrInfo.td:1674|
    string Constraints = ""  |Target.td:604|
    string DisableEncoding = ""  |Target.td:608|
    string PostEncoderMethod = ""  |Target.td:610|
    bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1 }  |X86InstrFormats.td:384|
    string AsmMatchConverter = ""  |Target.td:618|
    string TwoOperandAliasConstraint = ""  |Target.td:625|
    string AsmVariantName = ""  |Target.td:631|
    bit UseNamedOperandTable = 0  |Target.td:638|
    bit UseLogicalOperandMappings = 0  |Target.td:646|
    bit FastISelShouldIgnore = 0  |Target.td:652|
    bits<8> Opcode = { 1, 0, 1, 0, 0, 0, 0, 1 }  |X86InstrFormats.td:275|
    Format Form = RawFrmMemOffs  |X86InstrFormats.td:276|
    bits<7> FormBits = { 0, 0, 0, 0, 0, 1, 1 }  |X86InstrFormats.td:277|
    ImmType ImmT = Imm16  |X86InstrFormats.td:278|
    bit ForceDisassemble = 0  |X86InstrFormats.td:290|
    OperandSize OpSize = OpSize16  |X86InstrFormats.td:294|
    bits<2> OpSizeBits = { 0, 1 }  |X86InstrFormats.td:296|
    AddressSize AdSize = AdSize16  |X86InstrFormats.td:297|
    bits<2> AdSizeBits = { 0, 1 }  |X86InstrFormats.td:299|
    Prefix OpPrefix = NoPrfx  |X86InstrFormats.td:301|
    bits<3> OpPrefixBits = { 0, 0, 0 }  |X86InstrFormats.td:302|
    Map OpMap = OB  |X86InstrFormats.td:303|
    bits<3> OpMapBits = { 0, 0, 0 }  |X86InstrFormats.td:304|
    bit hasREX_WPrefix = 0  |X86InstrFormats.td:305|
    FPFormat FPForm = NotFP  |X86InstrFormats.td:306|
    bit hasLockPrefix = 0  |X86InstrFormats.td:307|
    Domain ExeDomain = GenericDomain  |X86InstrFormats.td:308|
    bit hasREPPrefix = 0  |X86InstrFormats.td:309|
    Encoding OpEnc = EncNormal  |X86InstrFormats.td:310|
    bits<2> OpEncBits = { 0, 0 }  |X86InstrFormats.td:311|
    bit HasVEX_W = 0  |X86InstrFormats.td:312|
    bit IgnoresVEX_W = 0  |X86InstrFormats.td:313|
    bit EVEX_W1_VEX_W0 = 0  |X86InstrFormats.td:314|
    bit hasVEX_4V = 0  |X86InstrFormats.td:316|
    bit hasVEX_L = 0  |X86InstrFormats.td:317|
    bit ignoresVEX_L = 0  |X86InstrFormats.td:318|
    bit hasEVEX_K = 0  |X86InstrFormats.td:319|
    bit hasEVEX_Z = 0  |X86InstrFormats.td:320|
    bit hasEVEX_L2 = 0  |X86InstrFormats.td:321|
    bit hasEVEX_B = 0  |X86InstrFormats.td:322|
    bits<3> CD8_Form = { 0, 0, 0 }  |X86InstrFormats.td:323|
    int CD8_EltSize = 0  |X86InstrFormats.td:326|
    bit hasEVEX_RC = 0  |X86InstrFormats.td:327|
    bit hasNoTrackPrefix = 0  |X86InstrFormats.td:328|
    bits<7> VectSize = { 0, 0, 1, 0, 0, 0, 0 }  |X86InstrFormats.td:331|
    bits<7> CD8_Scale = { 0, 0, 0, 0, 0, 0, 0 }  |X86InstrFormats.td:338|
    string FoldGenRegForm = ?  |X86InstrFormats.td:347|
    string EVEX2VEXOverride = ?  |X86InstrFormats.td:350|
    bit isMemoryFoldable = 1  |X86InstrFormats.td:352|
    bit notEVEX2VEXConvertible = 0  |X86InstrFormats.td:353|
    bit ExplicitVEXPrefix = 0  |X86InstrFormats.td:354|
    bit checkVEXPredicate = 0  |X86InstrFormats.td:356|